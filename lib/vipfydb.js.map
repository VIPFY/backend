{"version":3,"sources":["../src/vipfydb.js"],"names":["name","address","date","finance","random","commerce","company","lorem","image","phone","internet","Conn","dialect","host","port","User","define","id","type","INTEGER","primaryKey","autoIncrement","firstname","STRING","allowNull","middlename","lastname","position","email","validate","isEmail","unique","passwordhash","title","sex","CHAR","userstatus","ENUM","defaultValue","birthdaydate","DATEONLY","recoveryemail","handynumber","telefonnumber","addresscountry","addressstate","addresscity","addressstreet","addressnumber","profilpicture","lastactive","DATE","NOW","lastsecret","riskvalue","newsletter","BOOLEAN","referall","coBranded","resetoption","Company","companylogo","timestamps","Department","departmentid","companyid","Developer","website","legalwebsite","bankaccount","Review","userid","appid","reviewdate","stars","reviewtext","TEXT","sync","then","times","update","firstName","lastName","jobTitle","word","avatar","past","phoneNumber","where","console","log"],"mappings":"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","file":"vipfydb.js","sourcesContent":["import Sequelize from 'sequelize';\nimport _ from 'lodash';\nimport Faker from 'faker';\nimport { postgresLogin } from './login-data';\n\nconst { name, address, date, finance, random, commerce, company, lorem, image,\n  phone, internet } = Faker;\n\nconst Conn = new Sequelize(\n  'postgres', //Name of the database\n  'postgres', //Username\n  postgresLogin, //Password\n  {\n    dialect: 'postgres', //Which database is used\n    host: 'localhost', //The host used\n    port: '5432'\n  }\n);\n\nconst User = Conn.define('user', {\n  id: {\n    type: Sequelize.INTEGER,\n    primaryKey: true,\n    autoIncrement: true\n  },\n  firstname: {\n    type: Sequelize.STRING,\n    allowNull: false\n  },\n  middlename: {\n    type: Sequelize.STRING,\n    allowNull: false\n  },\n  lastname: {\n    type: Sequelize.STRING,\n    allowNull: false\n  },\n  position: {\n    type: Sequelize.STRING,\n  },\n  email: {\n    type: Sequelize.STRING,\n    allowNull: false,\n    validate: {\n      isEmail: true\n    },\n    unique: true\n  },\n  passwordhash: {\n    type: Sequelize.STRING,\n    allowNull: false\n  },\n  title: {\n    type: Sequelize.STRING,\n    allowNull: true\n  },\n  sex: {\n    type: Sequelize.CHAR(1)\n  },\n  userstatus: {\n    type: Sequelize.ENUM('toverify', 'normal', 'banned', 'onlynews'),\n    defaultValue: 'toverify'\n  },\n  birthdaydate: {\n    type: Sequelize.DATEONLY\n  },\n  recoveryemail: {\n    type: Sequelize.STRING\n  },\n  handynumber: {\n    type: Sequelize.STRING\n  },\n  telefonnumber: {\n    type: Sequelize.STRING\n  },\n  addresscountry: {\n    type: Sequelize.STRING\n  },\n  addressstate: {\n    type: Sequelize.STRING\n  },\n  addresscity: {\n    type: Sequelize.STRING\n  },\n  addressstreet: {\n    type: Sequelize.STRING\n  },\n  addressnumber: {\n    type: Sequelize.INTEGER\n  },\n  profilpicture: {\n    type: Sequelize.STRING\n  },\n  lastactive: {\n    type: Sequelize.DATE,\n    defaultValue: Sequelize.NOW\n  },\n  lastsecret: {\n    type: Sequelize.STRING\n  },\n  riskvalue: {\n    type: Sequelize.INTEGER\n  },\n  newsletter: {\n    type: Sequelize.BOOLEAN,\n    defaultValue: false\n  },\n  referall: {\n    type: Sequelize.INTEGER,\n    defaultValue: 0\n  },\n  coBranded: {\n    type: Sequelize.INTEGER,\n    defaultValue: 0\n  },\n  resetoption: {\n    type: Sequelize.INTEGER,\n    defaultValue: 0\n  }\n});\n\nconst Company = Conn.define('company', {\n  id: {\n    type: Sequelize.INTEGER,\n    primaryKey: true,\n    autoIncrement: true\n  },\n  name: {\n    type: Sequelize.STRING,\n    allowNull: false\n  },\n  companylogo: {\n    type: Sequelize.STRING\n  },\n  addresscountry: {\n    type: Sequelize.STRING\n  },\n  addressstate: {\n    type: Sequelize.STRING\n  },\n  addresscity: {\n    type: Sequelize.STRING\n  },\n  addressstreet: {\n    type: Sequelize.STRING\n  },\n  addressnumber: {\n    type: Sequelize.INTEGER\n  }\n}, {\n  timestamps: false\n});\n\nconst Department = Conn.define('department', {\n  departmentid: {\n    type: Sequelize.INTEGER,\n    autoIncrement: true,\n    unique: true,\n    primaryKey: true\n  },\n  name: {\n    type: Sequelize.STRING,\n    allowNull: false\n  },\n  addresscountry: {\n    type: Sequelize.STRING\n  },\n  addressstate: {\n    type: Sequelize.STRING\n  },\n  addresscity: {\n    type: Sequelize.STRING\n  },\n  addressstreet: {\n    type: Sequelize.STRING\n  },\n  addressnumber: {\n    type: Sequelize.INTEGER\n  },\n  companyid: {\n    type: Sequelize.INTEGER\n  }\n}, {\n  timestamps: false\n});\n\nconst Developer = Conn.define(\"developer\", {\n  name: {\n    type: Sequelize.STRING,\n    allowNull: false\n  },\n  website: {\n    type: Sequelize.STRING\n  },\n  legalwebsite: {\n    type: Sequelize.STRING\n  },\n  bankaccount: {\n    type: Sequelize.STRING\n  }\n}, {\n  timestamps: false\n});\n\nconst Review = Conn.define('review', {\n  userid: {\n    type: Sequelize.INTEGER\n  },\n  appid: {\n    type: Sequelize.INTEGER\n  },\n  reviewdate: {\n    type: Sequelize.DATE\n  },\n  stars: {\n    type: Sequelize.INTEGER\n  },\n  reviewtext: {\n    type: Sequelize.TEXT,\n    primaryKey: true\n  }\n}, {\n  timestamps: false\n});\n// // Relationships\n// Company.hasMany(Department);\n//\n// Department.belongsTo(Company);\n// User.belongsTo(Company);\n\nConn.sync().then(() => {\n  let id = 0;\n  _.times(40, () => {\n    id++;\n    return User.update(\n      { firstname: name.firstName() },\n      { middlename: name.firstName() },\n      { lastname: name.lastName() },\n       { position: name.jobTitle() },\n       { email: internet.email() },\n       { passwordhash: random.word() },\n       { profilpicture: image.avatar() },\n       { sex: _.random(\"male\", \"female\") },\n       { birthdaydate: date.past() },\n       { recoveryemail: internet.email() },\n       { handynumber: phone.phoneNumber() },\n       { where: { id } }\n    ).then(() => console.log(\"Success\"));\n  });\n  // _.times(10, () => {\n  //   return Company.create({\n  //     name: company.companyName(),\n  //     companylogo: image.business(),\n  //     addresscountry: address.country(),\n  //     addressstate: address.state(),\n  //     addresscity: address.city(),\n  //     addressstreet: address.streetName(),\n  //     addressnumber: _.random(1, 9)\n  //   });\n  // });\n  // _.times(10, () => {\n  //   return Department.create({\n  //     name: commerce.department(),\n  //     addresscountry: address.country(),\n  //     addressstate: address.state(),\n  //     addresscity: address.city(),\n  //     addressstreet: address.streetName(),\n  //     addressnumber: _.random(1, 9),\n  //     companyid: _.random(1, 10)\n  //   });\n  // });\n  // _.times(10, () => {\n  //   return Developer.create({\n  //     name: company.companyName(),\n  //     website: internet.domainName(),\n  //     legalwebsite: internet.domainName(),\n  //     bankaccount: finance.account()\n  //   });\n  // });\n  // _.times(10, () => {\n  //   return Review.create({\n  //     userid: _.random(1, 15),\n  //     appid: _.random(1, 10),\n  //     reviewdate: date.past(),\n  //     stars: _.random(1, 5),\n  //     reviewtext: lorem.text()\n  //   });\n  // });\n});\n\nexport default Conn;\n"]}