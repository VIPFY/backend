{"version":3,"sources":["../src/vipfydb.js"],"names":["name","address","finance","random","commerce","company","lorem","image","phone","internet","Conn","dialect","host","port","User","define","id","type","INTEGER","primaryKey","autoIncrement","firstName","STRING","allowNull","middleName","lastName","position","email","validate","isEmail","unique","passwordHash","title","sex","CHAR","userStatus","ENUM","defaultValue","birthdayDate","DATEONLY","recoveryEmail","handyNumber","telefonNumber","addressCountry","addressState","addressCity","addressStreet","addressNumber","profilPicture","lastactive","DATE","NOW","lastSecret","riskValue","newsletter","BOOLEAN","referall","coBranded","resetOption","sync","then","times","create","jobTitle","word"],"mappings":"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","file":"vipfydb.js","sourcesContent":["import Sequelize from 'sequelize';\nimport _ from 'lodash';\nimport Faker from 'faker';\nimport { postgresLogin } from './login-data';\n\nconst { name, address, finance, random, commerce, company, lorem, image, phone, internet } = Faker;\n\nconst Conn = new Sequelize(\n  'postgres', //Name of the database\n  'postgres', //Username\n  postgresLogin, //Password\n  {\n    dialect: 'postgres', //Which database is used\n    host: 'localhost', //The host used\n    port: '5432'\n  }\n);\n\nconst User = Conn.define('user', {\n  id: {\n    type: Sequelize.INTEGER,\n    primaryKey: true,\n    autoIncrement: true\n  },\n  firstName: {\n    type: Sequelize.STRING,\n    allowNull: false\n  },\n  middleName: {\n    type: Sequelize.STRING,\n    allowNull: false\n  },\n  lastName: {\n    type: Sequelize.STRING,\n    allowNull: false\n  },\n  position: {\n    type: Sequelize.STRING,\n  },\n  email: {\n    type: Sequelize.STRING,\n    allowNull: false,\n    validate: {\n      isEmail: true\n    },\n    unique: true\n  },\n  passwordHash: {\n    type: Sequelize.STRING,\n    allowNull: false\n  },\n  title: {\n    type: Sequelize.STRING,\n    allowNull: true\n  },\n  sex: {\n    type: Sequelize.CHAR(1)\n  },\n  userStatus: {\n    type: Sequelize.ENUM('toverify', 'normal', 'banned', 'onlynews'),\n    defaultValue: 'toverify'\n  },\n  birthdayDate: {\n    type: Sequelize.DATEONLY\n  },\n  recoveryEmail: {\n    type: Sequelize.STRING\n  },\n  handyNumber: {\n    type: Sequelize.STRING\n  },\n  telefonNumber: {\n    type: Sequelize.STRING\n  },\n  addressCountry: {\n    type: Sequelize.STRING\n  },\n  addressState: {\n    type: Sequelize.STRING\n  },\n  addressCity: {\n    type: Sequelize.STRING\n  },\n  addressStreet: {\n    type: Sequelize.STRING\n  },\n  addressNumber: {\n    type: Sequelize.INTEGER\n  },\n  profilPicture: {\n    type: Sequelize.STRING\n  },\n  lastactive: {\n    type: Sequelize.DATE,\n    defaultValue: Sequelize.NOW\n  },\n  lastSecret: {\n    type: Sequelize.STRING\n  },\n  riskValue: {\n    type: Sequelize.INTEGER\n  },\n  newsletter: {\n    type: Sequelize.BOOLEAN,\n    defaultValue: false\n  },\n  referall: {\n    type: Sequelize.INTEGER,\n    defaultValue: 0\n  },\n  coBranded: {\n    type: Sequelize.INTEGER,\n    defaultValue: 0\n  },\n  resetOption: {\n    type: Sequelize.INTEGER,\n    defaultValue: 0\n  }\n});\n\n// const Company = define('companies', {\n//   id: {\n//     type: Sequelize.INTEGER,\n//     primaryKey: true,\n//     autoIncrement: true\n//   },\n//   name: {\n//     type: Sequelize.STRING,\n//     allowNull: false\n//   },\n//   companyLogo: {\n//     type: Sequelize.STRING\n//   },\n//   addressCountry: {\n//     type: Sequelize.STRING\n//   },\n//   addressState: {\n//     type: Sequelize.STRING\n//   },\n//   addressCity: {\n//     type: Sequelize.STRING\n//   },\n//   addressStreet: {\n//     type: Sequelize.STRING\n//   },\n//   addressnumber: {\n//     type: Sequelize.INT\n//   }\n// });\n//\n// // Relationships\n// Company.hasMany(Users);\n// User.belongsTo(Company);\n\nConn.sync().then(() => {\n  _.times(10, () => {\n    return User.create({\n      firstName: name.firstName(),\n      middleName: name.firstName(),\n      lastName: name.lastName(),\n      position: name.jobTitle(),\n      email: internet.email(),\n      passwordHash: random.word()\n    })\n  });\n});\n\nexport default Conn;\n"]}