{"version":3,"sources":["../../src/schema/schema.js"],"names":["BirthdayType","name","description","fields","day","type","month","year","UserType","id","referral","firstName","lastName","position","email","title","livingAddress","payingAddress","deliveryAddress","payingOption","birthday","sex","profilePicture","nationality","companyName","companyLogo","companyLegalForm","companyAddress","companyPayingAddress","companyDeliveryAddress","companyPayingOption","yearsInCompany","RootQuery","users","args","resolve","parentValue","get","then","resp","data","Schema","query"],"mappings":"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","file":"schema.js","sourcesContent":["import {\n  GraphQLObjectType,\n  GraphQLString,\n  GraphQLID,\n  GraphQLInt,\n  GraphQLBoolean,\n  GraphQLSchema,\n  GraphQLList\n} from 'graphql';\nimport axios from 'axios';\n\nconst BirthdayType = new GraphQLObjectType({\n  name: 'Birthday',\n  description: 'The format will be dd/mm/yyyy',\n  fields: {\n    day: { type: GraphQLInt },\n    month: { type: GraphQLInt },\n    year: { type: GraphQLInt }\n  }\n});\n\nconst UserType = new GraphQLObjectType({\n  name: 'User',\n  description: 'A natural person which can work for several companies.',\n  fields: {\n    id: { type: GraphQLID },\n    referral: { type: GraphQLBoolean },\n    firstName: { type: GraphQLString },\n    lastName: { type: GraphQLString },\n    position: { type: GraphQLString },\n    email: { type: GraphQLString },\n    title: { type: GraphQLString },\n    livingAddress: { type: new GraphQLList(GraphQLString) },\n    payingAddress: { type: new GraphQLList(GraphQLString) },\n    deliveryAddress: { type: new GraphQLList(GraphQLString) },\n    payingOption: { type: new GraphQLList(GraphQLString) },\n    birthday: { type: BirthdayType },\n    sex: { type: GraphQLString },\n    profilePicture: { type: GraphQLString },\n    nationality: { type: new GraphQLList(GraphQLString) },\n    companyName: { type: GraphQLString },\n    companyLogo: { type: GraphQLString },\n    companyLegalForm: { type: GraphQLString },\n    companyAddress: { type: new GraphQLList(GraphQLString) },\n    companyPayingAddress: { type: new GraphQLList(GraphQLString) },\n    companyDeliveryAddress: { type: new GraphQLList(GraphQLString) },\n    companyPayingOption: { type: new GraphQLList(GraphQLString) },\n    yearsInCompany: { type: GraphQLInt },\n    position: { type: new GraphQLList(GraphQLString) },\n    department: { type: new GraphQLList(GraphQLString) },\n    admin: { type: new GraphQLList(GraphQLString) },\n    salary: { type: GraphQLInt },\n    likes: { type: new GraphQLList(GraphQLString) },\n    dislikes: { type: new GraphQLList(GraphQLString) },\n    notifications: { type: new GraphQLList(GraphQLString) },\n    phoneNumber: { type: new GraphQLList(GraphQLString) },\n    recoveryEmail: { type: GraphQLString },\n    websites: { type: new GraphQLList(GraphQLString) },\n    languages: { type: new GraphQLList(GraphQLString) },\n    // softskills: { type: new GraphQLList(GraphQLString) },\n    certificates: { type: new GraphQLList(GraphQLString) },\n    socialProfiles: { type: new GraphQLList(GraphQLString) },\n    accessGroups: { type: new GraphQLList(GraphQLString) },\n    companyApps: { type: new GraphQLList(GraphQLString) },\n    personalApps: { type: new GraphQLList(GraphQLString) },\n    rights: { type: new GraphQLList(GraphQLString) },\n    personalBillHistory: { type: new GraphQLList(GraphQLString) },\n    companyBillHistory: { type: new GraphQLList(GraphQLString) },\n    recoveryOptionCompany: { type: new GraphQLList(GraphQLString) },\n    recoveryOptionPersonal: { type: GraphQLString }\n  }\n});\n//Defines the entry point into a Graph\nconst RootQuery = new GraphQLObjectType({\n  name: 'RootQueryType',\n  description: 'This is the Root Query',\n  fields: {\n    users: {\n      type: UserType,\n      //Graphql wants the id as an argument\n      args: { id: { type: GraphQLID } },\n      //and will return an user with the corresponding id for it\n      resolve(parentValue, args) {\n        return axios.get(`http://localhost:5432/users/${args.id}`)\n          .then(resp => resp.data);\n      }\n    }\n  }\n});\n\nconst Schema = new GraphQLSchema({\n  query: RootQuery\n});\n\nexport default Schema\n"]}