import { decode } from "jsonwebtoken";
import iplocate from "node-iplocate";
import { googleMapsClient } from "../../services/gcloud";
import { requiresRights, requiresAuth } from "../../helpers/permissions";
import { NormalError } from "../../errors";

export default {
  fetchAddresses: requiresRights(["view-addresses"]).createResolver(
    async (parent, { forCompany, tag }, { models, session }) => {
      try {
        let {
          // eslint-disable-next-line
          user: { unitid, company }
        } = decode(session.token);

        if (forCompany) {
          unitid = company;
        }

        const addresses = await models.Address.findAll({
          where: { unitid },
          order: [["priority", "ASC"]],
          tags: [tag]
        });

        return addresses;
      } catch (err) {
        throw new NormalError({ message: err.message, internalData: { err } });
      }
    }
  ),

  fetchEmails: requiresRights(["view-emails"]).createResolver(
    async (_, { forCompany, tag }, { models, session }) => {
      try {
        const {
          user: { unitid, company }
        } = decode(session.token);

        const where = { autogenerated: false };

        if (forCompany) {
          where.departmentid = company;
        } else {
          where.departmentid = unitid;
        }

        const emails = await models.DepartmentEmail.findAll({
          where,
          order: [["priority", "DESC"]],
          tags: [tag]
        });

        return emails;
      } catch (err) {
        throw new NormalError({ message: err.message, internalData: { err } });
      }
    }
  ),

  fetchPhones: requiresRights(["view-phones"]).createResolver(
    async (parent, { forCompany }, { models, session }) => {
      try {
        let {
          // eslint-disable-next-line
          user: { unitid, company }
        } = decode(session.token);

        if (forCompany) {
          unitid = company;
        }

        const phones = await models.Phone.findAll({
          where: { unitid },
          order: [["priority", "ASC"]]
        });

        return phones;
      } catch (err) {
        throw new NormalError({ message: err.message, internalData: { err } });
      }
    }
  ),

  searchAddressByCompanyName: requiresAuth.createResolver(
    async (_parent, _args, { models, session, ip }) => {
      try {
        const {
          user: { company }
        } = decode(session.token);

        const { name: input } = await models.Department.findOne({
          where: { unitid: company },
          raw: true
        });

        const geo = await iplocate(ip);

        if (geo && geo.latitude) {
          const config = {
            query: input,
            region: geo.country_code,
            location: {
              latitude: geo.latitude,
              longitude: geo.longitude
            },
            radius: 1000
          };
          const res = await googleMapsClient.places(config).asPromise();

          return res.json.results.map(e => ({ ...e, description: e.name }));
        } else {
          const res = await googleMapsClient
            .placesQueryAutoComplete({ input })
            .asPromise();
          return res.json.predictions;
        }
      } catch (err) {
        throw new NormalError({ message: err.message, internalData: { err } });
      }
    }
  )
};
