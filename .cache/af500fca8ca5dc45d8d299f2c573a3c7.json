{"dependencies":[{"name":"events","loc":{"line":10,"column":27}},{"name":"util","loc":{"line":11,"column":19}},{"name":"./result","loc":{"line":13,"column":21}},{"name":"./utils","loc":{"line":14,"column":20}},{"name":"process"}],"generated":{"js":"var process = require(\"process\");\n'use strict'\n/**\n * Copyright (c) 2010-2017 Brian Carlson (brian.m.carlson@gmail.com)\n * All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * README.md file in the root directory of this source tree.\n */\n\nvar EventEmitter = require('events').EventEmitter\nvar util = require('util')\n\nvar Result = require('./result')\nvar utils = require('./utils')\n\nvar Query = function (config, values, callback) {\n  // use of \"new\" optional\n  if (!(this instanceof Query)) { return new Query(config, values, callback) }\n\n  config = utils.normalizeQueryConfig(config, values, callback)\n\n  this.text = config.text\n  this.values = config.values\n  this.rows = config.rows\n  this.types = config.types\n  this.name = config.name\n  this.binary = config.binary\n  this.stream = config.stream\n  // use unique portal name each time\n  this.portal = config.portal || ''\n  this.callback = config.callback\n  this._rowMode = config.rowMode\n  if (process.domain && config.callback) {\n    this.callback = process.domain.bind(config.callback)\n  }\n  this._result = new Result(this._rowMode, this.types)\n\n  // potential for multiple results\n  this._results = this._result\n  this.isPreparedStatement = false\n  this._canceledDueToError = false\n  this._promise = null\n  EventEmitter.call(this)\n}\n\nutil.inherits(Query, EventEmitter)\n\nQuery.prototype.requiresPreparation = function () {\n  // named queries must always be prepared\n  if (this.name) { return true }\n  // always prepare if there are max number of rows expected per\n  // portal execution\n  if (this.rows) { return true }\n  // don't prepare empty text queries\n  if (!this.text) { return false }\n  // prepare if there are values\n  if (!this.values) { return false }\n  return this.values.length > 0\n}\n\nQuery.prototype._checkForMultirow = function () {\n  // if we already have a result with a command property\n  // then we've already executed one query in a multi-statement simple query\n  // turn our results into an array of results\n  if (this._result.command) {\n    if (!Array.isArray(this._results)) {\n      this._results = [this._result]\n    }\n    this._result = new Result(this._rowMode, this.types)\n    this._results.push(this._result)\n  }\n}\n\n// associates row metadata from the supplied\n// message with this query object\n// metadata used when parsing row results\nQuery.prototype.handleRowDescription = function (msg) {\n  this._checkForMultirow()\n  this._result.addFields(msg.fields)\n  this._accumulateRows = this.callback || !this.listeners('row').length\n}\n\nQuery.prototype.handleDataRow = function (msg) {\n  var row\n\n  if (this._canceledDueToError) {\n    return\n  }\n\n  try {\n    row = this._result.parseRow(msg.fields)\n  } catch (err) {\n    this._canceledDueToError = err\n    return\n  }\n\n  this.emit('row', row, this._result)\n  if (this._accumulateRows) {\n    this._result.addRow(row)\n  }\n}\n\nQuery.prototype.handleCommandComplete = function (msg, con) {\n  this._checkForMultirow()\n  this._result.addCommandComplete(msg)\n  // need to sync after each command complete of a prepared statement\n  if (this.isPreparedStatement) {\n    con.sync()\n  }\n}\n\n// if a named prepared statement is created with empty query text\n// the backend will send an emptyQuery message but *not* a command complete message\n// execution on the connection will hang until the backend receives a sync message\nQuery.prototype.handleEmptyQuery = function (con) {\n  if (this.isPreparedStatement) {\n    con.sync()\n  }\n}\n\nQuery.prototype.handleReadyForQuery = function (con) {\n  if (this._canceledDueToError) {\n    return this.handleError(this._canceledDueToError, con)\n  }\n  if (this.callback) {\n    this.callback(null, this._results)\n  }\n  this.emit('end', this._results)\n}\n\nQuery.prototype.handleError = function (err, connection) {\n  // need to sync after error during a prepared statement\n  if (this.isPreparedStatement) {\n    connection.sync()\n  }\n  if (this._canceledDueToError) {\n    err = this._canceledDueToError\n    this._canceledDueToError = false\n  }\n  // if callback supplied do not emit error event as uncaught error\n  // events will bubble up to node process\n  if (this.callback) {\n    return this.callback(err)\n  }\n  this.emit('error', err)\n}\n\nQuery.prototype.submit = function (connection) {\n  if (typeof this.text !== 'string' && typeof this.name !== 'string') {\n    const err = new Error('A query must have either text or a name. Supplying neither is unsupported.')\n    connection.emit('error', err)\n    connection.emit('readyForQuery')\n    return\n  }\n  if (this.values && !Array.isArray(this.values)) {\n    const err = new Error('Query values must be an array')\n    connection.emit('error', err)\n    connection.emit('readyForQuery')\n    return\n  }\n  if (this.requiresPreparation()) {\n    this.prepare(connection)\n  } else {\n    connection.query(this.text)\n  }\n}\n\nQuery.prototype.hasBeenParsed = function (connection) {\n  return this.name && connection.parsedStatements[this.name]\n}\n\nQuery.prototype.handlePortalSuspended = function (connection) {\n  this._getRows(connection, this.rows)\n}\n\nQuery.prototype._getRows = function (connection, rows) {\n  connection.execute({\n    portal: this.portalName,\n    rows: rows\n  }, true)\n  connection.flush()\n}\n\nQuery.prototype.prepare = function (connection) {\n  var self = this\n  // prepared statements need sync to be called after each command\n  // complete or when an error is encountered\n  this.isPreparedStatement = true\n  // TODO refactor this poor encapsulation\n  if (!this.hasBeenParsed(connection)) {\n    connection.parse({\n      text: self.text,\n      name: self.name,\n      types: self.types\n    }, true)\n  }\n\n  if (self.values) {\n    self.values = self.values.map(utils.prepareValue)\n  }\n\n  // http://developer.postgresql.org/pgdocs/postgres/protocol-flow.html#PROTOCOL-FLOW-EXT-QUERY\n  connection.bind({\n    portal: self.portalName,\n    statement: self.name,\n    values: self.values,\n    binary: self.binary\n  }, true)\n\n  connection.describe({\n    type: 'P',\n    name: self.portalName || ''\n  }, true)\n\n  this._getRows(connection, this.rows)\n}\n\nQuery.prototype.handleCopyInResponse = function (connection) {\n  if (this.stream) this.stream.startStreamingToConnection(connection)\n  else connection.sendCopyFail('No source stream defined')\n}\n\nQuery.prototype.handleCopyData = function (msg, connection) {\n  var chunk = msg.chunk\n  if (this.stream) {\n    this.stream.handleChunk(chunk)\n  }\n  // if there are no stream (for example when copy to query was sent by\n  // query method instead of copyTo) error will be handled\n  // on copyOutResponse event, so silently ignore this error here\n}\nmodule.exports = Query\n","map":{"mappings":[{"source":"../node_modules/pg/lib/query.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":68,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":69,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":70,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":71,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":72,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":73,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":74,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":75,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":76,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":77,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":78,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":79,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":80,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":81,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":82,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":83,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":84,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":85,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":86,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":87,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":88,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":89,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":90,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":91,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":92,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":93,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":94,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":95,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":96,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":97,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":98,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":99,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":100,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":101,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":102,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":103,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":104,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":105,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":106,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":107,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":108,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":109,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":110,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":111,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":112,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":113,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":114,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":115,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":116,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":117,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":118,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":119,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":120,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":121,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":122,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":123,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":124,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":125,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":126,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":127,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":128,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":129,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":130,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":131,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":132,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":133,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":134,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":135,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":136,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":137,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":138,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":139,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":140,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":141,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":142,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":143,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":144,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":145,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":146,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":147,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":148,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":149,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":150,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":151,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":152,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":153,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":154,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":155,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":156,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":157,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":158,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":159,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":160,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":161,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":162,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":163,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":164,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":165,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":166,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":167,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":168,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":169,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":170,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":171,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":172,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":173,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":174,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":175,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":176,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":177,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":178,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":179,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":180,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":181,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":182,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":183,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":184,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":185,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":186,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":187,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":188,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":189,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":190,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":191,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":192,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":193,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":194,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":195,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":196,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":197,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":198,"column":0},"generated":{"line":199,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":199,"column":0},"generated":{"line":200,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":200,"column":0},"generated":{"line":201,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":201,"column":0},"generated":{"line":202,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":202,"column":0},"generated":{"line":203,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":203,"column":0},"generated":{"line":204,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":204,"column":0},"generated":{"line":205,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":205,"column":0},"generated":{"line":206,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":206,"column":0},"generated":{"line":207,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":207,"column":0},"generated":{"line":208,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":208,"column":0},"generated":{"line":209,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":209,"column":0},"generated":{"line":210,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":210,"column":0},"generated":{"line":211,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":211,"column":0},"generated":{"line":212,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":212,"column":0},"generated":{"line":213,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":213,"column":0},"generated":{"line":214,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":214,"column":0},"generated":{"line":215,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":215,"column":0},"generated":{"line":216,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":216,"column":0},"generated":{"line":217,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":217,"column":0},"generated":{"line":218,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":218,"column":0},"generated":{"line":219,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":219,"column":0},"generated":{"line":220,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":220,"column":0},"generated":{"line":221,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":221,"column":0},"generated":{"line":222,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":222,"column":0},"generated":{"line":223,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":223,"column":0},"generated":{"line":224,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":224,"column":0},"generated":{"line":225,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":225,"column":0},"generated":{"line":226,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":226,"column":0},"generated":{"line":227,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":227,"column":0},"generated":{"line":228,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":228,"column":0},"generated":{"line":229,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":229,"column":0},"generated":{"line":230,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":230,"column":0},"generated":{"line":231,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":231,"column":0},"generated":{"line":232,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":232,"column":0},"generated":{"line":233,"column":0}},{"source":"../node_modules/pg/lib/query.js","original":{"line":233,"column":0},"generated":{"line":234,"column":0}}],"sources":{"../node_modules/pg/lib/query.js":"'use strict'\n/**\n * Copyright (c) 2010-2017 Brian Carlson (brian.m.carlson@gmail.com)\n * All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * README.md file in the root directory of this source tree.\n */\n\nvar EventEmitter = require('events').EventEmitter\nvar util = require('util')\n\nvar Result = require('./result')\nvar utils = require('./utils')\n\nvar Query = function (config, values, callback) {\n  // use of \"new\" optional\n  if (!(this instanceof Query)) { return new Query(config, values, callback) }\n\n  config = utils.normalizeQueryConfig(config, values, callback)\n\n  this.text = config.text\n  this.values = config.values\n  this.rows = config.rows\n  this.types = config.types\n  this.name = config.name\n  this.binary = config.binary\n  this.stream = config.stream\n  // use unique portal name each time\n  this.portal = config.portal || ''\n  this.callback = config.callback\n  this._rowMode = config.rowMode\n  if (process.domain && config.callback) {\n    this.callback = process.domain.bind(config.callback)\n  }\n  this._result = new Result(this._rowMode, this.types)\n\n  // potential for multiple results\n  this._results = this._result\n  this.isPreparedStatement = false\n  this._canceledDueToError = false\n  this._promise = null\n  EventEmitter.call(this)\n}\n\nutil.inherits(Query, EventEmitter)\n\nQuery.prototype.requiresPreparation = function () {\n  // named queries must always be prepared\n  if (this.name) { return true }\n  // always prepare if there are max number of rows expected per\n  // portal execution\n  if (this.rows) { return true }\n  // don't prepare empty text queries\n  if (!this.text) { return false }\n  // prepare if there are values\n  if (!this.values) { return false }\n  return this.values.length > 0\n}\n\nQuery.prototype._checkForMultirow = function () {\n  // if we already have a result with a command property\n  // then we've already executed one query in a multi-statement simple query\n  // turn our results into an array of results\n  if (this._result.command) {\n    if (!Array.isArray(this._results)) {\n      this._results = [this._result]\n    }\n    this._result = new Result(this._rowMode, this.types)\n    this._results.push(this._result)\n  }\n}\n\n// associates row metadata from the supplied\n// message with this query object\n// metadata used when parsing row results\nQuery.prototype.handleRowDescription = function (msg) {\n  this._checkForMultirow()\n  this._result.addFields(msg.fields)\n  this._accumulateRows = this.callback || !this.listeners('row').length\n}\n\nQuery.prototype.handleDataRow = function (msg) {\n  var row\n\n  if (this._canceledDueToError) {\n    return\n  }\n\n  try {\n    row = this._result.parseRow(msg.fields)\n  } catch (err) {\n    this._canceledDueToError = err\n    return\n  }\n\n  this.emit('row', row, this._result)\n  if (this._accumulateRows) {\n    this._result.addRow(row)\n  }\n}\n\nQuery.prototype.handleCommandComplete = function (msg, con) {\n  this._checkForMultirow()\n  this._result.addCommandComplete(msg)\n  // need to sync after each command complete of a prepared statement\n  if (this.isPreparedStatement) {\n    con.sync()\n  }\n}\n\n// if a named prepared statement is created with empty query text\n// the backend will send an emptyQuery message but *not* a command complete message\n// execution on the connection will hang until the backend receives a sync message\nQuery.prototype.handleEmptyQuery = function (con) {\n  if (this.isPreparedStatement) {\n    con.sync()\n  }\n}\n\nQuery.prototype.handleReadyForQuery = function (con) {\n  if (this._canceledDueToError) {\n    return this.handleError(this._canceledDueToError, con)\n  }\n  if (this.callback) {\n    this.callback(null, this._results)\n  }\n  this.emit('end', this._results)\n}\n\nQuery.prototype.handleError = function (err, connection) {\n  // need to sync after error during a prepared statement\n  if (this.isPreparedStatement) {\n    connection.sync()\n  }\n  if (this._canceledDueToError) {\n    err = this._canceledDueToError\n    this._canceledDueToError = false\n  }\n  // if callback supplied do not emit error event as uncaught error\n  // events will bubble up to node process\n  if (this.callback) {\n    return this.callback(err)\n  }\n  this.emit('error', err)\n}\n\nQuery.prototype.submit = function (connection) {\n  if (typeof this.text !== 'string' && typeof this.name !== 'string') {\n    const err = new Error('A query must have either text or a name. Supplying neither is unsupported.')\n    connection.emit('error', err)\n    connection.emit('readyForQuery')\n    return\n  }\n  if (this.values && !Array.isArray(this.values)) {\n    const err = new Error('Query values must be an array')\n    connection.emit('error', err)\n    connection.emit('readyForQuery')\n    return\n  }\n  if (this.requiresPreparation()) {\n    this.prepare(connection)\n  } else {\n    connection.query(this.text)\n  }\n}\n\nQuery.prototype.hasBeenParsed = function (connection) {\n  return this.name && connection.parsedStatements[this.name]\n}\n\nQuery.prototype.handlePortalSuspended = function (connection) {\n  this._getRows(connection, this.rows)\n}\n\nQuery.prototype._getRows = function (connection, rows) {\n  connection.execute({\n    portal: this.portalName,\n    rows: rows\n  }, true)\n  connection.flush()\n}\n\nQuery.prototype.prepare = function (connection) {\n  var self = this\n  // prepared statements need sync to be called after each command\n  // complete or when an error is encountered\n  this.isPreparedStatement = true\n  // TODO refactor this poor encapsulation\n  if (!this.hasBeenParsed(connection)) {\n    connection.parse({\n      text: self.text,\n      name: self.name,\n      types: self.types\n    }, true)\n  }\n\n  if (self.values) {\n    self.values = self.values.map(utils.prepareValue)\n  }\n\n  // http://developer.postgresql.org/pgdocs/postgres/protocol-flow.html#PROTOCOL-FLOW-EXT-QUERY\n  connection.bind({\n    portal: self.portalName,\n    statement: self.name,\n    values: self.values,\n    binary: self.binary\n  }, true)\n\n  connection.describe({\n    type: 'P',\n    name: self.portalName || ''\n  }, true)\n\n  this._getRows(connection, this.rows)\n}\n\nQuery.prototype.handleCopyInResponse = function (connection) {\n  if (this.stream) this.stream.startStreamingToConnection(connection)\n  else connection.sendCopyFail('No source stream defined')\n}\n\nQuery.prototype.handleCopyData = function (msg, connection) {\n  var chunk = msg.chunk\n  if (this.stream) {\n    this.stream.handleChunk(chunk)\n  }\n  // if there are no stream (for example when copy to query was sent by\n  // query method instead of copyTo) error will be handled\n  // on copyOutResponse event, so silently ignore this error here\n}\nmodule.exports = Query\n"},"lineCount":234}},"hash":"fa2f1418d6fd95aae41b50cb5a5f38de","cacheData":{"env":{}}}