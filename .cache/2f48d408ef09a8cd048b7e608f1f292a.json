{"dependencies":[{"name":"./types","loc":{"line":4,"column":33}},{"name":"./node-path","loc":{"line":16,"column":47}}],"generated":{"js":"var hasOwn = Object.prototype.hasOwnProperty;\n\nmodule.exports = function (fork) {\n    var types = fork.use(require(\"./types\"));\n    var Type = types.Type;\n    var namedTypes = types.namedTypes;\n    var Node = namedTypes.Node;\n    var Expression = namedTypes.Expression;\n    var isArray = types.builtInTypes.array;\n    var b = types.builders;\n\n    function Scope(path, parentScope) {\n        if (!(this instanceof Scope)) {\n            throw new Error(\"Scope constructor cannot be invoked without 'new'\");\n        }\n        if (!(path instanceof fork.use(require(\"./node-path\")))) {\n            throw new Error(\"\");\n        }\n        ScopeType.assert(path.value);\n\n        var depth;\n\n        if (parentScope) {\n            if (!(parentScope instanceof Scope)) {\n                throw new Error(\"\");\n            }\n            depth = parentScope.depth + 1;\n        } else {\n            parentScope = null;\n            depth = 0;\n        }\n\n        Object.defineProperties(this, {\n            path: { value: path },\n            node: { value: path.value },\n            isGlobal: { value: !parentScope, enumerable: true },\n            depth: { value: depth },\n            parent: { value: parentScope },\n            bindings: { value: {} },\n            types: { value: {} },\n        });\n    }\n\n    var scopeTypes = [\n        // Program nodes introduce global scopes.\n        namedTypes.Program,\n\n        // Function is the supertype of FunctionExpression,\n        // FunctionDeclaration, ArrowExpression, etc.\n        namedTypes.Function,\n\n        // In case you didn't know, the caught parameter shadows any variable\n        // of the same name in an outer scope.\n        namedTypes.CatchClause\n    ];\n\n    var ScopeType = Type.or.apply(Type, scopeTypes);\n\n    Scope.isEstablishedBy = function(node) {\n        return ScopeType.check(node);\n    };\n\n    var Sp = Scope.prototype;\n\n// Will be overridden after an instance lazily calls scanScope.\n    Sp.didScan = false;\n\n    Sp.declares = function(name) {\n        this.scan();\n        return hasOwn.call(this.bindings, name);\n    };\n\n    Sp.declaresType = function(name) {\n        this.scan();\n        return hasOwn.call(this.types, name);\n    };\n\n    Sp.declareTemporary = function(prefix) {\n        if (prefix) {\n            if (!/^[a-z$_]/i.test(prefix)) {\n                throw new Error(\"\");\n            }\n        } else {\n            prefix = \"t$\";\n        }\n\n        // Include this.depth in the name to make sure the name does not\n        // collide with any variables in nested/enclosing scopes.\n        prefix += this.depth.toString(36) + \"$\";\n\n        this.scan();\n\n        var index = 0;\n        while (this.declares(prefix + index)) {\n            ++index;\n        }\n\n        var name = prefix + index;\n        return this.bindings[name] = types.builders.identifier(name);\n    };\n\n    Sp.injectTemporary = function(identifier, init) {\n        identifier || (identifier = this.declareTemporary());\n\n        var bodyPath = this.path.get(\"body\");\n        if (namedTypes.BlockStatement.check(bodyPath.value)) {\n            bodyPath = bodyPath.get(\"body\");\n        }\n\n        bodyPath.unshift(\n          b.variableDeclaration(\n            \"var\",\n            [b.variableDeclarator(identifier, init || null)]\n          )\n        );\n\n        return identifier;\n    };\n\n    Sp.scan = function(force) {\n        if (force || !this.didScan) {\n            for (var name in this.bindings) {\n                // Empty out this.bindings, just in cases.\n                delete this.bindings[name];\n            }\n            scanScope(this.path, this.bindings, this.types);\n            this.didScan = true;\n        }\n    };\n\n    Sp.getBindings = function () {\n        this.scan();\n        return this.bindings;\n    };\n\n    Sp.getTypes = function () {\n        this.scan();\n        return this.types;\n    };\n\n    function scanScope(path, bindings, scopeTypes) {\n        var node = path.value;\n        ScopeType.assert(node);\n\n        if (namedTypes.CatchClause.check(node)) {\n            // A catch clause establishes a new scope but the only variable\n            // bound in that scope is the catch parameter. Any other\n            // declarations create bindings in the outer scope.\n            addPattern(path.get(\"param\"), bindings);\n\n        } else {\n            recursiveScanScope(path, bindings, scopeTypes);\n        }\n    }\n\n    function recursiveScanScope(path, bindings, scopeTypes) {\n        var node = path.value;\n\n        if (path.parent &&\n          namedTypes.FunctionExpression.check(path.parent.node) &&\n          path.parent.node.id) {\n            addPattern(path.parent.get(\"id\"), bindings);\n        }\n\n        if (!node) {\n            // None of the remaining cases matter if node is falsy.\n\n        } else if (isArray.check(node)) {\n            path.each(function(childPath) {\n                recursiveScanChild(childPath, bindings, scopeTypes);\n            });\n\n        } else if (namedTypes.Function.check(node)) {\n            path.get(\"params\").each(function(paramPath) {\n                addPattern(paramPath, bindings);\n            });\n\n            recursiveScanChild(path.get(\"body\"), bindings, scopeTypes);\n\n        } else if (namedTypes.TypeAlias && namedTypes.TypeAlias.check(node)) {\n            addTypePattern(path.get(\"id\"), scopeTypes);\n\n        } else if (namedTypes.VariableDeclarator.check(node)) {\n            addPattern(path.get(\"id\"), bindings);\n            recursiveScanChild(path.get(\"init\"), bindings, scopeTypes);\n\n        } else if (node.type === \"ImportSpecifier\" ||\n          node.type === \"ImportNamespaceSpecifier\" ||\n          node.type === \"ImportDefaultSpecifier\") {\n            addPattern(\n              // Esprima used to use the .name field to refer to the local\n              // binding identifier for ImportSpecifier nodes, but .id for\n              // ImportNamespaceSpecifier and ImportDefaultSpecifier nodes.\n              // ESTree/Acorn/ESpree use .local for all three node types.\n              path.get(node.local ? \"local\" :\n                node.name ? \"name\" : \"id\"),\n              bindings\n            );\n\n        } else if (Node.check(node) && !Expression.check(node)) {\n            types.eachField(node, function(name, child) {\n                var childPath = path.get(name);\n                if (!pathHasValue(childPath, child)) {\n                    throw new Error(\"\");\n                }\n                recursiveScanChild(childPath, bindings, scopeTypes);\n            });\n        }\n    }\n\n    function pathHasValue(path, value) {\n        if (path.value === value) {\n            return true;\n        }\n\n        // Empty arrays are probably produced by defaults.emptyArray, in which\n        // case is makes sense to regard them as equivalent, if not ===.\n        if (Array.isArray(path.value) &&\n          path.value.length === 0 &&\n          Array.isArray(value) &&\n          value.length === 0) {\n            return true;\n        }\n\n        return false;\n    }\n\n    function recursiveScanChild(path, bindings, scopeTypes) {\n        var node = path.value;\n\n        if (!node || Expression.check(node)) {\n            // Ignore falsy values and Expressions.\n\n        } else if (namedTypes.FunctionDeclaration.check(node) &&\n                   node.id !== null) {\n            addPattern(path.get(\"id\"), bindings);\n\n        } else if (namedTypes.ClassDeclaration &&\n          namedTypes.ClassDeclaration.check(node)) {\n            addPattern(path.get(\"id\"), bindings);\n\n        } else if (ScopeType.check(node)) {\n            if (namedTypes.CatchClause.check(node)) {\n                var catchParamName = node.param.name;\n                var hadBinding = hasOwn.call(bindings, catchParamName);\n\n                // Any declarations that occur inside the catch body that do\n                // not have the same name as the catch parameter should count\n                // as bindings in the outer scope.\n                recursiveScanScope(path.get(\"body\"), bindings, scopeTypes);\n\n                // If a new binding matching the catch parameter name was\n                // created while scanning the catch body, ignore it because it\n                // actually refers to the catch parameter and not the outer\n                // scope that we're currently scanning.\n                if (!hadBinding) {\n                    delete bindings[catchParamName];\n                }\n            }\n\n        } else {\n            recursiveScanScope(path, bindings, scopeTypes);\n        }\n    }\n\n    function addPattern(patternPath, bindings) {\n        var pattern = patternPath.value;\n        namedTypes.Pattern.assert(pattern);\n\n        if (namedTypes.Identifier.check(pattern)) {\n            if (hasOwn.call(bindings, pattern.name)) {\n                bindings[pattern.name].push(patternPath);\n            } else {\n                bindings[pattern.name] = [patternPath];\n            }\n\n        } else if (namedTypes.ObjectPattern &&\n          namedTypes.ObjectPattern.check(pattern)) {\n            patternPath.get('properties').each(function(propertyPath) {\n                var property = propertyPath.value;\n                if (namedTypes.Pattern.check(property)) {\n                    addPattern(propertyPath, bindings);\n                } else  if (namedTypes.Property.check(property)) {\n                    addPattern(propertyPath.get('value'), bindings);\n                } else if (namedTypes.SpreadProperty &&\n                  namedTypes.SpreadProperty.check(property)) {\n                    addPattern(propertyPath.get('argument'), bindings);\n                }\n            });\n\n        } else if (namedTypes.ArrayPattern &&\n          namedTypes.ArrayPattern.check(pattern)) {\n            patternPath.get('elements').each(function(elementPath) {\n                var element = elementPath.value;\n                if (namedTypes.Pattern.check(element)) {\n                    addPattern(elementPath, bindings);\n                } else if (namedTypes.SpreadElement &&\n                  namedTypes.SpreadElement.check(element)) {\n                    addPattern(elementPath.get(\"argument\"), bindings);\n                }\n            });\n\n        } else if (namedTypes.PropertyPattern &&\n          namedTypes.PropertyPattern.check(pattern)) {\n            addPattern(patternPath.get('pattern'), bindings);\n\n        } else if ((namedTypes.SpreadElementPattern &&\n          namedTypes.SpreadElementPattern.check(pattern)) ||\n          (namedTypes.SpreadPropertyPattern &&\n          namedTypes.SpreadPropertyPattern.check(pattern))) {\n            addPattern(patternPath.get('argument'), bindings);\n        }\n    }\n\n    function addTypePattern(patternPath, types) {\n        var pattern = patternPath.value;\n        namedTypes.Pattern.assert(pattern);\n\n        if (namedTypes.Identifier.check(pattern)) {\n            if (hasOwn.call(types, pattern.name)) {\n                types[pattern.name].push(patternPath);\n            } else {\n                types[pattern.name] = [patternPath];\n            }\n\n        }\n    }\n\n    Sp.lookup = function(name) {\n        for (var scope = this; scope; scope = scope.parent)\n            if (scope.declares(name))\n                break;\n        return scope;\n    };\n\n    Sp.lookupType = function(name) {\n        for (var scope = this; scope; scope = scope.parent)\n            if (scope.declaresType(name))\n                break;\n        return scope;\n    };\n\n    Sp.getGlobalScope = function() {\n        var scope = this;\n        while (!scope.isGlobal)\n            scope = scope.parent;\n        return scope;\n    };\n\n    return Scope;\n};\n","map":{"mappings":[{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"../node_modules/ast-types/lib/scope.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}}],"sources":{"../node_modules/ast-types/lib/scope.js":"var hasOwn = Object.prototype.hasOwnProperty;\n\nmodule.exports = function (fork) {\n    var types = fork.use(require(\"./types\"));\n    var Type = types.Type;\n    var namedTypes = types.namedTypes;\n    var Node = namedTypes.Node;\n    var Expression = namedTypes.Expression;\n    var isArray = types.builtInTypes.array;\n    var b = types.builders;\n\n    function Scope(path, parentScope) {\n        if (!(this instanceof Scope)) {\n            throw new Error(\"Scope constructor cannot be invoked without 'new'\");\n        }\n        if (!(path instanceof fork.use(require(\"./node-path\")))) {\n            throw new Error(\"\");\n        }\n        ScopeType.assert(path.value);\n\n        var depth;\n\n        if (parentScope) {\n            if (!(parentScope instanceof Scope)) {\n                throw new Error(\"\");\n            }\n            depth = parentScope.depth + 1;\n        } else {\n            parentScope = null;\n            depth = 0;\n        }\n\n        Object.defineProperties(this, {\n            path: { value: path },\n            node: { value: path.value },\n            isGlobal: { value: !parentScope, enumerable: true },\n            depth: { value: depth },\n            parent: { value: parentScope },\n            bindings: { value: {} },\n            types: { value: {} },\n        });\n    }\n\n    var scopeTypes = [\n        // Program nodes introduce global scopes.\n        namedTypes.Program,\n\n        // Function is the supertype of FunctionExpression,\n        // FunctionDeclaration, ArrowExpression, etc.\n        namedTypes.Function,\n\n        // In case you didn't know, the caught parameter shadows any variable\n        // of the same name in an outer scope.\n        namedTypes.CatchClause\n    ];\n\n    var ScopeType = Type.or.apply(Type, scopeTypes);\n\n    Scope.isEstablishedBy = function(node) {\n        return ScopeType.check(node);\n    };\n\n    var Sp = Scope.prototype;\n\n// Will be overridden after an instance lazily calls scanScope.\n    Sp.didScan = false;\n\n    Sp.declares = function(name) {\n        this.scan();\n        return hasOwn.call(this.bindings, name);\n    };\n\n    Sp.declaresType = function(name) {\n        this.scan();\n        return hasOwn.call(this.types, name);\n    };\n\n    Sp.declareTemporary = function(prefix) {\n        if (prefix) {\n            if (!/^[a-z$_]/i.test(prefix)) {\n                throw new Error(\"\");\n            }\n        } else {\n            prefix = \"t$\";\n        }\n\n        // Include this.depth in the name to make sure the name does not\n        // collide with any variables in nested/enclosing scopes.\n        prefix += this.depth.toString(36) + \"$\";\n\n        this.scan();\n\n        var index = 0;\n        while (this.declares(prefix + index)) {\n            ++index;\n        }\n\n        var name = prefix + index;\n        return this.bindings[name] = types.builders.identifier(name);\n    };\n\n    Sp.injectTemporary = function(identifier, init) {\n        identifier || (identifier = this.declareTemporary());\n\n        var bodyPath = this.path.get(\"body\");\n        if (namedTypes.BlockStatement.check(bodyPath.value)) {\n            bodyPath = bodyPath.get(\"body\");\n        }\n\n        bodyPath.unshift(\n          b.variableDeclaration(\n            \"var\",\n            [b.variableDeclarator(identifier, init || null)]\n          )\n        );\n\n        return identifier;\n    };\n\n    Sp.scan = function(force) {\n        if (force || !this.didScan) {\n            for (var name in this.bindings) {\n                // Empty out this.bindings, just in cases.\n                delete this.bindings[name];\n            }\n            scanScope(this.path, this.bindings, this.types);\n            this.didScan = true;\n        }\n    };\n\n    Sp.getBindings = function () {\n        this.scan();\n        return this.bindings;\n    };\n\n    Sp.getTypes = function () {\n        this.scan();\n        return this.types;\n    };\n\n    function scanScope(path, bindings, scopeTypes) {\n        var node = path.value;\n        ScopeType.assert(node);\n\n        if (namedTypes.CatchClause.check(node)) {\n            // A catch clause establishes a new scope but the only variable\n            // bound in that scope is the catch parameter. Any other\n            // declarations create bindings in the outer scope.\n            addPattern(path.get(\"param\"), bindings);\n\n        } else {\n            recursiveScanScope(path, bindings, scopeTypes);\n        }\n    }\n\n    function recursiveScanScope(path, bindings, scopeTypes) {\n        var node = path.value;\n\n        if (path.parent &&\n          namedTypes.FunctionExpression.check(path.parent.node) &&\n          path.parent.node.id) {\n            addPattern(path.parent.get(\"id\"), bindings);\n        }\n\n        if (!node) {\n            // None of the remaining cases matter if node is falsy.\n\n        } else if (isArray.check(node)) {\n            path.each(function(childPath) {\n                recursiveScanChild(childPath, bindings, scopeTypes);\n            });\n\n        } else if (namedTypes.Function.check(node)) {\n            path.get(\"params\").each(function(paramPath) {\n                addPattern(paramPath, bindings);\n            });\n\n            recursiveScanChild(path.get(\"body\"), bindings, scopeTypes);\n\n        } else if (namedTypes.TypeAlias && namedTypes.TypeAlias.check(node)) {\n            addTypePattern(path.get(\"id\"), scopeTypes);\n\n        } else if (namedTypes.VariableDeclarator.check(node)) {\n            addPattern(path.get(\"id\"), bindings);\n            recursiveScanChild(path.get(\"init\"), bindings, scopeTypes);\n\n        } else if (node.type === \"ImportSpecifier\" ||\n          node.type === \"ImportNamespaceSpecifier\" ||\n          node.type === \"ImportDefaultSpecifier\") {\n            addPattern(\n              // Esprima used to use the .name field to refer to the local\n              // binding identifier for ImportSpecifier nodes, but .id for\n              // ImportNamespaceSpecifier and ImportDefaultSpecifier nodes.\n              // ESTree/Acorn/ESpree use .local for all three node types.\n              path.get(node.local ? \"local\" :\n                node.name ? \"name\" : \"id\"),\n              bindings\n            );\n\n        } else if (Node.check(node) && !Expression.check(node)) {\n            types.eachField(node, function(name, child) {\n                var childPath = path.get(name);\n                if (!pathHasValue(childPath, child)) {\n                    throw new Error(\"\");\n                }\n                recursiveScanChild(childPath, bindings, scopeTypes);\n            });\n        }\n    }\n\n    function pathHasValue(path, value) {\n        if (path.value === value) {\n            return true;\n        }\n\n        // Empty arrays are probably produced by defaults.emptyArray, in which\n        // case is makes sense to regard them as equivalent, if not ===.\n        if (Array.isArray(path.value) &&\n          path.value.length === 0 &&\n          Array.isArray(value) &&\n          value.length === 0) {\n            return true;\n        }\n\n        return false;\n    }\n\n    function recursiveScanChild(path, bindings, scopeTypes) {\n        var node = path.value;\n\n        if (!node || Expression.check(node)) {\n            // Ignore falsy values and Expressions.\n\n        } else if (namedTypes.FunctionDeclaration.check(node) &&\n                   node.id !== null) {\n            addPattern(path.get(\"id\"), bindings);\n\n        } else if (namedTypes.ClassDeclaration &&\n          namedTypes.ClassDeclaration.check(node)) {\n            addPattern(path.get(\"id\"), bindings);\n\n        } else if (ScopeType.check(node)) {\n            if (namedTypes.CatchClause.check(node)) {\n                var catchParamName = node.param.name;\n                var hadBinding = hasOwn.call(bindings, catchParamName);\n\n                // Any declarations that occur inside the catch body that do\n                // not have the same name as the catch parameter should count\n                // as bindings in the outer scope.\n                recursiveScanScope(path.get(\"body\"), bindings, scopeTypes);\n\n                // If a new binding matching the catch parameter name was\n                // created while scanning the catch body, ignore it because it\n                // actually refers to the catch parameter and not the outer\n                // scope that we're currently scanning.\n                if (!hadBinding) {\n                    delete bindings[catchParamName];\n                }\n            }\n\n        } else {\n            recursiveScanScope(path, bindings, scopeTypes);\n        }\n    }\n\n    function addPattern(patternPath, bindings) {\n        var pattern = patternPath.value;\n        namedTypes.Pattern.assert(pattern);\n\n        if (namedTypes.Identifier.check(pattern)) {\n            if (hasOwn.call(bindings, pattern.name)) {\n                bindings[pattern.name].push(patternPath);\n            } else {\n                bindings[pattern.name] = [patternPath];\n            }\n\n        } else if (namedTypes.ObjectPattern &&\n          namedTypes.ObjectPattern.check(pattern)) {\n            patternPath.get('properties').each(function(propertyPath) {\n                var property = propertyPath.value;\n                if (namedTypes.Pattern.check(property)) {\n                    addPattern(propertyPath, bindings);\n                } else  if (namedTypes.Property.check(property)) {\n                    addPattern(propertyPath.get('value'), bindings);\n                } else if (namedTypes.SpreadProperty &&\n                  namedTypes.SpreadProperty.check(property)) {\n                    addPattern(propertyPath.get('argument'), bindings);\n                }\n            });\n\n        } else if (namedTypes.ArrayPattern &&\n          namedTypes.ArrayPattern.check(pattern)) {\n            patternPath.get('elements').each(function(elementPath) {\n                var element = elementPath.value;\n                if (namedTypes.Pattern.check(element)) {\n                    addPattern(elementPath, bindings);\n                } else if (namedTypes.SpreadElement &&\n                  namedTypes.SpreadElement.check(element)) {\n                    addPattern(elementPath.get(\"argument\"), bindings);\n                }\n            });\n\n        } else if (namedTypes.PropertyPattern &&\n          namedTypes.PropertyPattern.check(pattern)) {\n            addPattern(patternPath.get('pattern'), bindings);\n\n        } else if ((namedTypes.SpreadElementPattern &&\n          namedTypes.SpreadElementPattern.check(pattern)) ||\n          (namedTypes.SpreadPropertyPattern &&\n          namedTypes.SpreadPropertyPattern.check(pattern))) {\n            addPattern(patternPath.get('argument'), bindings);\n        }\n    }\n\n    function addTypePattern(patternPath, types) {\n        var pattern = patternPath.value;\n        namedTypes.Pattern.assert(pattern);\n\n        if (namedTypes.Identifier.check(pattern)) {\n            if (hasOwn.call(types, pattern.name)) {\n                types[pattern.name].push(patternPath);\n            } else {\n                types[pattern.name] = [patternPath];\n            }\n\n        }\n    }\n\n    Sp.lookup = function(name) {\n        for (var scope = this; scope; scope = scope.parent)\n            if (scope.declares(name))\n                break;\n        return scope;\n    };\n\n    Sp.lookupType = function(name) {\n        for (var scope = this; scope; scope = scope.parent)\n            if (scope.declaresType(name))\n                break;\n        return scope;\n    };\n\n    Sp.getGlobalScope = function() {\n        var scope = this;\n        while (!scope.isGlobal)\n            scope = scope.parent;\n        return scope;\n    };\n\n    return Scope;\n};\n"},"lineCount":352}},"hash":"60d53c85882e9e60d9d53b7be69fbe4f","cacheData":{"env":{}}}