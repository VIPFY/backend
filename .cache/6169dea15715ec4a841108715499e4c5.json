{"dependencies":[{"name":"ast-types","loc":{"line":6,"column":20}},{"name":"esprima","loc":{"line":7,"column":22}},{"name":"escodegen","loc":{"line":8,"column":24}}],"generated":{"js":"\n/**\n * Module dependencies.\n */\n\nvar types = require('ast-types');\nvar esprima = require('esprima');\nvar escodegen = require('escodegen');\n\n/**\n * Helper functions.\n */\n\nvar n = types.namedTypes;\nvar b = types.builders;\n\n/**\n * Module exports.\n */\n\nmodule.exports = degenerator;\n\n/**\n * Turns sync JavaScript code into an JavaScript with async Generator Functions.\n *\n * @param {String} jsStr JavaScript string to convert\n * @param {Array} names Array of function names to add `yield` operators to\n * @return {String} Converted JavaScript string with Generator functions injected\n * @api public\n */\n\nfunction degenerator (jsStr, names) {\n  if (!Array.isArray(names)) {\n    throw new TypeError('an array of async function \"names\" is required');\n  }\n\n  var ast = esprima.parse(jsStr);\n\n  // duplicate the `names` array since it's rude to augment the user-provided\n  // array\n  names = names.slice(0);\n\n\n  // first pass is to find the `function` nodes and turn them into `function *`\n  // generator functions. We also add the names of the functions to the `names`\n  // array\n  types.visit(ast, {\n    visitFunction: function(path) {\n      if (path.node.id) {\n        // got a \"function\" expression/statement,\n        // convert it into a \"generator function\"\n        path.node.generator = true;\n\n        // add function name to `names` array\n        names.push(path.node.id.name);\n      }\n\n      this.traverse(path);\n    }\n  });\n\n  // second pass is for adding `yield` statements to any function\n  // invocations that match the given `names` array.\n  types.visit(ast, {\n    visitCallExpression: function(path) {\n      if (checkNames(path.node, names)) {\n        // a \"function invocation\" expression,\n        // we need to inject a `YieldExpression`\n        var name = path.name;\n        var parent = path.parent.node;\n\n        var delegate = false;\n        var expr = b.yieldExpression(path.node, delegate);\n        if (parent['arguments']) {\n          // parent is a `CallExpression` type\n          parent['arguments'][name] = expr;\n        } else {\n          parent[name] = expr;\n        }\n      }\n\n      this.traverse(path);\n    }\n  });\n\n  return escodegen.generate(ast);\n}\n\n/**\n * Returns `true` if `node` has a matching name to one of the entries in the\n * `names` array.\n *\n * @param {types.Node} node\n * @param {Array} names Array of function names to return true for\n * @return {Boolean}\n * @api private\n */\n\nfunction checkNames (node, names) {\n  var name;\n  var callee = node.callee;\n  if ('Identifier' == callee.type) {\n    name = callee.name;\n  } else if ('MemberExpression' == callee.type) {\n    name = callee.object.name + '.' + (callee.property.name || callee.property.raw);\n  } else if ('FunctionExpression' == callee.type) {\n    if (callee.id) {\n      name = callee.id.name;\n    } else {\n      return false;\n    }\n  } else {\n    throw new Error('don\\'t know how to get name for: ' + callee.type);\n  }\n\n  // now that we have the `name`, check if any entries match in the `names` array\n  var n;\n  for (var i = 0; i < names.length; i++) {\n    n = names[i];\n    if (n.test) {\n      // regexp\n      if (n.test(name)) return true;\n    } else {\n      if (name == n) return true;\n    }\n  }\n\n  return false;\n}\n","map":{"mappings":[{"source":"../node_modules/degenerator/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/degenerator/index.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}}],"sources":{"../node_modules/degenerator/index.js":"\n/**\n * Module dependencies.\n */\n\nvar types = require('ast-types');\nvar esprima = require('esprima');\nvar escodegen = require('escodegen');\n\n/**\n * Helper functions.\n */\n\nvar n = types.namedTypes;\nvar b = types.builders;\n\n/**\n * Module exports.\n */\n\nmodule.exports = degenerator;\n\n/**\n * Turns sync JavaScript code into an JavaScript with async Generator Functions.\n *\n * @param {String} jsStr JavaScript string to convert\n * @param {Array} names Array of function names to add `yield` operators to\n * @return {String} Converted JavaScript string with Generator functions injected\n * @api public\n */\n\nfunction degenerator (jsStr, names) {\n  if (!Array.isArray(names)) {\n    throw new TypeError('an array of async function \"names\" is required');\n  }\n\n  var ast = esprima.parse(jsStr);\n\n  // duplicate the `names` array since it's rude to augment the user-provided\n  // array\n  names = names.slice(0);\n\n\n  // first pass is to find the `function` nodes and turn them into `function *`\n  // generator functions. We also add the names of the functions to the `names`\n  // array\n  types.visit(ast, {\n    visitFunction: function(path) {\n      if (path.node.id) {\n        // got a \"function\" expression/statement,\n        // convert it into a \"generator function\"\n        path.node.generator = true;\n\n        // add function name to `names` array\n        names.push(path.node.id.name);\n      }\n\n      this.traverse(path);\n    }\n  });\n\n  // second pass is for adding `yield` statements to any function\n  // invocations that match the given `names` array.\n  types.visit(ast, {\n    visitCallExpression: function(path) {\n      if (checkNames(path.node, names)) {\n        // a \"function invocation\" expression,\n        // we need to inject a `YieldExpression`\n        var name = path.name;\n        var parent = path.parent.node;\n\n        var delegate = false;\n        var expr = b.yieldExpression(path.node, delegate);\n        if (parent['arguments']) {\n          // parent is a `CallExpression` type\n          parent['arguments'][name] = expr;\n        } else {\n          parent[name] = expr;\n        }\n      }\n\n      this.traverse(path);\n    }\n  });\n\n  return escodegen.generate(ast);\n}\n\n/**\n * Returns `true` if `node` has a matching name to one of the entries in the\n * `names` array.\n *\n * @param {types.Node} node\n * @param {Array} names Array of function names to return true for\n * @return {Boolean}\n * @api private\n */\n\nfunction checkNames (node, names) {\n  var name;\n  var callee = node.callee;\n  if ('Identifier' == callee.type) {\n    name = callee.name;\n  } else if ('MemberExpression' == callee.type) {\n    name = callee.object.name + '.' + (callee.property.name || callee.property.raw);\n  } else if ('FunctionExpression' == callee.type) {\n    if (callee.id) {\n      name = callee.id.name;\n    } else {\n      return false;\n    }\n  } else {\n    throw new Error('don\\'t know how to get name for: ' + callee.type);\n  }\n\n  // now that we have the `name`, check if any entries match in the `names` array\n  var n;\n  for (var i = 0; i < names.length; i++) {\n    n = names[i];\n    if (n.test) {\n      // regexp\n      if (n.test(name)) return true;\n    } else {\n      if (name == n) return true;\n    }\n  }\n\n  return false;\n}\n"},"lineCount":130}},"hash":"a80469af2667b0a3d618965f80d5fc10","cacheData":{"env":{}}}