{"dependencies":[],"generated":{"js":"(function webpackUniversalModuleDefinition(root, factory) {\n/* istanbul ignore next */\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n/* istanbul ignore next */\n\telse if(typeof exports === 'object')\n\t\texports[\"esprima\"] = factory();\n\telse\n\t\troot[\"esprima\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/* istanbul ignore if */\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*\n\t  Copyright JS Foundation and other contributors, https://js.foundation/\n\n\t  Redistribution and use in source and binary forms, with or without\n\t  modification, are permitted provided that the following conditions are met:\n\n\t    * Redistributions of source code must retain the above copyright\n\t      notice, this list of conditions and the following disclaimer.\n\t    * Redistributions in binary form must reproduce the above copyright\n\t      notice, this list of conditions and the following disclaimer in the\n\t      documentation and/or other materials provided with the distribution.\n\n\t  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n\t  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n\t  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n\t  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n\t  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n\t  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n\t  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n\t  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\t  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n\t  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\t*/\n\t\"use strict\";\n\tvar comment_handler_1 = __webpack_require__(1);\n\tvar parser_1 = __webpack_require__(3);\n\tvar jsx_parser_1 = __webpack_require__(11);\n\tvar tokenizer_1 = __webpack_require__(15);\n\tfunction parse(code, options, delegate) {\n\t    var commentHandler = null;\n\t    var proxyDelegate = function (node, metadata) {\n\t        if (delegate) {\n\t            delegate(node, metadata);\n\t        }\n\t        if (commentHandler) {\n\t            commentHandler.visit(node, metadata);\n\t        }\n\t    };\n\t    var parserDelegate = (typeof delegate === 'function') ? proxyDelegate : null;\n\t    var collectComment = false;\n\t    if (options) {\n\t        collectComment = (typeof options.comment === 'boolean' && options.comment);\n\t        var attachComment = (typeof options.attachComment === 'boolean' && options.attachComment);\n\t        if (collectComment || attachComment) {\n\t            commentHandler = new comment_handler_1.CommentHandler();\n\t            commentHandler.attach = attachComment;\n\t            options.comment = true;\n\t            parserDelegate = proxyDelegate;\n\t        }\n\t    }\n\t    var parser;\n\t    if (options && typeof options.jsx === 'boolean' && options.jsx) {\n\t        parser = new jsx_parser_1.JSXParser(code, options, parserDelegate);\n\t    }\n\t    else {\n\t        parser = new parser_1.Parser(code, options, parserDelegate);\n\t    }\n\t    var ast = (parser.parseProgram());\n\t    if (collectComment) {\n\t        ast.comments = commentHandler.comments;\n\t    }\n\t    if (parser.config.tokens) {\n\t        ast.tokens = parser.tokens;\n\t    }\n\t    if (parser.config.tolerant) {\n\t        ast.errors = parser.errorHandler.errors;\n\t    }\n\t    return ast;\n\t}\n\texports.parse = parse;\n\tfunction tokenize(code, options, delegate) {\n\t    var tokenizer = new tokenizer_1.Tokenizer(code, options);\n\t    var tokens;\n\t    tokens = [];\n\t    try {\n\t        while (true) {\n\t            var token = tokenizer.getNextToken();\n\t            if (!token) {\n\t                break;\n\t            }\n\t            if (delegate) {\n\t                token = delegate(token);\n\t            }\n\t            tokens.push(token);\n\t        }\n\t    }\n\t    catch (e) {\n\t        tokenizer.errorHandler.tolerate(e);\n\t    }\n\t    if (tokenizer.errorHandler.tolerant) {\n\t        tokens.errors = tokenizer.errors();\n\t    }\n\t    return tokens;\n\t}\n\texports.tokenize = tokenize;\n\tvar syntax_1 = __webpack_require__(2);\n\texports.Syntax = syntax_1.Syntax;\n\t// Sync with *.json manifests.\n\texports.version = '3.1.3';\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar syntax_1 = __webpack_require__(2);\n\tvar CommentHandler = (function () {\n\t    function CommentHandler() {\n\t        this.attach = false;\n\t        this.comments = [];\n\t        this.stack = [];\n\t        this.leading = [];\n\t        this.trailing = [];\n\t    }\n\t    CommentHandler.prototype.insertInnerComments = function (node, metadata) {\n\t        //  innnerComments for properties empty block\n\t        //  `function a() {/** comments **\\/}`\n\t        if (node.type === syntax_1.Syntax.BlockStatement && node.body.length === 0) {\n\t            var innerComments = [];\n\t            for (var i = this.leading.length - 1; i >= 0; --i) {\n\t                var entry = this.leading[i];\n\t                if (metadata.end.offset >= entry.start) {\n\t                    innerComments.unshift(entry.comment);\n\t                    this.leading.splice(i, 1);\n\t                    this.trailing.splice(i, 1);\n\t                }\n\t            }\n\t            if (innerComments.length) {\n\t                node.innerComments = innerComments;\n\t            }\n\t        }\n\t    };\n\t    CommentHandler.prototype.findTrailingComments = function (node, metadata) {\n\t        var trailingComments = [];\n\t        if (this.trailing.length > 0) {\n\t            for (var i = this.trailing.length - 1; i >= 0; --i) {\n\t                var entry_1 = this.trailing[i];\n\t                if (entry_1.start >= metadata.end.offset) {\n\t                    trailingComments.unshift(entry_1.comment);\n\t                }\n\t            }\n\t            this.trailing.length = 0;\n\t            return trailingComments;\n\t        }\n\t        var entry = this.stack[this.stack.length - 1];\n\t        if (entry && entry.node.trailingComments) {\n\t            var firstComment = entry.node.trailingComments[0];\n\t            if (firstComment && firstComment.range[0] >= metadata.end.offset) {\n\t                trailingComments = entry.node.trailingComments;\n\t                delete entry.node.trailingComments;\n\t            }\n\t        }\n\t        return trailingComments;\n\t    };\n\t    CommentHandler.prototype.findLeadingComments = function (node, metadata) {\n\t        var leadingComments = [];\n\t        var target;\n\t        while (this.stack.length > 0) {\n\t            var entry = this.stack[this.stack.length - 1];\n\t            if (entry && entry.start >= metadata.start.offset) {\n\t                target = this.stack.pop().node;\n\t            }\n\t            else {\n\t                break;\n\t            }\n\t        }\n\t        if (target) {\n\t            var count = target.leadingComments ? target.leadingComments.length : 0;\n\t            for (var i = count - 1; i >= 0; --i) {\n\t                var comment = target.leadingComments[i];\n\t                if (comment.range[1] <= metadata.start.offset) {\n\t                    leadingComments.unshift(comment);\n\t                    target.leadingComments.splice(i, 1);\n\t                }\n\t            }\n\t            if (target.leadingComments && target.leadingComments.length === 0) {\n\t                delete target.leadingComments;\n\t            }\n\t            return leadingComments;\n\t        }\n\t        for (var i = this.leading.length - 1; i >= 0; --i) {\n\t            var entry = this.leading[i];\n\t            if (entry.start <= metadata.start.offset) {\n\t                leadingComments.unshift(entry.comment);\n\t                this.leading.splice(i, 1);\n\t            }\n\t        }\n\t        return leadingComments;\n\t    };\n\t    CommentHandler.prototype.visitNode = function (node, metadata) {\n\t        if (node.type === syntax_1.Syntax.Program && node.body.length > 0) {\n\t            return;\n\t        }\n\t        this.insertInnerComments(node, metadata);\n\t        var trailingComments = this.findTrailingComments(node, metadata);\n\t        var leadingComments = this.findLeadingComments(node, metadata);\n\t        if (leadingComments.length > 0) {\n\t            node.leadingComments = leadingComments;\n\t        }\n\t        if (trailingComments.length > 0) {\n\t            node.trailingComments = trailingComments;\n\t        }\n\t        this.stack.push({\n\t            node: node,\n\t            start: metadata.start.offset\n\t        });\n\t    };\n\t    CommentHandler.prototype.visitComment = function (node, metadata) {\n\t        var type = (node.type[0] === 'L') ? 'Line' : 'Block';\n\t        var comment = {\n\t            type: type,\n\t            value: node.value\n\t        };\n\t        if (node.range) {\n\t            comment.range = node.range;\n\t        }\n\t        if (node.loc) {\n\t            comment.loc = node.loc;\n\t        }\n\t        this.comments.push(comment);\n\t        if (this.attach) {\n\t            var entry = {\n\t                comment: {\n\t                    type: type,\n\t                    value: node.value,\n\t                    range: [metadata.start.offset, metadata.end.offset]\n\t                },\n\t                start: metadata.start.offset\n\t            };\n\t            if (node.loc) {\n\t                entry.comment.loc = node.loc;\n\t            }\n\t            node.type = type;\n\t            this.leading.push(entry);\n\t            this.trailing.push(entry);\n\t        }\n\t    };\n\t    CommentHandler.prototype.visit = function (node, metadata) {\n\t        if (node.type === 'LineComment') {\n\t            this.visitComment(node, metadata);\n\t        }\n\t        else if (node.type === 'BlockComment') {\n\t            this.visitComment(node, metadata);\n\t        }\n\t        else if (this.attach) {\n\t            this.visitNode(node, metadata);\n\t        }\n\t    };\n\t    return CommentHandler;\n\t}());\n\texports.CommentHandler = CommentHandler;\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\texports.Syntax = {\n\t    AssignmentExpression: 'AssignmentExpression',\n\t    AssignmentPattern: 'AssignmentPattern',\n\t    ArrayExpression: 'ArrayExpression',\n\t    ArrayPattern: 'ArrayPattern',\n\t    ArrowFunctionExpression: 'ArrowFunctionExpression',\n\t    BlockStatement: 'BlockStatement',\n\t    BinaryExpression: 'BinaryExpression',\n\t    BreakStatement: 'BreakStatement',\n\t    CallExpression: 'CallExpression',\n\t    CatchClause: 'CatchClause',\n\t    ClassBody: 'ClassBody',\n\t    ClassDeclaration: 'ClassDeclaration',\n\t    ClassExpression: 'ClassExpression',\n\t    ConditionalExpression: 'ConditionalExpression',\n\t    ContinueStatement: 'ContinueStatement',\n\t    DoWhileStatement: 'DoWhileStatement',\n\t    DebuggerStatement: 'DebuggerStatement',\n\t    EmptyStatement: 'EmptyStatement',\n\t    ExportAllDeclaration: 'ExportAllDeclaration',\n\t    ExportDefaultDeclaration: 'ExportDefaultDeclaration',\n\t    ExportNamedDeclaration: 'ExportNamedDeclaration',\n\t    ExportSpecifier: 'ExportSpecifier',\n\t    ExpressionStatement: 'ExpressionStatement',\n\t    ForStatement: 'ForStatement',\n\t    ForOfStatement: 'ForOfStatement',\n\t    ForInStatement: 'ForInStatement',\n\t    FunctionDeclaration: 'FunctionDeclaration',\n\t    FunctionExpression: 'FunctionExpression',\n\t    Identifier: 'Identifier',\n\t    IfStatement: 'IfStatement',\n\t    ImportDeclaration: 'ImportDeclaration',\n\t    ImportDefaultSpecifier: 'ImportDefaultSpecifier',\n\t    ImportNamespaceSpecifier: 'ImportNamespaceSpecifier',\n\t    ImportSpecifier: 'ImportSpecifier',\n\t    Literal: 'Literal',\n\t    LabeledStatement: 'LabeledStatement',\n\t    LogicalExpression: 'LogicalExpression',\n\t    MemberExpression: 'MemberExpression',\n\t    MetaProperty: 'MetaProperty',\n\t    MethodDefinition: 'MethodDefinition',\n\t    NewExpression: 'NewExpression',\n\t    ObjectExpression: 'ObjectExpression',\n\t    ObjectPattern: 'ObjectPattern',\n\t    Program: 'Program',\n\t    Property: 'Property',\n\t    RestElement: 'RestElement',\n\t    ReturnStatement: 'ReturnStatement',\n\t    SequenceExpression: 'SequenceExpression',\n\t    SpreadElement: 'SpreadElement',\n\t    Super: 'Super',\n\t    SwitchCase: 'SwitchCase',\n\t    SwitchStatement: 'SwitchStatement',\n\t    TaggedTemplateExpression: 'TaggedTemplateExpression',\n\t    TemplateElement: 'TemplateElement',\n\t    TemplateLiteral: 'TemplateLiteral',\n\t    ThisExpression: 'ThisExpression',\n\t    ThrowStatement: 'ThrowStatement',\n\t    TryStatement: 'TryStatement',\n\t    UnaryExpression: 'UnaryExpression',\n\t    UpdateExpression: 'UpdateExpression',\n\t    VariableDeclaration: 'VariableDeclaration',\n\t    VariableDeclarator: 'VariableDeclarator',\n\t    WhileStatement: 'WhileStatement',\n\t    WithStatement: 'WithStatement',\n\t    YieldExpression: 'YieldExpression'\n\t};\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar assert_1 = __webpack_require__(4);\n\tvar messages_1 = __webpack_require__(5);\n\tvar error_handler_1 = __webpack_require__(6);\n\tvar token_1 = __webpack_require__(7);\n\tvar scanner_1 = __webpack_require__(8);\n\tvar syntax_1 = __webpack_require__(2);\n\tvar Node = __webpack_require__(10);\n\tvar ArrowParameterPlaceHolder = 'ArrowParameterPlaceHolder';\n\tvar Parser = (function () {\n\t    function Parser(code, options, delegate) {\n\t        if (options === void 0) { options = {}; }\n\t        this.config = {\n\t            range: (typeof options.range === 'boolean') && options.range,\n\t            loc: (typeof options.loc === 'boolean') && options.loc,\n\t            source: null,\n\t            tokens: (typeof options.tokens === 'boolean') && options.tokens,\n\t            comment: (typeof options.comment === 'boolean') && options.comment,\n\t            tolerant: (typeof options.tolerant === 'boolean') && options.tolerant\n\t        };\n\t        if (this.config.loc && options.source && options.source !== null) {\n\t            this.config.source = String(options.source);\n\t        }\n\t        this.delegate = delegate;\n\t        this.errorHandler = new error_handler_1.ErrorHandler();\n\t        this.errorHandler.tolerant = this.config.tolerant;\n\t        this.scanner = new scanner_1.Scanner(code, this.errorHandler);\n\t        this.scanner.trackComment = this.config.comment;\n\t        this.operatorPrecedence = {\n\t            ')': 0,\n\t            ';': 0,\n\t            ',': 0,\n\t            '=': 0,\n\t            ']': 0,\n\t            '||': 1,\n\t            '&&': 2,\n\t            '|': 3,\n\t            '^': 4,\n\t            '&': 5,\n\t            '==': 6,\n\t            '!=': 6,\n\t            '===': 6,\n\t            '!==': 6,\n\t            '<': 7,\n\t            '>': 7,\n\t            '<=': 7,\n\t            '>=': 7,\n\t            '<<': 8,\n\t            '>>': 8,\n\t            '>>>': 8,\n\t            '+': 9,\n\t            '-': 9,\n\t            '*': 11,\n\t            '/': 11,\n\t            '%': 11\n\t        };\n\t        this.sourceType = (options && options.sourceType === 'module') ? 'module' : 'script';\n\t        this.lookahead = null;\n\t        this.hasLineTerminator = false;\n\t        this.context = {\n\t            allowIn: true,\n\t            allowYield: true,\n\t            firstCoverInitializedNameError: null,\n\t            isAssignmentTarget: false,\n\t            isBindingElement: false,\n\t            inFunctionBody: false,\n\t            inIteration: false,\n\t            inSwitch: false,\n\t            labelSet: {},\n\t            strict: (this.sourceType === 'module')\n\t        };\n\t        this.tokens = [];\n\t        this.startMarker = {\n\t            index: 0,\n\t            lineNumber: this.scanner.lineNumber,\n\t            lineStart: 0\n\t        };\n\t        this.lastMarker = {\n\t            index: 0,\n\t            lineNumber: this.scanner.lineNumber,\n\t            lineStart: 0\n\t        };\n\t        this.nextToken();\n\t        this.lastMarker = {\n\t            index: this.scanner.index,\n\t            lineNumber: this.scanner.lineNumber,\n\t            lineStart: this.scanner.lineStart\n\t        };\n\t    }\n\t    Parser.prototype.throwError = function (messageFormat) {\n\t        var values = [];\n\t        for (var _i = 1; _i < arguments.length; _i++) {\n\t            values[_i - 1] = arguments[_i];\n\t        }\n\t        var args = Array.prototype.slice.call(arguments, 1);\n\t        var msg = messageFormat.replace(/%(\\d)/g, function (whole, idx) {\n\t            assert_1.assert(idx < args.length, 'Message reference must be in range');\n\t            return args[idx];\n\t        });\n\t        var index = this.lastMarker.index;\n\t        var line = this.lastMarker.lineNumber;\n\t        var column = this.lastMarker.index - this.lastMarker.lineStart + 1;\n\t        throw this.errorHandler.createError(index, line, column, msg);\n\t    };\n\t    Parser.prototype.tolerateError = function (messageFormat) {\n\t        var values = [];\n\t        for (var _i = 1; _i < arguments.length; _i++) {\n\t            values[_i - 1] = arguments[_i];\n\t        }\n\t        var args = Array.prototype.slice.call(arguments, 1);\n\t        var msg = messageFormat.replace(/%(\\d)/g, function (whole, idx) {\n\t            assert_1.assert(idx < args.length, 'Message reference must be in range');\n\t            return args[idx];\n\t        });\n\t        var index = this.lastMarker.index;\n\t        var line = this.scanner.lineNumber;\n\t        var column = this.lastMarker.index - this.lastMarker.lineStart + 1;\n\t        this.errorHandler.tolerateError(index, line, column, msg);\n\t    };\n\t    // Throw an exception because of the token.\n\t    Parser.prototype.unexpectedTokenError = function (token, message) {\n\t        var msg = message || messages_1.Messages.UnexpectedToken;\n\t        var value;\n\t        if (token) {\n\t            if (!message) {\n\t                msg = (token.type === token_1.Token.EOF) ? messages_1.Messages.UnexpectedEOS :\n\t                    (token.type === token_1.Token.Identifier) ? messages_1.Messages.UnexpectedIdentifier :\n\t                        (token.type === token_1.Token.NumericLiteral) ? messages_1.Messages.UnexpectedNumber :\n\t                            (token.type === token_1.Token.StringLiteral) ? messages_1.Messages.UnexpectedString :\n\t                                (token.type === token_1.Token.Template) ? messages_1.Messages.UnexpectedTemplate :\n\t                                    messages_1.Messages.UnexpectedToken;\n\t                if (token.type === token_1.Token.Keyword) {\n\t                    if (this.scanner.isFutureReservedWord(token.value)) {\n\t                        msg = messages_1.Messages.UnexpectedReserved;\n\t                    }\n\t                    else if (this.context.strict && this.scanner.isStrictModeReservedWord(token.value)) {\n\t                        msg = messages_1.Messages.StrictReservedWord;\n\t                    }\n\t                }\n\t            }\n\t            value = (token.type === token_1.Token.Template) ? token.value.raw : token.value;\n\t        }\n\t        else {\n\t            value = 'ILLEGAL';\n\t        }\n\t        msg = msg.replace('%0', value);\n\t        if (token && typeof token.lineNumber === 'number') {\n\t            var index = token.start;\n\t            var line = token.lineNumber;\n\t            var column = token.start - this.lastMarker.lineStart + 1;\n\t            return this.errorHandler.createError(index, line, column, msg);\n\t        }\n\t        else {\n\t            var index = this.lastMarker.index;\n\t            var line = this.lastMarker.lineNumber;\n\t            var column = index - this.lastMarker.lineStart + 1;\n\t            return this.errorHandler.createError(index, line, column, msg);\n\t        }\n\t    };\n\t    Parser.prototype.throwUnexpectedToken = function (token, message) {\n\t        throw this.unexpectedTokenError(token, message);\n\t    };\n\t    Parser.prototype.tolerateUnexpectedToken = function (token, message) {\n\t        this.errorHandler.tolerate(this.unexpectedTokenError(token, message));\n\t    };\n\t    Parser.prototype.collectComments = function () {\n\t        if (!this.config.comment) {\n\t            this.scanner.scanComments();\n\t        }\n\t        else {\n\t            var comments = this.scanner.scanComments();\n\t            if (comments.length > 0 && this.delegate) {\n\t                for (var i = 0; i < comments.length; ++i) {\n\t                    var e = comments[i];\n\t                    var node = void 0;\n\t                    node = {\n\t                        type: e.multiLine ? 'BlockComment' : 'LineComment',\n\t                        value: this.scanner.source.slice(e.slice[0], e.slice[1])\n\t                    };\n\t                    if (this.config.range) {\n\t                        node.range = e.range;\n\t                    }\n\t                    if (this.config.loc) {\n\t                        node.loc = e.loc;\n\t                    }\n\t                    var metadata = {\n\t                        start: {\n\t                            line: e.loc.start.line,\n\t                            column: e.loc.start.column,\n\t                            offset: e.range[0]\n\t                        },\n\t                        end: {\n\t                            line: e.loc.end.line,\n\t                            column: e.loc.end.column,\n\t                            offset: e.range[1]\n\t                        }\n\t                    };\n\t                    this.delegate(node, metadata);\n\t                }\n\t            }\n\t        }\n\t    };\n\t    // From internal representation to an external structure\n\t    Parser.prototype.getTokenRaw = function (token) {\n\t        return this.scanner.source.slice(token.start, token.end);\n\t    };\n\t    Parser.prototype.convertToken = function (token) {\n\t        var t;\n\t        t = {\n\t            type: token_1.TokenName[token.type],\n\t            value: this.getTokenRaw(token)\n\t        };\n\t        if (this.config.range) {\n\t            t.range = [token.start, token.end];\n\t        }\n\t        if (this.config.loc) {\n\t            t.loc = {\n\t                start: {\n\t                    line: this.startMarker.lineNumber,\n\t                    column: this.startMarker.index - this.startMarker.lineStart\n\t                },\n\t                end: {\n\t                    line: this.scanner.lineNumber,\n\t                    column: this.scanner.index - this.scanner.lineStart\n\t                }\n\t            };\n\t        }\n\t        if (token.regex) {\n\t            t.regex = token.regex;\n\t        }\n\t        return t;\n\t    };\n\t    Parser.prototype.nextToken = function () {\n\t        var token = this.lookahead;\n\t        this.lastMarker.index = this.scanner.index;\n\t        this.lastMarker.lineNumber = this.scanner.lineNumber;\n\t        this.lastMarker.lineStart = this.scanner.lineStart;\n\t        this.collectComments();\n\t        this.startMarker.index = this.scanner.index;\n\t        this.startMarker.lineNumber = this.scanner.lineNumber;\n\t        this.startMarker.lineStart = this.scanner.lineStart;\n\t        var next;\n\t        next = this.scanner.lex();\n\t        this.hasLineTerminator = (token && next) ? (token.lineNumber !== next.lineNumber) : false;\n\t        if (next && this.context.strict && next.type === token_1.Token.Identifier) {\n\t            if (this.scanner.isStrictModeReservedWord(next.value)) {\n\t                next.type = token_1.Token.Keyword;\n\t            }\n\t        }\n\t        this.lookahead = next;\n\t        if (this.config.tokens && next.type !== token_1.Token.EOF) {\n\t            this.tokens.push(this.convertToken(next));\n\t        }\n\t        return token;\n\t    };\n\t    Parser.prototype.nextRegexToken = function () {\n\t        this.collectComments();\n\t        var token = this.scanner.scanRegExp();\n\t        if (this.config.tokens) {\n\t            // Pop the previous token, '/' or '/='\n\t            // This is added from the lookahead token.\n\t            this.tokens.pop();\n\t            this.tokens.push(this.convertToken(token));\n\t        }\n\t        // Prime the next lookahead.\n\t        this.lookahead = token;\n\t        this.nextToken();\n\t        return token;\n\t    };\n\t    Parser.prototype.createNode = function () {\n\t        return {\n\t            index: this.startMarker.index,\n\t            line: this.startMarker.lineNumber,\n\t            column: this.startMarker.index - this.startMarker.lineStart\n\t        };\n\t    };\n\t    Parser.prototype.startNode = function (token) {\n\t        return {\n\t            index: token.start,\n\t            line: token.lineNumber,\n\t            column: token.start - token.lineStart\n\t        };\n\t    };\n\t    Parser.prototype.finalize = function (meta, node) {\n\t        if (this.config.range) {\n\t            node.range = [meta.index, this.lastMarker.index];\n\t        }\n\t        if (this.config.loc) {\n\t            node.loc = {\n\t                start: {\n\t                    line: meta.line,\n\t                    column: meta.column\n\t                },\n\t                end: {\n\t                    line: this.lastMarker.lineNumber,\n\t                    column: this.lastMarker.index - this.lastMarker.lineStart\n\t                }\n\t            };\n\t            if (this.config.source) {\n\t                node.loc.source = this.config.source;\n\t            }\n\t        }\n\t        if (this.delegate) {\n\t            var metadata = {\n\t                start: {\n\t                    line: meta.line,\n\t                    column: meta.column,\n\t                    offset: meta.index\n\t                },\n\t                end: {\n\t                    line: this.lastMarker.lineNumber,\n\t                    column: this.lastMarker.index - this.lastMarker.lineStart,\n\t                    offset: this.lastMarker.index\n\t                }\n\t            };\n\t            this.delegate(node, metadata);\n\t        }\n\t        return node;\n\t    };\n\t    // Expect the next token to match the specified punctuator.\n\t    // If not, an exception will be thrown.\n\t    Parser.prototype.expect = function (value) {\n\t        var token = this.nextToken();\n\t        if (token.type !== token_1.Token.Punctuator || token.value !== value) {\n\t            this.throwUnexpectedToken(token);\n\t        }\n\t    };\n\t    // Quietly expect a comma when in tolerant mode, otherwise delegates to expect().\n\t    Parser.prototype.expectCommaSeparator = function () {\n\t        if (this.config.tolerant) {\n\t            var token = this.lookahead;\n\t            if (token.type === token_1.Token.Punctuator && token.value === ',') {\n\t                this.nextToken();\n\t            }\n\t            else if (token.type === token_1.Token.Punctuator && token.value === ';') {\n\t                this.nextToken();\n\t                this.tolerateUnexpectedToken(token);\n\t            }\n\t            else {\n\t                this.tolerateUnexpectedToken(token, messages_1.Messages.UnexpectedToken);\n\t            }\n\t        }\n\t        else {\n\t            this.expect(',');\n\t        }\n\t    };\n\t    // Expect the next token to match the specified keyword.\n\t    // If not, an exception will be thrown.\n\t    Parser.prototype.expectKeyword = function (keyword) {\n\t        var token = this.nextToken();\n\t        if (token.type !== token_1.Token.Keyword || token.value !== keyword) {\n\t            this.throwUnexpectedToken(token);\n\t        }\n\t    };\n\t    // Return true if the next token matches the specified punctuator.\n\t    Parser.prototype.match = function (value) {\n\t        return this.lookahead.type === token_1.Token.Punctuator && this.lookahead.value === value;\n\t    };\n\t    // Return true if the next token matches the specified keyword\n\t    Parser.prototype.matchKeyword = function (keyword) {\n\t        return this.lookahead.type === token_1.Token.Keyword && this.lookahead.value === keyword;\n\t    };\n\t    // Return true if the next token matches the specified contextual keyword\n\t    // (where an identifier is sometimes a keyword depending on the context)\n\t    Parser.prototype.matchContextualKeyword = function (keyword) {\n\t        return this.lookahead.type === token_1.Token.Identifier && this.lookahead.value === keyword;\n\t    };\n\t    // Return true if the next token is an assignment operator\n\t    Parser.prototype.matchAssign = function () {\n\t        if (this.lookahead.type !== token_1.Token.Punctuator) {\n\t            return false;\n\t        }\n\t        var op = this.lookahead.value;\n\t        return op === '=' ||\n\t            op === '*=' ||\n\t            op === '**=' ||\n\t            op === '/=' ||\n\t            op === '%=' ||\n\t            op === '+=' ||\n\t            op === '-=' ||\n\t            op === '<<=' ||\n\t            op === '>>=' ||\n\t            op === '>>>=' ||\n\t            op === '&=' ||\n\t            op === '^=' ||\n\t            op === '|=';\n\t    };\n\t    // Cover grammar support.\n\t    //\n\t    // When an assignment expression position starts with an left parenthesis, the determination of the type\n\t    // of the syntax is to be deferred arbitrarily long until the end of the parentheses pair (plus a lookahead)\n\t    // or the first comma. This situation also defers the determination of all the expressions nested in the pair.\n\t    //\n\t    // There are three productions that can be parsed in a parentheses pair that needs to be determined\n\t    // after the outermost pair is closed. They are:\n\t    //\n\t    //   1. AssignmentExpression\n\t    //   2. BindingElements\n\t    //   3. AssignmentTargets\n\t    //\n\t    // In order to avoid exponential backtracking, we use two flags to denote if the production can be\n\t    // binding element or assignment target.\n\t    //\n\t    // The three productions have the relationship:\n\t    //\n\t    //   BindingElements ⊆ AssignmentTargets ⊆ AssignmentExpression\n\t    //\n\t    // with a single exception that CoverInitializedName when used directly in an Expression, generates\n\t    // an early error. Therefore, we need the third state, firstCoverInitializedNameError, to track the\n\t    // first usage of CoverInitializedName and report it when we reached the end of the parentheses pair.\n\t    //\n\t    // isolateCoverGrammar function runs the given parser function with a new cover grammar context, and it does not\n\t    // effect the current flags. This means the production the parser parses is only used as an expression. Therefore\n\t    // the CoverInitializedName check is conducted.\n\t    //\n\t    // inheritCoverGrammar function runs the given parse function with a new cover grammar context, and it propagates\n\t    // the flags outside of the parser. This means the production the parser parses is used as a part of a potential\n\t    // pattern. The CoverInitializedName check is deferred.\n\t    Parser.prototype.isolateCoverGrammar = function (parseFunction) {\n\t        var previousIsBindingElement = this.context.isBindingElement;\n\t        var previousIsAssignmentTarget = this.context.isAssignmentTarget;\n\t        var previousFirstCoverInitializedNameError = this.context.firstCoverInitializedNameError;\n\t        this.context.isBindingElement = true;\n\t        this.context.isAssignmentTarget = true;\n\t        this.context.firstCoverInitializedNameError = null;\n\t        var result = parseFunction.call(this);\n\t        if (this.context.firstCoverInitializedNameError !== null) {\n\t            this.throwUnexpectedToken(this.context.firstCoverInitializedNameError);\n\t        }\n\t        this.context.isBindingElement = previousIsBindingElement;\n\t        this.context.isAssignmentTarget = previousIsAssignmentTarget;\n\t        this.context.firstCoverInitializedNameError = previousFirstCoverInitializedNameError;\n\t        return result;\n\t    };\n\t    Parser.prototype.inheritCoverGrammar = function (parseFunction) {\n\t        var previousIsBindingElement = this.context.isBindingElement;\n\t        var previousIsAssignmentTarget = this.context.isAssignmentTarget;\n\t        var previousFirstCoverInitializedNameError = this.context.firstCoverInitializedNameError;\n\t        this.context.isBindingElement = true;\n\t        this.context.isAssignmentTarget = true;\n\t        this.context.firstCoverInitializedNameError = null;\n\t        var result = parseFunction.call(this);\n\t        this.context.isBindingElement = this.context.isBindingElement && previousIsBindingElement;\n\t        this.context.isAssignmentTarget = this.context.isAssignmentTarget && previousIsAssignmentTarget;\n\t        this.context.firstCoverInitializedNameError = previousFirstCoverInitializedNameError || this.context.firstCoverInitializedNameError;\n\t        return result;\n\t    };\n\t    Parser.prototype.consumeSemicolon = function () {\n\t        if (this.match(';')) {\n\t            this.nextToken();\n\t        }\n\t        else if (!this.hasLineTerminator) {\n\t            if (this.lookahead.type !== token_1.Token.EOF && !this.match('}')) {\n\t                this.throwUnexpectedToken(this.lookahead);\n\t            }\n\t            this.lastMarker.index = this.startMarker.index;\n\t            this.lastMarker.lineNumber = this.startMarker.lineNumber;\n\t            this.lastMarker.lineStart = this.startMarker.lineStart;\n\t        }\n\t    };\n\t    // ECMA-262 12.2 Primary Expressions\n\t    Parser.prototype.parsePrimaryExpression = function () {\n\t        var node = this.createNode();\n\t        var expr;\n\t        var value, token, raw;\n\t        switch (this.lookahead.type) {\n\t            case token_1.Token.Identifier:\n\t                if (this.sourceType === 'module' && this.lookahead.value === 'await') {\n\t                    this.tolerateUnexpectedToken(this.lookahead);\n\t                }\n\t                expr = this.finalize(node, new Node.Identifier(this.nextToken().value));\n\t                break;\n\t            case token_1.Token.NumericLiteral:\n\t            case token_1.Token.StringLiteral:\n\t                if (this.context.strict && this.lookahead.octal) {\n\t                    this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.StrictOctalLiteral);\n\t                }\n\t                this.context.isAssignmentTarget = false;\n\t                this.context.isBindingElement = false;\n\t                token = this.nextToken();\n\t                raw = this.getTokenRaw(token);\n\t                expr = this.finalize(node, new Node.Literal(token.value, raw));\n\t                break;\n\t            case token_1.Token.BooleanLiteral:\n\t                this.context.isAssignmentTarget = false;\n\t                this.context.isBindingElement = false;\n\t                token = this.nextToken();\n\t                token.value = (token.value === 'true');\n\t                raw = this.getTokenRaw(token);\n\t                expr = this.finalize(node, new Node.Literal(token.value, raw));\n\t                break;\n\t            case token_1.Token.NullLiteral:\n\t                this.context.isAssignmentTarget = false;\n\t                this.context.isBindingElement = false;\n\t                token = this.nextToken();\n\t                token.value = null;\n\t                raw = this.getTokenRaw(token);\n\t                expr = this.finalize(node, new Node.Literal(token.value, raw));\n\t                break;\n\t            case token_1.Token.Template:\n\t                expr = this.parseTemplateLiteral();\n\t                break;\n\t            case token_1.Token.Punctuator:\n\t                value = this.lookahead.value;\n\t                switch (value) {\n\t                    case '(':\n\t                        this.context.isBindingElement = false;\n\t                        expr = this.inheritCoverGrammar(this.parseGroupExpression);\n\t                        break;\n\t                    case '[':\n\t                        expr = this.inheritCoverGrammar(this.parseArrayInitializer);\n\t                        break;\n\t                    case '{':\n\t                        expr = this.inheritCoverGrammar(this.parseObjectInitializer);\n\t                        break;\n\t                    case '/':\n\t                    case '/=':\n\t                        this.context.isAssignmentTarget = false;\n\t                        this.context.isBindingElement = false;\n\t                        this.scanner.index = this.startMarker.index;\n\t                        token = this.nextRegexToken();\n\t                        raw = this.getTokenRaw(token);\n\t                        expr = this.finalize(node, new Node.RegexLiteral(token.value, raw, token.regex));\n\t                        break;\n\t                    default:\n\t                        this.throwUnexpectedToken(this.nextToken());\n\t                }\n\t                break;\n\t            case token_1.Token.Keyword:\n\t                if (!this.context.strict && this.context.allowYield && this.matchKeyword('yield')) {\n\t                    expr = this.parseIdentifierName();\n\t                }\n\t                else if (!this.context.strict && this.matchKeyword('let')) {\n\t                    expr = this.finalize(node, new Node.Identifier(this.nextToken().value));\n\t                }\n\t                else {\n\t                    this.context.isAssignmentTarget = false;\n\t                    this.context.isBindingElement = false;\n\t                    if (this.matchKeyword('function')) {\n\t                        expr = this.parseFunctionExpression();\n\t                    }\n\t                    else if (this.matchKeyword('this')) {\n\t                        this.nextToken();\n\t                        expr = this.finalize(node, new Node.ThisExpression());\n\t                    }\n\t                    else if (this.matchKeyword('class')) {\n\t                        expr = this.parseClassExpression();\n\t                    }\n\t                    else {\n\t                        this.throwUnexpectedToken(this.nextToken());\n\t                    }\n\t                }\n\t                break;\n\t            default:\n\t                this.throwUnexpectedToken(this.nextToken());\n\t        }\n\t        return expr;\n\t    };\n\t    // ECMA-262 12.2.5 Array Initializer\n\t    Parser.prototype.parseSpreadElement = function () {\n\t        var node = this.createNode();\n\t        this.expect('...');\n\t        var arg = this.inheritCoverGrammar(this.parseAssignmentExpression);\n\t        return this.finalize(node, new Node.SpreadElement(arg));\n\t    };\n\t    Parser.prototype.parseArrayInitializer = function () {\n\t        var node = this.createNode();\n\t        var elements = [];\n\t        this.expect('[');\n\t        while (!this.match(']')) {\n\t            if (this.match(',')) {\n\t                this.nextToken();\n\t                elements.push(null);\n\t            }\n\t            else if (this.match('...')) {\n\t                var element = this.parseSpreadElement();\n\t                if (!this.match(']')) {\n\t                    this.context.isAssignmentTarget = false;\n\t                    this.context.isBindingElement = false;\n\t                    this.expect(',');\n\t                }\n\t                elements.push(element);\n\t            }\n\t            else {\n\t                elements.push(this.inheritCoverGrammar(this.parseAssignmentExpression));\n\t                if (!this.match(']')) {\n\t                    this.expect(',');\n\t                }\n\t            }\n\t        }\n\t        this.expect(']');\n\t        return this.finalize(node, new Node.ArrayExpression(elements));\n\t    };\n\t    // ECMA-262 12.2.6 Object Initializer\n\t    Parser.prototype.parsePropertyMethod = function (params) {\n\t        this.context.isAssignmentTarget = false;\n\t        this.context.isBindingElement = false;\n\t        var previousStrict = this.context.strict;\n\t        var body = this.isolateCoverGrammar(this.parseFunctionSourceElements);\n\t        if (this.context.strict && params.firstRestricted) {\n\t            this.tolerateUnexpectedToken(params.firstRestricted, params.message);\n\t        }\n\t        if (this.context.strict && params.stricted) {\n\t            this.tolerateUnexpectedToken(params.stricted, params.message);\n\t        }\n\t        this.context.strict = previousStrict;\n\t        return body;\n\t    };\n\t    Parser.prototype.parsePropertyMethodFunction = function () {\n\t        var isGenerator = false;\n\t        var node = this.createNode();\n\t        var previousAllowYield = this.context.allowYield;\n\t        this.context.allowYield = false;\n\t        var params = this.parseFormalParameters();\n\t        var method = this.parsePropertyMethod(params);\n\t        this.context.allowYield = previousAllowYield;\n\t        return this.finalize(node, new Node.FunctionExpression(null, params.params, method, isGenerator));\n\t    };\n\t    Parser.prototype.parseObjectPropertyKey = function () {\n\t        var node = this.createNode();\n\t        var token = this.nextToken();\n\t        var key = null;\n\t        switch (token.type) {\n\t            case token_1.Token.StringLiteral:\n\t            case token_1.Token.NumericLiteral:\n\t                if (this.context.strict && token.octal) {\n\t                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictOctalLiteral);\n\t                }\n\t                var raw = this.getTokenRaw(token);\n\t                key = this.finalize(node, new Node.Literal(token.value, raw));\n\t                break;\n\t            case token_1.Token.Identifier:\n\t            case token_1.Token.BooleanLiteral:\n\t            case token_1.Token.NullLiteral:\n\t            case token_1.Token.Keyword:\n\t                key = this.finalize(node, new Node.Identifier(token.value));\n\t                break;\n\t            case token_1.Token.Punctuator:\n\t                if (token.value === '[') {\n\t                    key = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t                    this.expect(']');\n\t                }\n\t                else {\n\t                    this.throwUnexpectedToken(token);\n\t                }\n\t                break;\n\t            default:\n\t                this.throwUnexpectedToken(token);\n\t        }\n\t        return key;\n\t    };\n\t    Parser.prototype.isPropertyKey = function (key, value) {\n\t        return (key.type === syntax_1.Syntax.Identifier && key.name === value) ||\n\t            (key.type === syntax_1.Syntax.Literal && key.value === value);\n\t    };\n\t    Parser.prototype.parseObjectProperty = function (hasProto) {\n\t        var node = this.createNode();\n\t        var token = this.lookahead;\n\t        var kind;\n\t        var key;\n\t        var value;\n\t        var computed = false;\n\t        var method = false;\n\t        var shorthand = false;\n\t        if (token.type === token_1.Token.Identifier) {\n\t            this.nextToken();\n\t            key = this.finalize(node, new Node.Identifier(token.value));\n\t        }\n\t        else if (this.match('*')) {\n\t            this.nextToken();\n\t        }\n\t        else {\n\t            computed = this.match('[');\n\t            key = this.parseObjectPropertyKey();\n\t        }\n\t        var lookaheadPropertyKey = this.qualifiedPropertyName(this.lookahead);\n\t        if (token.type === token_1.Token.Identifier && token.value === 'get' && lookaheadPropertyKey) {\n\t            kind = 'get';\n\t            computed = this.match('[');\n\t            key = this.parseObjectPropertyKey();\n\t            this.context.allowYield = false;\n\t            value = this.parseGetterMethod();\n\t        }\n\t        else if (token.type === token_1.Token.Identifier && token.value === 'set' && lookaheadPropertyKey) {\n\t            kind = 'set';\n\t            computed = this.match('[');\n\t            key = this.parseObjectPropertyKey();\n\t            value = this.parseSetterMethod();\n\t        }\n\t        else if (token.type === token_1.Token.Punctuator && token.value === '*' && lookaheadPropertyKey) {\n\t            kind = 'init';\n\t            computed = this.match('[');\n\t            key = this.parseObjectPropertyKey();\n\t            value = this.parseGeneratorMethod();\n\t            method = true;\n\t        }\n\t        else {\n\t            if (!key) {\n\t                this.throwUnexpectedToken(this.lookahead);\n\t            }\n\t            kind = 'init';\n\t            if (this.match(':')) {\n\t                if (!computed && this.isPropertyKey(key, '__proto__')) {\n\t                    if (hasProto.value) {\n\t                        this.tolerateError(messages_1.Messages.DuplicateProtoProperty);\n\t                    }\n\t                    hasProto.value = true;\n\t                }\n\t                this.nextToken();\n\t                value = this.inheritCoverGrammar(this.parseAssignmentExpression);\n\t            }\n\t            else if (this.match('(')) {\n\t                value = this.parsePropertyMethodFunction();\n\t                method = true;\n\t            }\n\t            else if (token.type === token_1.Token.Identifier) {\n\t                var id = this.finalize(node, new Node.Identifier(token.value));\n\t                if (this.match('=')) {\n\t                    this.context.firstCoverInitializedNameError = this.lookahead;\n\t                    this.nextToken();\n\t                    shorthand = true;\n\t                    var init = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t                    value = this.finalize(node, new Node.AssignmentPattern(id, init));\n\t                }\n\t                else {\n\t                    shorthand = true;\n\t                    value = id;\n\t                }\n\t            }\n\t            else {\n\t                this.throwUnexpectedToken(this.nextToken());\n\t            }\n\t        }\n\t        return this.finalize(node, new Node.Property(kind, key, computed, value, method, shorthand));\n\t    };\n\t    Parser.prototype.parseObjectInitializer = function () {\n\t        var node = this.createNode();\n\t        this.expect('{');\n\t        var properties = [];\n\t        var hasProto = { value: false };\n\t        while (!this.match('}')) {\n\t            properties.push(this.parseObjectProperty(hasProto));\n\t            if (!this.match('}')) {\n\t                this.expectCommaSeparator();\n\t            }\n\t        }\n\t        this.expect('}');\n\t        return this.finalize(node, new Node.ObjectExpression(properties));\n\t    };\n\t    // ECMA-262 12.2.9 Template Literals\n\t    Parser.prototype.parseTemplateHead = function () {\n\t        assert_1.assert(this.lookahead.head, 'Template literal must start with a template head');\n\t        var node = this.createNode();\n\t        var token = this.nextToken();\n\t        var value = {\n\t            raw: token.value.raw,\n\t            cooked: token.value.cooked\n\t        };\n\t        return this.finalize(node, new Node.TemplateElement(value, token.tail));\n\t    };\n\t    Parser.prototype.parseTemplateElement = function () {\n\t        if (this.lookahead.type !== token_1.Token.Template) {\n\t            this.throwUnexpectedToken();\n\t        }\n\t        var node = this.createNode();\n\t        var token = this.nextToken();\n\t        var value = {\n\t            raw: token.value.raw,\n\t            cooked: token.value.cooked\n\t        };\n\t        return this.finalize(node, new Node.TemplateElement(value, token.tail));\n\t    };\n\t    Parser.prototype.parseTemplateLiteral = function () {\n\t        var node = this.createNode();\n\t        var expressions = [];\n\t        var quasis = [];\n\t        var quasi = this.parseTemplateHead();\n\t        quasis.push(quasi);\n\t        while (!quasi.tail) {\n\t            expressions.push(this.parseExpression());\n\t            quasi = this.parseTemplateElement();\n\t            quasis.push(quasi);\n\t        }\n\t        return this.finalize(node, new Node.TemplateLiteral(quasis, expressions));\n\t    };\n\t    // ECMA-262 12.2.10 The Grouping Operator\n\t    Parser.prototype.reinterpretExpressionAsPattern = function (expr) {\n\t        switch (expr.type) {\n\t            case syntax_1.Syntax.Identifier:\n\t            case syntax_1.Syntax.MemberExpression:\n\t            case syntax_1.Syntax.RestElement:\n\t            case syntax_1.Syntax.AssignmentPattern:\n\t                break;\n\t            case syntax_1.Syntax.SpreadElement:\n\t                expr.type = syntax_1.Syntax.RestElement;\n\t                this.reinterpretExpressionAsPattern(expr.argument);\n\t                break;\n\t            case syntax_1.Syntax.ArrayExpression:\n\t                expr.type = syntax_1.Syntax.ArrayPattern;\n\t                for (var i = 0; i < expr.elements.length; i++) {\n\t                    if (expr.elements[i] !== null) {\n\t                        this.reinterpretExpressionAsPattern(expr.elements[i]);\n\t                    }\n\t                }\n\t                break;\n\t            case syntax_1.Syntax.ObjectExpression:\n\t                expr.type = syntax_1.Syntax.ObjectPattern;\n\t                for (var i = 0; i < expr.properties.length; i++) {\n\t                    this.reinterpretExpressionAsPattern(expr.properties[i].value);\n\t                }\n\t                break;\n\t            case syntax_1.Syntax.AssignmentExpression:\n\t                expr.type = syntax_1.Syntax.AssignmentPattern;\n\t                delete expr.operator;\n\t                this.reinterpretExpressionAsPattern(expr.left);\n\t                break;\n\t            default:\n\t                // Allow other node type for tolerant parsing.\n\t                break;\n\t        }\n\t    };\n\t    Parser.prototype.parseGroupExpression = function () {\n\t        var expr;\n\t        this.expect('(');\n\t        if (this.match(')')) {\n\t            this.nextToken();\n\t            if (!this.match('=>')) {\n\t                this.expect('=>');\n\t            }\n\t            expr = {\n\t                type: ArrowParameterPlaceHolder,\n\t                params: []\n\t            };\n\t        }\n\t        else {\n\t            var startToken = this.lookahead;\n\t            var params = [];\n\t            if (this.match('...')) {\n\t                expr = this.parseRestElement(params);\n\t                this.expect(')');\n\t                if (!this.match('=>')) {\n\t                    this.expect('=>');\n\t                }\n\t                expr = {\n\t                    type: ArrowParameterPlaceHolder,\n\t                    params: [expr]\n\t                };\n\t            }\n\t            else {\n\t                var arrow = false;\n\t                this.context.isBindingElement = true;\n\t                expr = this.inheritCoverGrammar(this.parseAssignmentExpression);\n\t                if (this.match(',')) {\n\t                    var expressions = [];\n\t                    this.context.isAssignmentTarget = false;\n\t                    expressions.push(expr);\n\t                    while (this.startMarker.index < this.scanner.length) {\n\t                        if (!this.match(',')) {\n\t                            break;\n\t                        }\n\t                        this.nextToken();\n\t                        if (this.match('...')) {\n\t                            if (!this.context.isBindingElement) {\n\t                                this.throwUnexpectedToken(this.lookahead);\n\t                            }\n\t                            expressions.push(this.parseRestElement(params));\n\t                            this.expect(')');\n\t                            if (!this.match('=>')) {\n\t                                this.expect('=>');\n\t                            }\n\t                            this.context.isBindingElement = false;\n\t                            for (var i = 0; i < expressions.length; i++) {\n\t                                this.reinterpretExpressionAsPattern(expressions[i]);\n\t                            }\n\t                            arrow = true;\n\t                            expr = {\n\t                                type: ArrowParameterPlaceHolder,\n\t                                params: expressions\n\t                            };\n\t                        }\n\t                        else {\n\t                            expressions.push(this.inheritCoverGrammar(this.parseAssignmentExpression));\n\t                        }\n\t                        if (arrow) {\n\t                            break;\n\t                        }\n\t                    }\n\t                    if (!arrow) {\n\t                        expr = this.finalize(this.startNode(startToken), new Node.SequenceExpression(expressions));\n\t                    }\n\t                }\n\t                if (!arrow) {\n\t                    this.expect(')');\n\t                    if (this.match('=>')) {\n\t                        if (expr.type === syntax_1.Syntax.Identifier && expr.name === 'yield') {\n\t                            arrow = true;\n\t                            expr = {\n\t                                type: ArrowParameterPlaceHolder,\n\t                                params: [expr]\n\t                            };\n\t                        }\n\t                        if (!arrow) {\n\t                            if (!this.context.isBindingElement) {\n\t                                this.throwUnexpectedToken(this.lookahead);\n\t                            }\n\t                            if (expr.type === syntax_1.Syntax.SequenceExpression) {\n\t                                for (var i = 0; i < expr.expressions.length; i++) {\n\t                                    this.reinterpretExpressionAsPattern(expr.expressions[i]);\n\t                                }\n\t                            }\n\t                            else {\n\t                                this.reinterpretExpressionAsPattern(expr);\n\t                            }\n\t                            var params_1 = (expr.type === syntax_1.Syntax.SequenceExpression ? expr.expressions : [expr]);\n\t                            expr = {\n\t                                type: ArrowParameterPlaceHolder,\n\t                                params: params_1\n\t                            };\n\t                        }\n\t                    }\n\t                    this.context.isBindingElement = false;\n\t                }\n\t            }\n\t        }\n\t        return expr;\n\t    };\n\t    // ECMA-262 12.3 Left-Hand-Side Expressions\n\t    Parser.prototype.parseArguments = function () {\n\t        this.expect('(');\n\t        var args = [];\n\t        if (!this.match(')')) {\n\t            while (true) {\n\t                var expr = this.match('...') ? this.parseSpreadElement() :\n\t                    this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t                args.push(expr);\n\t                if (this.match(')')) {\n\t                    break;\n\t                }\n\t                this.expectCommaSeparator();\n\t            }\n\t        }\n\t        this.expect(')');\n\t        return args;\n\t    };\n\t    Parser.prototype.isIdentifierName = function (token) {\n\t        return token.type === token_1.Token.Identifier ||\n\t            token.type === token_1.Token.Keyword ||\n\t            token.type === token_1.Token.BooleanLiteral ||\n\t            token.type === token_1.Token.NullLiteral;\n\t    };\n\t    Parser.prototype.parseIdentifierName = function () {\n\t        var node = this.createNode();\n\t        var token = this.nextToken();\n\t        if (!this.isIdentifierName(token)) {\n\t            this.throwUnexpectedToken(token);\n\t        }\n\t        return this.finalize(node, new Node.Identifier(token.value));\n\t    };\n\t    Parser.prototype.parseNewExpression = function () {\n\t        var node = this.createNode();\n\t        var id = this.parseIdentifierName();\n\t        assert_1.assert(id.name === 'new', 'New expression must start with `new`');\n\t        var expr;\n\t        if (this.match('.')) {\n\t            this.nextToken();\n\t            if (this.lookahead.type === token_1.Token.Identifier && this.context.inFunctionBody && this.lookahead.value === 'target') {\n\t                var property = this.parseIdentifierName();\n\t                expr = new Node.MetaProperty(id, property);\n\t            }\n\t            else {\n\t                this.throwUnexpectedToken(this.lookahead);\n\t            }\n\t        }\n\t        else {\n\t            var callee = this.isolateCoverGrammar(this.parseLeftHandSideExpression);\n\t            var args = this.match('(') ? this.parseArguments() : [];\n\t            expr = new Node.NewExpression(callee, args);\n\t            this.context.isAssignmentTarget = false;\n\t            this.context.isBindingElement = false;\n\t        }\n\t        return this.finalize(node, expr);\n\t    };\n\t    Parser.prototype.parseLeftHandSideExpressionAllowCall = function () {\n\t        var startToken = this.lookahead;\n\t        var previousAllowIn = this.context.allowIn;\n\t        this.context.allowIn = true;\n\t        var expr;\n\t        if (this.matchKeyword('super') && this.context.inFunctionBody) {\n\t            expr = this.createNode();\n\t            this.nextToken();\n\t            expr = this.finalize(expr, new Node.Super());\n\t            if (!this.match('(') && !this.match('.') && !this.match('[')) {\n\t                this.throwUnexpectedToken(this.lookahead);\n\t            }\n\t        }\n\t        else {\n\t            expr = this.inheritCoverGrammar(this.matchKeyword('new') ? this.parseNewExpression : this.parsePrimaryExpression);\n\t        }\n\t        while (true) {\n\t            if (this.match('.')) {\n\t                this.context.isBindingElement = false;\n\t                this.context.isAssignmentTarget = true;\n\t                this.expect('.');\n\t                var property = this.parseIdentifierName();\n\t                expr = this.finalize(this.startNode(startToken), new Node.StaticMemberExpression(expr, property));\n\t            }\n\t            else if (this.match('(')) {\n\t                this.context.isBindingElement = false;\n\t                this.context.isAssignmentTarget = false;\n\t                var args = this.parseArguments();\n\t                expr = this.finalize(this.startNode(startToken), new Node.CallExpression(expr, args));\n\t            }\n\t            else if (this.match('[')) {\n\t                this.context.isBindingElement = false;\n\t                this.context.isAssignmentTarget = true;\n\t                this.expect('[');\n\t                var property = this.isolateCoverGrammar(this.parseExpression);\n\t                this.expect(']');\n\t                expr = this.finalize(this.startNode(startToken), new Node.ComputedMemberExpression(expr, property));\n\t            }\n\t            else if (this.lookahead.type === token_1.Token.Template && this.lookahead.head) {\n\t                var quasi = this.parseTemplateLiteral();\n\t                expr = this.finalize(this.startNode(startToken), new Node.TaggedTemplateExpression(expr, quasi));\n\t            }\n\t            else {\n\t                break;\n\t            }\n\t        }\n\t        this.context.allowIn = previousAllowIn;\n\t        return expr;\n\t    };\n\t    Parser.prototype.parseSuper = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('super');\n\t        if (!this.match('[') && !this.match('.')) {\n\t            this.throwUnexpectedToken(this.lookahead);\n\t        }\n\t        return this.finalize(node, new Node.Super());\n\t    };\n\t    Parser.prototype.parseLeftHandSideExpression = function () {\n\t        assert_1.assert(this.context.allowIn, 'callee of new expression always allow in keyword.');\n\t        var node = this.startNode(this.lookahead);\n\t        var expr = (this.matchKeyword('super') && this.context.inFunctionBody) ? this.parseSuper() :\n\t            this.inheritCoverGrammar(this.matchKeyword('new') ? this.parseNewExpression : this.parsePrimaryExpression);\n\t        while (true) {\n\t            if (this.match('[')) {\n\t                this.context.isBindingElement = false;\n\t                this.context.isAssignmentTarget = true;\n\t                this.expect('[');\n\t                var property = this.isolateCoverGrammar(this.parseExpression);\n\t                this.expect(']');\n\t                expr = this.finalize(node, new Node.ComputedMemberExpression(expr, property));\n\t            }\n\t            else if (this.match('.')) {\n\t                this.context.isBindingElement = false;\n\t                this.context.isAssignmentTarget = true;\n\t                this.expect('.');\n\t                var property = this.parseIdentifierName();\n\t                expr = this.finalize(node, new Node.StaticMemberExpression(expr, property));\n\t            }\n\t            else if (this.lookahead.type === token_1.Token.Template && this.lookahead.head) {\n\t                var quasi = this.parseTemplateLiteral();\n\t                expr = this.finalize(node, new Node.TaggedTemplateExpression(expr, quasi));\n\t            }\n\t            else {\n\t                break;\n\t            }\n\t        }\n\t        return expr;\n\t    };\n\t    // ECMA-262 12.4 Update Expressions\n\t    Parser.prototype.parseUpdateExpression = function () {\n\t        var expr;\n\t        var startToken = this.lookahead;\n\t        if (this.match('++') || this.match('--')) {\n\t            var node = this.startNode(startToken);\n\t            var token = this.nextToken();\n\t            expr = this.inheritCoverGrammar(this.parseUnaryExpression);\n\t            if (this.context.strict && expr.type === syntax_1.Syntax.Identifier && this.scanner.isRestrictedWord(expr.name)) {\n\t                this.tolerateError(messages_1.Messages.StrictLHSPrefix);\n\t            }\n\t            if (!this.context.isAssignmentTarget) {\n\t                this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);\n\t            }\n\t            var prefix = true;\n\t            expr = this.finalize(node, new Node.UpdateExpression(token.value, expr, prefix));\n\t            this.context.isAssignmentTarget = false;\n\t            this.context.isBindingElement = false;\n\t        }\n\t        else {\n\t            expr = this.inheritCoverGrammar(this.parseLeftHandSideExpressionAllowCall);\n\t            if (!this.hasLineTerminator && this.lookahead.type === token_1.Token.Punctuator) {\n\t                if (this.match('++') || this.match('--')) {\n\t                    if (this.context.strict && expr.type === syntax_1.Syntax.Identifier && this.scanner.isRestrictedWord(expr.name)) {\n\t                        this.tolerateError(messages_1.Messages.StrictLHSPostfix);\n\t                    }\n\t                    if (!this.context.isAssignmentTarget) {\n\t                        this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);\n\t                    }\n\t                    this.context.isAssignmentTarget = false;\n\t                    this.context.isBindingElement = false;\n\t                    var operator = this.nextToken().value;\n\t                    var prefix = false;\n\t                    expr = this.finalize(this.startNode(startToken), new Node.UpdateExpression(operator, expr, prefix));\n\t                }\n\t            }\n\t        }\n\t        return expr;\n\t    };\n\t    // ECMA-262 12.5 Unary Operators\n\t    Parser.prototype.parseUnaryExpression = function () {\n\t        var expr;\n\t        if (this.match('+') || this.match('-') || this.match('~') || this.match('!') ||\n\t            this.matchKeyword('delete') || this.matchKeyword('void') || this.matchKeyword('typeof')) {\n\t            var node = this.startNode(this.lookahead);\n\t            var token = this.nextToken();\n\t            expr = this.inheritCoverGrammar(this.parseUnaryExpression);\n\t            expr = this.finalize(node, new Node.UnaryExpression(token.value, expr));\n\t            if (this.context.strict && expr.operator === 'delete' && expr.argument.type === syntax_1.Syntax.Identifier) {\n\t                this.tolerateError(messages_1.Messages.StrictDelete);\n\t            }\n\t            this.context.isAssignmentTarget = false;\n\t            this.context.isBindingElement = false;\n\t        }\n\t        else {\n\t            expr = this.parseUpdateExpression();\n\t        }\n\t        return expr;\n\t    };\n\t    Parser.prototype.parseExponentiationExpression = function () {\n\t        var startToken = this.lookahead;\n\t        var expr = this.inheritCoverGrammar(this.parseUnaryExpression);\n\t        if (expr.type !== syntax_1.Syntax.UnaryExpression && this.match('**')) {\n\t            this.nextToken();\n\t            this.context.isAssignmentTarget = false;\n\t            this.context.isBindingElement = false;\n\t            var left = expr;\n\t            var right = this.isolateCoverGrammar(this.parseExponentiationExpression);\n\t            expr = this.finalize(this.startNode(startToken), new Node.BinaryExpression('**', left, right));\n\t        }\n\t        return expr;\n\t    };\n\t    // ECMA-262 12.6 Exponentiation Operators\n\t    // ECMA-262 12.7 Multiplicative Operators\n\t    // ECMA-262 12.8 Additive Operators\n\t    // ECMA-262 12.9 Bitwise Shift Operators\n\t    // ECMA-262 12.10 Relational Operators\n\t    // ECMA-262 12.11 Equality Operators\n\t    // ECMA-262 12.12 Binary Bitwise Operators\n\t    // ECMA-262 12.13 Binary Logical Operators\n\t    Parser.prototype.binaryPrecedence = function (token) {\n\t        var op = token.value;\n\t        var precedence;\n\t        if (token.type === token_1.Token.Punctuator) {\n\t            precedence = this.operatorPrecedence[op] || 0;\n\t        }\n\t        else if (token.type === token_1.Token.Keyword) {\n\t            precedence = (op === 'instanceof' || (this.context.allowIn && op === 'in')) ? 7 : 0;\n\t        }\n\t        else {\n\t            precedence = 0;\n\t        }\n\t        return precedence;\n\t    };\n\t    Parser.prototype.parseBinaryExpression = function () {\n\t        var startToken = this.lookahead;\n\t        var expr = this.inheritCoverGrammar(this.parseExponentiationExpression);\n\t        var token = this.lookahead;\n\t        var prec = this.binaryPrecedence(token);\n\t        if (prec > 0) {\n\t            this.nextToken();\n\t            token.prec = prec;\n\t            this.context.isAssignmentTarget = false;\n\t            this.context.isBindingElement = false;\n\t            var markers = [startToken, this.lookahead];\n\t            var left = expr;\n\t            var right = this.isolateCoverGrammar(this.parseExponentiationExpression);\n\t            var stack = [left, token, right];\n\t            while (true) {\n\t                prec = this.binaryPrecedence(this.lookahead);\n\t                if (prec <= 0) {\n\t                    break;\n\t                }\n\t                // Reduce: make a binary expression from the three topmost entries.\n\t                while ((stack.length > 2) && (prec <= stack[stack.length - 2].prec)) {\n\t                    right = stack.pop();\n\t                    var operator = stack.pop().value;\n\t                    left = stack.pop();\n\t                    markers.pop();\n\t                    var node = this.startNode(markers[markers.length - 1]);\n\t                    stack.push(this.finalize(node, new Node.BinaryExpression(operator, left, right)));\n\t                }\n\t                // Shift.\n\t                token = this.nextToken();\n\t                token.prec = prec;\n\t                stack.push(token);\n\t                markers.push(this.lookahead);\n\t                stack.push(this.isolateCoverGrammar(this.parseExponentiationExpression));\n\t            }\n\t            // Final reduce to clean-up the stack.\n\t            var i = stack.length - 1;\n\t            expr = stack[i];\n\t            markers.pop();\n\t            while (i > 1) {\n\t                var node = this.startNode(markers.pop());\n\t                expr = this.finalize(node, new Node.BinaryExpression(stack[i - 1].value, stack[i - 2], expr));\n\t                i -= 2;\n\t            }\n\t        }\n\t        return expr;\n\t    };\n\t    // ECMA-262 12.14 Conditional Operator\n\t    Parser.prototype.parseConditionalExpression = function () {\n\t        var startToken = this.lookahead;\n\t        var expr = this.inheritCoverGrammar(this.parseBinaryExpression);\n\t        if (this.match('?')) {\n\t            this.nextToken();\n\t            var previousAllowIn = this.context.allowIn;\n\t            this.context.allowIn = true;\n\t            var consequent = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t            this.context.allowIn = previousAllowIn;\n\t            this.expect(':');\n\t            var alternate = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t            expr = this.finalize(this.startNode(startToken), new Node.ConditionalExpression(expr, consequent, alternate));\n\t            this.context.isAssignmentTarget = false;\n\t            this.context.isBindingElement = false;\n\t        }\n\t        return expr;\n\t    };\n\t    // ECMA-262 12.15 Assignment Operators\n\t    Parser.prototype.checkPatternParam = function (options, param) {\n\t        switch (param.type) {\n\t            case syntax_1.Syntax.Identifier:\n\t                this.validateParam(options, param, param.name);\n\t                break;\n\t            case syntax_1.Syntax.RestElement:\n\t                this.checkPatternParam(options, param.argument);\n\t                break;\n\t            case syntax_1.Syntax.AssignmentPattern:\n\t                this.checkPatternParam(options, param.left);\n\t                break;\n\t            case syntax_1.Syntax.ArrayPattern:\n\t                for (var i = 0; i < param.elements.length; i++) {\n\t                    if (param.elements[i] !== null) {\n\t                        this.checkPatternParam(options, param.elements[i]);\n\t                    }\n\t                }\n\t                break;\n\t            case syntax_1.Syntax.YieldExpression:\n\t                break;\n\t            default:\n\t                assert_1.assert(param.type === syntax_1.Syntax.ObjectPattern, 'Invalid type');\n\t                for (var i = 0; i < param.properties.length; i++) {\n\t                    this.checkPatternParam(options, param.properties[i].value);\n\t                }\n\t                break;\n\t        }\n\t    };\n\t    Parser.prototype.reinterpretAsCoverFormalsList = function (expr) {\n\t        var params = [expr];\n\t        var options;\n\t        switch (expr.type) {\n\t            case syntax_1.Syntax.Identifier:\n\t                break;\n\t            case ArrowParameterPlaceHolder:\n\t                params = expr.params;\n\t                break;\n\t            default:\n\t                return null;\n\t        }\n\t        options = {\n\t            paramSet: {}\n\t        };\n\t        for (var i = 0; i < params.length; ++i) {\n\t            var param = params[i];\n\t            if (param.type === syntax_1.Syntax.AssignmentPattern) {\n\t                if (param.right.type === syntax_1.Syntax.YieldExpression) {\n\t                    if (param.right.argument) {\n\t                        this.throwUnexpectedToken(this.lookahead);\n\t                    }\n\t                    param.right.type = syntax_1.Syntax.Identifier;\n\t                    param.right.name = 'yield';\n\t                    delete param.right.argument;\n\t                    delete param.right.delegate;\n\t                }\n\t            }\n\t            this.checkPatternParam(options, param);\n\t            params[i] = param;\n\t        }\n\t        if (this.context.strict || !this.context.allowYield) {\n\t            for (var i = 0; i < params.length; ++i) {\n\t                var param = params[i];\n\t                if (param.type === syntax_1.Syntax.YieldExpression) {\n\t                    this.throwUnexpectedToken(this.lookahead);\n\t                }\n\t            }\n\t        }\n\t        if (options.message === messages_1.Messages.StrictParamDupe) {\n\t            var token = this.context.strict ? options.stricted : options.firstRestricted;\n\t            this.throwUnexpectedToken(token, options.message);\n\t        }\n\t        return {\n\t            params: params,\n\t            stricted: options.stricted,\n\t            firstRestricted: options.firstRestricted,\n\t            message: options.message\n\t        };\n\t    };\n\t    Parser.prototype.parseAssignmentExpression = function () {\n\t        var expr;\n\t        if (!this.context.allowYield && this.matchKeyword('yield')) {\n\t            expr = this.parseYieldExpression();\n\t        }\n\t        else {\n\t            var startToken = this.lookahead;\n\t            var token = startToken;\n\t            expr = this.parseConditionalExpression();\n\t            if (expr.type === ArrowParameterPlaceHolder || this.match('=>')) {\n\t                // ECMA-262 14.2 Arrow Function Definitions\n\t                this.context.isAssignmentTarget = false;\n\t                this.context.isBindingElement = false;\n\t                var list = this.reinterpretAsCoverFormalsList(expr);\n\t                if (list) {\n\t                    if (this.hasLineTerminator) {\n\t                        this.tolerateUnexpectedToken(this.lookahead);\n\t                    }\n\t                    this.context.firstCoverInitializedNameError = null;\n\t                    var previousStrict = this.context.strict;\n\t                    var previousAllowYield = this.context.allowYield;\n\t                    this.context.allowYield = true;\n\t                    var node = this.startNode(startToken);\n\t                    this.expect('=>');\n\t                    var body = this.match('{') ? this.parseFunctionSourceElements() :\n\t                        this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t                    var expression = body.type !== syntax_1.Syntax.BlockStatement;\n\t                    if (this.context.strict && list.firstRestricted) {\n\t                        this.throwUnexpectedToken(list.firstRestricted, list.message);\n\t                    }\n\t                    if (this.context.strict && list.stricted) {\n\t                        this.tolerateUnexpectedToken(list.stricted, list.message);\n\t                    }\n\t                    expr = this.finalize(node, new Node.ArrowFunctionExpression(list.params, body, expression));\n\t                    this.context.strict = previousStrict;\n\t                    this.context.allowYield = previousAllowYield;\n\t                }\n\t            }\n\t            else {\n\t                if (this.matchAssign()) {\n\t                    if (!this.context.isAssignmentTarget) {\n\t                        this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);\n\t                    }\n\t                    if (this.context.strict && expr.type === syntax_1.Syntax.Identifier) {\n\t                        var id = (expr);\n\t                        if (this.scanner.isRestrictedWord(id.name)) {\n\t                            this.tolerateUnexpectedToken(token, messages_1.Messages.StrictLHSAssignment);\n\t                        }\n\t                        if (this.scanner.isStrictModeReservedWord(id.name)) {\n\t                            this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);\n\t                        }\n\t                    }\n\t                    if (!this.match('=')) {\n\t                        this.context.isAssignmentTarget = false;\n\t                        this.context.isBindingElement = false;\n\t                    }\n\t                    else {\n\t                        this.reinterpretExpressionAsPattern(expr);\n\t                    }\n\t                    token = this.nextToken();\n\t                    var right = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t                    expr = this.finalize(this.startNode(startToken), new Node.AssignmentExpression(token.value, expr, right));\n\t                    this.context.firstCoverInitializedNameError = null;\n\t                }\n\t            }\n\t        }\n\t        return expr;\n\t    };\n\t    // ECMA-262 12.16 Comma Operator\n\t    Parser.prototype.parseExpression = function () {\n\t        var startToken = this.lookahead;\n\t        var expr = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t        if (this.match(',')) {\n\t            var expressions = [];\n\t            expressions.push(expr);\n\t            while (this.startMarker.index < this.scanner.length) {\n\t                if (!this.match(',')) {\n\t                    break;\n\t                }\n\t                this.nextToken();\n\t                expressions.push(this.isolateCoverGrammar(this.parseAssignmentExpression));\n\t            }\n\t            expr = this.finalize(this.startNode(startToken), new Node.SequenceExpression(expressions));\n\t        }\n\t        return expr;\n\t    };\n\t    // ECMA-262 13.2 Block\n\t    Parser.prototype.parseStatementListItem = function () {\n\t        var statement = null;\n\t        this.context.isAssignmentTarget = true;\n\t        this.context.isBindingElement = true;\n\t        if (this.lookahead.type === token_1.Token.Keyword) {\n\t            switch (this.lookahead.value) {\n\t                case 'export':\n\t                    if (this.sourceType !== 'module') {\n\t                        this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.IllegalExportDeclaration);\n\t                    }\n\t                    statement = this.parseExportDeclaration();\n\t                    break;\n\t                case 'import':\n\t                    if (this.sourceType !== 'module') {\n\t                        this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.IllegalImportDeclaration);\n\t                    }\n\t                    statement = this.parseImportDeclaration();\n\t                    break;\n\t                case 'const':\n\t                    statement = this.parseLexicalDeclaration({ inFor: false });\n\t                    break;\n\t                case 'function':\n\t                    statement = this.parseFunctionDeclaration();\n\t                    break;\n\t                case 'class':\n\t                    statement = this.parseClassDeclaration();\n\t                    break;\n\t                case 'let':\n\t                    statement = this.isLexicalDeclaration() ? this.parseLexicalDeclaration({ inFor: false }) : this.parseStatement();\n\t                    break;\n\t                default:\n\t                    statement = this.parseStatement();\n\t                    break;\n\t            }\n\t        }\n\t        else {\n\t            statement = this.parseStatement();\n\t        }\n\t        return statement;\n\t    };\n\t    Parser.prototype.parseBlock = function () {\n\t        var node = this.createNode();\n\t        this.expect('{');\n\t        var block = [];\n\t        while (true) {\n\t            if (this.match('}')) {\n\t                break;\n\t            }\n\t            block.push(this.parseStatementListItem());\n\t        }\n\t        this.expect('}');\n\t        return this.finalize(node, new Node.BlockStatement(block));\n\t    };\n\t    // ECMA-262 13.3.1 Let and Const Declarations\n\t    Parser.prototype.parseLexicalBinding = function (kind, options) {\n\t        var node = this.createNode();\n\t        var params = [];\n\t        var id = this.parsePattern(params, kind);\n\t        // ECMA-262 12.2.1\n\t        if (this.context.strict && id.type === syntax_1.Syntax.Identifier) {\n\t            if (this.scanner.isRestrictedWord((id).name)) {\n\t                this.tolerateError(messages_1.Messages.StrictVarName);\n\t            }\n\t        }\n\t        var init = null;\n\t        if (kind === 'const') {\n\t            if (!this.matchKeyword('in') && !this.matchContextualKeyword('of')) {\n\t                this.expect('=');\n\t                init = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t            }\n\t        }\n\t        else if ((!options.inFor && id.type !== syntax_1.Syntax.Identifier) || this.match('=')) {\n\t            this.expect('=');\n\t            init = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t        }\n\t        return this.finalize(node, new Node.VariableDeclarator(id, init));\n\t    };\n\t    Parser.prototype.parseBindingList = function (kind, options) {\n\t        var list = [this.parseLexicalBinding(kind, options)];\n\t        while (this.match(',')) {\n\t            this.nextToken();\n\t            list.push(this.parseLexicalBinding(kind, options));\n\t        }\n\t        return list;\n\t    };\n\t    Parser.prototype.isLexicalDeclaration = function () {\n\t        var previousIndex = this.scanner.index;\n\t        var previousLineNumber = this.scanner.lineNumber;\n\t        var previousLineStart = this.scanner.lineStart;\n\t        this.collectComments();\n\t        var next = this.scanner.lex();\n\t        this.scanner.index = previousIndex;\n\t        this.scanner.lineNumber = previousLineNumber;\n\t        this.scanner.lineStart = previousLineStart;\n\t        return (next.type === token_1.Token.Identifier) ||\n\t            (next.type === token_1.Token.Punctuator && next.value === '[') ||\n\t            (next.type === token_1.Token.Punctuator && next.value === '{') ||\n\t            (next.type === token_1.Token.Keyword && next.value === 'let') ||\n\t            (next.type === token_1.Token.Keyword && next.value === 'yield');\n\t    };\n\t    Parser.prototype.parseLexicalDeclaration = function (options) {\n\t        var node = this.createNode();\n\t        var kind = this.nextToken().value;\n\t        assert_1.assert(kind === 'let' || kind === 'const', 'Lexical declaration must be either let or const');\n\t        var declarations = this.parseBindingList(kind, options);\n\t        this.consumeSemicolon();\n\t        return this.finalize(node, new Node.VariableDeclaration(declarations, kind));\n\t    };\n\t    // ECMA-262 13.3.3 Destructuring Binding Patterns\n\t    Parser.prototype.parseBindingRestElement = function (params, kind) {\n\t        var node = this.createNode();\n\t        this.expect('...');\n\t        var arg = this.parsePattern(params, kind);\n\t        return this.finalize(node, new Node.RestElement(arg));\n\t    };\n\t    Parser.prototype.parseArrayPattern = function (params, kind) {\n\t        var node = this.createNode();\n\t        this.expect('[');\n\t        var elements = [];\n\t        while (!this.match(']')) {\n\t            if (this.match(',')) {\n\t                this.nextToken();\n\t                elements.push(null);\n\t            }\n\t            else {\n\t                if (this.match('...')) {\n\t                    elements.push(this.parseBindingRestElement(params, kind));\n\t                    break;\n\t                }\n\t                else {\n\t                    elements.push(this.parsePatternWithDefault(params, kind));\n\t                }\n\t                if (!this.match(']')) {\n\t                    this.expect(',');\n\t                }\n\t            }\n\t        }\n\t        this.expect(']');\n\t        return this.finalize(node, new Node.ArrayPattern(elements));\n\t    };\n\t    Parser.prototype.parsePropertyPattern = function (params, kind) {\n\t        var node = this.createNode();\n\t        var computed = false;\n\t        var shorthand = false;\n\t        var method = false;\n\t        var key;\n\t        var value;\n\t        if (this.lookahead.type === token_1.Token.Identifier) {\n\t            var keyToken = this.lookahead;\n\t            key = this.parseVariableIdentifier();\n\t            var init = this.finalize(node, new Node.Identifier(keyToken.value));\n\t            if (this.match('=')) {\n\t                params.push(keyToken);\n\t                shorthand = true;\n\t                this.nextToken();\n\t                var expr = this.parseAssignmentExpression();\n\t                value = this.finalize(this.startNode(keyToken), new Node.AssignmentPattern(init, expr));\n\t            }\n\t            else if (!this.match(':')) {\n\t                params.push(keyToken);\n\t                shorthand = true;\n\t                value = init;\n\t            }\n\t            else {\n\t                this.expect(':');\n\t                value = this.parsePatternWithDefault(params, kind);\n\t            }\n\t        }\n\t        else {\n\t            computed = this.match('[');\n\t            key = this.parseObjectPropertyKey();\n\t            this.expect(':');\n\t            value = this.parsePatternWithDefault(params, kind);\n\t        }\n\t        return this.finalize(node, new Node.Property('init', key, computed, value, method, shorthand));\n\t    };\n\t    Parser.prototype.parseObjectPattern = function (params, kind) {\n\t        var node = this.createNode();\n\t        var properties = [];\n\t        this.expect('{');\n\t        while (!this.match('}')) {\n\t            properties.push(this.parsePropertyPattern(params, kind));\n\t            if (!this.match('}')) {\n\t                this.expect(',');\n\t            }\n\t        }\n\t        this.expect('}');\n\t        return this.finalize(node, new Node.ObjectPattern(properties));\n\t    };\n\t    Parser.prototype.parsePattern = function (params, kind) {\n\t        var pattern;\n\t        if (this.match('[')) {\n\t            pattern = this.parseArrayPattern(params, kind);\n\t        }\n\t        else if (this.match('{')) {\n\t            pattern = this.parseObjectPattern(params, kind);\n\t        }\n\t        else {\n\t            if (this.matchKeyword('let') && (kind === 'const' || kind === 'let')) {\n\t                this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.UnexpectedToken);\n\t            }\n\t            params.push(this.lookahead);\n\t            pattern = this.parseVariableIdentifier(kind);\n\t        }\n\t        return pattern;\n\t    };\n\t    Parser.prototype.parsePatternWithDefault = function (params, kind) {\n\t        var startToken = this.lookahead;\n\t        var pattern = this.parsePattern(params, kind);\n\t        if (this.match('=')) {\n\t            this.nextToken();\n\t            var previousAllowYield = this.context.allowYield;\n\t            this.context.allowYield = true;\n\t            var right = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t            this.context.allowYield = previousAllowYield;\n\t            pattern = this.finalize(this.startNode(startToken), new Node.AssignmentPattern(pattern, right));\n\t        }\n\t        return pattern;\n\t    };\n\t    // ECMA-262 13.3.2 Variable Statement\n\t    Parser.prototype.parseVariableIdentifier = function (kind) {\n\t        var node = this.createNode();\n\t        var token = this.nextToken();\n\t        if (token.type === token_1.Token.Keyword && token.value === 'yield') {\n\t            if (this.context.strict) {\n\t                this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);\n\t            }\n\t            if (!this.context.allowYield) {\n\t                this.throwUnexpectedToken(token);\n\t            }\n\t        }\n\t        else if (token.type !== token_1.Token.Identifier) {\n\t            if (this.context.strict && token.type === token_1.Token.Keyword && this.scanner.isStrictModeReservedWord(token.value)) {\n\t                this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);\n\t            }\n\t            else {\n\t                if (this.context.strict || token.value !== 'let' || kind !== 'var') {\n\t                    this.throwUnexpectedToken(token);\n\t                }\n\t            }\n\t        }\n\t        else if (this.sourceType === 'module' && token.type === token_1.Token.Identifier && token.value === 'await') {\n\t            this.tolerateUnexpectedToken(token);\n\t        }\n\t        return this.finalize(node, new Node.Identifier(token.value));\n\t    };\n\t    Parser.prototype.parseVariableDeclaration = function (options) {\n\t        var node = this.createNode();\n\t        var params = [];\n\t        var id = this.parsePattern(params, 'var');\n\t        // ECMA-262 12.2.1\n\t        if (this.context.strict && id.type === syntax_1.Syntax.Identifier) {\n\t            if (this.scanner.isRestrictedWord((id).name)) {\n\t                this.tolerateError(messages_1.Messages.StrictVarName);\n\t            }\n\t        }\n\t        var init = null;\n\t        if (this.match('=')) {\n\t            this.nextToken();\n\t            init = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t        }\n\t        else if (id.type !== syntax_1.Syntax.Identifier && !options.inFor) {\n\t            this.expect('=');\n\t        }\n\t        return this.finalize(node, new Node.VariableDeclarator(id, init));\n\t    };\n\t    Parser.prototype.parseVariableDeclarationList = function (options) {\n\t        var opt = { inFor: options.inFor };\n\t        var list = [];\n\t        list.push(this.parseVariableDeclaration(opt));\n\t        while (this.match(',')) {\n\t            this.nextToken();\n\t            list.push(this.parseVariableDeclaration(opt));\n\t        }\n\t        return list;\n\t    };\n\t    Parser.prototype.parseVariableStatement = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('var');\n\t        var declarations = this.parseVariableDeclarationList({ inFor: false });\n\t        this.consumeSemicolon();\n\t        return this.finalize(node, new Node.VariableDeclaration(declarations, 'var'));\n\t    };\n\t    // ECMA-262 13.4 Empty Statement\n\t    Parser.prototype.parseEmptyStatement = function () {\n\t        var node = this.createNode();\n\t        this.expect(';');\n\t        return this.finalize(node, new Node.EmptyStatement());\n\t    };\n\t    // ECMA-262 13.5 Expression Statement\n\t    Parser.prototype.parseExpressionStatement = function () {\n\t        var node = this.createNode();\n\t        var expr = this.parseExpression();\n\t        this.consumeSemicolon();\n\t        return this.finalize(node, new Node.ExpressionStatement(expr));\n\t    };\n\t    // ECMA-262 13.6 If statement\n\t    Parser.prototype.parseIfStatement = function () {\n\t        var node = this.createNode();\n\t        var consequent;\n\t        var alternate = null;\n\t        this.expectKeyword('if');\n\t        this.expect('(');\n\t        var test = this.parseExpression();\n\t        if (!this.match(')') && this.config.tolerant) {\n\t            this.tolerateUnexpectedToken(this.nextToken());\n\t            consequent = this.finalize(this.createNode(), new Node.EmptyStatement());\n\t        }\n\t        else {\n\t            this.expect(')');\n\t            consequent = this.parseStatement();\n\t            if (this.matchKeyword('else')) {\n\t                this.nextToken();\n\t                alternate = this.parseStatement();\n\t            }\n\t        }\n\t        return this.finalize(node, new Node.IfStatement(test, consequent, alternate));\n\t    };\n\t    // ECMA-262 13.7.2 The do-while Statement\n\t    Parser.prototype.parseDoWhileStatement = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('do');\n\t        var previousInIteration = this.context.inIteration;\n\t        this.context.inIteration = true;\n\t        var body = this.parseStatement();\n\t        this.context.inIteration = previousInIteration;\n\t        this.expectKeyword('while');\n\t        this.expect('(');\n\t        var test = this.parseExpression();\n\t        this.expect(')');\n\t        if (this.match(';')) {\n\t            this.nextToken();\n\t        }\n\t        return this.finalize(node, new Node.DoWhileStatement(body, test));\n\t    };\n\t    // ECMA-262 13.7.3 The while Statement\n\t    Parser.prototype.parseWhileStatement = function () {\n\t        var node = this.createNode();\n\t        var body;\n\t        this.expectKeyword('while');\n\t        this.expect('(');\n\t        var test = this.parseExpression();\n\t        if (!this.match(')') && this.config.tolerant) {\n\t            this.tolerateUnexpectedToken(this.nextToken());\n\t            body = this.finalize(this.createNode(), new Node.EmptyStatement());\n\t        }\n\t        else {\n\t            this.expect(')');\n\t            var previousInIteration = this.context.inIteration;\n\t            this.context.inIteration = true;\n\t            body = this.parseStatement();\n\t            this.context.inIteration = previousInIteration;\n\t        }\n\t        return this.finalize(node, new Node.WhileStatement(test, body));\n\t    };\n\t    // ECMA-262 13.7.4 The for Statement\n\t    // ECMA-262 13.7.5 The for-in and for-of Statements\n\t    Parser.prototype.parseForStatement = function () {\n\t        var init = null;\n\t        var test = null;\n\t        var update = null;\n\t        var forIn = true;\n\t        var left, right;\n\t        var node = this.createNode();\n\t        this.expectKeyword('for');\n\t        this.expect('(');\n\t        if (this.match(';')) {\n\t            this.nextToken();\n\t        }\n\t        else {\n\t            if (this.matchKeyword('var')) {\n\t                init = this.createNode();\n\t                this.nextToken();\n\t                var previousAllowIn = this.context.allowIn;\n\t                this.context.allowIn = false;\n\t                var declarations = this.parseVariableDeclarationList({ inFor: true });\n\t                this.context.allowIn = previousAllowIn;\n\t                if (declarations.length === 1 && this.matchKeyword('in')) {\n\t                    var decl = declarations[0];\n\t                    if (decl.init && (decl.id.type === syntax_1.Syntax.ArrayPattern || decl.id.type === syntax_1.Syntax.ObjectPattern || this.context.strict)) {\n\t                        this.tolerateError(messages_1.Messages.ForInOfLoopInitializer, 'for-in');\n\t                    }\n\t                    init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));\n\t                    this.nextToken();\n\t                    left = init;\n\t                    right = this.parseExpression();\n\t                    init = null;\n\t                }\n\t                else if (declarations.length === 1 && declarations[0].init === null && this.matchContextualKeyword('of')) {\n\t                    init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));\n\t                    this.nextToken();\n\t                    left = init;\n\t                    right = this.parseAssignmentExpression();\n\t                    init = null;\n\t                    forIn = false;\n\t                }\n\t                else {\n\t                    init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));\n\t                    this.expect(';');\n\t                }\n\t            }\n\t            else if (this.matchKeyword('const') || this.matchKeyword('let')) {\n\t                init = this.createNode();\n\t                var kind = this.nextToken().value;\n\t                if (!this.context.strict && this.lookahead.value === 'in') {\n\t                    init = this.finalize(init, new Node.Identifier(kind));\n\t                    this.nextToken();\n\t                    left = init;\n\t                    right = this.parseExpression();\n\t                    init = null;\n\t                }\n\t                else {\n\t                    var previousAllowIn = this.context.allowIn;\n\t                    this.context.allowIn = false;\n\t                    var declarations = this.parseBindingList(kind, { inFor: true });\n\t                    this.context.allowIn = previousAllowIn;\n\t                    if (declarations.length === 1 && declarations[0].init === null && this.matchKeyword('in')) {\n\t                        init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));\n\t                        this.nextToken();\n\t                        left = init;\n\t                        right = this.parseExpression();\n\t                        init = null;\n\t                    }\n\t                    else if (declarations.length === 1 && declarations[0].init === null && this.matchContextualKeyword('of')) {\n\t                        init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));\n\t                        this.nextToken();\n\t                        left = init;\n\t                        right = this.parseAssignmentExpression();\n\t                        init = null;\n\t                        forIn = false;\n\t                    }\n\t                    else {\n\t                        this.consumeSemicolon();\n\t                        init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));\n\t                    }\n\t                }\n\t            }\n\t            else {\n\t                var initStartToken = this.lookahead;\n\t                var previousAllowIn = this.context.allowIn;\n\t                this.context.allowIn = false;\n\t                init = this.inheritCoverGrammar(this.parseAssignmentExpression);\n\t                this.context.allowIn = previousAllowIn;\n\t                if (this.matchKeyword('in')) {\n\t                    if (!this.context.isAssignmentTarget || init.type === syntax_1.Syntax.AssignmentExpression) {\n\t                        this.tolerateError(messages_1.Messages.InvalidLHSInForIn);\n\t                    }\n\t                    this.nextToken();\n\t                    this.reinterpretExpressionAsPattern(init);\n\t                    left = init;\n\t                    right = this.parseExpression();\n\t                    init = null;\n\t                }\n\t                else if (this.matchContextualKeyword('of')) {\n\t                    if (!this.context.isAssignmentTarget || init.type === syntax_1.Syntax.AssignmentExpression) {\n\t                        this.tolerateError(messages_1.Messages.InvalidLHSInForLoop);\n\t                    }\n\t                    this.nextToken();\n\t                    this.reinterpretExpressionAsPattern(init);\n\t                    left = init;\n\t                    right = this.parseAssignmentExpression();\n\t                    init = null;\n\t                    forIn = false;\n\t                }\n\t                else {\n\t                    if (this.match(',')) {\n\t                        var initSeq = [init];\n\t                        while (this.match(',')) {\n\t                            this.nextToken();\n\t                            initSeq.push(this.isolateCoverGrammar(this.parseAssignmentExpression));\n\t                        }\n\t                        init = this.finalize(this.startNode(initStartToken), new Node.SequenceExpression(initSeq));\n\t                    }\n\t                    this.expect(';');\n\t                }\n\t            }\n\t        }\n\t        if (typeof left === 'undefined') {\n\t            if (!this.match(';')) {\n\t                test = this.parseExpression();\n\t            }\n\t            this.expect(';');\n\t            if (!this.match(')')) {\n\t                update = this.parseExpression();\n\t            }\n\t        }\n\t        var body;\n\t        if (!this.match(')') && this.config.tolerant) {\n\t            this.tolerateUnexpectedToken(this.nextToken());\n\t            body = this.finalize(this.createNode(), new Node.EmptyStatement());\n\t        }\n\t        else {\n\t            this.expect(')');\n\t            var previousInIteration = this.context.inIteration;\n\t            this.context.inIteration = true;\n\t            body = this.isolateCoverGrammar(this.parseStatement);\n\t            this.context.inIteration = previousInIteration;\n\t        }\n\t        return (typeof left === 'undefined') ?\n\t            this.finalize(node, new Node.ForStatement(init, test, update, body)) :\n\t            forIn ? this.finalize(node, new Node.ForInStatement(left, right, body)) :\n\t                this.finalize(node, new Node.ForOfStatement(left, right, body));\n\t    };\n\t    // ECMA-262 13.8 The continue statement\n\t    Parser.prototype.parseContinueStatement = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('continue');\n\t        var label = null;\n\t        if (this.lookahead.type === token_1.Token.Identifier && !this.hasLineTerminator) {\n\t            label = this.parseVariableIdentifier();\n\t            var key = '$' + label.name;\n\t            if (!Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {\n\t                this.throwError(messages_1.Messages.UnknownLabel, label.name);\n\t            }\n\t        }\n\t        this.consumeSemicolon();\n\t        if (label === null && !this.context.inIteration) {\n\t            this.throwError(messages_1.Messages.IllegalContinue);\n\t        }\n\t        return this.finalize(node, new Node.ContinueStatement(label));\n\t    };\n\t    // ECMA-262 13.9 The break statement\n\t    Parser.prototype.parseBreakStatement = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('break');\n\t        var label = null;\n\t        if (this.lookahead.type === token_1.Token.Identifier && !this.hasLineTerminator) {\n\t            label = this.parseVariableIdentifier();\n\t            var key = '$' + label.name;\n\t            if (!Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {\n\t                this.throwError(messages_1.Messages.UnknownLabel, label.name);\n\t            }\n\t        }\n\t        this.consumeSemicolon();\n\t        if (label === null && !this.context.inIteration && !this.context.inSwitch) {\n\t            this.throwError(messages_1.Messages.IllegalBreak);\n\t        }\n\t        return this.finalize(node, new Node.BreakStatement(label));\n\t    };\n\t    // ECMA-262 13.10 The return statement\n\t    Parser.prototype.parseReturnStatement = function () {\n\t        if (!this.context.inFunctionBody) {\n\t            this.tolerateError(messages_1.Messages.IllegalReturn);\n\t        }\n\t        var node = this.createNode();\n\t        this.expectKeyword('return');\n\t        var hasArgument = !this.match(';') && !this.match('}') &&\n\t            !this.hasLineTerminator && this.lookahead.type !== token_1.Token.EOF;\n\t        var argument = hasArgument ? this.parseExpression() : null;\n\t        this.consumeSemicolon();\n\t        return this.finalize(node, new Node.ReturnStatement(argument));\n\t    };\n\t    // ECMA-262 13.11 The with statement\n\t    Parser.prototype.parseWithStatement = function () {\n\t        if (this.context.strict) {\n\t            this.tolerateError(messages_1.Messages.StrictModeWith);\n\t        }\n\t        var node = this.createNode();\n\t        this.expectKeyword('with');\n\t        this.expect('(');\n\t        var object = this.parseExpression();\n\t        this.expect(')');\n\t        var body = this.parseStatement();\n\t        return this.finalize(node, new Node.WithStatement(object, body));\n\t    };\n\t    // ECMA-262 13.12 The switch statement\n\t    Parser.prototype.parseSwitchCase = function () {\n\t        var node = this.createNode();\n\t        var test;\n\t        if (this.matchKeyword('default')) {\n\t            this.nextToken();\n\t            test = null;\n\t        }\n\t        else {\n\t            this.expectKeyword('case');\n\t            test = this.parseExpression();\n\t        }\n\t        this.expect(':');\n\t        var consequent = [];\n\t        while (true) {\n\t            if (this.match('}') || this.matchKeyword('default') || this.matchKeyword('case')) {\n\t                break;\n\t            }\n\t            consequent.push(this.parseStatementListItem());\n\t        }\n\t        return this.finalize(node, new Node.SwitchCase(test, consequent));\n\t    };\n\t    Parser.prototype.parseSwitchStatement = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('switch');\n\t        this.expect('(');\n\t        var discriminant = this.parseExpression();\n\t        this.expect(')');\n\t        var previousInSwitch = this.context.inSwitch;\n\t        this.context.inSwitch = true;\n\t        var cases = [];\n\t        var defaultFound = false;\n\t        this.expect('{');\n\t        while (true) {\n\t            if (this.match('}')) {\n\t                break;\n\t            }\n\t            var clause = this.parseSwitchCase();\n\t            if (clause.test === null) {\n\t                if (defaultFound) {\n\t                    this.throwError(messages_1.Messages.MultipleDefaultsInSwitch);\n\t                }\n\t                defaultFound = true;\n\t            }\n\t            cases.push(clause);\n\t        }\n\t        this.expect('}');\n\t        this.context.inSwitch = previousInSwitch;\n\t        return this.finalize(node, new Node.SwitchStatement(discriminant, cases));\n\t    };\n\t    // ECMA-262 13.13 Labelled Statements\n\t    Parser.prototype.parseLabelledStatement = function () {\n\t        var node = this.createNode();\n\t        var expr = this.parseExpression();\n\t        var statement;\n\t        if ((expr.type === syntax_1.Syntax.Identifier) && this.match(':')) {\n\t            this.nextToken();\n\t            var id = (expr);\n\t            var key = '$' + id.name;\n\t            if (Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {\n\t                this.throwError(messages_1.Messages.Redeclaration, 'Label', id.name);\n\t            }\n\t            this.context.labelSet[key] = true;\n\t            var labeledBody = this.parseStatement();\n\t            delete this.context.labelSet[key];\n\t            statement = new Node.LabeledStatement(id, labeledBody);\n\t        }\n\t        else {\n\t            this.consumeSemicolon();\n\t            statement = new Node.ExpressionStatement(expr);\n\t        }\n\t        return this.finalize(node, statement);\n\t    };\n\t    // ECMA-262 13.14 The throw statement\n\t    Parser.prototype.parseThrowStatement = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('throw');\n\t        if (this.hasLineTerminator) {\n\t            this.throwError(messages_1.Messages.NewlineAfterThrow);\n\t        }\n\t        var argument = this.parseExpression();\n\t        this.consumeSemicolon();\n\t        return this.finalize(node, new Node.ThrowStatement(argument));\n\t    };\n\t    // ECMA-262 13.15 The try statement\n\t    Parser.prototype.parseCatchClause = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('catch');\n\t        this.expect('(');\n\t        if (this.match(')')) {\n\t            this.throwUnexpectedToken(this.lookahead);\n\t        }\n\t        var params = [];\n\t        var param = this.parsePattern(params);\n\t        var paramMap = {};\n\t        for (var i = 0; i < params.length; i++) {\n\t            var key = '$' + params[i].value;\n\t            if (Object.prototype.hasOwnProperty.call(paramMap, key)) {\n\t                this.tolerateError(messages_1.Messages.DuplicateBinding, params[i].value);\n\t            }\n\t            paramMap[key] = true;\n\t        }\n\t        if (this.context.strict && param.type === syntax_1.Syntax.Identifier) {\n\t            if (this.scanner.isRestrictedWord((param).name)) {\n\t                this.tolerateError(messages_1.Messages.StrictCatchVariable);\n\t            }\n\t        }\n\t        this.expect(')');\n\t        var body = this.parseBlock();\n\t        return this.finalize(node, new Node.CatchClause(param, body));\n\t    };\n\t    Parser.prototype.parseFinallyClause = function () {\n\t        this.expectKeyword('finally');\n\t        return this.parseBlock();\n\t    };\n\t    Parser.prototype.parseTryStatement = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('try');\n\t        var block = this.parseBlock();\n\t        var handler = this.matchKeyword('catch') ? this.parseCatchClause() : null;\n\t        var finalizer = this.matchKeyword('finally') ? this.parseFinallyClause() : null;\n\t        if (!handler && !finalizer) {\n\t            this.throwError(messages_1.Messages.NoCatchOrFinally);\n\t        }\n\t        return this.finalize(node, new Node.TryStatement(block, handler, finalizer));\n\t    };\n\t    // ECMA-262 13.16 The debugger statement\n\t    Parser.prototype.parseDebuggerStatement = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('debugger');\n\t        this.consumeSemicolon();\n\t        return this.finalize(node, new Node.DebuggerStatement());\n\t    };\n\t    // ECMA-262 13 Statements\n\t    Parser.prototype.parseStatement = function () {\n\t        var statement = null;\n\t        switch (this.lookahead.type) {\n\t            case token_1.Token.BooleanLiteral:\n\t            case token_1.Token.NullLiteral:\n\t            case token_1.Token.NumericLiteral:\n\t            case token_1.Token.StringLiteral:\n\t            case token_1.Token.Template:\n\t            case token_1.Token.RegularExpression:\n\t                statement = this.parseExpressionStatement();\n\t                break;\n\t            case token_1.Token.Punctuator:\n\t                var value = this.lookahead.value;\n\t                if (value === '{') {\n\t                    statement = this.parseBlock();\n\t                }\n\t                else if (value === '(') {\n\t                    statement = this.parseExpressionStatement();\n\t                }\n\t                else if (value === ';') {\n\t                    statement = this.parseEmptyStatement();\n\t                }\n\t                else {\n\t                    statement = this.parseExpressionStatement();\n\t                }\n\t                break;\n\t            case token_1.Token.Identifier:\n\t                statement = this.parseLabelledStatement();\n\t                break;\n\t            case token_1.Token.Keyword:\n\t                switch (this.lookahead.value) {\n\t                    case 'break':\n\t                        statement = this.parseBreakStatement();\n\t                        break;\n\t                    case 'continue':\n\t                        statement = this.parseContinueStatement();\n\t                        break;\n\t                    case 'debugger':\n\t                        statement = this.parseDebuggerStatement();\n\t                        break;\n\t                    case 'do':\n\t                        statement = this.parseDoWhileStatement();\n\t                        break;\n\t                    case 'for':\n\t                        statement = this.parseForStatement();\n\t                        break;\n\t                    case 'function':\n\t                        statement = this.parseFunctionDeclaration();\n\t                        break;\n\t                    case 'if':\n\t                        statement = this.parseIfStatement();\n\t                        break;\n\t                    case 'return':\n\t                        statement = this.parseReturnStatement();\n\t                        break;\n\t                    case 'switch':\n\t                        statement = this.parseSwitchStatement();\n\t                        break;\n\t                    case 'throw':\n\t                        statement = this.parseThrowStatement();\n\t                        break;\n\t                    case 'try':\n\t                        statement = this.parseTryStatement();\n\t                        break;\n\t                    case 'var':\n\t                        statement = this.parseVariableStatement();\n\t                        break;\n\t                    case 'while':\n\t                        statement = this.parseWhileStatement();\n\t                        break;\n\t                    case 'with':\n\t                        statement = this.parseWithStatement();\n\t                        break;\n\t                    default:\n\t                        statement = this.parseExpressionStatement();\n\t                        break;\n\t                }\n\t                break;\n\t            default:\n\t                this.throwUnexpectedToken(this.lookahead);\n\t        }\n\t        return statement;\n\t    };\n\t    // ECMA-262 14.1 Function Definition\n\t    Parser.prototype.parseFunctionSourceElements = function () {\n\t        var node = this.createNode();\n\t        this.expect('{');\n\t        var body = this.parseDirectivePrologues();\n\t        var previousLabelSet = this.context.labelSet;\n\t        var previousInIteration = this.context.inIteration;\n\t        var previousInSwitch = this.context.inSwitch;\n\t        var previousInFunctionBody = this.context.inFunctionBody;\n\t        this.context.labelSet = {};\n\t        this.context.inIteration = false;\n\t        this.context.inSwitch = false;\n\t        this.context.inFunctionBody = true;\n\t        while (this.startMarker.index < this.scanner.length) {\n\t            if (this.match('}')) {\n\t                break;\n\t            }\n\t            body.push(this.parseStatementListItem());\n\t        }\n\t        this.expect('}');\n\t        this.context.labelSet = previousLabelSet;\n\t        this.context.inIteration = previousInIteration;\n\t        this.context.inSwitch = previousInSwitch;\n\t        this.context.inFunctionBody = previousInFunctionBody;\n\t        return this.finalize(node, new Node.BlockStatement(body));\n\t    };\n\t    Parser.prototype.validateParam = function (options, param, name) {\n\t        var key = '$' + name;\n\t        if (this.context.strict) {\n\t            if (this.scanner.isRestrictedWord(name)) {\n\t                options.stricted = param;\n\t                options.message = messages_1.Messages.StrictParamName;\n\t            }\n\t            if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {\n\t                options.stricted = param;\n\t                options.message = messages_1.Messages.StrictParamDupe;\n\t            }\n\t        }\n\t        else if (!options.firstRestricted) {\n\t            if (this.scanner.isRestrictedWord(name)) {\n\t                options.firstRestricted = param;\n\t                options.message = messages_1.Messages.StrictParamName;\n\t            }\n\t            else if (this.scanner.isStrictModeReservedWord(name)) {\n\t                options.firstRestricted = param;\n\t                options.message = messages_1.Messages.StrictReservedWord;\n\t            }\n\t            else if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {\n\t                options.stricted = param;\n\t                options.message = messages_1.Messages.StrictParamDupe;\n\t            }\n\t        }\n\t        /* istanbul ignore next */\n\t        if (typeof Object.defineProperty === 'function') {\n\t            Object.defineProperty(options.paramSet, key, { value: true, enumerable: true, writable: true, configurable: true });\n\t        }\n\t        else {\n\t            options.paramSet[key] = true;\n\t        }\n\t    };\n\t    Parser.prototype.parseRestElement = function (params) {\n\t        var node = this.createNode();\n\t        this.expect('...');\n\t        var arg = this.parsePattern(params);\n\t        if (this.match('=')) {\n\t            this.throwError(messages_1.Messages.DefaultRestParameter);\n\t        }\n\t        if (!this.match(')')) {\n\t            this.throwError(messages_1.Messages.ParameterAfterRestParameter);\n\t        }\n\t        return this.finalize(node, new Node.RestElement(arg));\n\t    };\n\t    Parser.prototype.parseFormalParameter = function (options) {\n\t        var params = [];\n\t        var param = this.match('...') ? this.parseRestElement(params) : this.parsePatternWithDefault(params);\n\t        for (var i = 0; i < params.length; i++) {\n\t            this.validateParam(options, params[i], params[i].value);\n\t        }\n\t        options.params.push(param);\n\t        return !this.match(')');\n\t    };\n\t    Parser.prototype.parseFormalParameters = function (firstRestricted) {\n\t        var options;\n\t        options = {\n\t            params: [],\n\t            firstRestricted: firstRestricted\n\t        };\n\t        this.expect('(');\n\t        if (!this.match(')')) {\n\t            options.paramSet = {};\n\t            while (this.startMarker.index < this.scanner.length) {\n\t                if (!this.parseFormalParameter(options)) {\n\t                    break;\n\t                }\n\t                this.expect(',');\n\t            }\n\t        }\n\t        this.expect(')');\n\t        return {\n\t            params: options.params,\n\t            stricted: options.stricted,\n\t            firstRestricted: options.firstRestricted,\n\t            message: options.message\n\t        };\n\t    };\n\t    Parser.prototype.parseFunctionDeclaration = function (identifierIsOptional) {\n\t        var node = this.createNode();\n\t        this.expectKeyword('function');\n\t        var isGenerator = this.match('*');\n\t        if (isGenerator) {\n\t            this.nextToken();\n\t        }\n\t        var message;\n\t        var id = null;\n\t        var firstRestricted = null;\n\t        if (!identifierIsOptional || !this.match('(')) {\n\t            var token = this.lookahead;\n\t            id = this.parseVariableIdentifier();\n\t            if (this.context.strict) {\n\t                if (this.scanner.isRestrictedWord(token.value)) {\n\t                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictFunctionName);\n\t                }\n\t            }\n\t            else {\n\t                if (this.scanner.isRestrictedWord(token.value)) {\n\t                    firstRestricted = token;\n\t                    message = messages_1.Messages.StrictFunctionName;\n\t                }\n\t                else if (this.scanner.isStrictModeReservedWord(token.value)) {\n\t                    firstRestricted = token;\n\t                    message = messages_1.Messages.StrictReservedWord;\n\t                }\n\t            }\n\t        }\n\t        var previousAllowYield = this.context.allowYield;\n\t        this.context.allowYield = !isGenerator;\n\t        var formalParameters = this.parseFormalParameters(firstRestricted);\n\t        var params = formalParameters.params;\n\t        var stricted = formalParameters.stricted;\n\t        firstRestricted = formalParameters.firstRestricted;\n\t        if (formalParameters.message) {\n\t            message = formalParameters.message;\n\t        }\n\t        var previousStrict = this.context.strict;\n\t        var body = this.parseFunctionSourceElements();\n\t        if (this.context.strict && firstRestricted) {\n\t            this.throwUnexpectedToken(firstRestricted, message);\n\t        }\n\t        if (this.context.strict && stricted) {\n\t            this.tolerateUnexpectedToken(stricted, message);\n\t        }\n\t        this.context.strict = previousStrict;\n\t        this.context.allowYield = previousAllowYield;\n\t        return this.finalize(node, new Node.FunctionDeclaration(id, params, body, isGenerator));\n\t    };\n\t    Parser.prototype.parseFunctionExpression = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('function');\n\t        var isGenerator = this.match('*');\n\t        if (isGenerator) {\n\t            this.nextToken();\n\t        }\n\t        var message;\n\t        var id = null;\n\t        var firstRestricted;\n\t        var previousAllowYield = this.context.allowYield;\n\t        this.context.allowYield = !isGenerator;\n\t        if (!this.match('(')) {\n\t            var token = this.lookahead;\n\t            id = (!this.context.strict && !isGenerator && this.matchKeyword('yield')) ? this.parseIdentifierName() : this.parseVariableIdentifier();\n\t            if (this.context.strict) {\n\t                if (this.scanner.isRestrictedWord(token.value)) {\n\t                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictFunctionName);\n\t                }\n\t            }\n\t            else {\n\t                if (this.scanner.isRestrictedWord(token.value)) {\n\t                    firstRestricted = token;\n\t                    message = messages_1.Messages.StrictFunctionName;\n\t                }\n\t                else if (this.scanner.isStrictModeReservedWord(token.value)) {\n\t                    firstRestricted = token;\n\t                    message = messages_1.Messages.StrictReservedWord;\n\t                }\n\t            }\n\t        }\n\t        var formalParameters = this.parseFormalParameters(firstRestricted);\n\t        var params = formalParameters.params;\n\t        var stricted = formalParameters.stricted;\n\t        firstRestricted = formalParameters.firstRestricted;\n\t        if (formalParameters.message) {\n\t            message = formalParameters.message;\n\t        }\n\t        var previousStrict = this.context.strict;\n\t        var body = this.parseFunctionSourceElements();\n\t        if (this.context.strict && firstRestricted) {\n\t            this.throwUnexpectedToken(firstRestricted, message);\n\t        }\n\t        if (this.context.strict && stricted) {\n\t            this.tolerateUnexpectedToken(stricted, message);\n\t        }\n\t        this.context.strict = previousStrict;\n\t        this.context.allowYield = previousAllowYield;\n\t        return this.finalize(node, new Node.FunctionExpression(id, params, body, isGenerator));\n\t    };\n\t    // ECMA-262 14.1.1 Directive Prologues\n\t    Parser.prototype.parseDirective = function () {\n\t        var token = this.lookahead;\n\t        var directive = null;\n\t        var node = this.createNode();\n\t        var expr = this.parseExpression();\n\t        if (expr.type === syntax_1.Syntax.Literal) {\n\t            directive = this.getTokenRaw(token).slice(1, -1);\n\t        }\n\t        this.consumeSemicolon();\n\t        return this.finalize(node, directive ? new Node.Directive(expr, directive) :\n\t            new Node.ExpressionStatement(expr));\n\t    };\n\t    Parser.prototype.parseDirectivePrologues = function () {\n\t        var firstRestricted = null;\n\t        var body = [];\n\t        while (true) {\n\t            var token = this.lookahead;\n\t            if (token.type !== token_1.Token.StringLiteral) {\n\t                break;\n\t            }\n\t            var statement = this.parseDirective();\n\t            body.push(statement);\n\t            var directive = statement.directive;\n\t            if (typeof directive !== 'string') {\n\t                break;\n\t            }\n\t            if (directive === 'use strict') {\n\t                this.context.strict = true;\n\t                if (firstRestricted) {\n\t                    this.tolerateUnexpectedToken(firstRestricted, messages_1.Messages.StrictOctalLiteral);\n\t                }\n\t            }\n\t            else {\n\t                if (!firstRestricted && token.octal) {\n\t                    firstRestricted = token;\n\t                }\n\t            }\n\t        }\n\t        return body;\n\t    };\n\t    // ECMA-262 14.3 Method Definitions\n\t    Parser.prototype.qualifiedPropertyName = function (token) {\n\t        switch (token.type) {\n\t            case token_1.Token.Identifier:\n\t            case token_1.Token.StringLiteral:\n\t            case token_1.Token.BooleanLiteral:\n\t            case token_1.Token.NullLiteral:\n\t            case token_1.Token.NumericLiteral:\n\t            case token_1.Token.Keyword:\n\t                return true;\n\t            case token_1.Token.Punctuator:\n\t                return token.value === '[';\n\t        }\n\t        return false;\n\t    };\n\t    Parser.prototype.parseGetterMethod = function () {\n\t        var node = this.createNode();\n\t        this.expect('(');\n\t        this.expect(')');\n\t        var isGenerator = false;\n\t        var params = {\n\t            params: [],\n\t            stricted: null,\n\t            firstRestricted: null,\n\t            message: null\n\t        };\n\t        var previousAllowYield = this.context.allowYield;\n\t        this.context.allowYield = false;\n\t        var method = this.parsePropertyMethod(params);\n\t        this.context.allowYield = previousAllowYield;\n\t        return this.finalize(node, new Node.FunctionExpression(null, params.params, method, isGenerator));\n\t    };\n\t    Parser.prototype.parseSetterMethod = function () {\n\t        var node = this.createNode();\n\t        var options = {\n\t            params: [],\n\t            firstRestricted: null,\n\t            paramSet: {}\n\t        };\n\t        var isGenerator = false;\n\t        var previousAllowYield = this.context.allowYield;\n\t        this.context.allowYield = false;\n\t        this.expect('(');\n\t        if (this.match(')')) {\n\t            this.tolerateUnexpectedToken(this.lookahead);\n\t        }\n\t        else {\n\t            this.parseFormalParameter(options);\n\t        }\n\t        this.expect(')');\n\t        var method = this.parsePropertyMethod(options);\n\t        this.context.allowYield = previousAllowYield;\n\t        return this.finalize(node, new Node.FunctionExpression(null, options.params, method, isGenerator));\n\t    };\n\t    Parser.prototype.parseGeneratorMethod = function () {\n\t        var node = this.createNode();\n\t        var isGenerator = true;\n\t        var previousAllowYield = this.context.allowYield;\n\t        this.context.allowYield = true;\n\t        var params = this.parseFormalParameters();\n\t        this.context.allowYield = false;\n\t        var method = this.parsePropertyMethod(params);\n\t        this.context.allowYield = previousAllowYield;\n\t        return this.finalize(node, new Node.FunctionExpression(null, params.params, method, isGenerator));\n\t    };\n\t    // ECMA-262 14.4 Generator Function Definitions\n\t    Parser.prototype.isStartOfExpression = function () {\n\t        var start = true;\n\t        var value = this.lookahead.value;\n\t        switch (this.lookahead.type) {\n\t            case token_1.Token.Punctuator:\n\t                start = (value === '[') || (value === '(') || (value === '{') ||\n\t                    (value === '+') || (value === '-') ||\n\t                    (value === '!') || (value === '~') ||\n\t                    (value === '++') || (value === '--') ||\n\t                    (value === '/') || (value === '/='); // regular expression literal\n\t                break;\n\t            case token_1.Token.Keyword:\n\t                start = (value === 'class') || (value === 'delete') ||\n\t                    (value === 'function') || (value === 'let') || (value === 'new') ||\n\t                    (value === 'super') || (value === 'this') || (value === 'typeof') ||\n\t                    (value === 'void') || (value === 'yield');\n\t                break;\n\t            default:\n\t                break;\n\t        }\n\t        return start;\n\t    };\n\t    Parser.prototype.parseYieldExpression = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('yield');\n\t        var argument = null;\n\t        var delegate = false;\n\t        if (!this.hasLineTerminator) {\n\t            var previousAllowYield = this.context.allowYield;\n\t            this.context.allowYield = false;\n\t            delegate = this.match('*');\n\t            if (delegate) {\n\t                this.nextToken();\n\t                argument = this.parseAssignmentExpression();\n\t            }\n\t            else if (this.isStartOfExpression()) {\n\t                argument = this.parseAssignmentExpression();\n\t            }\n\t            this.context.allowYield = previousAllowYield;\n\t        }\n\t        return this.finalize(node, new Node.YieldExpression(argument, delegate));\n\t    };\n\t    // ECMA-262 14.5 Class Definitions\n\t    Parser.prototype.parseClassElement = function (hasConstructor) {\n\t        var token = this.lookahead;\n\t        var node = this.createNode();\n\t        var kind;\n\t        var key;\n\t        var value;\n\t        var computed = false;\n\t        var method = false;\n\t        var isStatic = false;\n\t        if (this.match('*')) {\n\t            this.nextToken();\n\t        }\n\t        else {\n\t            computed = this.match('[');\n\t            key = this.parseObjectPropertyKey();\n\t            var id = key;\n\t            if (id.name === 'static' && (this.qualifiedPropertyName(this.lookahead) || this.match('*'))) {\n\t                token = this.lookahead;\n\t                isStatic = true;\n\t                computed = this.match('[');\n\t                if (this.match('*')) {\n\t                    this.nextToken();\n\t                }\n\t                else {\n\t                    key = this.parseObjectPropertyKey();\n\t                }\n\t            }\n\t        }\n\t        var lookaheadPropertyKey = this.qualifiedPropertyName(this.lookahead);\n\t        if (token.type === token_1.Token.Identifier) {\n\t            if (token.value === 'get' && lookaheadPropertyKey) {\n\t                kind = 'get';\n\t                computed = this.match('[');\n\t                key = this.parseObjectPropertyKey();\n\t                this.context.allowYield = false;\n\t                value = this.parseGetterMethod();\n\t            }\n\t            else if (token.value === 'set' && lookaheadPropertyKey) {\n\t                kind = 'set';\n\t                computed = this.match('[');\n\t                key = this.parseObjectPropertyKey();\n\t                value = this.parseSetterMethod();\n\t            }\n\t        }\n\t        else if (token.type === token_1.Token.Punctuator && token.value === '*' && lookaheadPropertyKey) {\n\t            kind = 'init';\n\t            computed = this.match('[');\n\t            key = this.parseObjectPropertyKey();\n\t            value = this.parseGeneratorMethod();\n\t            method = true;\n\t        }\n\t        if (!kind && key && this.match('(')) {\n\t            kind = 'init';\n\t            value = this.parsePropertyMethodFunction();\n\t            method = true;\n\t        }\n\t        if (!kind) {\n\t            this.throwUnexpectedToken(this.lookahead);\n\t        }\n\t        if (kind === 'init') {\n\t            kind = 'method';\n\t        }\n\t        if (!computed) {\n\t            if (isStatic && this.isPropertyKey(key, 'prototype')) {\n\t                this.throwUnexpectedToken(token, messages_1.Messages.StaticPrototype);\n\t            }\n\t            if (!isStatic && this.isPropertyKey(key, 'constructor')) {\n\t                if (kind !== 'method' || !method || value.generator) {\n\t                    this.throwUnexpectedToken(token, messages_1.Messages.ConstructorSpecialMethod);\n\t                }\n\t                if (hasConstructor.value) {\n\t                    this.throwUnexpectedToken(token, messages_1.Messages.DuplicateConstructor);\n\t                }\n\t                else {\n\t                    hasConstructor.value = true;\n\t                }\n\t                kind = 'constructor';\n\t            }\n\t        }\n\t        return this.finalize(node, new Node.MethodDefinition(key, computed, value, kind, isStatic));\n\t    };\n\t    Parser.prototype.parseClassElementList = function () {\n\t        var body = [];\n\t        var hasConstructor = { value: false };\n\t        this.expect('{');\n\t        while (!this.match('}')) {\n\t            if (this.match(';')) {\n\t                this.nextToken();\n\t            }\n\t            else {\n\t                body.push(this.parseClassElement(hasConstructor));\n\t            }\n\t        }\n\t        this.expect('}');\n\t        return body;\n\t    };\n\t    Parser.prototype.parseClassBody = function () {\n\t        var node = this.createNode();\n\t        var elementList = this.parseClassElementList();\n\t        return this.finalize(node, new Node.ClassBody(elementList));\n\t    };\n\t    Parser.prototype.parseClassDeclaration = function (identifierIsOptional) {\n\t        var node = this.createNode();\n\t        var previousStrict = this.context.strict;\n\t        this.context.strict = true;\n\t        this.expectKeyword('class');\n\t        var id = (identifierIsOptional && (this.lookahead.type !== token_1.Token.Identifier)) ? null : this.parseVariableIdentifier();\n\t        var superClass = null;\n\t        if (this.matchKeyword('extends')) {\n\t            this.nextToken();\n\t            superClass = this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall);\n\t        }\n\t        var classBody = this.parseClassBody();\n\t        this.context.strict = previousStrict;\n\t        return this.finalize(node, new Node.ClassDeclaration(id, superClass, classBody));\n\t    };\n\t    Parser.prototype.parseClassExpression = function () {\n\t        var node = this.createNode();\n\t        var previousStrict = this.context.strict;\n\t        this.context.strict = true;\n\t        this.expectKeyword('class');\n\t        var id = (this.lookahead.type === token_1.Token.Identifier) ? this.parseVariableIdentifier() : null;\n\t        var superClass = null;\n\t        if (this.matchKeyword('extends')) {\n\t            this.nextToken();\n\t            superClass = this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall);\n\t        }\n\t        var classBody = this.parseClassBody();\n\t        this.context.strict = previousStrict;\n\t        return this.finalize(node, new Node.ClassExpression(id, superClass, classBody));\n\t    };\n\t    // ECMA-262 15.1 Scripts\n\t    // ECMA-262 15.2 Modules\n\t    Parser.prototype.parseProgram = function () {\n\t        var node = this.createNode();\n\t        var body = this.parseDirectivePrologues();\n\t        while (this.startMarker.index < this.scanner.length) {\n\t            body.push(this.parseStatementListItem());\n\t        }\n\t        return this.finalize(node, new Node.Program(body, this.sourceType));\n\t    };\n\t    // ECMA-262 15.2.2 Imports\n\t    Parser.prototype.parseModuleSpecifier = function () {\n\t        var node = this.createNode();\n\t        if (this.lookahead.type !== token_1.Token.StringLiteral) {\n\t            this.throwError(messages_1.Messages.InvalidModuleSpecifier);\n\t        }\n\t        var token = this.nextToken();\n\t        var raw = this.getTokenRaw(token);\n\t        return this.finalize(node, new Node.Literal(token.value, raw));\n\t    };\n\t    // import {<foo as bar>} ...;\n\t    Parser.prototype.parseImportSpecifier = function () {\n\t        var node = this.createNode();\n\t        var imported;\n\t        var local;\n\t        if (this.lookahead.type === token_1.Token.Identifier) {\n\t            imported = this.parseVariableIdentifier();\n\t            local = imported;\n\t            if (this.matchContextualKeyword('as')) {\n\t                this.nextToken();\n\t                local = this.parseVariableIdentifier();\n\t            }\n\t        }\n\t        else {\n\t            imported = this.parseIdentifierName();\n\t            local = imported;\n\t            if (this.matchContextualKeyword('as')) {\n\t                this.nextToken();\n\t                local = this.parseVariableIdentifier();\n\t            }\n\t            else {\n\t                this.throwUnexpectedToken(this.nextToken());\n\t            }\n\t        }\n\t        return this.finalize(node, new Node.ImportSpecifier(local, imported));\n\t    };\n\t    // {foo, bar as bas}\n\t    Parser.prototype.parseNamedImports = function () {\n\t        this.expect('{');\n\t        var specifiers = [];\n\t        while (!this.match('}')) {\n\t            specifiers.push(this.parseImportSpecifier());\n\t            if (!this.match('}')) {\n\t                this.expect(',');\n\t            }\n\t        }\n\t        this.expect('}');\n\t        return specifiers;\n\t    };\n\t    // import <foo> ...;\n\t    Parser.prototype.parseImportDefaultSpecifier = function () {\n\t        var node = this.createNode();\n\t        var local = this.parseIdentifierName();\n\t        return this.finalize(node, new Node.ImportDefaultSpecifier(local));\n\t    };\n\t    // import <* as foo> ...;\n\t    Parser.prototype.parseImportNamespaceSpecifier = function () {\n\t        var node = this.createNode();\n\t        this.expect('*');\n\t        if (!this.matchContextualKeyword('as')) {\n\t            this.throwError(messages_1.Messages.NoAsAfterImportNamespace);\n\t        }\n\t        this.nextToken();\n\t        var local = this.parseIdentifierName();\n\t        return this.finalize(node, new Node.ImportNamespaceSpecifier(local));\n\t    };\n\t    Parser.prototype.parseImportDeclaration = function () {\n\t        if (this.context.inFunctionBody) {\n\t            this.throwError(messages_1.Messages.IllegalImportDeclaration);\n\t        }\n\t        var node = this.createNode();\n\t        this.expectKeyword('import');\n\t        var src;\n\t        var specifiers = [];\n\t        if (this.lookahead.type === token_1.Token.StringLiteral) {\n\t            // import 'foo';\n\t            src = this.parseModuleSpecifier();\n\t        }\n\t        else {\n\t            if (this.match('{')) {\n\t                // import {bar}\n\t                specifiers = specifiers.concat(this.parseNamedImports());\n\t            }\n\t            else if (this.match('*')) {\n\t                // import * as foo\n\t                specifiers.push(this.parseImportNamespaceSpecifier());\n\t            }\n\t            else if (this.isIdentifierName(this.lookahead) && !this.matchKeyword('default')) {\n\t                // import foo\n\t                specifiers.push(this.parseImportDefaultSpecifier());\n\t                if (this.match(',')) {\n\t                    this.nextToken();\n\t                    if (this.match('*')) {\n\t                        // import foo, * as foo\n\t                        specifiers.push(this.parseImportNamespaceSpecifier());\n\t                    }\n\t                    else if (this.match('{')) {\n\t                        // import foo, {bar}\n\t                        specifiers = specifiers.concat(this.parseNamedImports());\n\t                    }\n\t                    else {\n\t                        this.throwUnexpectedToken(this.lookahead);\n\t                    }\n\t                }\n\t            }\n\t            else {\n\t                this.throwUnexpectedToken(this.nextToken());\n\t            }\n\t            if (!this.matchContextualKeyword('from')) {\n\t                var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;\n\t                this.throwError(message, this.lookahead.value);\n\t            }\n\t            this.nextToken();\n\t            src = this.parseModuleSpecifier();\n\t        }\n\t        this.consumeSemicolon();\n\t        return this.finalize(node, new Node.ImportDeclaration(specifiers, src));\n\t    };\n\t    // ECMA-262 15.2.3 Exports\n\t    Parser.prototype.parseExportSpecifier = function () {\n\t        var node = this.createNode();\n\t        var local = this.parseIdentifierName();\n\t        var exported = local;\n\t        if (this.matchContextualKeyword('as')) {\n\t            this.nextToken();\n\t            exported = this.parseIdentifierName();\n\t        }\n\t        return this.finalize(node, new Node.ExportSpecifier(local, exported));\n\t    };\n\t    Parser.prototype.parseExportDeclaration = function () {\n\t        if (this.context.inFunctionBody) {\n\t            this.throwError(messages_1.Messages.IllegalExportDeclaration);\n\t        }\n\t        var node = this.createNode();\n\t        this.expectKeyword('export');\n\t        var exportDeclaration;\n\t        if (this.matchKeyword('default')) {\n\t            // export default ...\n\t            this.nextToken();\n\t            if (this.matchKeyword('function')) {\n\t                // export default function foo () {}\n\t                // export default function () {}\n\t                var declaration = this.parseFunctionDeclaration(true);\n\t                exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));\n\t            }\n\t            else if (this.matchKeyword('class')) {\n\t                // export default class foo {}\n\t                var declaration = this.parseClassDeclaration(true);\n\t                exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));\n\t            }\n\t            else {\n\t                if (this.matchContextualKeyword('from')) {\n\t                    this.throwError(messages_1.Messages.UnexpectedToken, this.lookahead.value);\n\t                }\n\t                // export default {};\n\t                // export default [];\n\t                // export default (1 + 2);\n\t                var declaration = this.match('{') ? this.parseObjectInitializer() :\n\t                    this.match('[') ? this.parseArrayInitializer() : this.parseAssignmentExpression();\n\t                this.consumeSemicolon();\n\t                exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));\n\t            }\n\t        }\n\t        else if (this.match('*')) {\n\t            // export * from 'foo';\n\t            this.nextToken();\n\t            if (!this.matchContextualKeyword('from')) {\n\t                var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;\n\t                this.throwError(message, this.lookahead.value);\n\t            }\n\t            this.nextToken();\n\t            var src = this.parseModuleSpecifier();\n\t            this.consumeSemicolon();\n\t            exportDeclaration = this.finalize(node, new Node.ExportAllDeclaration(src));\n\t        }\n\t        else if (this.lookahead.type === token_1.Token.Keyword) {\n\t            // export var f = 1;\n\t            var declaration = void 0;\n\t            switch (this.lookahead.value) {\n\t                case 'let':\n\t                case 'const':\n\t                    declaration = this.parseLexicalDeclaration({ inFor: false });\n\t                    break;\n\t                case 'var':\n\t                case 'class':\n\t                case 'function':\n\t                    declaration = this.parseStatementListItem();\n\t                    break;\n\t                default:\n\t                    this.throwUnexpectedToken(this.lookahead);\n\t            }\n\t            exportDeclaration = this.finalize(node, new Node.ExportNamedDeclaration(declaration, [], null));\n\t        }\n\t        else {\n\t            var specifiers = [];\n\t            var source = null;\n\t            var isExportFromIdentifier = false;\n\t            this.expect('{');\n\t            while (!this.match('}')) {\n\t                isExportFromIdentifier = isExportFromIdentifier || this.matchKeyword('default');\n\t                specifiers.push(this.parseExportSpecifier());\n\t                if (!this.match('}')) {\n\t                    this.expect(',');\n\t                }\n\t            }\n\t            this.expect('}');\n\t            if (this.matchContextualKeyword('from')) {\n\t                // export {default} from 'foo';\n\t                // export {foo} from 'foo';\n\t                this.nextToken();\n\t                source = this.parseModuleSpecifier();\n\t                this.consumeSemicolon();\n\t            }\n\t            else if (isExportFromIdentifier) {\n\t                // export {default}; // missing fromClause\n\t                var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;\n\t                this.throwError(message, this.lookahead.value);\n\t            }\n\t            else {\n\t                // export {foo};\n\t                this.consumeSemicolon();\n\t            }\n\t            exportDeclaration = this.finalize(node, new Node.ExportNamedDeclaration(null, specifiers, source));\n\t        }\n\t        return exportDeclaration;\n\t    };\n\t    return Parser;\n\t}());\n\texports.Parser = Parser;\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\t// Ensure the condition is true, otherwise throw an error.\n\t// This is only to have a better contract semantic, i.e. another safety net\n\t// to catch a logic error. The condition shall be fulfilled in normal case.\n\t// Do NOT use this to enforce a certain condition on any user input.\n\t\"use strict\";\n\tfunction assert(condition, message) {\n\t    /* istanbul ignore if */\n\t    if (!condition) {\n\t        throw new Error('ASSERT: ' + message);\n\t    }\n\t}\n\texports.assert = assert;\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t// Error messages should be identical to V8.\n\texports.Messages = {\n\t    UnexpectedToken: 'Unexpected token %0',\n\t    UnexpectedTokenIllegal: 'Unexpected token ILLEGAL',\n\t    UnexpectedNumber: 'Unexpected number',\n\t    UnexpectedString: 'Unexpected string',\n\t    UnexpectedIdentifier: 'Unexpected identifier',\n\t    UnexpectedReserved: 'Unexpected reserved word',\n\t    UnexpectedTemplate: 'Unexpected quasi %0',\n\t    UnexpectedEOS: 'Unexpected end of input',\n\t    NewlineAfterThrow: 'Illegal newline after throw',\n\t    InvalidRegExp: 'Invalid regular expression',\n\t    UnterminatedRegExp: 'Invalid regular expression: missing /',\n\t    InvalidLHSInAssignment: 'Invalid left-hand side in assignment',\n\t    InvalidLHSInForIn: 'Invalid left-hand side in for-in',\n\t    InvalidLHSInForLoop: 'Invalid left-hand side in for-loop',\n\t    MultipleDefaultsInSwitch: 'More than one default clause in switch statement',\n\t    NoCatchOrFinally: 'Missing catch or finally after try',\n\t    UnknownLabel: 'Undefined label \\'%0\\'',\n\t    Redeclaration: '%0 \\'%1\\' has already been declared',\n\t    IllegalContinue: 'Illegal continue statement',\n\t    IllegalBreak: 'Illegal break statement',\n\t    IllegalReturn: 'Illegal return statement',\n\t    StrictModeWith: 'Strict mode code may not include a with statement',\n\t    StrictCatchVariable: 'Catch variable may not be eval or arguments in strict mode',\n\t    StrictVarName: 'Variable name may not be eval or arguments in strict mode',\n\t    StrictParamName: 'Parameter name eval or arguments is not allowed in strict mode',\n\t    StrictParamDupe: 'Strict mode function may not have duplicate parameter names',\n\t    StrictFunctionName: 'Function name may not be eval or arguments in strict mode',\n\t    StrictOctalLiteral: 'Octal literals are not allowed in strict mode.',\n\t    StrictDelete: 'Delete of an unqualified identifier in strict mode.',\n\t    StrictLHSAssignment: 'Assignment to eval or arguments is not allowed in strict mode',\n\t    StrictLHSPostfix: 'Postfix increment/decrement may not have eval or arguments operand in strict mode',\n\t    StrictLHSPrefix: 'Prefix increment/decrement may not have eval or arguments operand in strict mode',\n\t    StrictReservedWord: 'Use of future reserved word in strict mode',\n\t    TemplateOctalLiteral: 'Octal literals are not allowed in template strings.',\n\t    ParameterAfterRestParameter: 'Rest parameter must be last formal parameter',\n\t    DefaultRestParameter: 'Unexpected token =',\n\t    DuplicateProtoProperty: 'Duplicate __proto__ fields are not allowed in object literals',\n\t    ConstructorSpecialMethod: 'Class constructor may not be an accessor',\n\t    DuplicateConstructor: 'A class may only have one constructor',\n\t    StaticPrototype: 'Classes may not have static property named prototype',\n\t    MissingFromClause: 'Unexpected token',\n\t    NoAsAfterImportNamespace: 'Unexpected token',\n\t    InvalidModuleSpecifier: 'Unexpected token',\n\t    IllegalImportDeclaration: 'Unexpected token',\n\t    IllegalExportDeclaration: 'Unexpected token',\n\t    DuplicateBinding: 'Duplicate binding %0',\n\t    ForInOfLoopInitializer: '%0 loop variable declaration may not have an initializer'\n\t};\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tvar ErrorHandler = (function () {\n\t    function ErrorHandler() {\n\t        this.errors = [];\n\t        this.tolerant = false;\n\t    }\n\t    ;\n\t    ErrorHandler.prototype.recordError = function (error) {\n\t        this.errors.push(error);\n\t    };\n\t    ;\n\t    ErrorHandler.prototype.tolerate = function (error) {\n\t        if (this.tolerant) {\n\t            this.recordError(error);\n\t        }\n\t        else {\n\t            throw error;\n\t        }\n\t    };\n\t    ;\n\t    ErrorHandler.prototype.constructError = function (msg, column) {\n\t        var error = new Error(msg);\n\t        try {\n\t            throw error;\n\t        }\n\t        catch (base) {\n\t            /* istanbul ignore else */\n\t            if (Object.create && Object.defineProperty) {\n\t                error = Object.create(base);\n\t                Object.defineProperty(error, 'column', { value: column });\n\t            }\n\t        }\n\t        finally {\n\t            return error;\n\t        }\n\t    };\n\t    ;\n\t    ErrorHandler.prototype.createError = function (index, line, col, description) {\n\t        var msg = 'Line ' + line + ': ' + description;\n\t        var error = this.constructError(msg, col);\n\t        error.index = index;\n\t        error.lineNumber = line;\n\t        error.description = description;\n\t        return error;\n\t    };\n\t    ;\n\t    ErrorHandler.prototype.throwError = function (index, line, col, description) {\n\t        throw this.createError(index, line, col, description);\n\t    };\n\t    ;\n\t    ErrorHandler.prototype.tolerateError = function (index, line, col, description) {\n\t        var error = this.createError(index, line, col, description);\n\t        if (this.tolerant) {\n\t            this.recordError(error);\n\t        }\n\t        else {\n\t            throw error;\n\t        }\n\t    };\n\t    ;\n\t    return ErrorHandler;\n\t}());\n\texports.ErrorHandler = ErrorHandler;\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t(function (Token) {\n\t    Token[Token[\"BooleanLiteral\"] = 1] = \"BooleanLiteral\";\n\t    Token[Token[\"EOF\"] = 2] = \"EOF\";\n\t    Token[Token[\"Identifier\"] = 3] = \"Identifier\";\n\t    Token[Token[\"Keyword\"] = 4] = \"Keyword\";\n\t    Token[Token[\"NullLiteral\"] = 5] = \"NullLiteral\";\n\t    Token[Token[\"NumericLiteral\"] = 6] = \"NumericLiteral\";\n\t    Token[Token[\"Punctuator\"] = 7] = \"Punctuator\";\n\t    Token[Token[\"StringLiteral\"] = 8] = \"StringLiteral\";\n\t    Token[Token[\"RegularExpression\"] = 9] = \"RegularExpression\";\n\t    Token[Token[\"Template\"] = 10] = \"Template\";\n\t})(exports.Token || (exports.Token = {}));\n\tvar Token = exports.Token;\n\t;\n\texports.TokenName = {};\n\texports.TokenName[Token.BooleanLiteral] = 'Boolean';\n\texports.TokenName[Token.EOF] = '<end>';\n\texports.TokenName[Token.Identifier] = 'Identifier';\n\texports.TokenName[Token.Keyword] = 'Keyword';\n\texports.TokenName[Token.NullLiteral] = 'Null';\n\texports.TokenName[Token.NumericLiteral] = 'Numeric';\n\texports.TokenName[Token.Punctuator] = 'Punctuator';\n\texports.TokenName[Token.StringLiteral] = 'String';\n\texports.TokenName[Token.RegularExpression] = 'RegularExpression';\n\texports.TokenName[Token.Template] = 'Template';\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar assert_1 = __webpack_require__(4);\n\tvar messages_1 = __webpack_require__(5);\n\tvar character_1 = __webpack_require__(9);\n\tvar token_1 = __webpack_require__(7);\n\tfunction hexValue(ch) {\n\t    return '0123456789abcdef'.indexOf(ch.toLowerCase());\n\t}\n\tfunction octalValue(ch) {\n\t    return '01234567'.indexOf(ch);\n\t}\n\tvar Scanner = (function () {\n\t    function Scanner(code, handler) {\n\t        this.source = code;\n\t        this.errorHandler = handler;\n\t        this.trackComment = false;\n\t        this.length = code.length;\n\t        this.index = 0;\n\t        this.lineNumber = (code.length > 0) ? 1 : 0;\n\t        this.lineStart = 0;\n\t        this.curlyStack = [];\n\t    }\n\t    ;\n\t    Scanner.prototype.eof = function () {\n\t        return this.index >= this.length;\n\t    };\n\t    ;\n\t    Scanner.prototype.throwUnexpectedToken = function (message) {\n\t        if (message === void 0) { message = messages_1.Messages.UnexpectedTokenIllegal; }\n\t        this.errorHandler.throwError(this.index, this.lineNumber, this.index - this.lineStart + 1, message);\n\t    };\n\t    ;\n\t    Scanner.prototype.tolerateUnexpectedToken = function () {\n\t        this.errorHandler.tolerateError(this.index, this.lineNumber, this.index - this.lineStart + 1, messages_1.Messages.UnexpectedTokenIllegal);\n\t    };\n\t    ;\n\t    // ECMA-262 11.4 Comments\n\t    Scanner.prototype.skipSingleLineComment = function (offset) {\n\t        var comments;\n\t        var start, loc;\n\t        if (this.trackComment) {\n\t            comments = [];\n\t            start = this.index - offset;\n\t            loc = {\n\t                start: {\n\t                    line: this.lineNumber,\n\t                    column: this.index - this.lineStart - offset\n\t                },\n\t                end: {}\n\t            };\n\t        }\n\t        while (!this.eof()) {\n\t            var ch = this.source.charCodeAt(this.index);\n\t            ++this.index;\n\t            if (character_1.Character.isLineTerminator(ch)) {\n\t                if (this.trackComment) {\n\t                    loc.end = {\n\t                        line: this.lineNumber,\n\t                        column: this.index - this.lineStart - 1\n\t                    };\n\t                    var entry = {\n\t                        multiLine: false,\n\t                        slice: [start + offset, this.index - 1],\n\t                        range: [start, this.index - 1],\n\t                        loc: loc\n\t                    };\n\t                    comments.push(entry);\n\t                }\n\t                if (ch === 13 && this.source.charCodeAt(this.index) === 10) {\n\t                    ++this.index;\n\t                }\n\t                ++this.lineNumber;\n\t                this.lineStart = this.index;\n\t                return comments;\n\t            }\n\t        }\n\t        if (this.trackComment) {\n\t            loc.end = {\n\t                line: this.lineNumber,\n\t                column: this.index - this.lineStart\n\t            };\n\t            var entry = {\n\t                multiLine: false,\n\t                slice: [start + offset, this.index],\n\t                range: [start, this.index],\n\t                loc: loc\n\t            };\n\t            comments.push(entry);\n\t        }\n\t        return comments;\n\t    };\n\t    ;\n\t    Scanner.prototype.skipMultiLineComment = function () {\n\t        var comments;\n\t        var start, loc;\n\t        if (this.trackComment) {\n\t            comments = [];\n\t            start = this.index - 2;\n\t            loc = {\n\t                start: {\n\t                    line: this.lineNumber,\n\t                    column: this.index - this.lineStart - 2\n\t                },\n\t                end: {}\n\t            };\n\t        }\n\t        while (!this.eof()) {\n\t            var ch = this.source.charCodeAt(this.index);\n\t            if (character_1.Character.isLineTerminator(ch)) {\n\t                if (ch === 0x0D && this.source.charCodeAt(this.index + 1) === 0x0A) {\n\t                    ++this.index;\n\t                }\n\t                ++this.lineNumber;\n\t                ++this.index;\n\t                this.lineStart = this.index;\n\t            }\n\t            else if (ch === 0x2A) {\n\t                // Block comment ends with '*/'.\n\t                if (this.source.charCodeAt(this.index + 1) === 0x2F) {\n\t                    this.index += 2;\n\t                    if (this.trackComment) {\n\t                        loc.end = {\n\t                            line: this.lineNumber,\n\t                            column: this.index - this.lineStart\n\t                        };\n\t                        var entry = {\n\t                            multiLine: true,\n\t                            slice: [start + 2, this.index - 2],\n\t                            range: [start, this.index],\n\t                            loc: loc\n\t                        };\n\t                        comments.push(entry);\n\t                    }\n\t                    return comments;\n\t                }\n\t                ++this.index;\n\t            }\n\t            else {\n\t                ++this.index;\n\t            }\n\t        }\n\t        // Ran off the end of the file - the whole thing is a comment\n\t        if (this.trackComment) {\n\t            loc.end = {\n\t                line: this.lineNumber,\n\t                column: this.index - this.lineStart\n\t            };\n\t            var entry = {\n\t                multiLine: true,\n\t                slice: [start + 2, this.index],\n\t                range: [start, this.index],\n\t                loc: loc\n\t            };\n\t            comments.push(entry);\n\t        }\n\t        this.tolerateUnexpectedToken();\n\t        return comments;\n\t    };\n\t    ;\n\t    Scanner.prototype.scanComments = function () {\n\t        var comments;\n\t        if (this.trackComment) {\n\t            comments = [];\n\t        }\n\t        var start = (this.index === 0);\n\t        while (!this.eof()) {\n\t            var ch = this.source.charCodeAt(this.index);\n\t            if (character_1.Character.isWhiteSpace(ch)) {\n\t                ++this.index;\n\t            }\n\t            else if (character_1.Character.isLineTerminator(ch)) {\n\t                ++this.index;\n\t                if (ch === 0x0D && this.source.charCodeAt(this.index) === 0x0A) {\n\t                    ++this.index;\n\t                }\n\t                ++this.lineNumber;\n\t                this.lineStart = this.index;\n\t                start = true;\n\t            }\n\t            else if (ch === 0x2F) {\n\t                ch = this.source.charCodeAt(this.index + 1);\n\t                if (ch === 0x2F) {\n\t                    this.index += 2;\n\t                    var comment = this.skipSingleLineComment(2);\n\t                    if (this.trackComment) {\n\t                        comments = comments.concat(comment);\n\t                    }\n\t                    start = true;\n\t                }\n\t                else if (ch === 0x2A) {\n\t                    this.index += 2;\n\t                    var comment = this.skipMultiLineComment();\n\t                    if (this.trackComment) {\n\t                        comments = comments.concat(comment);\n\t                    }\n\t                }\n\t                else {\n\t                    break;\n\t                }\n\t            }\n\t            else if (start && ch === 0x2D) {\n\t                // U+003E is '>'\n\t                if ((this.source.charCodeAt(this.index + 1) === 0x2D) && (this.source.charCodeAt(this.index + 2) === 0x3E)) {\n\t                    // '-->' is a single-line comment\n\t                    this.index += 3;\n\t                    var comment = this.skipSingleLineComment(3);\n\t                    if (this.trackComment) {\n\t                        comments = comments.concat(comment);\n\t                    }\n\t                }\n\t                else {\n\t                    break;\n\t                }\n\t            }\n\t            else if (ch === 0x3C) {\n\t                if (this.source.slice(this.index + 1, this.index + 4) === '!--') {\n\t                    this.index += 4; // `<!--`\n\t                    var comment = this.skipSingleLineComment(4);\n\t                    if (this.trackComment) {\n\t                        comments = comments.concat(comment);\n\t                    }\n\t                }\n\t                else {\n\t                    break;\n\t                }\n\t            }\n\t            else {\n\t                break;\n\t            }\n\t        }\n\t        return comments;\n\t    };\n\t    ;\n\t    // ECMA-262 11.6.2.2 Future Reserved Words\n\t    Scanner.prototype.isFutureReservedWord = function (id) {\n\t        switch (id) {\n\t            case 'enum':\n\t            case 'export':\n\t            case 'import':\n\t            case 'super':\n\t                return true;\n\t            default:\n\t                return false;\n\t        }\n\t    };\n\t    ;\n\t    Scanner.prototype.isStrictModeReservedWord = function (id) {\n\t        switch (id) {\n\t            case 'implements':\n\t            case 'interface':\n\t            case 'package':\n\t            case 'private':\n\t            case 'protected':\n\t            case 'public':\n\t            case 'static':\n\t            case 'yield':\n\t            case 'let':\n\t                return true;\n\t            default:\n\t                return false;\n\t        }\n\t    };\n\t    ;\n\t    Scanner.prototype.isRestrictedWord = function (id) {\n\t        return id === 'eval' || id === 'arguments';\n\t    };\n\t    ;\n\t    // ECMA-262 11.6.2.1 Keywords\n\t    Scanner.prototype.isKeyword = function (id) {\n\t        switch (id.length) {\n\t            case 2:\n\t                return (id === 'if') || (id === 'in') || (id === 'do');\n\t            case 3:\n\t                return (id === 'var') || (id === 'for') || (id === 'new') ||\n\t                    (id === 'try') || (id === 'let');\n\t            case 4:\n\t                return (id === 'this') || (id === 'else') || (id === 'case') ||\n\t                    (id === 'void') || (id === 'with') || (id === 'enum');\n\t            case 5:\n\t                return (id === 'while') || (id === 'break') || (id === 'catch') ||\n\t                    (id === 'throw') || (id === 'const') || (id === 'yield') ||\n\t                    (id === 'class') || (id === 'super');\n\t            case 6:\n\t                return (id === 'return') || (id === 'typeof') || (id === 'delete') ||\n\t                    (id === 'switch') || (id === 'export') || (id === 'import');\n\t            case 7:\n\t                return (id === 'default') || (id === 'finally') || (id === 'extends');\n\t            case 8:\n\t                return (id === 'function') || (id === 'continue') || (id === 'debugger');\n\t            case 10:\n\t                return (id === 'instanceof');\n\t            default:\n\t                return false;\n\t        }\n\t    };\n\t    ;\n\t    Scanner.prototype.codePointAt = function (i) {\n\t        var cp = this.source.charCodeAt(i);\n\t        if (cp >= 0xD800 && cp <= 0xDBFF) {\n\t            var second = this.source.charCodeAt(i + 1);\n\t            if (second >= 0xDC00 && second <= 0xDFFF) {\n\t                var first = cp;\n\t                cp = (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n\t            }\n\t        }\n\t        return cp;\n\t    };\n\t    ;\n\t    Scanner.prototype.scanHexEscape = function (prefix) {\n\t        var len = (prefix === 'u') ? 4 : 2;\n\t        var code = 0;\n\t        for (var i = 0; i < len; ++i) {\n\t            if (!this.eof() && character_1.Character.isHexDigit(this.source.charCodeAt(this.index))) {\n\t                code = code * 16 + hexValue(this.source[this.index++]);\n\t            }\n\t            else {\n\t                return '';\n\t            }\n\t        }\n\t        return String.fromCharCode(code);\n\t    };\n\t    ;\n\t    Scanner.prototype.scanUnicodeCodePointEscape = function () {\n\t        var ch = this.source[this.index];\n\t        var code = 0;\n\t        // At least, one hex digit is required.\n\t        if (ch === '}') {\n\t            this.throwUnexpectedToken();\n\t        }\n\t        while (!this.eof()) {\n\t            ch = this.source[this.index++];\n\t            if (!character_1.Character.isHexDigit(ch.charCodeAt(0))) {\n\t                break;\n\t            }\n\t            code = code * 16 + hexValue(ch);\n\t        }\n\t        if (code > 0x10FFFF || ch !== '}') {\n\t            this.throwUnexpectedToken();\n\t        }\n\t        return character_1.Character.fromCodePoint(code);\n\t    };\n\t    ;\n\t    Scanner.prototype.getIdentifier = function () {\n\t        var start = this.index++;\n\t        while (!this.eof()) {\n\t            var ch = this.source.charCodeAt(this.index);\n\t            if (ch === 0x5C) {\n\t                // Blackslash (U+005C) marks Unicode escape sequence.\n\t                this.index = start;\n\t                return this.getComplexIdentifier();\n\t            }\n\t            else if (ch >= 0xD800 && ch < 0xDFFF) {\n\t                // Need to handle surrogate pairs.\n\t                this.index = start;\n\t                return this.getComplexIdentifier();\n\t            }\n\t            if (character_1.Character.isIdentifierPart(ch)) {\n\t                ++this.index;\n\t            }\n\t            else {\n\t                break;\n\t            }\n\t        }\n\t        return this.source.slice(start, this.index);\n\t    };\n\t    ;\n\t    Scanner.prototype.getComplexIdentifier = function () {\n\t        var cp = this.codePointAt(this.index);\n\t        var id = character_1.Character.fromCodePoint(cp);\n\t        this.index += id.length;\n\t        // '\\u' (U+005C, U+0075) denotes an escaped character.\n\t        var ch;\n\t        if (cp === 0x5C) {\n\t            if (this.source.charCodeAt(this.index) !== 0x75) {\n\t                this.throwUnexpectedToken();\n\t            }\n\t            ++this.index;\n\t            if (this.source[this.index] === '{') {\n\t                ++this.index;\n\t                ch = this.scanUnicodeCodePointEscape();\n\t            }\n\t            else {\n\t                ch = this.scanHexEscape('u');\n\t                cp = ch.charCodeAt(0);\n\t                if (!ch || ch === '\\\\' || !character_1.Character.isIdentifierStart(cp)) {\n\t                    this.throwUnexpectedToken();\n\t                }\n\t            }\n\t            id = ch;\n\t        }\n\t        while (!this.eof()) {\n\t            cp = this.codePointAt(this.index);\n\t            if (!character_1.Character.isIdentifierPart(cp)) {\n\t                break;\n\t            }\n\t            ch = character_1.Character.fromCodePoint(cp);\n\t            id += ch;\n\t            this.index += ch.length;\n\t            // '\\u' (U+005C, U+0075) denotes an escaped character.\n\t            if (cp === 0x5C) {\n\t                id = id.substr(0, id.length - 1);\n\t                if (this.source.charCodeAt(this.index) !== 0x75) {\n\t                    this.throwUnexpectedToken();\n\t                }\n\t                ++this.index;\n\t                if (this.source[this.index] === '{') {\n\t                    ++this.index;\n\t                    ch = this.scanUnicodeCodePointEscape();\n\t                }\n\t                else {\n\t                    ch = this.scanHexEscape('u');\n\t                    cp = ch.charCodeAt(0);\n\t                    if (!ch || ch === '\\\\' || !character_1.Character.isIdentifierPart(cp)) {\n\t                        this.throwUnexpectedToken();\n\t                    }\n\t                }\n\t                id += ch;\n\t            }\n\t        }\n\t        return id;\n\t    };\n\t    ;\n\t    Scanner.prototype.octalToDecimal = function (ch) {\n\t        // \\0 is not octal escape sequence\n\t        var octal = (ch !== '0');\n\t        var code = octalValue(ch);\n\t        if (!this.eof() && character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {\n\t            octal = true;\n\t            code = code * 8 + octalValue(this.source[this.index++]);\n\t            // 3 digits are only allowed when string starts\n\t            // with 0, 1, 2, 3\n\t            if ('0123'.indexOf(ch) >= 0 && !this.eof() && character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {\n\t                code = code * 8 + octalValue(this.source[this.index++]);\n\t            }\n\t        }\n\t        return {\n\t            code: code,\n\t            octal: octal\n\t        };\n\t    };\n\t    ;\n\t    // ECMA-262 11.6 Names and Keywords\n\t    Scanner.prototype.scanIdentifier = function () {\n\t        var type;\n\t        var start = this.index;\n\t        // Backslash (U+005C) starts an escaped character.\n\t        var id = (this.source.charCodeAt(start) === 0x5C) ? this.getComplexIdentifier() : this.getIdentifier();\n\t        // There is no keyword or literal with only one character.\n\t        // Thus, it must be an identifier.\n\t        if (id.length === 1) {\n\t            type = token_1.Token.Identifier;\n\t        }\n\t        else if (this.isKeyword(id)) {\n\t            type = token_1.Token.Keyword;\n\t        }\n\t        else if (id === 'null') {\n\t            type = token_1.Token.NullLiteral;\n\t        }\n\t        else if (id === 'true' || id === 'false') {\n\t            type = token_1.Token.BooleanLiteral;\n\t        }\n\t        else {\n\t            type = token_1.Token.Identifier;\n\t        }\n\t        return {\n\t            type: type,\n\t            value: id,\n\t            lineNumber: this.lineNumber,\n\t            lineStart: this.lineStart,\n\t            start: start,\n\t            end: this.index\n\t        };\n\t    };\n\t    ;\n\t    // ECMA-262 11.7 Punctuators\n\t    Scanner.prototype.scanPunctuator = function () {\n\t        var token = {\n\t            type: token_1.Token.Punctuator,\n\t            value: '',\n\t            lineNumber: this.lineNumber,\n\t            lineStart: this.lineStart,\n\t            start: this.index,\n\t            end: this.index\n\t        };\n\t        // Check for most common single-character punctuators.\n\t        var str = this.source[this.index];\n\t        switch (str) {\n\t            case '(':\n\t            case '{':\n\t                if (str === '{') {\n\t                    this.curlyStack.push('{');\n\t                }\n\t                ++this.index;\n\t                break;\n\t            case '.':\n\t                ++this.index;\n\t                if (this.source[this.index] === '.' && this.source[this.index + 1] === '.') {\n\t                    // Spread operator: ...\n\t                    this.index += 2;\n\t                    str = '...';\n\t                }\n\t                break;\n\t            case '}':\n\t                ++this.index;\n\t                this.curlyStack.pop();\n\t                break;\n\t            case ')':\n\t            case ';':\n\t            case ',':\n\t            case '[':\n\t            case ']':\n\t            case ':':\n\t            case '?':\n\t            case '~':\n\t                ++this.index;\n\t                break;\n\t            default:\n\t                // 4-character punctuator.\n\t                str = this.source.substr(this.index, 4);\n\t                if (str === '>>>=') {\n\t                    this.index += 4;\n\t                }\n\t                else {\n\t                    // 3-character punctuators.\n\t                    str = str.substr(0, 3);\n\t                    if (str === '===' || str === '!==' || str === '>>>' ||\n\t                        str === '<<=' || str === '>>=' || str === '**=') {\n\t                        this.index += 3;\n\t                    }\n\t                    else {\n\t                        // 2-character punctuators.\n\t                        str = str.substr(0, 2);\n\t                        if (str === '&&' || str === '||' || str === '==' || str === '!=' ||\n\t                            str === '+=' || str === '-=' || str === '*=' || str === '/=' ||\n\t                            str === '++' || str === '--' || str === '<<' || str === '>>' ||\n\t                            str === '&=' || str === '|=' || str === '^=' || str === '%=' ||\n\t                            str === '<=' || str === '>=' || str === '=>' || str === '**') {\n\t                            this.index += 2;\n\t                        }\n\t                        else {\n\t                            // 1-character punctuators.\n\t                            str = this.source[this.index];\n\t                            if ('<>=!+-*%&|^/'.indexOf(str) >= 0) {\n\t                                ++this.index;\n\t                            }\n\t                        }\n\t                    }\n\t                }\n\t        }\n\t        if (this.index === token.start) {\n\t            this.throwUnexpectedToken();\n\t        }\n\t        token.end = this.index;\n\t        token.value = str;\n\t        return token;\n\t    };\n\t    ;\n\t    // ECMA-262 11.8.3 Numeric Literals\n\t    Scanner.prototype.scanHexLiteral = function (start) {\n\t        var number = '';\n\t        while (!this.eof()) {\n\t            if (!character_1.Character.isHexDigit(this.source.charCodeAt(this.index))) {\n\t                break;\n\t            }\n\t            number += this.source[this.index++];\n\t        }\n\t        if (number.length === 0) {\n\t            this.throwUnexpectedToken();\n\t        }\n\t        if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index))) {\n\t            this.throwUnexpectedToken();\n\t        }\n\t        return {\n\t            type: token_1.Token.NumericLiteral,\n\t            value: parseInt('0x' + number, 16),\n\t            lineNumber: this.lineNumber,\n\t            lineStart: this.lineStart,\n\t            start: start,\n\t            end: this.index\n\t        };\n\t    };\n\t    ;\n\t    Scanner.prototype.scanBinaryLiteral = function (start) {\n\t        var number = '';\n\t        var ch;\n\t        while (!this.eof()) {\n\t            ch = this.source[this.index];\n\t            if (ch !== '0' && ch !== '1') {\n\t                break;\n\t            }\n\t            number += this.source[this.index++];\n\t        }\n\t        if (number.length === 0) {\n\t            // only 0b or 0B\n\t            this.throwUnexpectedToken();\n\t        }\n\t        if (!this.eof()) {\n\t            ch = this.source.charCodeAt(this.index);\n\t            /* istanbul ignore else */\n\t            if (character_1.Character.isIdentifierStart(ch) || character_1.Character.isDecimalDigit(ch)) {\n\t                this.throwUnexpectedToken();\n\t            }\n\t        }\n\t        return {\n\t            type: token_1.Token.NumericLiteral,\n\t            value: parseInt(number, 2),\n\t            lineNumber: this.lineNumber,\n\t            lineStart: this.lineStart,\n\t            start: start,\n\t            end: this.index\n\t        };\n\t    };\n\t    ;\n\t    Scanner.prototype.scanOctalLiteral = function (prefix, start) {\n\t        var number = '';\n\t        var octal = false;\n\t        if (character_1.Character.isOctalDigit(prefix.charCodeAt(0))) {\n\t            octal = true;\n\t            number = '0' + this.source[this.index++];\n\t        }\n\t        else {\n\t            ++this.index;\n\t        }\n\t        while (!this.eof()) {\n\t            if (!character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {\n\t                break;\n\t            }\n\t            number += this.source[this.index++];\n\t        }\n\t        if (!octal && number.length === 0) {\n\t            // only 0o or 0O\n\t            this.throwUnexpectedToken();\n\t        }\n\t        if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index)) || character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\n\t            this.throwUnexpectedToken();\n\t        }\n\t        return {\n\t            type: token_1.Token.NumericLiteral,\n\t            value: parseInt(number, 8),\n\t            octal: octal,\n\t            lineNumber: this.lineNumber,\n\t            lineStart: this.lineStart,\n\t            start: start,\n\t            end: this.index\n\t        };\n\t    };\n\t    ;\n\t    Scanner.prototype.isImplicitOctalLiteral = function () {\n\t        // Implicit octal, unless there is a non-octal digit.\n\t        // (Annex B.1.1 on Numeric Literals)\n\t        for (var i = this.index + 1; i < this.length; ++i) {\n\t            var ch = this.source[i];\n\t            if (ch === '8' || ch === '9') {\n\t                return false;\n\t            }\n\t            if (!character_1.Character.isOctalDigit(ch.charCodeAt(0))) {\n\t                return true;\n\t            }\n\t        }\n\t        return true;\n\t    };\n\t    ;\n\t    Scanner.prototype.scanNumericLiteral = function () {\n\t        var start = this.index;\n\t        var ch = this.source[start];\n\t        assert_1.assert(character_1.Character.isDecimalDigit(ch.charCodeAt(0)) || (ch === '.'), 'Numeric literal must start with a decimal digit or a decimal point');\n\t        var number = '';\n\t        if (ch !== '.') {\n\t            number = this.source[this.index++];\n\t            ch = this.source[this.index];\n\t            // Hex number starts with '0x'.\n\t            // Octal number starts with '0'.\n\t            // Octal number in ES6 starts with '0o'.\n\t            // Binary number in ES6 starts with '0b'.\n\t            if (number === '0') {\n\t                if (ch === 'x' || ch === 'X') {\n\t                    ++this.index;\n\t                    return this.scanHexLiteral(start);\n\t                }\n\t                if (ch === 'b' || ch === 'B') {\n\t                    ++this.index;\n\t                    return this.scanBinaryLiteral(start);\n\t                }\n\t                if (ch === 'o' || ch === 'O') {\n\t                    return this.scanOctalLiteral(ch, start);\n\t                }\n\t                if (ch && character_1.Character.isOctalDigit(ch.charCodeAt(0))) {\n\t                    if (this.isImplicitOctalLiteral()) {\n\t                        return this.scanOctalLiteral(ch, start);\n\t                    }\n\t                }\n\t            }\n\t            while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\n\t                number += this.source[this.index++];\n\t            }\n\t            ch = this.source[this.index];\n\t        }\n\t        if (ch === '.') {\n\t            number += this.source[this.index++];\n\t            while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\n\t                number += this.source[this.index++];\n\t            }\n\t            ch = this.source[this.index];\n\t        }\n\t        if (ch === 'e' || ch === 'E') {\n\t            number += this.source[this.index++];\n\t            ch = this.source[this.index];\n\t            if (ch === '+' || ch === '-') {\n\t                number += this.source[this.index++];\n\t            }\n\t            if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\n\t                while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\n\t                    number += this.source[this.index++];\n\t                }\n\t            }\n\t            else {\n\t                this.throwUnexpectedToken();\n\t            }\n\t        }\n\t        if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index))) {\n\t            this.throwUnexpectedToken();\n\t        }\n\t        return {\n\t            type: token_1.Token.NumericLiteral,\n\t            value: parseFloat(number),\n\t            lineNumber: this.lineNumber,\n\t            lineStart: this.lineStart,\n\t            start: start,\n\t            end: this.index\n\t        };\n\t    };\n\t    ;\n\t    // ECMA-262 11.8.4 String Literals\n\t    Scanner.prototype.scanStringLiteral = function () {\n\t        var start = this.index;\n\t        var quote = this.source[start];\n\t        assert_1.assert((quote === '\\'' || quote === '\"'), 'String literal must starts with a quote');\n\t        ++this.index;\n\t        var octal = false;\n\t        var str = '';\n\t        while (!this.eof()) {\n\t            var ch = this.source[this.index++];\n\t            if (ch === quote) {\n\t                quote = '';\n\t                break;\n\t            }\n\t            else if (ch === '\\\\') {\n\t                ch = this.source[this.index++];\n\t                if (!ch || !character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n\t                    switch (ch) {\n\t                        case 'u':\n\t                        case 'x':\n\t                            if (this.source[this.index] === '{') {\n\t                                ++this.index;\n\t                                str += this.scanUnicodeCodePointEscape();\n\t                            }\n\t                            else {\n\t                                var unescaped = this.scanHexEscape(ch);\n\t                                if (!unescaped) {\n\t                                    this.throwUnexpectedToken();\n\t                                }\n\t                                str += unescaped;\n\t                            }\n\t                            break;\n\t                        case 'n':\n\t                            str += '\\n';\n\t                            break;\n\t                        case 'r':\n\t                            str += '\\r';\n\t                            break;\n\t                        case 't':\n\t                            str += '\\t';\n\t                            break;\n\t                        case 'b':\n\t                            str += '\\b';\n\t                            break;\n\t                        case 'f':\n\t                            str += '\\f';\n\t                            break;\n\t                        case 'v':\n\t                            str += '\\x0B';\n\t                            break;\n\t                        case '8':\n\t                        case '9':\n\t                            str += ch;\n\t                            this.tolerateUnexpectedToken();\n\t                            break;\n\t                        default:\n\t                            if (ch && character_1.Character.isOctalDigit(ch.charCodeAt(0))) {\n\t                                var octToDec = this.octalToDecimal(ch);\n\t                                octal = octToDec.octal || octal;\n\t                                str += String.fromCharCode(octToDec.code);\n\t                            }\n\t                            else {\n\t                                str += ch;\n\t                            }\n\t                            break;\n\t                    }\n\t                }\n\t                else {\n\t                    ++this.lineNumber;\n\t                    if (ch === '\\r' && this.source[this.index] === '\\n') {\n\t                        ++this.index;\n\t                    }\n\t                    this.lineStart = this.index;\n\t                }\n\t            }\n\t            else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n\t                break;\n\t            }\n\t            else {\n\t                str += ch;\n\t            }\n\t        }\n\t        if (quote !== '') {\n\t            this.index = start;\n\t            this.throwUnexpectedToken();\n\t        }\n\t        return {\n\t            type: token_1.Token.StringLiteral,\n\t            value: str,\n\t            octal: octal,\n\t            lineNumber: this.lineNumber,\n\t            lineStart: this.lineStart,\n\t            start: start,\n\t            end: this.index\n\t        };\n\t    };\n\t    ;\n\t    // ECMA-262 11.8.6 Template Literal Lexical Components\n\t    Scanner.prototype.scanTemplate = function () {\n\t        var cooked = '';\n\t        var terminated = false;\n\t        var start = this.index;\n\t        var head = (this.source[start] === '`');\n\t        var tail = false;\n\t        var rawOffset = 2;\n\t        ++this.index;\n\t        while (!this.eof()) {\n\t            var ch = this.source[this.index++];\n\t            if (ch === '`') {\n\t                rawOffset = 1;\n\t                tail = true;\n\t                terminated = true;\n\t                break;\n\t            }\n\t            else if (ch === '$') {\n\t                if (this.source[this.index] === '{') {\n\t                    this.curlyStack.push('${');\n\t                    ++this.index;\n\t                    terminated = true;\n\t                    break;\n\t                }\n\t                cooked += ch;\n\t            }\n\t            else if (ch === '\\\\') {\n\t                ch = this.source[this.index++];\n\t                if (!character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n\t                    switch (ch) {\n\t                        case 'n':\n\t                            cooked += '\\n';\n\t                            break;\n\t                        case 'r':\n\t                            cooked += '\\r';\n\t                            break;\n\t                        case 't':\n\t                            cooked += '\\t';\n\t                            break;\n\t                        case 'u':\n\t                        case 'x':\n\t                            if (this.source[this.index] === '{') {\n\t                                ++this.index;\n\t                                cooked += this.scanUnicodeCodePointEscape();\n\t                            }\n\t                            else {\n\t                                var restore = this.index;\n\t                                var unescaped = this.scanHexEscape(ch);\n\t                                if (unescaped) {\n\t                                    cooked += unescaped;\n\t                                }\n\t                                else {\n\t                                    this.index = restore;\n\t                                    cooked += ch;\n\t                                }\n\t                            }\n\t                            break;\n\t                        case 'b':\n\t                            cooked += '\\b';\n\t                            break;\n\t                        case 'f':\n\t                            cooked += '\\f';\n\t                            break;\n\t                        case 'v':\n\t                            cooked += '\\v';\n\t                            break;\n\t                        default:\n\t                            if (ch === '0') {\n\t                                if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\n\t                                    // Illegal: \\01 \\02 and so on\n\t                                    this.throwUnexpectedToken(messages_1.Messages.TemplateOctalLiteral);\n\t                                }\n\t                                cooked += '\\0';\n\t                            }\n\t                            else if (character_1.Character.isOctalDigit(ch.charCodeAt(0))) {\n\t                                // Illegal: \\1 \\2\n\t                                this.throwUnexpectedToken(messages_1.Messages.TemplateOctalLiteral);\n\t                            }\n\t                            else {\n\t                                cooked += ch;\n\t                            }\n\t                            break;\n\t                    }\n\t                }\n\t                else {\n\t                    ++this.lineNumber;\n\t                    if (ch === '\\r' && this.source[this.index] === '\\n') {\n\t                        ++this.index;\n\t                    }\n\t                    this.lineStart = this.index;\n\t                }\n\t            }\n\t            else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n\t                ++this.lineNumber;\n\t                if (ch === '\\r' && this.source[this.index] === '\\n') {\n\t                    ++this.index;\n\t                }\n\t                this.lineStart = this.index;\n\t                cooked += '\\n';\n\t            }\n\t            else {\n\t                cooked += ch;\n\t            }\n\t        }\n\t        if (!terminated) {\n\t            this.throwUnexpectedToken();\n\t        }\n\t        if (!head) {\n\t            this.curlyStack.pop();\n\t        }\n\t        return {\n\t            type: token_1.Token.Template,\n\t            value: {\n\t                cooked: cooked,\n\t                raw: this.source.slice(start + 1, this.index - rawOffset)\n\t            },\n\t            head: head,\n\t            tail: tail,\n\t            lineNumber: this.lineNumber,\n\t            lineStart: this.lineStart,\n\t            start: start,\n\t            end: this.index\n\t        };\n\t    };\n\t    ;\n\t    // ECMA-262 11.8.5 Regular Expression Literals\n\t    Scanner.prototype.testRegExp = function (pattern, flags) {\n\t        // The BMP character to use as a replacement for astral symbols when\n\t        // translating an ES6 \"u\"-flagged pattern to an ES5-compatible\n\t        // approximation.\n\t        // Note: replacing with '\\uFFFF' enables false positives in unlikely\n\t        // scenarios. For example, `[\\u{1044f}-\\u{10440}]` is an invalid\n\t        // pattern that would not be detected by this substitution.\n\t        var astralSubstitute = '\\uFFFF';\n\t        var tmp = pattern;\n\t        var self = this;\n\t        if (flags.indexOf('u') >= 0) {\n\t            tmp = tmp\n\t                .replace(/\\\\u\\{([0-9a-fA-F]+)\\}|\\\\u([a-fA-F0-9]{4})/g, function ($0, $1, $2) {\n\t                var codePoint = parseInt($1 || $2, 16);\n\t                if (codePoint > 0x10FFFF) {\n\t                    self.throwUnexpectedToken(messages_1.Messages.InvalidRegExp);\n\t                }\n\t                if (codePoint <= 0xFFFF) {\n\t                    return String.fromCharCode(codePoint);\n\t                }\n\t                return astralSubstitute;\n\t            })\n\t                .replace(/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g, astralSubstitute);\n\t        }\n\t        // First, detect invalid regular expressions.\n\t        try {\n\t            RegExp(tmp);\n\t        }\n\t        catch (e) {\n\t            this.throwUnexpectedToken(messages_1.Messages.InvalidRegExp);\n\t        }\n\t        // Return a regular expression object for this pattern-flag pair, or\n\t        // `null` in case the current environment doesn't support the flags it\n\t        // uses.\n\t        try {\n\t            return new RegExp(pattern, flags);\n\t        }\n\t        catch (exception) {\n\t            /* istanbul ignore next */\n\t            return null;\n\t        }\n\t    };\n\t    ;\n\t    Scanner.prototype.scanRegExpBody = function () {\n\t        var ch = this.source[this.index];\n\t        assert_1.assert(ch === '/', 'Regular expression literal must start with a slash');\n\t        var str = this.source[this.index++];\n\t        var classMarker = false;\n\t        var terminated = false;\n\t        while (!this.eof()) {\n\t            ch = this.source[this.index++];\n\t            str += ch;\n\t            if (ch === '\\\\') {\n\t                ch = this.source[this.index++];\n\t                // ECMA-262 7.8.5\n\t                if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n\t                    this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);\n\t                }\n\t                str += ch;\n\t            }\n\t            else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n\t                this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);\n\t            }\n\t            else if (classMarker) {\n\t                if (ch === ']') {\n\t                    classMarker = false;\n\t                }\n\t            }\n\t            else {\n\t                if (ch === '/') {\n\t                    terminated = true;\n\t                    break;\n\t                }\n\t                else if (ch === '[') {\n\t                    classMarker = true;\n\t                }\n\t            }\n\t        }\n\t        if (!terminated) {\n\t            this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);\n\t        }\n\t        // Exclude leading and trailing slash.\n\t        var body = str.substr(1, str.length - 2);\n\t        return {\n\t            value: body,\n\t            literal: str\n\t        };\n\t    };\n\t    ;\n\t    Scanner.prototype.scanRegExpFlags = function () {\n\t        var str = '';\n\t        var flags = '';\n\t        while (!this.eof()) {\n\t            var ch = this.source[this.index];\n\t            if (!character_1.Character.isIdentifierPart(ch.charCodeAt(0))) {\n\t                break;\n\t            }\n\t            ++this.index;\n\t            if (ch === '\\\\' && !this.eof()) {\n\t                ch = this.source[this.index];\n\t                if (ch === 'u') {\n\t                    ++this.index;\n\t                    var restore = this.index;\n\t                    ch = this.scanHexEscape('u');\n\t                    if (ch) {\n\t                        flags += ch;\n\t                        for (str += '\\\\u'; restore < this.index; ++restore) {\n\t                            str += this.source[restore];\n\t                        }\n\t                    }\n\t                    else {\n\t                        this.index = restore;\n\t                        flags += 'u';\n\t                        str += '\\\\u';\n\t                    }\n\t                    this.tolerateUnexpectedToken();\n\t                }\n\t                else {\n\t                    str += '\\\\';\n\t                    this.tolerateUnexpectedToken();\n\t                }\n\t            }\n\t            else {\n\t                flags += ch;\n\t                str += ch;\n\t            }\n\t        }\n\t        return {\n\t            value: flags,\n\t            literal: str\n\t        };\n\t    };\n\t    ;\n\t    Scanner.prototype.scanRegExp = function () {\n\t        var start = this.index;\n\t        var body = this.scanRegExpBody();\n\t        var flags = this.scanRegExpFlags();\n\t        var value = this.testRegExp(body.value, flags.value);\n\t        return {\n\t            type: token_1.Token.RegularExpression,\n\t            value: value,\n\t            literal: body.literal + flags.literal,\n\t            regex: {\n\t                pattern: body.value,\n\t                flags: flags.value\n\t            },\n\t            lineNumber: this.lineNumber,\n\t            lineStart: this.lineStart,\n\t            start: start,\n\t            end: this.index\n\t        };\n\t    };\n\t    ;\n\t    Scanner.prototype.lex = function () {\n\t        if (this.eof()) {\n\t            return {\n\t                type: token_1.Token.EOF,\n\t                lineNumber: this.lineNumber,\n\t                lineStart: this.lineStart,\n\t                start: this.index,\n\t                end: this.index\n\t            };\n\t        }\n\t        var cp = this.source.charCodeAt(this.index);\n\t        if (character_1.Character.isIdentifierStart(cp)) {\n\t            return this.scanIdentifier();\n\t        }\n\t        // Very common: ( and ) and ;\n\t        if (cp === 0x28 || cp === 0x29 || cp === 0x3B) {\n\t            return this.scanPunctuator();\n\t        }\n\t        // String literal starts with single quote (U+0027) or double quote (U+0022).\n\t        if (cp === 0x27 || cp === 0x22) {\n\t            return this.scanStringLiteral();\n\t        }\n\t        // Dot (.) U+002E can also start a floating-point number, hence the need\n\t        // to check the next character.\n\t        if (cp === 0x2E) {\n\t            if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index + 1))) {\n\t                return this.scanNumericLiteral();\n\t            }\n\t            return this.scanPunctuator();\n\t        }\n\t        if (character_1.Character.isDecimalDigit(cp)) {\n\t            return this.scanNumericLiteral();\n\t        }\n\t        // Template literals start with ` (U+0060) for template head\n\t        // or } (U+007D) for template middle or template tail.\n\t        if (cp === 0x60 || (cp === 0x7D && this.curlyStack[this.curlyStack.length - 1] === '${')) {\n\t            return this.scanTemplate();\n\t        }\n\t        // Possible identifier start in a surrogate pair.\n\t        if (cp >= 0xD800 && cp < 0xDFFF) {\n\t            if (character_1.Character.isIdentifierStart(this.codePointAt(this.index))) {\n\t                return this.scanIdentifier();\n\t            }\n\t        }\n\t        return this.scanPunctuator();\n\t    };\n\t    ;\n\t    return Scanner;\n\t}());\n\texports.Scanner = Scanner;\n\n\n/***/ },\n/* 9 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t// See also tools/generate-unicode-regex.js.\n\tvar Regex = {\n\t    // Unicode v8.0.0 NonAsciiIdentifierStart:\n\t    NonAsciiIdentifierStart: /[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B4\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309B-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AD\\uA7B0-\\uA7B7\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF30-\\uDF4A\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC03-\\uDC37\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDF00-\\uDF19]|\\uD806[\\uDCA0-\\uDCDF\\uDCFF\\uDEC0-\\uDEF8]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50\\uDF93-\\uDF9F]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD83A[\\uDC00-\\uDCC4]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1]|\\uD87E[\\uDC00-\\uDE1D]/,\n\t    // Unicode v8.0.0 NonAsciiIdentifierPart:\n\t    NonAsciiIdentifierPart: /[\\xAA\\xB5\\xB7\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0-\\u08B4\\u08E3-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0AF9\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58-\\u0C5A\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D57\\u0D5F-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1369-\\u1371\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19DA\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1CF8\\u1CF9\\u1D00-\\u1DF5\\u1DFC-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AD\\uA7B0-\\uA7B7\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C4\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA8FD\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDDFD\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDEE0\\uDF00-\\uDF1F\\uDF30-\\uDF4A\\uDF50-\\uDF7A\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCA0-\\uDCA9\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE38-\\uDE3A\\uDE3F\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE6\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC00-\\uDC46\\uDC66-\\uDC6F\\uDC7F-\\uDCBA\\uDCD0-\\uDCE8\\uDCF0-\\uDCF9\\uDD00-\\uDD34\\uDD36-\\uDD3F\\uDD50-\\uDD73\\uDD76\\uDD80-\\uDDC4\\uDDCA-\\uDDCC\\uDDD0-\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE37\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEEA\\uDEF0-\\uDEF9\\uDF00-\\uDF03\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3C-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF50\\uDF57\\uDF5D-\\uDF63\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDC80-\\uDCC5\\uDCC7\\uDCD0-\\uDCD9\\uDD80-\\uDDB5\\uDDB8-\\uDDC0\\uDDD8-\\uDDDD\\uDE00-\\uDE40\\uDE44\\uDE50-\\uDE59\\uDE80-\\uDEB7\\uDEC0-\\uDEC9\\uDF00-\\uDF19\\uDF1D-\\uDF2B\\uDF30-\\uDF39]|\\uD806[\\uDCA0-\\uDCE9\\uDCFF\\uDEC0-\\uDEF8]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE60-\\uDE69\\uDED0-\\uDEED\\uDEF0-\\uDEF4\\uDF00-\\uDF36\\uDF40-\\uDF43\\uDF50-\\uDF59\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50-\\uDF7E\\uDF8F-\\uDF9F]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99\\uDC9D\\uDC9E]|\\uD834[\\uDD65-\\uDD69\\uDD6D-\\uDD72\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB\\uDFCE-\\uDFFF]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]|\\uD83A[\\uDC00-\\uDCC4\\uDCD0-\\uDCD6]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1]|\\uD87E[\\uDC00-\\uDE1D]|\\uDB40[\\uDD00-\\uDDEF]/\n\t};\n\texports.Character = {\n\t    fromCodePoint: function (cp) {\n\t        return (cp < 0x10000) ? String.fromCharCode(cp) :\n\t            String.fromCharCode(0xD800 + ((cp - 0x10000) >> 10)) +\n\t                String.fromCharCode(0xDC00 + ((cp - 0x10000) & 1023));\n\t    },\n\t    // ECMA-262 11.2 White Space\n\t    isWhiteSpace: function (cp) {\n\t        return (cp === 0x20) || (cp === 0x09) || (cp === 0x0B) || (cp === 0x0C) || (cp === 0xA0) ||\n\t            (cp >= 0x1680 && [0x1680, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF].indexOf(cp) >= 0);\n\t    },\n\t    // ECMA-262 11.3 Line Terminators\n\t    isLineTerminator: function (cp) {\n\t        return (cp === 0x0A) || (cp === 0x0D) || (cp === 0x2028) || (cp === 0x2029);\n\t    },\n\t    // ECMA-262 11.6 Identifier Names and Identifiers\n\t    isIdentifierStart: function (cp) {\n\t        return (cp === 0x24) || (cp === 0x5F) ||\n\t            (cp >= 0x41 && cp <= 0x5A) ||\n\t            (cp >= 0x61 && cp <= 0x7A) ||\n\t            (cp === 0x5C) ||\n\t            ((cp >= 0x80) && Regex.NonAsciiIdentifierStart.test(exports.Character.fromCodePoint(cp)));\n\t    },\n\t    isIdentifierPart: function (cp) {\n\t        return (cp === 0x24) || (cp === 0x5F) ||\n\t            (cp >= 0x41 && cp <= 0x5A) ||\n\t            (cp >= 0x61 && cp <= 0x7A) ||\n\t            (cp >= 0x30 && cp <= 0x39) ||\n\t            (cp === 0x5C) ||\n\t            ((cp >= 0x80) && Regex.NonAsciiIdentifierPart.test(exports.Character.fromCodePoint(cp)));\n\t    },\n\t    // ECMA-262 11.8.3 Numeric Literals\n\t    isDecimalDigit: function (cp) {\n\t        return (cp >= 0x30 && cp <= 0x39); // 0..9\n\t    },\n\t    isHexDigit: function (cp) {\n\t        return (cp >= 0x30 && cp <= 0x39) ||\n\t            (cp >= 0x41 && cp <= 0x46) ||\n\t            (cp >= 0x61 && cp <= 0x66); // a..f\n\t    },\n\t    isOctalDigit: function (cp) {\n\t        return (cp >= 0x30 && cp <= 0x37); // 0..7\n\t    }\n\t};\n\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar syntax_1 = __webpack_require__(2);\n\tvar ArrayExpression = (function () {\n\t    function ArrayExpression(elements) {\n\t        this.type = syntax_1.Syntax.ArrayExpression;\n\t        this.elements = elements;\n\t    }\n\t    return ArrayExpression;\n\t}());\n\texports.ArrayExpression = ArrayExpression;\n\tvar ArrayPattern = (function () {\n\t    function ArrayPattern(elements) {\n\t        this.type = syntax_1.Syntax.ArrayPattern;\n\t        this.elements = elements;\n\t    }\n\t    return ArrayPattern;\n\t}());\n\texports.ArrayPattern = ArrayPattern;\n\tvar ArrowFunctionExpression = (function () {\n\t    function ArrowFunctionExpression(params, body, expression) {\n\t        this.type = syntax_1.Syntax.ArrowFunctionExpression;\n\t        this.id = null;\n\t        this.params = params;\n\t        this.body = body;\n\t        this.generator = false;\n\t        this.expression = expression;\n\t    }\n\t    return ArrowFunctionExpression;\n\t}());\n\texports.ArrowFunctionExpression = ArrowFunctionExpression;\n\tvar AssignmentExpression = (function () {\n\t    function AssignmentExpression(operator, left, right) {\n\t        this.type = syntax_1.Syntax.AssignmentExpression;\n\t        this.operator = operator;\n\t        this.left = left;\n\t        this.right = right;\n\t    }\n\t    return AssignmentExpression;\n\t}());\n\texports.AssignmentExpression = AssignmentExpression;\n\tvar AssignmentPattern = (function () {\n\t    function AssignmentPattern(left, right) {\n\t        this.type = syntax_1.Syntax.AssignmentPattern;\n\t        this.left = left;\n\t        this.right = right;\n\t    }\n\t    return AssignmentPattern;\n\t}());\n\texports.AssignmentPattern = AssignmentPattern;\n\tvar BinaryExpression = (function () {\n\t    function BinaryExpression(operator, left, right) {\n\t        var logical = (operator === '||' || operator === '&&');\n\t        this.type = logical ? syntax_1.Syntax.LogicalExpression : syntax_1.Syntax.BinaryExpression;\n\t        this.operator = operator;\n\t        this.left = left;\n\t        this.right = right;\n\t    }\n\t    return BinaryExpression;\n\t}());\n\texports.BinaryExpression = BinaryExpression;\n\tvar BlockStatement = (function () {\n\t    function BlockStatement(body) {\n\t        this.type = syntax_1.Syntax.BlockStatement;\n\t        this.body = body;\n\t    }\n\t    return BlockStatement;\n\t}());\n\texports.BlockStatement = BlockStatement;\n\tvar BreakStatement = (function () {\n\t    function BreakStatement(label) {\n\t        this.type = syntax_1.Syntax.BreakStatement;\n\t        this.label = label;\n\t    }\n\t    return BreakStatement;\n\t}());\n\texports.BreakStatement = BreakStatement;\n\tvar CallExpression = (function () {\n\t    function CallExpression(callee, args) {\n\t        this.type = syntax_1.Syntax.CallExpression;\n\t        this.callee = callee;\n\t        this.arguments = args;\n\t    }\n\t    return CallExpression;\n\t}());\n\texports.CallExpression = CallExpression;\n\tvar CatchClause = (function () {\n\t    function CatchClause(param, body) {\n\t        this.type = syntax_1.Syntax.CatchClause;\n\t        this.param = param;\n\t        this.body = body;\n\t    }\n\t    return CatchClause;\n\t}());\n\texports.CatchClause = CatchClause;\n\tvar ClassBody = (function () {\n\t    function ClassBody(body) {\n\t        this.type = syntax_1.Syntax.ClassBody;\n\t        this.body = body;\n\t    }\n\t    return ClassBody;\n\t}());\n\texports.ClassBody = ClassBody;\n\tvar ClassDeclaration = (function () {\n\t    function ClassDeclaration(id, superClass, body) {\n\t        this.type = syntax_1.Syntax.ClassDeclaration;\n\t        this.id = id;\n\t        this.superClass = superClass;\n\t        this.body = body;\n\t    }\n\t    return ClassDeclaration;\n\t}());\n\texports.ClassDeclaration = ClassDeclaration;\n\tvar ClassExpression = (function () {\n\t    function ClassExpression(id, superClass, body) {\n\t        this.type = syntax_1.Syntax.ClassExpression;\n\t        this.id = id;\n\t        this.superClass = superClass;\n\t        this.body = body;\n\t    }\n\t    return ClassExpression;\n\t}());\n\texports.ClassExpression = ClassExpression;\n\tvar ComputedMemberExpression = (function () {\n\t    function ComputedMemberExpression(object, property) {\n\t        this.type = syntax_1.Syntax.MemberExpression;\n\t        this.computed = true;\n\t        this.object = object;\n\t        this.property = property;\n\t    }\n\t    return ComputedMemberExpression;\n\t}());\n\texports.ComputedMemberExpression = ComputedMemberExpression;\n\tvar ConditionalExpression = (function () {\n\t    function ConditionalExpression(test, consequent, alternate) {\n\t        this.type = syntax_1.Syntax.ConditionalExpression;\n\t        this.test = test;\n\t        this.consequent = consequent;\n\t        this.alternate = alternate;\n\t    }\n\t    return ConditionalExpression;\n\t}());\n\texports.ConditionalExpression = ConditionalExpression;\n\tvar ContinueStatement = (function () {\n\t    function ContinueStatement(label) {\n\t        this.type = syntax_1.Syntax.ContinueStatement;\n\t        this.label = label;\n\t    }\n\t    return ContinueStatement;\n\t}());\n\texports.ContinueStatement = ContinueStatement;\n\tvar DebuggerStatement = (function () {\n\t    function DebuggerStatement() {\n\t        this.type = syntax_1.Syntax.DebuggerStatement;\n\t    }\n\t    return DebuggerStatement;\n\t}());\n\texports.DebuggerStatement = DebuggerStatement;\n\tvar Directive = (function () {\n\t    function Directive(expression, directive) {\n\t        this.type = syntax_1.Syntax.ExpressionStatement;\n\t        this.expression = expression;\n\t        this.directive = directive;\n\t    }\n\t    return Directive;\n\t}());\n\texports.Directive = Directive;\n\tvar DoWhileStatement = (function () {\n\t    function DoWhileStatement(body, test) {\n\t        this.type = syntax_1.Syntax.DoWhileStatement;\n\t        this.body = body;\n\t        this.test = test;\n\t    }\n\t    return DoWhileStatement;\n\t}());\n\texports.DoWhileStatement = DoWhileStatement;\n\tvar EmptyStatement = (function () {\n\t    function EmptyStatement() {\n\t        this.type = syntax_1.Syntax.EmptyStatement;\n\t    }\n\t    return EmptyStatement;\n\t}());\n\texports.EmptyStatement = EmptyStatement;\n\tvar ExportAllDeclaration = (function () {\n\t    function ExportAllDeclaration(source) {\n\t        this.type = syntax_1.Syntax.ExportAllDeclaration;\n\t        this.source = source;\n\t    }\n\t    return ExportAllDeclaration;\n\t}());\n\texports.ExportAllDeclaration = ExportAllDeclaration;\n\tvar ExportDefaultDeclaration = (function () {\n\t    function ExportDefaultDeclaration(declaration) {\n\t        this.type = syntax_1.Syntax.ExportDefaultDeclaration;\n\t        this.declaration = declaration;\n\t    }\n\t    return ExportDefaultDeclaration;\n\t}());\n\texports.ExportDefaultDeclaration = ExportDefaultDeclaration;\n\tvar ExportNamedDeclaration = (function () {\n\t    function ExportNamedDeclaration(declaration, specifiers, source) {\n\t        this.type = syntax_1.Syntax.ExportNamedDeclaration;\n\t        this.declaration = declaration;\n\t        this.specifiers = specifiers;\n\t        this.source = source;\n\t    }\n\t    return ExportNamedDeclaration;\n\t}());\n\texports.ExportNamedDeclaration = ExportNamedDeclaration;\n\tvar ExportSpecifier = (function () {\n\t    function ExportSpecifier(local, exported) {\n\t        this.type = syntax_1.Syntax.ExportSpecifier;\n\t        this.exported = exported;\n\t        this.local = local;\n\t    }\n\t    return ExportSpecifier;\n\t}());\n\texports.ExportSpecifier = ExportSpecifier;\n\tvar ExpressionStatement = (function () {\n\t    function ExpressionStatement(expression) {\n\t        this.type = syntax_1.Syntax.ExpressionStatement;\n\t        this.expression = expression;\n\t    }\n\t    return ExpressionStatement;\n\t}());\n\texports.ExpressionStatement = ExpressionStatement;\n\tvar ForInStatement = (function () {\n\t    function ForInStatement(left, right, body) {\n\t        this.type = syntax_1.Syntax.ForInStatement;\n\t        this.left = left;\n\t        this.right = right;\n\t        this.body = body;\n\t        this.each = false;\n\t    }\n\t    return ForInStatement;\n\t}());\n\texports.ForInStatement = ForInStatement;\n\tvar ForOfStatement = (function () {\n\t    function ForOfStatement(left, right, body) {\n\t        this.type = syntax_1.Syntax.ForOfStatement;\n\t        this.left = left;\n\t        this.right = right;\n\t        this.body = body;\n\t    }\n\t    return ForOfStatement;\n\t}());\n\texports.ForOfStatement = ForOfStatement;\n\tvar ForStatement = (function () {\n\t    function ForStatement(init, test, update, body) {\n\t        this.type = syntax_1.Syntax.ForStatement;\n\t        this.init = init;\n\t        this.test = test;\n\t        this.update = update;\n\t        this.body = body;\n\t    }\n\t    return ForStatement;\n\t}());\n\texports.ForStatement = ForStatement;\n\tvar FunctionDeclaration = (function () {\n\t    function FunctionDeclaration(id, params, body, generator) {\n\t        this.type = syntax_1.Syntax.FunctionDeclaration;\n\t        this.id = id;\n\t        this.params = params;\n\t        this.body = body;\n\t        this.generator = generator;\n\t        this.expression = false;\n\t    }\n\t    return FunctionDeclaration;\n\t}());\n\texports.FunctionDeclaration = FunctionDeclaration;\n\tvar FunctionExpression = (function () {\n\t    function FunctionExpression(id, params, body, generator) {\n\t        this.type = syntax_1.Syntax.FunctionExpression;\n\t        this.id = id;\n\t        this.params = params;\n\t        this.body = body;\n\t        this.generator = generator;\n\t        this.expression = false;\n\t    }\n\t    return FunctionExpression;\n\t}());\n\texports.FunctionExpression = FunctionExpression;\n\tvar Identifier = (function () {\n\t    function Identifier(name) {\n\t        this.type = syntax_1.Syntax.Identifier;\n\t        this.name = name;\n\t    }\n\t    return Identifier;\n\t}());\n\texports.Identifier = Identifier;\n\tvar IfStatement = (function () {\n\t    function IfStatement(test, consequent, alternate) {\n\t        this.type = syntax_1.Syntax.IfStatement;\n\t        this.test = test;\n\t        this.consequent = consequent;\n\t        this.alternate = alternate;\n\t    }\n\t    return IfStatement;\n\t}());\n\texports.IfStatement = IfStatement;\n\tvar ImportDeclaration = (function () {\n\t    function ImportDeclaration(specifiers, source) {\n\t        this.type = syntax_1.Syntax.ImportDeclaration;\n\t        this.specifiers = specifiers;\n\t        this.source = source;\n\t    }\n\t    return ImportDeclaration;\n\t}());\n\texports.ImportDeclaration = ImportDeclaration;\n\tvar ImportDefaultSpecifier = (function () {\n\t    function ImportDefaultSpecifier(local) {\n\t        this.type = syntax_1.Syntax.ImportDefaultSpecifier;\n\t        this.local = local;\n\t    }\n\t    return ImportDefaultSpecifier;\n\t}());\n\texports.ImportDefaultSpecifier = ImportDefaultSpecifier;\n\tvar ImportNamespaceSpecifier = (function () {\n\t    function ImportNamespaceSpecifier(local) {\n\t        this.type = syntax_1.Syntax.ImportNamespaceSpecifier;\n\t        this.local = local;\n\t    }\n\t    return ImportNamespaceSpecifier;\n\t}());\n\texports.ImportNamespaceSpecifier = ImportNamespaceSpecifier;\n\tvar ImportSpecifier = (function () {\n\t    function ImportSpecifier(local, imported) {\n\t        this.type = syntax_1.Syntax.ImportSpecifier;\n\t        this.local = local;\n\t        this.imported = imported;\n\t    }\n\t    return ImportSpecifier;\n\t}());\n\texports.ImportSpecifier = ImportSpecifier;\n\tvar LabeledStatement = (function () {\n\t    function LabeledStatement(label, body) {\n\t        this.type = syntax_1.Syntax.LabeledStatement;\n\t        this.label = label;\n\t        this.body = body;\n\t    }\n\t    return LabeledStatement;\n\t}());\n\texports.LabeledStatement = LabeledStatement;\n\tvar Literal = (function () {\n\t    function Literal(value, raw) {\n\t        this.type = syntax_1.Syntax.Literal;\n\t        this.value = value;\n\t        this.raw = raw;\n\t    }\n\t    return Literal;\n\t}());\n\texports.Literal = Literal;\n\tvar MetaProperty = (function () {\n\t    function MetaProperty(meta, property) {\n\t        this.type = syntax_1.Syntax.MetaProperty;\n\t        this.meta = meta;\n\t        this.property = property;\n\t    }\n\t    return MetaProperty;\n\t}());\n\texports.MetaProperty = MetaProperty;\n\tvar MethodDefinition = (function () {\n\t    function MethodDefinition(key, computed, value, kind, isStatic) {\n\t        this.type = syntax_1.Syntax.MethodDefinition;\n\t        this.key = key;\n\t        this.computed = computed;\n\t        this.value = value;\n\t        this.kind = kind;\n\t        this.static = isStatic;\n\t    }\n\t    return MethodDefinition;\n\t}());\n\texports.MethodDefinition = MethodDefinition;\n\tvar NewExpression = (function () {\n\t    function NewExpression(callee, args) {\n\t        this.type = syntax_1.Syntax.NewExpression;\n\t        this.callee = callee;\n\t        this.arguments = args;\n\t    }\n\t    return NewExpression;\n\t}());\n\texports.NewExpression = NewExpression;\n\tvar ObjectExpression = (function () {\n\t    function ObjectExpression(properties) {\n\t        this.type = syntax_1.Syntax.ObjectExpression;\n\t        this.properties = properties;\n\t    }\n\t    return ObjectExpression;\n\t}());\n\texports.ObjectExpression = ObjectExpression;\n\tvar ObjectPattern = (function () {\n\t    function ObjectPattern(properties) {\n\t        this.type = syntax_1.Syntax.ObjectPattern;\n\t        this.properties = properties;\n\t    }\n\t    return ObjectPattern;\n\t}());\n\texports.ObjectPattern = ObjectPattern;\n\tvar Program = (function () {\n\t    function Program(body, sourceType) {\n\t        this.type = syntax_1.Syntax.Program;\n\t        this.body = body;\n\t        this.sourceType = sourceType;\n\t    }\n\t    return Program;\n\t}());\n\texports.Program = Program;\n\tvar Property = (function () {\n\t    function Property(kind, key, computed, value, method, shorthand) {\n\t        this.type = syntax_1.Syntax.Property;\n\t        this.key = key;\n\t        this.computed = computed;\n\t        this.value = value;\n\t        this.kind = kind;\n\t        this.method = method;\n\t        this.shorthand = shorthand;\n\t    }\n\t    return Property;\n\t}());\n\texports.Property = Property;\n\tvar RegexLiteral = (function () {\n\t    function RegexLiteral(value, raw, regex) {\n\t        this.type = syntax_1.Syntax.Literal;\n\t        this.value = value;\n\t        this.raw = raw;\n\t        this.regex = regex;\n\t    }\n\t    return RegexLiteral;\n\t}());\n\texports.RegexLiteral = RegexLiteral;\n\tvar RestElement = (function () {\n\t    function RestElement(argument) {\n\t        this.type = syntax_1.Syntax.RestElement;\n\t        this.argument = argument;\n\t    }\n\t    return RestElement;\n\t}());\n\texports.RestElement = RestElement;\n\tvar ReturnStatement = (function () {\n\t    function ReturnStatement(argument) {\n\t        this.type = syntax_1.Syntax.ReturnStatement;\n\t        this.argument = argument;\n\t    }\n\t    return ReturnStatement;\n\t}());\n\texports.ReturnStatement = ReturnStatement;\n\tvar SequenceExpression = (function () {\n\t    function SequenceExpression(expressions) {\n\t        this.type = syntax_1.Syntax.SequenceExpression;\n\t        this.expressions = expressions;\n\t    }\n\t    return SequenceExpression;\n\t}());\n\texports.SequenceExpression = SequenceExpression;\n\tvar SpreadElement = (function () {\n\t    function SpreadElement(argument) {\n\t        this.type = syntax_1.Syntax.SpreadElement;\n\t        this.argument = argument;\n\t    }\n\t    return SpreadElement;\n\t}());\n\texports.SpreadElement = SpreadElement;\n\tvar StaticMemberExpression = (function () {\n\t    function StaticMemberExpression(object, property) {\n\t        this.type = syntax_1.Syntax.MemberExpression;\n\t        this.computed = false;\n\t        this.object = object;\n\t        this.property = property;\n\t    }\n\t    return StaticMemberExpression;\n\t}());\n\texports.StaticMemberExpression = StaticMemberExpression;\n\tvar Super = (function () {\n\t    function Super() {\n\t        this.type = syntax_1.Syntax.Super;\n\t    }\n\t    return Super;\n\t}());\n\texports.Super = Super;\n\tvar SwitchCase = (function () {\n\t    function SwitchCase(test, consequent) {\n\t        this.type = syntax_1.Syntax.SwitchCase;\n\t        this.test = test;\n\t        this.consequent = consequent;\n\t    }\n\t    return SwitchCase;\n\t}());\n\texports.SwitchCase = SwitchCase;\n\tvar SwitchStatement = (function () {\n\t    function SwitchStatement(discriminant, cases) {\n\t        this.type = syntax_1.Syntax.SwitchStatement;\n\t        this.discriminant = discriminant;\n\t        this.cases = cases;\n\t    }\n\t    return SwitchStatement;\n\t}());\n\texports.SwitchStatement = SwitchStatement;\n\tvar TaggedTemplateExpression = (function () {\n\t    function TaggedTemplateExpression(tag, quasi) {\n\t        this.type = syntax_1.Syntax.TaggedTemplateExpression;\n\t        this.tag = tag;\n\t        this.quasi = quasi;\n\t    }\n\t    return TaggedTemplateExpression;\n\t}());\n\texports.TaggedTemplateExpression = TaggedTemplateExpression;\n\tvar TemplateElement = (function () {\n\t    function TemplateElement(value, tail) {\n\t        this.type = syntax_1.Syntax.TemplateElement;\n\t        this.value = value;\n\t        this.tail = tail;\n\t    }\n\t    return TemplateElement;\n\t}());\n\texports.TemplateElement = TemplateElement;\n\tvar TemplateLiteral = (function () {\n\t    function TemplateLiteral(quasis, expressions) {\n\t        this.type = syntax_1.Syntax.TemplateLiteral;\n\t        this.quasis = quasis;\n\t        this.expressions = expressions;\n\t    }\n\t    return TemplateLiteral;\n\t}());\n\texports.TemplateLiteral = TemplateLiteral;\n\tvar ThisExpression = (function () {\n\t    function ThisExpression() {\n\t        this.type = syntax_1.Syntax.ThisExpression;\n\t    }\n\t    return ThisExpression;\n\t}());\n\texports.ThisExpression = ThisExpression;\n\tvar ThrowStatement = (function () {\n\t    function ThrowStatement(argument) {\n\t        this.type = syntax_1.Syntax.ThrowStatement;\n\t        this.argument = argument;\n\t    }\n\t    return ThrowStatement;\n\t}());\n\texports.ThrowStatement = ThrowStatement;\n\tvar TryStatement = (function () {\n\t    function TryStatement(block, handler, finalizer) {\n\t        this.type = syntax_1.Syntax.TryStatement;\n\t        this.block = block;\n\t        this.handler = handler;\n\t        this.finalizer = finalizer;\n\t    }\n\t    return TryStatement;\n\t}());\n\texports.TryStatement = TryStatement;\n\tvar UnaryExpression = (function () {\n\t    function UnaryExpression(operator, argument) {\n\t        this.type = syntax_1.Syntax.UnaryExpression;\n\t        this.operator = operator;\n\t        this.argument = argument;\n\t        this.prefix = true;\n\t    }\n\t    return UnaryExpression;\n\t}());\n\texports.UnaryExpression = UnaryExpression;\n\tvar UpdateExpression = (function () {\n\t    function UpdateExpression(operator, argument, prefix) {\n\t        this.type = syntax_1.Syntax.UpdateExpression;\n\t        this.operator = operator;\n\t        this.argument = argument;\n\t        this.prefix = prefix;\n\t    }\n\t    return UpdateExpression;\n\t}());\n\texports.UpdateExpression = UpdateExpression;\n\tvar VariableDeclaration = (function () {\n\t    function VariableDeclaration(declarations, kind) {\n\t        this.type = syntax_1.Syntax.VariableDeclaration;\n\t        this.declarations = declarations;\n\t        this.kind = kind;\n\t    }\n\t    return VariableDeclaration;\n\t}());\n\texports.VariableDeclaration = VariableDeclaration;\n\tvar VariableDeclarator = (function () {\n\t    function VariableDeclarator(id, init) {\n\t        this.type = syntax_1.Syntax.VariableDeclarator;\n\t        this.id = id;\n\t        this.init = init;\n\t    }\n\t    return VariableDeclarator;\n\t}());\n\texports.VariableDeclarator = VariableDeclarator;\n\tvar WhileStatement = (function () {\n\t    function WhileStatement(test, body) {\n\t        this.type = syntax_1.Syntax.WhileStatement;\n\t        this.test = test;\n\t        this.body = body;\n\t    }\n\t    return WhileStatement;\n\t}());\n\texports.WhileStatement = WhileStatement;\n\tvar WithStatement = (function () {\n\t    function WithStatement(object, body) {\n\t        this.type = syntax_1.Syntax.WithStatement;\n\t        this.object = object;\n\t        this.body = body;\n\t    }\n\t    return WithStatement;\n\t}());\n\texports.WithStatement = WithStatement;\n\tvar YieldExpression = (function () {\n\t    function YieldExpression(argument, delegate) {\n\t        this.type = syntax_1.Syntax.YieldExpression;\n\t        this.argument = argument;\n\t        this.delegate = delegate;\n\t    }\n\t    return YieldExpression;\n\t}());\n\texports.YieldExpression = YieldExpression;\n\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n/* istanbul ignore next */\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar character_1 = __webpack_require__(9);\n\tvar token_1 = __webpack_require__(7);\n\tvar parser_1 = __webpack_require__(3);\n\tvar xhtml_entities_1 = __webpack_require__(12);\n\tvar jsx_syntax_1 = __webpack_require__(13);\n\tvar Node = __webpack_require__(10);\n\tvar JSXNode = __webpack_require__(14);\n\tvar JSXToken;\n\t(function (JSXToken) {\n\t    JSXToken[JSXToken[\"Identifier\"] = 100] = \"Identifier\";\n\t    JSXToken[JSXToken[\"Text\"] = 101] = \"Text\";\n\t})(JSXToken || (JSXToken = {}));\n\ttoken_1.TokenName[JSXToken.Identifier] = 'JSXIdentifier';\n\ttoken_1.TokenName[JSXToken.Text] = 'JSXText';\n\t// Fully qualified element name, e.g. <svg:path> returns \"svg:path\"\n\tfunction getQualifiedElementName(elementName) {\n\t    var qualifiedName;\n\t    switch (elementName.type) {\n\t        case jsx_syntax_1.JSXSyntax.JSXIdentifier:\n\t            var id = (elementName);\n\t            qualifiedName = id.name;\n\t            break;\n\t        case jsx_syntax_1.JSXSyntax.JSXNamespacedName:\n\t            var ns = (elementName);\n\t            qualifiedName = getQualifiedElementName(ns.namespace) + ':' +\n\t                getQualifiedElementName(ns.name);\n\t            break;\n\t        case jsx_syntax_1.JSXSyntax.JSXMemberExpression:\n\t            var expr = (elementName);\n\t            qualifiedName = getQualifiedElementName(expr.object) + '.' +\n\t                getQualifiedElementName(expr.property);\n\t            break;\n\t    }\n\t    return qualifiedName;\n\t}\n\tvar JSXParser = (function (_super) {\n\t    __extends(JSXParser, _super);\n\t    function JSXParser(code, options, delegate) {\n\t        _super.call(this, code, options, delegate);\n\t    }\n\t    JSXParser.prototype.parsePrimaryExpression = function () {\n\t        return this.match('<') ? this.parseJSXRoot() : _super.prototype.parsePrimaryExpression.call(this);\n\t    };\n\t    JSXParser.prototype.startJSX = function () {\n\t        // Unwind the scanner before the lookahead token.\n\t        this.scanner.index = this.startMarker.index;\n\t        this.scanner.lineNumber = this.startMarker.lineNumber;\n\t        this.scanner.lineStart = this.startMarker.lineStart;\n\t    };\n\t    JSXParser.prototype.finishJSX = function () {\n\t        // Prime the next lookahead.\n\t        this.nextToken();\n\t    };\n\t    JSXParser.prototype.reenterJSX = function () {\n\t        this.startJSX();\n\t        this.expectJSX('}');\n\t        // Pop the closing '}' added from the lookahead.\n\t        if (this.config.tokens) {\n\t            this.tokens.pop();\n\t        }\n\t    };\n\t    JSXParser.prototype.createJSXNode = function () {\n\t        this.collectComments();\n\t        return {\n\t            index: this.scanner.index,\n\t            line: this.scanner.lineNumber,\n\t            column: this.scanner.index - this.scanner.lineStart\n\t        };\n\t    };\n\t    JSXParser.prototype.createJSXChildNode = function () {\n\t        return {\n\t            index: this.scanner.index,\n\t            line: this.scanner.lineNumber,\n\t            column: this.scanner.index - this.scanner.lineStart\n\t        };\n\t    };\n\t    JSXParser.prototype.scanXHTMLEntity = function (quote) {\n\t        var result = '&';\n\t        var valid = true;\n\t        var terminated = false;\n\t        var numeric = false;\n\t        var hex = false;\n\t        while (!this.scanner.eof() && valid && !terminated) {\n\t            var ch = this.scanner.source[this.scanner.index];\n\t            if (ch === quote) {\n\t                break;\n\t            }\n\t            terminated = (ch === ';');\n\t            result += ch;\n\t            ++this.scanner.index;\n\t            if (!terminated) {\n\t                switch (result.length) {\n\t                    case 2:\n\t                        // e.g. '&#123;'\n\t                        numeric = (ch === '#');\n\t                        break;\n\t                    case 3:\n\t                        if (numeric) {\n\t                            // e.g. '&#x41;'\n\t                            hex = (ch === 'x');\n\t                            valid = hex || character_1.Character.isDecimalDigit(ch.charCodeAt(0));\n\t                            numeric = numeric && !hex;\n\t                        }\n\t                        break;\n\t                    default:\n\t                        valid = valid && !(numeric && !character_1.Character.isDecimalDigit(ch.charCodeAt(0)));\n\t                        valid = valid && !(hex && !character_1.Character.isHexDigit(ch.charCodeAt(0)));\n\t                        break;\n\t                }\n\t            }\n\t        }\n\t        if (valid && terminated && result.length > 2) {\n\t            // e.g. '&#x41;' becomes just '#x41'\n\t            var str = result.substr(1, result.length - 2);\n\t            if (numeric && str.length > 1) {\n\t                result = String.fromCharCode(parseInt(str.substr(1), 10));\n\t            }\n\t            else if (hex && str.length > 2) {\n\t                result = String.fromCharCode(parseInt('0' + str.substr(1), 16));\n\t            }\n\t            else if (!numeric && !hex && xhtml_entities_1.XHTMLEntities[str]) {\n\t                result = xhtml_entities_1.XHTMLEntities[str];\n\t            }\n\t        }\n\t        return result;\n\t    };\n\t    // Scan the next JSX token. This replaces Scanner#lex when in JSX mode.\n\t    JSXParser.prototype.lexJSX = function () {\n\t        var cp = this.scanner.source.charCodeAt(this.scanner.index);\n\t        // < > / : = { }\n\t        if (cp === 60 || cp === 62 || cp === 47 || cp === 58 || cp === 61 || cp === 123 || cp === 125) {\n\t            var value = this.scanner.source[this.scanner.index++];\n\t            return {\n\t                type: token_1.Token.Punctuator,\n\t                value: value,\n\t                lineNumber: this.scanner.lineNumber,\n\t                lineStart: this.scanner.lineStart,\n\t                start: this.scanner.index - 1,\n\t                end: this.scanner.index\n\t            };\n\t        }\n\t        // \" '\n\t        if (cp === 34 || cp === 39) {\n\t            var start = this.scanner.index;\n\t            var quote = this.scanner.source[this.scanner.index++];\n\t            var str = '';\n\t            while (!this.scanner.eof()) {\n\t                var ch = this.scanner.source[this.scanner.index++];\n\t                if (ch === quote) {\n\t                    break;\n\t                }\n\t                else if (ch === '&') {\n\t                    str += this.scanXHTMLEntity(quote);\n\t                }\n\t                else {\n\t                    str += ch;\n\t                }\n\t            }\n\t            return {\n\t                type: token_1.Token.StringLiteral,\n\t                value: str,\n\t                lineNumber: this.scanner.lineNumber,\n\t                lineStart: this.scanner.lineStart,\n\t                start: start,\n\t                end: this.scanner.index\n\t            };\n\t        }\n\t        // ... or .\n\t        if (cp === 46) {\n\t            var n1 = this.scanner.source.charCodeAt(this.scanner.index + 1);\n\t            var n2 = this.scanner.source.charCodeAt(this.scanner.index + 2);\n\t            var value = (n1 === 46 && n2 === 46) ? '...' : '.';\n\t            var start = this.scanner.index;\n\t            this.scanner.index += value.length;\n\t            return {\n\t                type: token_1.Token.Punctuator,\n\t                value: value,\n\t                lineNumber: this.scanner.lineNumber,\n\t                lineStart: this.scanner.lineStart,\n\t                start: start,\n\t                end: this.scanner.index\n\t            };\n\t        }\n\t        // `\n\t        if (cp === 96) {\n\t            // Only placeholder, since it will be rescanned as a real assignment expression.\n\t            return {\n\t                type: token_1.Token.Template,\n\t                lineNumber: this.scanner.lineNumber,\n\t                lineStart: this.scanner.lineStart,\n\t                start: this.scanner.index,\n\t                end: this.scanner.index\n\t            };\n\t        }\n\t        // Identifer can not contain backslash (char code 92).\n\t        if (character_1.Character.isIdentifierStart(cp) && (cp !== 92)) {\n\t            var start = this.scanner.index;\n\t            ++this.scanner.index;\n\t            while (!this.scanner.eof()) {\n\t                var ch = this.scanner.source.charCodeAt(this.scanner.index);\n\t                if (character_1.Character.isIdentifierPart(ch) && (ch !== 92)) {\n\t                    ++this.scanner.index;\n\t                }\n\t                else if (ch === 45) {\n\t                    // Hyphen (char code 45) can be part of an identifier.\n\t                    ++this.scanner.index;\n\t                }\n\t                else {\n\t                    break;\n\t                }\n\t            }\n\t            var id = this.scanner.source.slice(start, this.scanner.index);\n\t            return {\n\t                type: JSXToken.Identifier,\n\t                value: id,\n\t                lineNumber: this.scanner.lineNumber,\n\t                lineStart: this.scanner.lineStart,\n\t                start: start,\n\t                end: this.scanner.index\n\t            };\n\t        }\n\t        this.scanner.throwUnexpectedToken();\n\t    };\n\t    JSXParser.prototype.nextJSXToken = function () {\n\t        this.collectComments();\n\t        this.startMarker.index = this.scanner.index;\n\t        this.startMarker.lineNumber = this.scanner.lineNumber;\n\t        this.startMarker.lineStart = this.scanner.lineStart;\n\t        var token = this.lexJSX();\n\t        this.lastMarker.index = this.scanner.index;\n\t        this.lastMarker.lineNumber = this.scanner.lineNumber;\n\t        this.lastMarker.lineStart = this.scanner.lineStart;\n\t        if (this.config.tokens) {\n\t            this.tokens.push(this.convertToken(token));\n\t        }\n\t        return token;\n\t    };\n\t    JSXParser.prototype.nextJSXText = function () {\n\t        this.startMarker.index = this.scanner.index;\n\t        this.startMarker.lineNumber = this.scanner.lineNumber;\n\t        this.startMarker.lineStart = this.scanner.lineStart;\n\t        var start = this.scanner.index;\n\t        var text = '';\n\t        while (!this.scanner.eof()) {\n\t            var ch = this.scanner.source[this.scanner.index];\n\t            if (ch === '{' || ch === '<') {\n\t                break;\n\t            }\n\t            ++this.scanner.index;\n\t            text += ch;\n\t            if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n\t                ++this.scanner.lineNumber;\n\t                if (ch === '\\r' && this.scanner.source[this.scanner.index] === '\\n') {\n\t                    ++this.scanner.index;\n\t                }\n\t                this.scanner.lineStart = this.scanner.index;\n\t            }\n\t        }\n\t        this.lastMarker.index = this.scanner.index;\n\t        this.lastMarker.lineNumber = this.scanner.lineNumber;\n\t        this.lastMarker.lineStart = this.scanner.lineStart;\n\t        var token = {\n\t            type: JSXToken.Text,\n\t            value: text,\n\t            lineNumber: this.scanner.lineNumber,\n\t            lineStart: this.scanner.lineStart,\n\t            start: start,\n\t            end: this.scanner.index\n\t        };\n\t        if ((text.length > 0) && this.config.tokens) {\n\t            this.tokens.push(this.convertToken(token));\n\t        }\n\t        return token;\n\t    };\n\t    JSXParser.prototype.peekJSXToken = function () {\n\t        var previousIndex = this.scanner.index;\n\t        var previousLineNumber = this.scanner.lineNumber;\n\t        var previousLineStart = this.scanner.lineStart;\n\t        this.scanner.scanComments();\n\t        var next = this.lexJSX();\n\t        this.scanner.index = previousIndex;\n\t        this.scanner.lineNumber = previousLineNumber;\n\t        this.scanner.lineStart = previousLineStart;\n\t        return next;\n\t    };\n\t    // Expect the next JSX token to match the specified punctuator.\n\t    // If not, an exception will be thrown.\n\t    JSXParser.prototype.expectJSX = function (value) {\n\t        var token = this.nextJSXToken();\n\t        if (token.type !== token_1.Token.Punctuator || token.value !== value) {\n\t            this.throwUnexpectedToken(token);\n\t        }\n\t    };\n\t    // Return true if the next JSX token matches the specified punctuator.\n\t    JSXParser.prototype.matchJSX = function (value) {\n\t        var next = this.peekJSXToken();\n\t        return next.type === token_1.Token.Punctuator && next.value === value;\n\t    };\n\t    JSXParser.prototype.parseJSXIdentifier = function () {\n\t        var node = this.createJSXNode();\n\t        var token = this.nextJSXToken();\n\t        if (token.type !== JSXToken.Identifier) {\n\t            this.throwUnexpectedToken(token);\n\t        }\n\t        return this.finalize(node, new JSXNode.JSXIdentifier(token.value));\n\t    };\n\t    JSXParser.prototype.parseJSXElementName = function () {\n\t        var node = this.createJSXNode();\n\t        var elementName = this.parseJSXIdentifier();\n\t        if (this.matchJSX(':')) {\n\t            var namespace = elementName;\n\t            this.expectJSX(':');\n\t            var name_1 = this.parseJSXIdentifier();\n\t            elementName = this.finalize(node, new JSXNode.JSXNamespacedName(namespace, name_1));\n\t        }\n\t        else if (this.matchJSX('.')) {\n\t            while (this.matchJSX('.')) {\n\t                var object = elementName;\n\t                this.expectJSX('.');\n\t                var property = this.parseJSXIdentifier();\n\t                elementName = this.finalize(node, new JSXNode.JSXMemberExpression(object, property));\n\t            }\n\t        }\n\t        return elementName;\n\t    };\n\t    JSXParser.prototype.parseJSXAttributeName = function () {\n\t        var node = this.createJSXNode();\n\t        var attributeName;\n\t        var identifier = this.parseJSXIdentifier();\n\t        if (this.matchJSX(':')) {\n\t            var namespace = identifier;\n\t            this.expectJSX(':');\n\t            var name_2 = this.parseJSXIdentifier();\n\t            attributeName = this.finalize(node, new JSXNode.JSXNamespacedName(namespace, name_2));\n\t        }\n\t        else {\n\t            attributeName = identifier;\n\t        }\n\t        return attributeName;\n\t    };\n\t    JSXParser.prototype.parseJSXStringLiteralAttribute = function () {\n\t        var node = this.createJSXNode();\n\t        var token = this.nextJSXToken();\n\t        if (token.type !== token_1.Token.StringLiteral) {\n\t            this.throwUnexpectedToken(token);\n\t        }\n\t        var raw = this.getTokenRaw(token);\n\t        return this.finalize(node, new Node.Literal(token.value, raw));\n\t    };\n\t    JSXParser.prototype.parseJSXExpressionAttribute = function () {\n\t        var node = this.createJSXNode();\n\t        this.expectJSX('{');\n\t        this.finishJSX();\n\t        if (this.match('}')) {\n\t            this.tolerateError('JSX attributes must only be assigned a non-empty expression');\n\t        }\n\t        var expression = this.parseAssignmentExpression();\n\t        this.reenterJSX();\n\t        return this.finalize(node, new JSXNode.JSXExpressionContainer(expression));\n\t    };\n\t    JSXParser.prototype.parseJSXAttributeValue = function () {\n\t        return this.matchJSX('{') ? this.parseJSXExpressionAttribute() :\n\t            this.matchJSX('<') ? this.parseJSXElement() : this.parseJSXStringLiteralAttribute();\n\t    };\n\t    JSXParser.prototype.parseJSXNameValueAttribute = function () {\n\t        var node = this.createJSXNode();\n\t        var name = this.parseJSXAttributeName();\n\t        var value = null;\n\t        if (this.matchJSX('=')) {\n\t            this.expectJSX('=');\n\t            value = this.parseJSXAttributeValue();\n\t        }\n\t        return this.finalize(node, new JSXNode.JSXAttribute(name, value));\n\t    };\n\t    JSXParser.prototype.parseJSXSpreadAttribute = function () {\n\t        var node = this.createJSXNode();\n\t        this.expectJSX('{');\n\t        this.expectJSX('...');\n\t        this.finishJSX();\n\t        var argument = this.parseAssignmentExpression();\n\t        this.reenterJSX();\n\t        return this.finalize(node, new JSXNode.JSXSpreadAttribute(argument));\n\t    };\n\t    JSXParser.prototype.parseJSXAttributes = function () {\n\t        var attributes = [];\n\t        while (!this.matchJSX('/') && !this.matchJSX('>')) {\n\t            var attribute = this.matchJSX('{') ? this.parseJSXSpreadAttribute() :\n\t                this.parseJSXNameValueAttribute();\n\t            attributes.push(attribute);\n\t        }\n\t        return attributes;\n\t    };\n\t    JSXParser.prototype.parseJSXOpeningElement = function () {\n\t        var node = this.createJSXNode();\n\t        this.expectJSX('<');\n\t        var name = this.parseJSXElementName();\n\t        var attributes = this.parseJSXAttributes();\n\t        var selfClosing = this.matchJSX('/');\n\t        if (selfClosing) {\n\t            this.expectJSX('/');\n\t        }\n\t        this.expectJSX('>');\n\t        return this.finalize(node, new JSXNode.JSXOpeningElement(name, selfClosing, attributes));\n\t    };\n\t    JSXParser.prototype.parseJSXBoundaryElement = function () {\n\t        var node = this.createJSXNode();\n\t        this.expectJSX('<');\n\t        if (this.matchJSX('/')) {\n\t            this.expectJSX('/');\n\t            var name_3 = this.parseJSXElementName();\n\t            this.expectJSX('>');\n\t            return this.finalize(node, new JSXNode.JSXClosingElement(name_3));\n\t        }\n\t        var name = this.parseJSXElementName();\n\t        var attributes = this.parseJSXAttributes();\n\t        var selfClosing = this.matchJSX('/');\n\t        if (selfClosing) {\n\t            this.expectJSX('/');\n\t        }\n\t        this.expectJSX('>');\n\t        return this.finalize(node, new JSXNode.JSXOpeningElement(name, selfClosing, attributes));\n\t    };\n\t    JSXParser.prototype.parseJSXEmptyExpression = function () {\n\t        var node = this.createJSXChildNode();\n\t        this.collectComments();\n\t        this.lastMarker.index = this.scanner.index;\n\t        this.lastMarker.lineNumber = this.scanner.lineNumber;\n\t        this.lastMarker.lineStart = this.scanner.lineStart;\n\t        return this.finalize(node, new JSXNode.JSXEmptyExpression());\n\t    };\n\t    JSXParser.prototype.parseJSXExpressionContainer = function () {\n\t        var node = this.createJSXNode();\n\t        this.expectJSX('{');\n\t        var expression;\n\t        if (this.matchJSX('}')) {\n\t            expression = this.parseJSXEmptyExpression();\n\t            this.expectJSX('}');\n\t        }\n\t        else {\n\t            this.finishJSX();\n\t            expression = this.parseAssignmentExpression();\n\t            this.reenterJSX();\n\t        }\n\t        return this.finalize(node, new JSXNode.JSXExpressionContainer(expression));\n\t    };\n\t    JSXParser.prototype.parseJSXChildren = function () {\n\t        var children = [];\n\t        while (!this.scanner.eof()) {\n\t            var node = this.createJSXChildNode();\n\t            var token = this.nextJSXText();\n\t            if (token.start < token.end) {\n\t                var raw = this.getTokenRaw(token);\n\t                var child = this.finalize(node, new JSXNode.JSXText(token.value, raw));\n\t                children.push(child);\n\t            }\n\t            if (this.scanner.source[this.scanner.index] === '{') {\n\t                var container = this.parseJSXExpressionContainer();\n\t                children.push(container);\n\t            }\n\t            else {\n\t                break;\n\t            }\n\t        }\n\t        return children;\n\t    };\n\t    JSXParser.prototype.parseComplexJSXElement = function (el) {\n\t        var stack = [];\n\t        while (!this.scanner.eof()) {\n\t            el.children = el.children.concat(this.parseJSXChildren());\n\t            var node = this.createJSXChildNode();\n\t            var element = this.parseJSXBoundaryElement();\n\t            if (element.type === jsx_syntax_1.JSXSyntax.JSXOpeningElement) {\n\t                var opening = (element);\n\t                if (opening.selfClosing) {\n\t                    var child = this.finalize(node, new JSXNode.JSXElement(opening, [], null));\n\t                    el.children.push(child);\n\t                }\n\t                else {\n\t                    stack.push(el);\n\t                    el = { node: node, opening: opening, closing: null, children: [] };\n\t                }\n\t            }\n\t            if (element.type === jsx_syntax_1.JSXSyntax.JSXClosingElement) {\n\t                el.closing = (element);\n\t                var open_1 = getQualifiedElementName(el.opening.name);\n\t                var close_1 = getQualifiedElementName(el.closing.name);\n\t                if (open_1 !== close_1) {\n\t                    this.tolerateError('Expected corresponding JSX closing tag for %0', open_1);\n\t                }\n\t                if (stack.length > 0) {\n\t                    var child = this.finalize(el.node, new JSXNode.JSXElement(el.opening, el.children, el.closing));\n\t                    el = stack.pop();\n\t                    el.children.push(child);\n\t                }\n\t                else {\n\t                    break;\n\t                }\n\t            }\n\t        }\n\t        return el;\n\t    };\n\t    JSXParser.prototype.parseJSXElement = function () {\n\t        var node = this.createJSXNode();\n\t        var opening = this.parseJSXOpeningElement();\n\t        var children = [];\n\t        var closing = null;\n\t        if (!opening.selfClosing) {\n\t            var el = this.parseComplexJSXElement({ node: node, opening: opening, closing: closing, children: children });\n\t            children = el.children;\n\t            closing = el.closing;\n\t        }\n\t        return this.finalize(node, new JSXNode.JSXElement(opening, children, closing));\n\t    };\n\t    JSXParser.prototype.parseJSXRoot = function () {\n\t        // Pop the opening '<' added from the lookahead.\n\t        if (this.config.tokens) {\n\t            this.tokens.pop();\n\t        }\n\t        this.startJSX();\n\t        var element = this.parseJSXElement();\n\t        this.finishJSX();\n\t        return element;\n\t    };\n\t    return JSXParser;\n\t}(parser_1.Parser));\n\texports.JSXParser = JSXParser;\n\n\n/***/ },\n/* 12 */\n/***/ function(module, exports) {\n\n\t// Generated by generate-xhtml-entities.js. DO NOT MODIFY!\n\t\"use strict\";\n\texports.XHTMLEntities = {\n\t    quot: '\\u0022',\n\t    amp: '\\u0026',\n\t    apos: '\\u0027',\n\t    gt: '\\u003E',\n\t    nbsp: '\\u00A0',\n\t    iexcl: '\\u00A1',\n\t    cent: '\\u00A2',\n\t    pound: '\\u00A3',\n\t    curren: '\\u00A4',\n\t    yen: '\\u00A5',\n\t    brvbar: '\\u00A6',\n\t    sect: '\\u00A7',\n\t    uml: '\\u00A8',\n\t    copy: '\\u00A9',\n\t    ordf: '\\u00AA',\n\t    laquo: '\\u00AB',\n\t    not: '\\u00AC',\n\t    shy: '\\u00AD',\n\t    reg: '\\u00AE',\n\t    macr: '\\u00AF',\n\t    deg: '\\u00B0',\n\t    plusmn: '\\u00B1',\n\t    sup2: '\\u00B2',\n\t    sup3: '\\u00B3',\n\t    acute: '\\u00B4',\n\t    micro: '\\u00B5',\n\t    para: '\\u00B6',\n\t    middot: '\\u00B7',\n\t    cedil: '\\u00B8',\n\t    sup1: '\\u00B9',\n\t    ordm: '\\u00BA',\n\t    raquo: '\\u00BB',\n\t    frac14: '\\u00BC',\n\t    frac12: '\\u00BD',\n\t    frac34: '\\u00BE',\n\t    iquest: '\\u00BF',\n\t    Agrave: '\\u00C0',\n\t    Aacute: '\\u00C1',\n\t    Acirc: '\\u00C2',\n\t    Atilde: '\\u00C3',\n\t    Auml: '\\u00C4',\n\t    Aring: '\\u00C5',\n\t    AElig: '\\u00C6',\n\t    Ccedil: '\\u00C7',\n\t    Egrave: '\\u00C8',\n\t    Eacute: '\\u00C9',\n\t    Ecirc: '\\u00CA',\n\t    Euml: '\\u00CB',\n\t    Igrave: '\\u00CC',\n\t    Iacute: '\\u00CD',\n\t    Icirc: '\\u00CE',\n\t    Iuml: '\\u00CF',\n\t    ETH: '\\u00D0',\n\t    Ntilde: '\\u00D1',\n\t    Ograve: '\\u00D2',\n\t    Oacute: '\\u00D3',\n\t    Ocirc: '\\u00D4',\n\t    Otilde: '\\u00D5',\n\t    Ouml: '\\u00D6',\n\t    times: '\\u00D7',\n\t    Oslash: '\\u00D8',\n\t    Ugrave: '\\u00D9',\n\t    Uacute: '\\u00DA',\n\t    Ucirc: '\\u00DB',\n\t    Uuml: '\\u00DC',\n\t    Yacute: '\\u00DD',\n\t    THORN: '\\u00DE',\n\t    szlig: '\\u00DF',\n\t    agrave: '\\u00E0',\n\t    aacute: '\\u00E1',\n\t    acirc: '\\u00E2',\n\t    atilde: '\\u00E3',\n\t    auml: '\\u00E4',\n\t    aring: '\\u00E5',\n\t    aelig: '\\u00E6',\n\t    ccedil: '\\u00E7',\n\t    egrave: '\\u00E8',\n\t    eacute: '\\u00E9',\n\t    ecirc: '\\u00EA',\n\t    euml: '\\u00EB',\n\t    igrave: '\\u00EC',\n\t    iacute: '\\u00ED',\n\t    icirc: '\\u00EE',\n\t    iuml: '\\u00EF',\n\t    eth: '\\u00F0',\n\t    ntilde: '\\u00F1',\n\t    ograve: '\\u00F2',\n\t    oacute: '\\u00F3',\n\t    ocirc: '\\u00F4',\n\t    otilde: '\\u00F5',\n\t    ouml: '\\u00F6',\n\t    divide: '\\u00F7',\n\t    oslash: '\\u00F8',\n\t    ugrave: '\\u00F9',\n\t    uacute: '\\u00FA',\n\t    ucirc: '\\u00FB',\n\t    uuml: '\\u00FC',\n\t    yacute: '\\u00FD',\n\t    thorn: '\\u00FE',\n\t    yuml: '\\u00FF',\n\t    OElig: '\\u0152',\n\t    oelig: '\\u0153',\n\t    Scaron: '\\u0160',\n\t    scaron: '\\u0161',\n\t    Yuml: '\\u0178',\n\t    fnof: '\\u0192',\n\t    circ: '\\u02C6',\n\t    tilde: '\\u02DC',\n\t    Alpha: '\\u0391',\n\t    Beta: '\\u0392',\n\t    Gamma: '\\u0393',\n\t    Delta: '\\u0394',\n\t    Epsilon: '\\u0395',\n\t    Zeta: '\\u0396',\n\t    Eta: '\\u0397',\n\t    Theta: '\\u0398',\n\t    Iota: '\\u0399',\n\t    Kappa: '\\u039A',\n\t    Lambda: '\\u039B',\n\t    Mu: '\\u039C',\n\t    Nu: '\\u039D',\n\t    Xi: '\\u039E',\n\t    Omicron: '\\u039F',\n\t    Pi: '\\u03A0',\n\t    Rho: '\\u03A1',\n\t    Sigma: '\\u03A3',\n\t    Tau: '\\u03A4',\n\t    Upsilon: '\\u03A5',\n\t    Phi: '\\u03A6',\n\t    Chi: '\\u03A7',\n\t    Psi: '\\u03A8',\n\t    Omega: '\\u03A9',\n\t    alpha: '\\u03B1',\n\t    beta: '\\u03B2',\n\t    gamma: '\\u03B3',\n\t    delta: '\\u03B4',\n\t    epsilon: '\\u03B5',\n\t    zeta: '\\u03B6',\n\t    eta: '\\u03B7',\n\t    theta: '\\u03B8',\n\t    iota: '\\u03B9',\n\t    kappa: '\\u03BA',\n\t    lambda: '\\u03BB',\n\t    mu: '\\u03BC',\n\t    nu: '\\u03BD',\n\t    xi: '\\u03BE',\n\t    omicron: '\\u03BF',\n\t    pi: '\\u03C0',\n\t    rho: '\\u03C1',\n\t    sigmaf: '\\u03C2',\n\t    sigma: '\\u03C3',\n\t    tau: '\\u03C4',\n\t    upsilon: '\\u03C5',\n\t    phi: '\\u03C6',\n\t    chi: '\\u03C7',\n\t    psi: '\\u03C8',\n\t    omega: '\\u03C9',\n\t    thetasym: '\\u03D1',\n\t    upsih: '\\u03D2',\n\t    piv: '\\u03D6',\n\t    ensp: '\\u2002',\n\t    emsp: '\\u2003',\n\t    thinsp: '\\u2009',\n\t    zwnj: '\\u200C',\n\t    zwj: '\\u200D',\n\t    lrm: '\\u200E',\n\t    rlm: '\\u200F',\n\t    ndash: '\\u2013',\n\t    mdash: '\\u2014',\n\t    lsquo: '\\u2018',\n\t    rsquo: '\\u2019',\n\t    sbquo: '\\u201A',\n\t    ldquo: '\\u201C',\n\t    rdquo: '\\u201D',\n\t    bdquo: '\\u201E',\n\t    dagger: '\\u2020',\n\t    Dagger: '\\u2021',\n\t    bull: '\\u2022',\n\t    hellip: '\\u2026',\n\t    permil: '\\u2030',\n\t    prime: '\\u2032',\n\t    Prime: '\\u2033',\n\t    lsaquo: '\\u2039',\n\t    rsaquo: '\\u203A',\n\t    oline: '\\u203E',\n\t    frasl: '\\u2044',\n\t    euro: '\\u20AC',\n\t    image: '\\u2111',\n\t    weierp: '\\u2118',\n\t    real: '\\u211C',\n\t    trade: '\\u2122',\n\t    alefsym: '\\u2135',\n\t    larr: '\\u2190',\n\t    uarr: '\\u2191',\n\t    rarr: '\\u2192',\n\t    darr: '\\u2193',\n\t    harr: '\\u2194',\n\t    crarr: '\\u21B5',\n\t    lArr: '\\u21D0',\n\t    uArr: '\\u21D1',\n\t    rArr: '\\u21D2',\n\t    dArr: '\\u21D3',\n\t    hArr: '\\u21D4',\n\t    forall: '\\u2200',\n\t    part: '\\u2202',\n\t    exist: '\\u2203',\n\t    empty: '\\u2205',\n\t    nabla: '\\u2207',\n\t    isin: '\\u2208',\n\t    notin: '\\u2209',\n\t    ni: '\\u220B',\n\t    prod: '\\u220F',\n\t    sum: '\\u2211',\n\t    minus: '\\u2212',\n\t    lowast: '\\u2217',\n\t    radic: '\\u221A',\n\t    prop: '\\u221D',\n\t    infin: '\\u221E',\n\t    ang: '\\u2220',\n\t    and: '\\u2227',\n\t    or: '\\u2228',\n\t    cap: '\\u2229',\n\t    cup: '\\u222A',\n\t    int: '\\u222B',\n\t    there4: '\\u2234',\n\t    sim: '\\u223C',\n\t    cong: '\\u2245',\n\t    asymp: '\\u2248',\n\t    ne: '\\u2260',\n\t    equiv: '\\u2261',\n\t    le: '\\u2264',\n\t    ge: '\\u2265',\n\t    sub: '\\u2282',\n\t    sup: '\\u2283',\n\t    nsub: '\\u2284',\n\t    sube: '\\u2286',\n\t    supe: '\\u2287',\n\t    oplus: '\\u2295',\n\t    otimes: '\\u2297',\n\t    perp: '\\u22A5',\n\t    sdot: '\\u22C5',\n\t    lceil: '\\u2308',\n\t    rceil: '\\u2309',\n\t    lfloor: '\\u230A',\n\t    rfloor: '\\u230B',\n\t    loz: '\\u25CA',\n\t    spades: '\\u2660',\n\t    clubs: '\\u2663',\n\t    hearts: '\\u2665',\n\t    diams: '\\u2666',\n\t    lang: '\\u27E8',\n\t    rang: '\\u27E9'\n\t};\n\n\n/***/ },\n/* 13 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\texports.JSXSyntax = {\n\t    JSXAttribute: 'JSXAttribute',\n\t    JSXClosingElement: 'JSXClosingElement',\n\t    JSXElement: 'JSXElement',\n\t    JSXEmptyExpression: 'JSXEmptyExpression',\n\t    JSXExpressionContainer: 'JSXExpressionContainer',\n\t    JSXIdentifier: 'JSXIdentifier',\n\t    JSXMemberExpression: 'JSXMemberExpression',\n\t    JSXNamespacedName: 'JSXNamespacedName',\n\t    JSXOpeningElement: 'JSXOpeningElement',\n\t    JSXSpreadAttribute: 'JSXSpreadAttribute',\n\t    JSXText: 'JSXText'\n\t};\n\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar jsx_syntax_1 = __webpack_require__(13);\n\tvar JSXClosingElement = (function () {\n\t    function JSXClosingElement(name) {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXClosingElement;\n\t        this.name = name;\n\t    }\n\t    return JSXClosingElement;\n\t}());\n\texports.JSXClosingElement = JSXClosingElement;\n\tvar JSXElement = (function () {\n\t    function JSXElement(openingElement, children, closingElement) {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXElement;\n\t        this.openingElement = openingElement;\n\t        this.children = children;\n\t        this.closingElement = closingElement;\n\t    }\n\t    return JSXElement;\n\t}());\n\texports.JSXElement = JSXElement;\n\tvar JSXEmptyExpression = (function () {\n\t    function JSXEmptyExpression() {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXEmptyExpression;\n\t    }\n\t    return JSXEmptyExpression;\n\t}());\n\texports.JSXEmptyExpression = JSXEmptyExpression;\n\tvar JSXExpressionContainer = (function () {\n\t    function JSXExpressionContainer(expression) {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXExpressionContainer;\n\t        this.expression = expression;\n\t    }\n\t    return JSXExpressionContainer;\n\t}());\n\texports.JSXExpressionContainer = JSXExpressionContainer;\n\tvar JSXIdentifier = (function () {\n\t    function JSXIdentifier(name) {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXIdentifier;\n\t        this.name = name;\n\t    }\n\t    return JSXIdentifier;\n\t}());\n\texports.JSXIdentifier = JSXIdentifier;\n\tvar JSXMemberExpression = (function () {\n\t    function JSXMemberExpression(object, property) {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXMemberExpression;\n\t        this.object = object;\n\t        this.property = property;\n\t    }\n\t    return JSXMemberExpression;\n\t}());\n\texports.JSXMemberExpression = JSXMemberExpression;\n\tvar JSXAttribute = (function () {\n\t    function JSXAttribute(name, value) {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXAttribute;\n\t        this.name = name;\n\t        this.value = value;\n\t    }\n\t    return JSXAttribute;\n\t}());\n\texports.JSXAttribute = JSXAttribute;\n\tvar JSXNamespacedName = (function () {\n\t    function JSXNamespacedName(namespace, name) {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXNamespacedName;\n\t        this.namespace = namespace;\n\t        this.name = name;\n\t    }\n\t    return JSXNamespacedName;\n\t}());\n\texports.JSXNamespacedName = JSXNamespacedName;\n\tvar JSXOpeningElement = (function () {\n\t    function JSXOpeningElement(name, selfClosing, attributes) {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXOpeningElement;\n\t        this.name = name;\n\t        this.selfClosing = selfClosing;\n\t        this.attributes = attributes;\n\t    }\n\t    return JSXOpeningElement;\n\t}());\n\texports.JSXOpeningElement = JSXOpeningElement;\n\tvar JSXSpreadAttribute = (function () {\n\t    function JSXSpreadAttribute(argument) {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXSpreadAttribute;\n\t        this.argument = argument;\n\t    }\n\t    return JSXSpreadAttribute;\n\t}());\n\texports.JSXSpreadAttribute = JSXSpreadAttribute;\n\tvar JSXText = (function () {\n\t    function JSXText(value, raw) {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXText;\n\t        this.value = value;\n\t        this.raw = raw;\n\t    }\n\t    return JSXText;\n\t}());\n\texports.JSXText = JSXText;\n\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar scanner_1 = __webpack_require__(8);\n\tvar error_handler_1 = __webpack_require__(6);\n\tvar token_1 = __webpack_require__(7);\n\tvar Reader = (function () {\n\t    function Reader() {\n\t        this.values = [];\n\t        this.curly = this.paren = -1;\n\t    }\n\t    ;\n\t    // A function following one of those tokens is an expression.\n\t    Reader.prototype.beforeFunctionExpression = function (t) {\n\t        return ['(', '{', '[', 'in', 'typeof', 'instanceof', 'new',\n\t            'return', 'case', 'delete', 'throw', 'void',\n\t            // assignment operators\n\t            '=', '+=', '-=', '*=', '**=', '/=', '%=', '<<=', '>>=', '>>>=',\n\t            '&=', '|=', '^=', ',',\n\t            // binary/unary operators\n\t            '+', '-', '*', '**', '/', '%', '++', '--', '<<', '>>', '>>>', '&',\n\t            '|', '^', '!', '~', '&&', '||', '?', ':', '===', '==', '>=',\n\t            '<=', '<', '>', '!=', '!=='].indexOf(t) >= 0;\n\t    };\n\t    ;\n\t    // Determine if forward slash (/) is an operator or part of a regular expression\n\t    // https://github.com/mozilla/sweet.js/wiki/design\n\t    Reader.prototype.isRegexStart = function () {\n\t        var previous = this.values[this.values.length - 1];\n\t        var regex = (previous !== null);\n\t        switch (previous) {\n\t            case 'this':\n\t            case ']':\n\t                regex = false;\n\t                break;\n\t            case ')':\n\t                var check = this.values[this.paren - 1];\n\t                regex = (check === 'if' || check === 'while' || check === 'for' || check === 'with');\n\t                break;\n\t            case '}':\n\t                // Dividing a function by anything makes little sense,\n\t                // but we have to check for that.\n\t                regex = false;\n\t                if (this.values[this.curly - 3] === 'function') {\n\t                    // Anonymous function, e.g. function(){} /42\n\t                    var check_1 = this.values[this.curly - 4];\n\t                    regex = check_1 ? !this.beforeFunctionExpression(check_1) : false;\n\t                }\n\t                else if (this.values[this.curly - 4] === 'function') {\n\t                    // Named function, e.g. function f(){} /42/\n\t                    var check_2 = this.values[this.curly - 5];\n\t                    regex = check_2 ? !this.beforeFunctionExpression(check_2) : true;\n\t                }\n\t        }\n\t        return regex;\n\t    };\n\t    ;\n\t    Reader.prototype.push = function (token) {\n\t        if (token.type === token_1.Token.Punctuator || token.type === token_1.Token.Keyword) {\n\t            if (token.value === '{') {\n\t                this.curly = this.values.length;\n\t            }\n\t            else if (token.value === '(') {\n\t                this.paren = this.values.length;\n\t            }\n\t            this.values.push(token.value);\n\t        }\n\t        else {\n\t            this.values.push(null);\n\t        }\n\t    };\n\t    ;\n\t    return Reader;\n\t}());\n\tvar Tokenizer = (function () {\n\t    function Tokenizer(code, config) {\n\t        this.errorHandler = new error_handler_1.ErrorHandler();\n\t        this.errorHandler.tolerant = config ? (typeof config.tolerant === 'boolean' && config.tolerant) : false;\n\t        this.scanner = new scanner_1.Scanner(code, this.errorHandler);\n\t        this.scanner.trackComment = config ? (typeof config.comment === 'boolean' && config.comment) : false;\n\t        this.trackRange = config ? (typeof config.range === 'boolean' && config.range) : false;\n\t        this.trackLoc = config ? (typeof config.loc === 'boolean' && config.loc) : false;\n\t        this.buffer = [];\n\t        this.reader = new Reader();\n\t    }\n\t    ;\n\t    Tokenizer.prototype.errors = function () {\n\t        return this.errorHandler.errors;\n\t    };\n\t    ;\n\t    Tokenizer.prototype.getNextToken = function () {\n\t        if (this.buffer.length === 0) {\n\t            var comments = this.scanner.scanComments();\n\t            if (this.scanner.trackComment) {\n\t                for (var i = 0; i < comments.length; ++i) {\n\t                    var e = comments[i];\n\t                    var comment = void 0;\n\t                    var value = this.scanner.source.slice(e.slice[0], e.slice[1]);\n\t                    comment = {\n\t                        type: e.multiLine ? 'BlockComment' : 'LineComment',\n\t                        value: value\n\t                    };\n\t                    if (this.trackRange) {\n\t                        comment.range = e.range;\n\t                    }\n\t                    if (this.trackLoc) {\n\t                        comment.loc = e.loc;\n\t                    }\n\t                    this.buffer.push(comment);\n\t                }\n\t            }\n\t            if (!this.scanner.eof()) {\n\t                var loc = void 0;\n\t                if (this.trackLoc) {\n\t                    loc = {\n\t                        start: {\n\t                            line: this.scanner.lineNumber,\n\t                            column: this.scanner.index - this.scanner.lineStart\n\t                        },\n\t                        end: {}\n\t                    };\n\t                }\n\t                var token = void 0;\n\t                if (this.scanner.source[this.scanner.index] === '/') {\n\t                    token = this.reader.isRegexStart() ? this.scanner.scanRegExp() : this.scanner.scanPunctuator();\n\t                }\n\t                else {\n\t                    token = this.scanner.lex();\n\t                }\n\t                this.reader.push(token);\n\t                var entry = void 0;\n\t                entry = {\n\t                    type: token_1.TokenName[token.type],\n\t                    value: this.scanner.source.slice(token.start, token.end)\n\t                };\n\t                if (this.trackRange) {\n\t                    entry.range = [token.start, token.end];\n\t                }\n\t                if (this.trackLoc) {\n\t                    loc.end = {\n\t                        line: this.scanner.lineNumber,\n\t                        column: this.scanner.index - this.scanner.lineStart\n\t                    };\n\t                    entry.loc = loc;\n\t                }\n\t                if (token.regex) {\n\t                    entry.regex = token.regex;\n\t                }\n\t                this.buffer.push(entry);\n\t            }\n\t        }\n\t        return this.buffer.shift();\n\t    };\n\t    ;\n\t    return Tokenizer;\n\t}());\n\texports.Tokenizer = Tokenizer;\n\n\n/***/ }\n/******/ ])\n});\n;","map":{"mappings":[{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":371,"column":0},"generated":{"line":371,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":372,"column":0},"generated":{"line":372,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":373,"column":0},"generated":{"line":373,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":374,"column":0},"generated":{"line":374,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":375,"column":0},"generated":{"line":375,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":376,"column":0},"generated":{"line":376,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":377,"column":0},"generated":{"line":377,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":378,"column":0},"generated":{"line":378,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":379,"column":0},"generated":{"line":379,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":380,"column":0},"generated":{"line":380,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":381,"column":0},"generated":{"line":381,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":382,"column":0},"generated":{"line":382,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":383,"column":0},"generated":{"line":383,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":384,"column":0},"generated":{"line":384,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":385,"column":0},"generated":{"line":385,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":386,"column":0},"generated":{"line":386,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":387,"column":0},"generated":{"line":387,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":388,"column":0},"generated":{"line":388,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":389,"column":0},"generated":{"line":389,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":390,"column":0},"generated":{"line":390,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":391,"column":0},"generated":{"line":391,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":392,"column":0},"generated":{"line":392,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":393,"column":0},"generated":{"line":393,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":394,"column":0},"generated":{"line":394,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":395,"column":0},"generated":{"line":395,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":396,"column":0},"generated":{"line":396,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":397,"column":0},"generated":{"line":397,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":398,"column":0},"generated":{"line":398,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":399,"column":0},"generated":{"line":399,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":400,"column":0},"generated":{"line":400,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":401,"column":0},"generated":{"line":401,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":402,"column":0},"generated":{"line":402,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":403,"column":0},"generated":{"line":403,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":404,"column":0},"generated":{"line":404,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":405,"column":0},"generated":{"line":405,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":406,"column":0},"generated":{"line":406,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":407,"column":0},"generated":{"line":407,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":408,"column":0},"generated":{"line":408,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":409,"column":0},"generated":{"line":409,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":410,"column":0},"generated":{"line":410,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":411,"column":0},"generated":{"line":411,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":412,"column":0},"generated":{"line":412,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":413,"column":0},"generated":{"line":413,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":414,"column":0},"generated":{"line":414,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":415,"column":0},"generated":{"line":415,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":416,"column":0},"generated":{"line":416,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":417,"column":0},"generated":{"line":417,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":418,"column":0},"generated":{"line":418,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":419,"column":0},"generated":{"line":419,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":420,"column":0},"generated":{"line":420,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":421,"column":0},"generated":{"line":421,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":422,"column":0},"generated":{"line":422,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":423,"column":0},"generated":{"line":423,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":424,"column":0},"generated":{"line":424,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":425,"column":0},"generated":{"line":425,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":426,"column":0},"generated":{"line":426,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":427,"column":0},"generated":{"line":427,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":428,"column":0},"generated":{"line":428,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":429,"column":0},"generated":{"line":429,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":430,"column":0},"generated":{"line":430,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":431,"column":0},"generated":{"line":431,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":432,"column":0},"generated":{"line":432,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":433,"column":0},"generated":{"line":433,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":434,"column":0},"generated":{"line":434,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":435,"column":0},"generated":{"line":435,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":436,"column":0},"generated":{"line":436,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":437,"column":0},"generated":{"line":437,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":438,"column":0},"generated":{"line":438,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":439,"column":0},"generated":{"line":439,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":440,"column":0},"generated":{"line":440,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":441,"column":0},"generated":{"line":441,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":442,"column":0},"generated":{"line":442,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":443,"column":0},"generated":{"line":443,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":444,"column":0},"generated":{"line":444,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":445,"column":0},"generated":{"line":445,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":446,"column":0},"generated":{"line":446,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":447,"column":0},"generated":{"line":447,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":448,"column":0},"generated":{"line":448,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":449,"column":0},"generated":{"line":449,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":450,"column":0},"generated":{"line":450,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":451,"column":0},"generated":{"line":451,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":452,"column":0},"generated":{"line":452,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":453,"column":0},"generated":{"line":453,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":454,"column":0},"generated":{"line":454,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":455,"column":0},"generated":{"line":455,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":456,"column":0},"generated":{"line":456,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":457,"column":0},"generated":{"line":457,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":458,"column":0},"generated":{"line":458,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":459,"column":0},"generated":{"line":459,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":460,"column":0},"generated":{"line":460,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":461,"column":0},"generated":{"line":461,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":462,"column":0},"generated":{"line":462,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":463,"column":0},"generated":{"line":463,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":464,"column":0},"generated":{"line":464,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":465,"column":0},"generated":{"line":465,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":466,"column":0},"generated":{"line":466,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":467,"column":0},"generated":{"line":467,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":468,"column":0},"generated":{"line":468,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":469,"column":0},"generated":{"line":469,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":470,"column":0},"generated":{"line":470,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":471,"column":0},"generated":{"line":471,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":472,"column":0},"generated":{"line":472,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":473,"column":0},"generated":{"line":473,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":474,"column":0},"generated":{"line":474,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":475,"column":0},"generated":{"line":475,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":476,"column":0},"generated":{"line":476,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":477,"column":0},"generated":{"line":477,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":478,"column":0},"generated":{"line":478,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":479,"column":0},"generated":{"line":479,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":480,"column":0},"generated":{"line":480,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":481,"column":0},"generated":{"line":481,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":482,"column":0},"generated":{"line":482,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":483,"column":0},"generated":{"line":483,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":484,"column":0},"generated":{"line":484,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":485,"column":0},"generated":{"line":485,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":486,"column":0},"generated":{"line":486,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":487,"column":0},"generated":{"line":487,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":488,"column":0},"generated":{"line":488,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":489,"column":0},"generated":{"line":489,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":490,"column":0},"generated":{"line":490,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":491,"column":0},"generated":{"line":491,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":492,"column":0},"generated":{"line":492,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":493,"column":0},"generated":{"line":493,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":494,"column":0},"generated":{"line":494,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":495,"column":0},"generated":{"line":495,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":496,"column":0},"generated":{"line":496,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":497,"column":0},"generated":{"line":497,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":498,"column":0},"generated":{"line":498,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":499,"column":0},"generated":{"line":499,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":500,"column":0},"generated":{"line":500,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":501,"column":0},"generated":{"line":501,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":502,"column":0},"generated":{"line":502,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":503,"column":0},"generated":{"line":503,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":504,"column":0},"generated":{"line":504,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":505,"column":0},"generated":{"line":505,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":506,"column":0},"generated":{"line":506,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":507,"column":0},"generated":{"line":507,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":508,"column":0},"generated":{"line":508,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":509,"column":0},"generated":{"line":509,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":510,"column":0},"generated":{"line":510,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":511,"column":0},"generated":{"line":511,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":512,"column":0},"generated":{"line":512,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":513,"column":0},"generated":{"line":513,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":514,"column":0},"generated":{"line":514,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":515,"column":0},"generated":{"line":515,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":516,"column":0},"generated":{"line":516,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":517,"column":0},"generated":{"line":517,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":518,"column":0},"generated":{"line":518,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":519,"column":0},"generated":{"line":519,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":520,"column":0},"generated":{"line":520,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":521,"column":0},"generated":{"line":521,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":522,"column":0},"generated":{"line":522,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":523,"column":0},"generated":{"line":523,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":524,"column":0},"generated":{"line":524,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":525,"column":0},"generated":{"line":525,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":526,"column":0},"generated":{"line":526,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":527,"column":0},"generated":{"line":527,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":528,"column":0},"generated":{"line":528,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":529,"column":0},"generated":{"line":529,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":530,"column":0},"generated":{"line":530,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":531,"column":0},"generated":{"line":531,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":532,"column":0},"generated":{"line":532,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":533,"column":0},"generated":{"line":533,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":534,"column":0},"generated":{"line":534,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":535,"column":0},"generated":{"line":535,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":536,"column":0},"generated":{"line":536,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":537,"column":0},"generated":{"line":537,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":538,"column":0},"generated":{"line":538,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":539,"column":0},"generated":{"line":539,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":540,"column":0},"generated":{"line":540,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":541,"column":0},"generated":{"line":541,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":542,"column":0},"generated":{"line":542,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":543,"column":0},"generated":{"line":543,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":544,"column":0},"generated":{"line":544,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":545,"column":0},"generated":{"line":545,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":546,"column":0},"generated":{"line":546,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":547,"column":0},"generated":{"line":547,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":548,"column":0},"generated":{"line":548,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":549,"column":0},"generated":{"line":549,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":550,"column":0},"generated":{"line":550,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":551,"column":0},"generated":{"line":551,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":552,"column":0},"generated":{"line":552,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":553,"column":0},"generated":{"line":553,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":554,"column":0},"generated":{"line":554,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":555,"column":0},"generated":{"line":555,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":556,"column":0},"generated":{"line":556,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":557,"column":0},"generated":{"line":557,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":558,"column":0},"generated":{"line":558,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":559,"column":0},"generated":{"line":559,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":560,"column":0},"generated":{"line":560,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":561,"column":0},"generated":{"line":561,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":562,"column":0},"generated":{"line":562,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":563,"column":0},"generated":{"line":563,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":564,"column":0},"generated":{"line":564,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":565,"column":0},"generated":{"line":565,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":566,"column":0},"generated":{"line":566,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":567,"column":0},"generated":{"line":567,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":568,"column":0},"generated":{"line":568,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":569,"column":0},"generated":{"line":569,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":570,"column":0},"generated":{"line":570,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":571,"column":0},"generated":{"line":571,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":572,"column":0},"generated":{"line":572,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":573,"column":0},"generated":{"line":573,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":574,"column":0},"generated":{"line":574,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":575,"column":0},"generated":{"line":575,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":576,"column":0},"generated":{"line":576,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":577,"column":0},"generated":{"line":577,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":578,"column":0},"generated":{"line":578,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":579,"column":0},"generated":{"line":579,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":580,"column":0},"generated":{"line":580,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":581,"column":0},"generated":{"line":581,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":582,"column":0},"generated":{"line":582,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":583,"column":0},"generated":{"line":583,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":584,"column":0},"generated":{"line":584,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":585,"column":0},"generated":{"line":585,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":586,"column":0},"generated":{"line":586,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":587,"column":0},"generated":{"line":587,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":588,"column":0},"generated":{"line":588,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":589,"column":0},"generated":{"line":589,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":590,"column":0},"generated":{"line":590,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":591,"column":0},"generated":{"line":591,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":592,"column":0},"generated":{"line":592,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":593,"column":0},"generated":{"line":593,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":594,"column":0},"generated":{"line":594,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":595,"column":0},"generated":{"line":595,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":596,"column":0},"generated":{"line":596,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":597,"column":0},"generated":{"line":597,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":598,"column":0},"generated":{"line":598,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":599,"column":0},"generated":{"line":599,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":600,"column":0},"generated":{"line":600,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":601,"column":0},"generated":{"line":601,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":602,"column":0},"generated":{"line":602,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":603,"column":0},"generated":{"line":603,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":604,"column":0},"generated":{"line":604,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":605,"column":0},"generated":{"line":605,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":606,"column":0},"generated":{"line":606,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":607,"column":0},"generated":{"line":607,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":608,"column":0},"generated":{"line":608,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":609,"column":0},"generated":{"line":609,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":610,"column":0},"generated":{"line":610,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":611,"column":0},"generated":{"line":611,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":612,"column":0},"generated":{"line":612,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":613,"column":0},"generated":{"line":613,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":614,"column":0},"generated":{"line":614,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":615,"column":0},"generated":{"line":615,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":616,"column":0},"generated":{"line":616,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":617,"column":0},"generated":{"line":617,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":618,"column":0},"generated":{"line":618,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":619,"column":0},"generated":{"line":619,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":620,"column":0},"generated":{"line":620,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":621,"column":0},"generated":{"line":621,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":622,"column":0},"generated":{"line":622,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":623,"column":0},"generated":{"line":623,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":624,"column":0},"generated":{"line":624,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":625,"column":0},"generated":{"line":625,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":626,"column":0},"generated":{"line":626,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":627,"column":0},"generated":{"line":627,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":628,"column":0},"generated":{"line":628,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":629,"column":0},"generated":{"line":629,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":630,"column":0},"generated":{"line":630,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":631,"column":0},"generated":{"line":631,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":632,"column":0},"generated":{"line":632,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":633,"column":0},"generated":{"line":633,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":634,"column":0},"generated":{"line":634,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":635,"column":0},"generated":{"line":635,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":636,"column":0},"generated":{"line":636,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":637,"column":0},"generated":{"line":637,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":638,"column":0},"generated":{"line":638,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":639,"column":0},"generated":{"line":639,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":640,"column":0},"generated":{"line":640,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":641,"column":0},"generated":{"line":641,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":642,"column":0},"generated":{"line":642,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":643,"column":0},"generated":{"line":643,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":644,"column":0},"generated":{"line":644,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":645,"column":0},"generated":{"line":645,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":646,"column":0},"generated":{"line":646,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":647,"column":0},"generated":{"line":647,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":648,"column":0},"generated":{"line":648,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":649,"column":0},"generated":{"line":649,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":650,"column":0},"generated":{"line":650,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":651,"column":0},"generated":{"line":651,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":652,"column":0},"generated":{"line":652,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":653,"column":0},"generated":{"line":653,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":654,"column":0},"generated":{"line":654,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":655,"column":0},"generated":{"line":655,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":656,"column":0},"generated":{"line":656,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":657,"column":0},"generated":{"line":657,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":658,"column":0},"generated":{"line":658,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":659,"column":0},"generated":{"line":659,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":660,"column":0},"generated":{"line":660,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":661,"column":0},"generated":{"line":661,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":662,"column":0},"generated":{"line":662,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":663,"column":0},"generated":{"line":663,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":664,"column":0},"generated":{"line":664,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":665,"column":0},"generated":{"line":665,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":666,"column":0},"generated":{"line":666,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":667,"column":0},"generated":{"line":667,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":668,"column":0},"generated":{"line":668,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":669,"column":0},"generated":{"line":669,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":670,"column":0},"generated":{"line":670,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":671,"column":0},"generated":{"line":671,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":672,"column":0},"generated":{"line":672,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":673,"column":0},"generated":{"line":673,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":674,"column":0},"generated":{"line":674,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":675,"column":0},"generated":{"line":675,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":676,"column":0},"generated":{"line":676,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":677,"column":0},"generated":{"line":677,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":678,"column":0},"generated":{"line":678,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":679,"column":0},"generated":{"line":679,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":680,"column":0},"generated":{"line":680,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":681,"column":0},"generated":{"line":681,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":682,"column":0},"generated":{"line":682,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":683,"column":0},"generated":{"line":683,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":684,"column":0},"generated":{"line":684,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":685,"column":0},"generated":{"line":685,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":686,"column":0},"generated":{"line":686,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":687,"column":0},"generated":{"line":687,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":688,"column":0},"generated":{"line":688,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":689,"column":0},"generated":{"line":689,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":690,"column":0},"generated":{"line":690,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":691,"column":0},"generated":{"line":691,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":692,"column":0},"generated":{"line":692,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":693,"column":0},"generated":{"line":693,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":694,"column":0},"generated":{"line":694,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":695,"column":0},"generated":{"line":695,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":696,"column":0},"generated":{"line":696,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":697,"column":0},"generated":{"line":697,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":698,"column":0},"generated":{"line":698,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":699,"column":0},"generated":{"line":699,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":700,"column":0},"generated":{"line":700,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":701,"column":0},"generated":{"line":701,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":702,"column":0},"generated":{"line":702,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":703,"column":0},"generated":{"line":703,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":704,"column":0},"generated":{"line":704,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":705,"column":0},"generated":{"line":705,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":706,"column":0},"generated":{"line":706,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":707,"column":0},"generated":{"line":707,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":708,"column":0},"generated":{"line":708,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":709,"column":0},"generated":{"line":709,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":710,"column":0},"generated":{"line":710,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":711,"column":0},"generated":{"line":711,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":712,"column":0},"generated":{"line":712,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":713,"column":0},"generated":{"line":713,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":714,"column":0},"generated":{"line":714,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":715,"column":0},"generated":{"line":715,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":716,"column":0},"generated":{"line":716,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":717,"column":0},"generated":{"line":717,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":718,"column":0},"generated":{"line":718,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":719,"column":0},"generated":{"line":719,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":720,"column":0},"generated":{"line":720,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":721,"column":0},"generated":{"line":721,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":722,"column":0},"generated":{"line":722,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":723,"column":0},"generated":{"line":723,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":724,"column":0},"generated":{"line":724,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":725,"column":0},"generated":{"line":725,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":726,"column":0},"generated":{"line":726,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":727,"column":0},"generated":{"line":727,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":728,"column":0},"generated":{"line":728,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":729,"column":0},"generated":{"line":729,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":730,"column":0},"generated":{"line":730,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":731,"column":0},"generated":{"line":731,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":732,"column":0},"generated":{"line":732,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":733,"column":0},"generated":{"line":733,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":734,"column":0},"generated":{"line":734,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":735,"column":0},"generated":{"line":735,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":736,"column":0},"generated":{"line":736,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":737,"column":0},"generated":{"line":737,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":738,"column":0},"generated":{"line":738,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":739,"column":0},"generated":{"line":739,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":740,"column":0},"generated":{"line":740,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":741,"column":0},"generated":{"line":741,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":742,"column":0},"generated":{"line":742,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":743,"column":0},"generated":{"line":743,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":744,"column":0},"generated":{"line":744,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":745,"column":0},"generated":{"line":745,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":746,"column":0},"generated":{"line":746,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":747,"column":0},"generated":{"line":747,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":748,"column":0},"generated":{"line":748,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":749,"column":0},"generated":{"line":749,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":750,"column":0},"generated":{"line":750,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":751,"column":0},"generated":{"line":751,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":752,"column":0},"generated":{"line":752,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":753,"column":0},"generated":{"line":753,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":754,"column":0},"generated":{"line":754,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":755,"column":0},"generated":{"line":755,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":756,"column":0},"generated":{"line":756,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":757,"column":0},"generated":{"line":757,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":758,"column":0},"generated":{"line":758,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":759,"column":0},"generated":{"line":759,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":760,"column":0},"generated":{"line":760,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":761,"column":0},"generated":{"line":761,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":762,"column":0},"generated":{"line":762,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":763,"column":0},"generated":{"line":763,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":764,"column":0},"generated":{"line":764,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":765,"column":0},"generated":{"line":765,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":766,"column":0},"generated":{"line":766,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":767,"column":0},"generated":{"line":767,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":768,"column":0},"generated":{"line":768,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":769,"column":0},"generated":{"line":769,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":770,"column":0},"generated":{"line":770,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":771,"column":0},"generated":{"line":771,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":772,"column":0},"generated":{"line":772,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":773,"column":0},"generated":{"line":773,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":774,"column":0},"generated":{"line":774,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":775,"column":0},"generated":{"line":775,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":776,"column":0},"generated":{"line":776,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":777,"column":0},"generated":{"line":777,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":778,"column":0},"generated":{"line":778,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":779,"column":0},"generated":{"line":779,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":780,"column":0},"generated":{"line":780,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":781,"column":0},"generated":{"line":781,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":782,"column":0},"generated":{"line":782,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":783,"column":0},"generated":{"line":783,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":784,"column":0},"generated":{"line":784,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":785,"column":0},"generated":{"line":785,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":786,"column":0},"generated":{"line":786,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":787,"column":0},"generated":{"line":787,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":788,"column":0},"generated":{"line":788,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":789,"column":0},"generated":{"line":789,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":790,"column":0},"generated":{"line":790,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":791,"column":0},"generated":{"line":791,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":792,"column":0},"generated":{"line":792,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":793,"column":0},"generated":{"line":793,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":794,"column":0},"generated":{"line":794,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":795,"column":0},"generated":{"line":795,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":796,"column":0},"generated":{"line":796,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":797,"column":0},"generated":{"line":797,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":798,"column":0},"generated":{"line":798,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":799,"column":0},"generated":{"line":799,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":800,"column":0},"generated":{"line":800,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":801,"column":0},"generated":{"line":801,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":802,"column":0},"generated":{"line":802,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":803,"column":0},"generated":{"line":803,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":804,"column":0},"generated":{"line":804,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":805,"column":0},"generated":{"line":805,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":806,"column":0},"generated":{"line":806,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":807,"column":0},"generated":{"line":807,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":808,"column":0},"generated":{"line":808,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":809,"column":0},"generated":{"line":809,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":810,"column":0},"generated":{"line":810,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":811,"column":0},"generated":{"line":811,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":812,"column":0},"generated":{"line":812,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":813,"column":0},"generated":{"line":813,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":814,"column":0},"generated":{"line":814,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":815,"column":0},"generated":{"line":815,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":816,"column":0},"generated":{"line":816,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":817,"column":0},"generated":{"line":817,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":818,"column":0},"generated":{"line":818,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":819,"column":0},"generated":{"line":819,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":820,"column":0},"generated":{"line":820,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":821,"column":0},"generated":{"line":821,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":822,"column":0},"generated":{"line":822,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":823,"column":0},"generated":{"line":823,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":824,"column":0},"generated":{"line":824,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":825,"column":0},"generated":{"line":825,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":826,"column":0},"generated":{"line":826,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":827,"column":0},"generated":{"line":827,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":828,"column":0},"generated":{"line":828,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":829,"column":0},"generated":{"line":829,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":830,"column":0},"generated":{"line":830,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":831,"column":0},"generated":{"line":831,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":832,"column":0},"generated":{"line":832,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":833,"column":0},"generated":{"line":833,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":834,"column":0},"generated":{"line":834,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":835,"column":0},"generated":{"line":835,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":836,"column":0},"generated":{"line":836,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":837,"column":0},"generated":{"line":837,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":838,"column":0},"generated":{"line":838,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":839,"column":0},"generated":{"line":839,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":840,"column":0},"generated":{"line":840,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":841,"column":0},"generated":{"line":841,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":842,"column":0},"generated":{"line":842,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":843,"column":0},"generated":{"line":843,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":844,"column":0},"generated":{"line":844,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":845,"column":0},"generated":{"line":845,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":846,"column":0},"generated":{"line":846,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":847,"column":0},"generated":{"line":847,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":848,"column":0},"generated":{"line":848,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":849,"column":0},"generated":{"line":849,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":850,"column":0},"generated":{"line":850,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":851,"column":0},"generated":{"line":851,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":852,"column":0},"generated":{"line":852,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":853,"column":0},"generated":{"line":853,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":854,"column":0},"generated":{"line":854,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":855,"column":0},"generated":{"line":855,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":856,"column":0},"generated":{"line":856,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":857,"column":0},"generated":{"line":857,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":858,"column":0},"generated":{"line":858,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":859,"column":0},"generated":{"line":859,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":860,"column":0},"generated":{"line":860,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":861,"column":0},"generated":{"line":861,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":862,"column":0},"generated":{"line":862,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":863,"column":0},"generated":{"line":863,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":864,"column":0},"generated":{"line":864,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":865,"column":0},"generated":{"line":865,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":866,"column":0},"generated":{"line":866,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":867,"column":0},"generated":{"line":867,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":868,"column":0},"generated":{"line":868,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":869,"column":0},"generated":{"line":869,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":870,"column":0},"generated":{"line":870,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":871,"column":0},"generated":{"line":871,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":872,"column":0},"generated":{"line":872,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":873,"column":0},"generated":{"line":873,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":874,"column":0},"generated":{"line":874,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":875,"column":0},"generated":{"line":875,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":876,"column":0},"generated":{"line":876,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":877,"column":0},"generated":{"line":877,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":878,"column":0},"generated":{"line":878,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":879,"column":0},"generated":{"line":879,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":880,"column":0},"generated":{"line":880,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":881,"column":0},"generated":{"line":881,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":882,"column":0},"generated":{"line":882,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":883,"column":0},"generated":{"line":883,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":884,"column":0},"generated":{"line":884,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":885,"column":0},"generated":{"line":885,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":886,"column":0},"generated":{"line":886,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":887,"column":0},"generated":{"line":887,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":888,"column":0},"generated":{"line":888,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":889,"column":0},"generated":{"line":889,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":890,"column":0},"generated":{"line":890,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":891,"column":0},"generated":{"line":891,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":892,"column":0},"generated":{"line":892,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":893,"column":0},"generated":{"line":893,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":894,"column":0},"generated":{"line":894,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":895,"column":0},"generated":{"line":895,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":896,"column":0},"generated":{"line":896,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":897,"column":0},"generated":{"line":897,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":898,"column":0},"generated":{"line":898,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":899,"column":0},"generated":{"line":899,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":900,"column":0},"generated":{"line":900,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":901,"column":0},"generated":{"line":901,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":902,"column":0},"generated":{"line":902,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":903,"column":0},"generated":{"line":903,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":904,"column":0},"generated":{"line":904,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":905,"column":0},"generated":{"line":905,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":906,"column":0},"generated":{"line":906,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":907,"column":0},"generated":{"line":907,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":908,"column":0},"generated":{"line":908,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":909,"column":0},"generated":{"line":909,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":910,"column":0},"generated":{"line":910,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":911,"column":0},"generated":{"line":911,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":912,"column":0},"generated":{"line":912,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":913,"column":0},"generated":{"line":913,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":914,"column":0},"generated":{"line":914,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":915,"column":0},"generated":{"line":915,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":916,"column":0},"generated":{"line":916,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":917,"column":0},"generated":{"line":917,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":918,"column":0},"generated":{"line":918,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":919,"column":0},"generated":{"line":919,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":920,"column":0},"generated":{"line":920,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":921,"column":0},"generated":{"line":921,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":922,"column":0},"generated":{"line":922,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":923,"column":0},"generated":{"line":923,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":924,"column":0},"generated":{"line":924,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":925,"column":0},"generated":{"line":925,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":926,"column":0},"generated":{"line":926,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":927,"column":0},"generated":{"line":927,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":928,"column":0},"generated":{"line":928,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":929,"column":0},"generated":{"line":929,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":930,"column":0},"generated":{"line":930,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":931,"column":0},"generated":{"line":931,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":932,"column":0},"generated":{"line":932,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":933,"column":0},"generated":{"line":933,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":934,"column":0},"generated":{"line":934,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":935,"column":0},"generated":{"line":935,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":936,"column":0},"generated":{"line":936,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":937,"column":0},"generated":{"line":937,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":938,"column":0},"generated":{"line":938,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":939,"column":0},"generated":{"line":939,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":940,"column":0},"generated":{"line":940,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":941,"column":0},"generated":{"line":941,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":942,"column":0},"generated":{"line":942,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":943,"column":0},"generated":{"line":943,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":944,"column":0},"generated":{"line":944,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":945,"column":0},"generated":{"line":945,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":946,"column":0},"generated":{"line":946,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":947,"column":0},"generated":{"line":947,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":948,"column":0},"generated":{"line":948,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":949,"column":0},"generated":{"line":949,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":950,"column":0},"generated":{"line":950,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":951,"column":0},"generated":{"line":951,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":952,"column":0},"generated":{"line":952,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":953,"column":0},"generated":{"line":953,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":954,"column":0},"generated":{"line":954,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":955,"column":0},"generated":{"line":955,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":956,"column":0},"generated":{"line":956,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":957,"column":0},"generated":{"line":957,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":958,"column":0},"generated":{"line":958,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":959,"column":0},"generated":{"line":959,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":960,"column":0},"generated":{"line":960,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":961,"column":0},"generated":{"line":961,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":962,"column":0},"generated":{"line":962,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":963,"column":0},"generated":{"line":963,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":964,"column":0},"generated":{"line":964,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":965,"column":0},"generated":{"line":965,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":966,"column":0},"generated":{"line":966,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":967,"column":0},"generated":{"line":967,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":968,"column":0},"generated":{"line":968,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":969,"column":0},"generated":{"line":969,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":970,"column":0},"generated":{"line":970,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":971,"column":0},"generated":{"line":971,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":972,"column":0},"generated":{"line":972,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":973,"column":0},"generated":{"line":973,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":974,"column":0},"generated":{"line":974,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":975,"column":0},"generated":{"line":975,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":976,"column":0},"generated":{"line":976,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":977,"column":0},"generated":{"line":977,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":978,"column":0},"generated":{"line":978,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":979,"column":0},"generated":{"line":979,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":980,"column":0},"generated":{"line":980,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":981,"column":0},"generated":{"line":981,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":982,"column":0},"generated":{"line":982,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":983,"column":0},"generated":{"line":983,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":984,"column":0},"generated":{"line":984,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":985,"column":0},"generated":{"line":985,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":986,"column":0},"generated":{"line":986,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":987,"column":0},"generated":{"line":987,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":988,"column":0},"generated":{"line":988,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":989,"column":0},"generated":{"line":989,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":990,"column":0},"generated":{"line":990,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":991,"column":0},"generated":{"line":991,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":992,"column":0},"generated":{"line":992,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":993,"column":0},"generated":{"line":993,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":994,"column":0},"generated":{"line":994,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":995,"column":0},"generated":{"line":995,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":996,"column":0},"generated":{"line":996,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":997,"column":0},"generated":{"line":997,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":998,"column":0},"generated":{"line":998,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":999,"column":0},"generated":{"line":999,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1000,"column":0},"generated":{"line":1000,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1001,"column":0},"generated":{"line":1001,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1002,"column":0},"generated":{"line":1002,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1003,"column":0},"generated":{"line":1003,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1004,"column":0},"generated":{"line":1004,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1005,"column":0},"generated":{"line":1005,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1006,"column":0},"generated":{"line":1006,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1007,"column":0},"generated":{"line":1007,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1008,"column":0},"generated":{"line":1008,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1009,"column":0},"generated":{"line":1009,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1010,"column":0},"generated":{"line":1010,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1011,"column":0},"generated":{"line":1011,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1012,"column":0},"generated":{"line":1012,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1013,"column":0},"generated":{"line":1013,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1014,"column":0},"generated":{"line":1014,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1015,"column":0},"generated":{"line":1015,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1016,"column":0},"generated":{"line":1016,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1017,"column":0},"generated":{"line":1017,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1018,"column":0},"generated":{"line":1018,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1019,"column":0},"generated":{"line":1019,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1020,"column":0},"generated":{"line":1020,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1021,"column":0},"generated":{"line":1021,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1022,"column":0},"generated":{"line":1022,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1023,"column":0},"generated":{"line":1023,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1024,"column":0},"generated":{"line":1024,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1025,"column":0},"generated":{"line":1025,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1026,"column":0},"generated":{"line":1026,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1027,"column":0},"generated":{"line":1027,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1028,"column":0},"generated":{"line":1028,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1029,"column":0},"generated":{"line":1029,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1030,"column":0},"generated":{"line":1030,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1031,"column":0},"generated":{"line":1031,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1032,"column":0},"generated":{"line":1032,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1033,"column":0},"generated":{"line":1033,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1034,"column":0},"generated":{"line":1034,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1035,"column":0},"generated":{"line":1035,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1036,"column":0},"generated":{"line":1036,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1037,"column":0},"generated":{"line":1037,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1038,"column":0},"generated":{"line":1038,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1039,"column":0},"generated":{"line":1039,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1040,"column":0},"generated":{"line":1040,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1041,"column":0},"generated":{"line":1041,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1042,"column":0},"generated":{"line":1042,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1043,"column":0},"generated":{"line":1043,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1044,"column":0},"generated":{"line":1044,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1045,"column":0},"generated":{"line":1045,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1046,"column":0},"generated":{"line":1046,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1047,"column":0},"generated":{"line":1047,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1048,"column":0},"generated":{"line":1048,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1049,"column":0},"generated":{"line":1049,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1050,"column":0},"generated":{"line":1050,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1051,"column":0},"generated":{"line":1051,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1052,"column":0},"generated":{"line":1052,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1053,"column":0},"generated":{"line":1053,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1054,"column":0},"generated":{"line":1054,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1055,"column":0},"generated":{"line":1055,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1056,"column":0},"generated":{"line":1056,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1057,"column":0},"generated":{"line":1057,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1058,"column":0},"generated":{"line":1058,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1059,"column":0},"generated":{"line":1059,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1060,"column":0},"generated":{"line":1060,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1061,"column":0},"generated":{"line":1061,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1062,"column":0},"generated":{"line":1062,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1063,"column":0},"generated":{"line":1063,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1064,"column":0},"generated":{"line":1064,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1065,"column":0},"generated":{"line":1065,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1066,"column":0},"generated":{"line":1066,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1067,"column":0},"generated":{"line":1067,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1068,"column":0},"generated":{"line":1068,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1069,"column":0},"generated":{"line":1069,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1070,"column":0},"generated":{"line":1070,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1071,"column":0},"generated":{"line":1071,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1072,"column":0},"generated":{"line":1072,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1073,"column":0},"generated":{"line":1073,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1074,"column":0},"generated":{"line":1074,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1075,"column":0},"generated":{"line":1075,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1076,"column":0},"generated":{"line":1076,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1077,"column":0},"generated":{"line":1077,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1078,"column":0},"generated":{"line":1078,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1079,"column":0},"generated":{"line":1079,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1080,"column":0},"generated":{"line":1080,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1081,"column":0},"generated":{"line":1081,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1082,"column":0},"generated":{"line":1082,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1083,"column":0},"generated":{"line":1083,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1084,"column":0},"generated":{"line":1084,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1085,"column":0},"generated":{"line":1085,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1086,"column":0},"generated":{"line":1086,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1087,"column":0},"generated":{"line":1087,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1088,"column":0},"generated":{"line":1088,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1089,"column":0},"generated":{"line":1089,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1090,"column":0},"generated":{"line":1090,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1091,"column":0},"generated":{"line":1091,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1092,"column":0},"generated":{"line":1092,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1093,"column":0},"generated":{"line":1093,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1094,"column":0},"generated":{"line":1094,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1095,"column":0},"generated":{"line":1095,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1096,"column":0},"generated":{"line":1096,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1097,"column":0},"generated":{"line":1097,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1098,"column":0},"generated":{"line":1098,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1099,"column":0},"generated":{"line":1099,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1100,"column":0},"generated":{"line":1100,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1101,"column":0},"generated":{"line":1101,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1102,"column":0},"generated":{"line":1102,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1103,"column":0},"generated":{"line":1103,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1104,"column":0},"generated":{"line":1104,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1105,"column":0},"generated":{"line":1105,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1106,"column":0},"generated":{"line":1106,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1107,"column":0},"generated":{"line":1107,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1108,"column":0},"generated":{"line":1108,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1109,"column":0},"generated":{"line":1109,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1110,"column":0},"generated":{"line":1110,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1111,"column":0},"generated":{"line":1111,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1112,"column":0},"generated":{"line":1112,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1113,"column":0},"generated":{"line":1113,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1114,"column":0},"generated":{"line":1114,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1115,"column":0},"generated":{"line":1115,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1116,"column":0},"generated":{"line":1116,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1117,"column":0},"generated":{"line":1117,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1118,"column":0},"generated":{"line":1118,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1119,"column":0},"generated":{"line":1119,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1120,"column":0},"generated":{"line":1120,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1121,"column":0},"generated":{"line":1121,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1122,"column":0},"generated":{"line":1122,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1123,"column":0},"generated":{"line":1123,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1124,"column":0},"generated":{"line":1124,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1125,"column":0},"generated":{"line":1125,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1126,"column":0},"generated":{"line":1126,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1127,"column":0},"generated":{"line":1127,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1128,"column":0},"generated":{"line":1128,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1129,"column":0},"generated":{"line":1129,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1130,"column":0},"generated":{"line":1130,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1131,"column":0},"generated":{"line":1131,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1132,"column":0},"generated":{"line":1132,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1133,"column":0},"generated":{"line":1133,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1134,"column":0},"generated":{"line":1134,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1135,"column":0},"generated":{"line":1135,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1136,"column":0},"generated":{"line":1136,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1137,"column":0},"generated":{"line":1137,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1138,"column":0},"generated":{"line":1138,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1139,"column":0},"generated":{"line":1139,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1140,"column":0},"generated":{"line":1140,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1141,"column":0},"generated":{"line":1141,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1142,"column":0},"generated":{"line":1142,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1143,"column":0},"generated":{"line":1143,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1144,"column":0},"generated":{"line":1144,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1145,"column":0},"generated":{"line":1145,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1146,"column":0},"generated":{"line":1146,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1147,"column":0},"generated":{"line":1147,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1148,"column":0},"generated":{"line":1148,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1149,"column":0},"generated":{"line":1149,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1150,"column":0},"generated":{"line":1150,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1151,"column":0},"generated":{"line":1151,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1152,"column":0},"generated":{"line":1152,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1153,"column":0},"generated":{"line":1153,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1154,"column":0},"generated":{"line":1154,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1155,"column":0},"generated":{"line":1155,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1156,"column":0},"generated":{"line":1156,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1157,"column":0},"generated":{"line":1157,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1158,"column":0},"generated":{"line":1158,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1159,"column":0},"generated":{"line":1159,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1160,"column":0},"generated":{"line":1160,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1161,"column":0},"generated":{"line":1161,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1162,"column":0},"generated":{"line":1162,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1163,"column":0},"generated":{"line":1163,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1164,"column":0},"generated":{"line":1164,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1165,"column":0},"generated":{"line":1165,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1166,"column":0},"generated":{"line":1166,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1167,"column":0},"generated":{"line":1167,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1168,"column":0},"generated":{"line":1168,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1169,"column":0},"generated":{"line":1169,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1170,"column":0},"generated":{"line":1170,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1171,"column":0},"generated":{"line":1171,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1172,"column":0},"generated":{"line":1172,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1173,"column":0},"generated":{"line":1173,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1174,"column":0},"generated":{"line":1174,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1175,"column":0},"generated":{"line":1175,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1176,"column":0},"generated":{"line":1176,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1177,"column":0},"generated":{"line":1177,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1178,"column":0},"generated":{"line":1178,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1179,"column":0},"generated":{"line":1179,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1180,"column":0},"generated":{"line":1180,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1181,"column":0},"generated":{"line":1181,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1182,"column":0},"generated":{"line":1182,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1183,"column":0},"generated":{"line":1183,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1184,"column":0},"generated":{"line":1184,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1185,"column":0},"generated":{"line":1185,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1186,"column":0},"generated":{"line":1186,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1187,"column":0},"generated":{"line":1187,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1188,"column":0},"generated":{"line":1188,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1189,"column":0},"generated":{"line":1189,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1190,"column":0},"generated":{"line":1190,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1191,"column":0},"generated":{"line":1191,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1192,"column":0},"generated":{"line":1192,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1193,"column":0},"generated":{"line":1193,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1194,"column":0},"generated":{"line":1194,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1195,"column":0},"generated":{"line":1195,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1196,"column":0},"generated":{"line":1196,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1197,"column":0},"generated":{"line":1197,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1198,"column":0},"generated":{"line":1198,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1199,"column":0},"generated":{"line":1199,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1200,"column":0},"generated":{"line":1200,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1201,"column":0},"generated":{"line":1201,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1202,"column":0},"generated":{"line":1202,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1203,"column":0},"generated":{"line":1203,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1204,"column":0},"generated":{"line":1204,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1205,"column":0},"generated":{"line":1205,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1206,"column":0},"generated":{"line":1206,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1207,"column":0},"generated":{"line":1207,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1208,"column":0},"generated":{"line":1208,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1209,"column":0},"generated":{"line":1209,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1210,"column":0},"generated":{"line":1210,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1211,"column":0},"generated":{"line":1211,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1212,"column":0},"generated":{"line":1212,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1213,"column":0},"generated":{"line":1213,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1214,"column":0},"generated":{"line":1214,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1215,"column":0},"generated":{"line":1215,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1216,"column":0},"generated":{"line":1216,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1217,"column":0},"generated":{"line":1217,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1218,"column":0},"generated":{"line":1218,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1219,"column":0},"generated":{"line":1219,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1220,"column":0},"generated":{"line":1220,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1221,"column":0},"generated":{"line":1221,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1222,"column":0},"generated":{"line":1222,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1223,"column":0},"generated":{"line":1223,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1224,"column":0},"generated":{"line":1224,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1225,"column":0},"generated":{"line":1225,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1226,"column":0},"generated":{"line":1226,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1227,"column":0},"generated":{"line":1227,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1228,"column":0},"generated":{"line":1228,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1229,"column":0},"generated":{"line":1229,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1230,"column":0},"generated":{"line":1230,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1231,"column":0},"generated":{"line":1231,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1232,"column":0},"generated":{"line":1232,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1233,"column":0},"generated":{"line":1233,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1234,"column":0},"generated":{"line":1234,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1235,"column":0},"generated":{"line":1235,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1236,"column":0},"generated":{"line":1236,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1237,"column":0},"generated":{"line":1237,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1238,"column":0},"generated":{"line":1238,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1239,"column":0},"generated":{"line":1239,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1240,"column":0},"generated":{"line":1240,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1241,"column":0},"generated":{"line":1241,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1242,"column":0},"generated":{"line":1242,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1243,"column":0},"generated":{"line":1243,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1244,"column":0},"generated":{"line":1244,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1245,"column":0},"generated":{"line":1245,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1246,"column":0},"generated":{"line":1246,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1247,"column":0},"generated":{"line":1247,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1248,"column":0},"generated":{"line":1248,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1249,"column":0},"generated":{"line":1249,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1250,"column":0},"generated":{"line":1250,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1251,"column":0},"generated":{"line":1251,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1252,"column":0},"generated":{"line":1252,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1253,"column":0},"generated":{"line":1253,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1254,"column":0},"generated":{"line":1254,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1255,"column":0},"generated":{"line":1255,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1256,"column":0},"generated":{"line":1256,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1257,"column":0},"generated":{"line":1257,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1258,"column":0},"generated":{"line":1258,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1259,"column":0},"generated":{"line":1259,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1260,"column":0},"generated":{"line":1260,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1261,"column":0},"generated":{"line":1261,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1262,"column":0},"generated":{"line":1262,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1263,"column":0},"generated":{"line":1263,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1264,"column":0},"generated":{"line":1264,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1265,"column":0},"generated":{"line":1265,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1266,"column":0},"generated":{"line":1266,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1267,"column":0},"generated":{"line":1267,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1268,"column":0},"generated":{"line":1268,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1269,"column":0},"generated":{"line":1269,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1270,"column":0},"generated":{"line":1270,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1271,"column":0},"generated":{"line":1271,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1272,"column":0},"generated":{"line":1272,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1273,"column":0},"generated":{"line":1273,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1274,"column":0},"generated":{"line":1274,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1275,"column":0},"generated":{"line":1275,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1276,"column":0},"generated":{"line":1276,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1277,"column":0},"generated":{"line":1277,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1278,"column":0},"generated":{"line":1278,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1279,"column":0},"generated":{"line":1279,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1280,"column":0},"generated":{"line":1280,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1281,"column":0},"generated":{"line":1281,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1282,"column":0},"generated":{"line":1282,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1283,"column":0},"generated":{"line":1283,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1284,"column":0},"generated":{"line":1284,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1285,"column":0},"generated":{"line":1285,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1286,"column":0},"generated":{"line":1286,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1287,"column":0},"generated":{"line":1287,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1288,"column":0},"generated":{"line":1288,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1289,"column":0},"generated":{"line":1289,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1290,"column":0},"generated":{"line":1290,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1291,"column":0},"generated":{"line":1291,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1292,"column":0},"generated":{"line":1292,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1293,"column":0},"generated":{"line":1293,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1294,"column":0},"generated":{"line":1294,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1295,"column":0},"generated":{"line":1295,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1296,"column":0},"generated":{"line":1296,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1297,"column":0},"generated":{"line":1297,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1298,"column":0},"generated":{"line":1298,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1299,"column":0},"generated":{"line":1299,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1300,"column":0},"generated":{"line":1300,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1301,"column":0},"generated":{"line":1301,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1302,"column":0},"generated":{"line":1302,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1303,"column":0},"generated":{"line":1303,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1304,"column":0},"generated":{"line":1304,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1305,"column":0},"generated":{"line":1305,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1306,"column":0},"generated":{"line":1306,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1307,"column":0},"generated":{"line":1307,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1308,"column":0},"generated":{"line":1308,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1309,"column":0},"generated":{"line":1309,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1310,"column":0},"generated":{"line":1310,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1311,"column":0},"generated":{"line":1311,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1312,"column":0},"generated":{"line":1312,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1313,"column":0},"generated":{"line":1313,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1314,"column":0},"generated":{"line":1314,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1315,"column":0},"generated":{"line":1315,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1316,"column":0},"generated":{"line":1316,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1317,"column":0},"generated":{"line":1317,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1318,"column":0},"generated":{"line":1318,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1319,"column":0},"generated":{"line":1319,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1320,"column":0},"generated":{"line":1320,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1321,"column":0},"generated":{"line":1321,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1322,"column":0},"generated":{"line":1322,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1323,"column":0},"generated":{"line":1323,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1324,"column":0},"generated":{"line":1324,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1325,"column":0},"generated":{"line":1325,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1326,"column":0},"generated":{"line":1326,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1327,"column":0},"generated":{"line":1327,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1328,"column":0},"generated":{"line":1328,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1329,"column":0},"generated":{"line":1329,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1330,"column":0},"generated":{"line":1330,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1331,"column":0},"generated":{"line":1331,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1332,"column":0},"generated":{"line":1332,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1333,"column":0},"generated":{"line":1333,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1334,"column":0},"generated":{"line":1334,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1335,"column":0},"generated":{"line":1335,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1336,"column":0},"generated":{"line":1336,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1337,"column":0},"generated":{"line":1337,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1338,"column":0},"generated":{"line":1338,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1339,"column":0},"generated":{"line":1339,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1340,"column":0},"generated":{"line":1340,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1341,"column":0},"generated":{"line":1341,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1342,"column":0},"generated":{"line":1342,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1343,"column":0},"generated":{"line":1343,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1344,"column":0},"generated":{"line":1344,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1345,"column":0},"generated":{"line":1345,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1346,"column":0},"generated":{"line":1346,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1347,"column":0},"generated":{"line":1347,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1348,"column":0},"generated":{"line":1348,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1349,"column":0},"generated":{"line":1349,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1350,"column":0},"generated":{"line":1350,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1351,"column":0},"generated":{"line":1351,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1352,"column":0},"generated":{"line":1352,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1353,"column":0},"generated":{"line":1353,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1354,"column":0},"generated":{"line":1354,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1355,"column":0},"generated":{"line":1355,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1356,"column":0},"generated":{"line":1356,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1357,"column":0},"generated":{"line":1357,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1358,"column":0},"generated":{"line":1358,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1359,"column":0},"generated":{"line":1359,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1360,"column":0},"generated":{"line":1360,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1361,"column":0},"generated":{"line":1361,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1362,"column":0},"generated":{"line":1362,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1363,"column":0},"generated":{"line":1363,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1364,"column":0},"generated":{"line":1364,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1365,"column":0},"generated":{"line":1365,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1366,"column":0},"generated":{"line":1366,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1367,"column":0},"generated":{"line":1367,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1368,"column":0},"generated":{"line":1368,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1369,"column":0},"generated":{"line":1369,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1370,"column":0},"generated":{"line":1370,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1371,"column":0},"generated":{"line":1371,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1372,"column":0},"generated":{"line":1372,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1373,"column":0},"generated":{"line":1373,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1374,"column":0},"generated":{"line":1374,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1375,"column":0},"generated":{"line":1375,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1376,"column":0},"generated":{"line":1376,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1377,"column":0},"generated":{"line":1377,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1378,"column":0},"generated":{"line":1378,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1379,"column":0},"generated":{"line":1379,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1380,"column":0},"generated":{"line":1380,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1381,"column":0},"generated":{"line":1381,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1382,"column":0},"generated":{"line":1382,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1383,"column":0},"generated":{"line":1383,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1384,"column":0},"generated":{"line":1384,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1385,"column":0},"generated":{"line":1385,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1386,"column":0},"generated":{"line":1386,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1387,"column":0},"generated":{"line":1387,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1388,"column":0},"generated":{"line":1388,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1389,"column":0},"generated":{"line":1389,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1390,"column":0},"generated":{"line":1390,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1391,"column":0},"generated":{"line":1391,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1392,"column":0},"generated":{"line":1392,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1393,"column":0},"generated":{"line":1393,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1394,"column":0},"generated":{"line":1394,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1395,"column":0},"generated":{"line":1395,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1396,"column":0},"generated":{"line":1396,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1397,"column":0},"generated":{"line":1397,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1398,"column":0},"generated":{"line":1398,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1399,"column":0},"generated":{"line":1399,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1400,"column":0},"generated":{"line":1400,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1401,"column":0},"generated":{"line":1401,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1402,"column":0},"generated":{"line":1402,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1403,"column":0},"generated":{"line":1403,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1404,"column":0},"generated":{"line":1404,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1405,"column":0},"generated":{"line":1405,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1406,"column":0},"generated":{"line":1406,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1407,"column":0},"generated":{"line":1407,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1408,"column":0},"generated":{"line":1408,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1409,"column":0},"generated":{"line":1409,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1410,"column":0},"generated":{"line":1410,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1411,"column":0},"generated":{"line":1411,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1412,"column":0},"generated":{"line":1412,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1413,"column":0},"generated":{"line":1413,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1414,"column":0},"generated":{"line":1414,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1415,"column":0},"generated":{"line":1415,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1416,"column":0},"generated":{"line":1416,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1417,"column":0},"generated":{"line":1417,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1418,"column":0},"generated":{"line":1418,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1419,"column":0},"generated":{"line":1419,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1420,"column":0},"generated":{"line":1420,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1421,"column":0},"generated":{"line":1421,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1422,"column":0},"generated":{"line":1422,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1423,"column":0},"generated":{"line":1423,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1424,"column":0},"generated":{"line":1424,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1425,"column":0},"generated":{"line":1425,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1426,"column":0},"generated":{"line":1426,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1427,"column":0},"generated":{"line":1427,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1428,"column":0},"generated":{"line":1428,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1429,"column":0},"generated":{"line":1429,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1430,"column":0},"generated":{"line":1430,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1431,"column":0},"generated":{"line":1431,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1432,"column":0},"generated":{"line":1432,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1433,"column":0},"generated":{"line":1433,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1434,"column":0},"generated":{"line":1434,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1435,"column":0},"generated":{"line":1435,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1436,"column":0},"generated":{"line":1436,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1437,"column":0},"generated":{"line":1437,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1438,"column":0},"generated":{"line":1438,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1439,"column":0},"generated":{"line":1439,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1440,"column":0},"generated":{"line":1440,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1441,"column":0},"generated":{"line":1441,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1442,"column":0},"generated":{"line":1442,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1443,"column":0},"generated":{"line":1443,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1444,"column":0},"generated":{"line":1444,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1445,"column":0},"generated":{"line":1445,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1446,"column":0},"generated":{"line":1446,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1447,"column":0},"generated":{"line":1447,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1448,"column":0},"generated":{"line":1448,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1449,"column":0},"generated":{"line":1449,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1450,"column":0},"generated":{"line":1450,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1451,"column":0},"generated":{"line":1451,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1452,"column":0},"generated":{"line":1452,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1453,"column":0},"generated":{"line":1453,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1454,"column":0},"generated":{"line":1454,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1455,"column":0},"generated":{"line":1455,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1456,"column":0},"generated":{"line":1456,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1457,"column":0},"generated":{"line":1457,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1458,"column":0},"generated":{"line":1458,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1459,"column":0},"generated":{"line":1459,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1460,"column":0},"generated":{"line":1460,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1461,"column":0},"generated":{"line":1461,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1462,"column":0},"generated":{"line":1462,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1463,"column":0},"generated":{"line":1463,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1464,"column":0},"generated":{"line":1464,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1465,"column":0},"generated":{"line":1465,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1466,"column":0},"generated":{"line":1466,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1467,"column":0},"generated":{"line":1467,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1468,"column":0},"generated":{"line":1468,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1469,"column":0},"generated":{"line":1469,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1470,"column":0},"generated":{"line":1470,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1471,"column":0},"generated":{"line":1471,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1472,"column":0},"generated":{"line":1472,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1473,"column":0},"generated":{"line":1473,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1474,"column":0},"generated":{"line":1474,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1475,"column":0},"generated":{"line":1475,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1476,"column":0},"generated":{"line":1476,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1477,"column":0},"generated":{"line":1477,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1478,"column":0},"generated":{"line":1478,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1479,"column":0},"generated":{"line":1479,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1480,"column":0},"generated":{"line":1480,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1481,"column":0},"generated":{"line":1481,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1482,"column":0},"generated":{"line":1482,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1483,"column":0},"generated":{"line":1483,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1484,"column":0},"generated":{"line":1484,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1485,"column":0},"generated":{"line":1485,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1486,"column":0},"generated":{"line":1486,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1487,"column":0},"generated":{"line":1487,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1488,"column":0},"generated":{"line":1488,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1489,"column":0},"generated":{"line":1489,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1490,"column":0},"generated":{"line":1490,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1491,"column":0},"generated":{"line":1491,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1492,"column":0},"generated":{"line":1492,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1493,"column":0},"generated":{"line":1493,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1494,"column":0},"generated":{"line":1494,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1495,"column":0},"generated":{"line":1495,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1496,"column":0},"generated":{"line":1496,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1497,"column":0},"generated":{"line":1497,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1498,"column":0},"generated":{"line":1498,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1499,"column":0},"generated":{"line":1499,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1500,"column":0},"generated":{"line":1500,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1501,"column":0},"generated":{"line":1501,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1502,"column":0},"generated":{"line":1502,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1503,"column":0},"generated":{"line":1503,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1504,"column":0},"generated":{"line":1504,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1505,"column":0},"generated":{"line":1505,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1506,"column":0},"generated":{"line":1506,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1507,"column":0},"generated":{"line":1507,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1508,"column":0},"generated":{"line":1508,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1509,"column":0},"generated":{"line":1509,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1510,"column":0},"generated":{"line":1510,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1511,"column":0},"generated":{"line":1511,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1512,"column":0},"generated":{"line":1512,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1513,"column":0},"generated":{"line":1513,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1514,"column":0},"generated":{"line":1514,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1515,"column":0},"generated":{"line":1515,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1516,"column":0},"generated":{"line":1516,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1517,"column":0},"generated":{"line":1517,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1518,"column":0},"generated":{"line":1518,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1519,"column":0},"generated":{"line":1519,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1520,"column":0},"generated":{"line":1520,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1521,"column":0},"generated":{"line":1521,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1522,"column":0},"generated":{"line":1522,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1523,"column":0},"generated":{"line":1523,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1524,"column":0},"generated":{"line":1524,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1525,"column":0},"generated":{"line":1525,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1526,"column":0},"generated":{"line":1526,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1527,"column":0},"generated":{"line":1527,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1528,"column":0},"generated":{"line":1528,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1529,"column":0},"generated":{"line":1529,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1530,"column":0},"generated":{"line":1530,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1531,"column":0},"generated":{"line":1531,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1532,"column":0},"generated":{"line":1532,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1533,"column":0},"generated":{"line":1533,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1534,"column":0},"generated":{"line":1534,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1535,"column":0},"generated":{"line":1535,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1536,"column":0},"generated":{"line":1536,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1537,"column":0},"generated":{"line":1537,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1538,"column":0},"generated":{"line":1538,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1539,"column":0},"generated":{"line":1539,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1540,"column":0},"generated":{"line":1540,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1541,"column":0},"generated":{"line":1541,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1542,"column":0},"generated":{"line":1542,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1543,"column":0},"generated":{"line":1543,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1544,"column":0},"generated":{"line":1544,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1545,"column":0},"generated":{"line":1545,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1546,"column":0},"generated":{"line":1546,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1547,"column":0},"generated":{"line":1547,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1548,"column":0},"generated":{"line":1548,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1549,"column":0},"generated":{"line":1549,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1550,"column":0},"generated":{"line":1550,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1551,"column":0},"generated":{"line":1551,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1552,"column":0},"generated":{"line":1552,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1553,"column":0},"generated":{"line":1553,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1554,"column":0},"generated":{"line":1554,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1555,"column":0},"generated":{"line":1555,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1556,"column":0},"generated":{"line":1556,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1557,"column":0},"generated":{"line":1557,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1558,"column":0},"generated":{"line":1558,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1559,"column":0},"generated":{"line":1559,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1560,"column":0},"generated":{"line":1560,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1561,"column":0},"generated":{"line":1561,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1562,"column":0},"generated":{"line":1562,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1563,"column":0},"generated":{"line":1563,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1564,"column":0},"generated":{"line":1564,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1565,"column":0},"generated":{"line":1565,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1566,"column":0},"generated":{"line":1566,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1567,"column":0},"generated":{"line":1567,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1568,"column":0},"generated":{"line":1568,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1569,"column":0},"generated":{"line":1569,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1570,"column":0},"generated":{"line":1570,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1571,"column":0},"generated":{"line":1571,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1572,"column":0},"generated":{"line":1572,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1573,"column":0},"generated":{"line":1573,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1574,"column":0},"generated":{"line":1574,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1575,"column":0},"generated":{"line":1575,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1576,"column":0},"generated":{"line":1576,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1577,"column":0},"generated":{"line":1577,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1578,"column":0},"generated":{"line":1578,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1579,"column":0},"generated":{"line":1579,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1580,"column":0},"generated":{"line":1580,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1581,"column":0},"generated":{"line":1581,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1582,"column":0},"generated":{"line":1582,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1583,"column":0},"generated":{"line":1583,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1584,"column":0},"generated":{"line":1584,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1585,"column":0},"generated":{"line":1585,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1586,"column":0},"generated":{"line":1586,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1587,"column":0},"generated":{"line":1587,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1588,"column":0},"generated":{"line":1588,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1589,"column":0},"generated":{"line":1589,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1590,"column":0},"generated":{"line":1590,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1591,"column":0},"generated":{"line":1591,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1592,"column":0},"generated":{"line":1592,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1593,"column":0},"generated":{"line":1593,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1594,"column":0},"generated":{"line":1594,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1595,"column":0},"generated":{"line":1595,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1596,"column":0},"generated":{"line":1596,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1597,"column":0},"generated":{"line":1597,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1598,"column":0},"generated":{"line":1598,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1599,"column":0},"generated":{"line":1599,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1600,"column":0},"generated":{"line":1600,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1601,"column":0},"generated":{"line":1601,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1602,"column":0},"generated":{"line":1602,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1603,"column":0},"generated":{"line":1603,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1604,"column":0},"generated":{"line":1604,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1605,"column":0},"generated":{"line":1605,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1606,"column":0},"generated":{"line":1606,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1607,"column":0},"generated":{"line":1607,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1608,"column":0},"generated":{"line":1608,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1609,"column":0},"generated":{"line":1609,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1610,"column":0},"generated":{"line":1610,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1611,"column":0},"generated":{"line":1611,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1612,"column":0},"generated":{"line":1612,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1613,"column":0},"generated":{"line":1613,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1614,"column":0},"generated":{"line":1614,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1615,"column":0},"generated":{"line":1615,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1616,"column":0},"generated":{"line":1616,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1617,"column":0},"generated":{"line":1617,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1618,"column":0},"generated":{"line":1618,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1619,"column":0},"generated":{"line":1619,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1620,"column":0},"generated":{"line":1620,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1621,"column":0},"generated":{"line":1621,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1622,"column":0},"generated":{"line":1622,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1623,"column":0},"generated":{"line":1623,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1624,"column":0},"generated":{"line":1624,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1625,"column":0},"generated":{"line":1625,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1626,"column":0},"generated":{"line":1626,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1627,"column":0},"generated":{"line":1627,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1628,"column":0},"generated":{"line":1628,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1629,"column":0},"generated":{"line":1629,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1630,"column":0},"generated":{"line":1630,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1631,"column":0},"generated":{"line":1631,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1632,"column":0},"generated":{"line":1632,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1633,"column":0},"generated":{"line":1633,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1634,"column":0},"generated":{"line":1634,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1635,"column":0},"generated":{"line":1635,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1636,"column":0},"generated":{"line":1636,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1637,"column":0},"generated":{"line":1637,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1638,"column":0},"generated":{"line":1638,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1639,"column":0},"generated":{"line":1639,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1640,"column":0},"generated":{"line":1640,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1641,"column":0},"generated":{"line":1641,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1642,"column":0},"generated":{"line":1642,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1643,"column":0},"generated":{"line":1643,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1644,"column":0},"generated":{"line":1644,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1645,"column":0},"generated":{"line":1645,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1646,"column":0},"generated":{"line":1646,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1647,"column":0},"generated":{"line":1647,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1648,"column":0},"generated":{"line":1648,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1649,"column":0},"generated":{"line":1649,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1650,"column":0},"generated":{"line":1650,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1651,"column":0},"generated":{"line":1651,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1652,"column":0},"generated":{"line":1652,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1653,"column":0},"generated":{"line":1653,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1654,"column":0},"generated":{"line":1654,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1655,"column":0},"generated":{"line":1655,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1656,"column":0},"generated":{"line":1656,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1657,"column":0},"generated":{"line":1657,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1658,"column":0},"generated":{"line":1658,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1659,"column":0},"generated":{"line":1659,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1660,"column":0},"generated":{"line":1660,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1661,"column":0},"generated":{"line":1661,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1662,"column":0},"generated":{"line":1662,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1663,"column":0},"generated":{"line":1663,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1664,"column":0},"generated":{"line":1664,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1665,"column":0},"generated":{"line":1665,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1666,"column":0},"generated":{"line":1666,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1667,"column":0},"generated":{"line":1667,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1668,"column":0},"generated":{"line":1668,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1669,"column":0},"generated":{"line":1669,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1670,"column":0},"generated":{"line":1670,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1671,"column":0},"generated":{"line":1671,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1672,"column":0},"generated":{"line":1672,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1673,"column":0},"generated":{"line":1673,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1674,"column":0},"generated":{"line":1674,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1675,"column":0},"generated":{"line":1675,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1676,"column":0},"generated":{"line":1676,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1677,"column":0},"generated":{"line":1677,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1678,"column":0},"generated":{"line":1678,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1679,"column":0},"generated":{"line":1679,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1680,"column":0},"generated":{"line":1680,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1681,"column":0},"generated":{"line":1681,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1682,"column":0},"generated":{"line":1682,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1683,"column":0},"generated":{"line":1683,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1684,"column":0},"generated":{"line":1684,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1685,"column":0},"generated":{"line":1685,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1686,"column":0},"generated":{"line":1686,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1687,"column":0},"generated":{"line":1687,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1688,"column":0},"generated":{"line":1688,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1689,"column":0},"generated":{"line":1689,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1690,"column":0},"generated":{"line":1690,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1691,"column":0},"generated":{"line":1691,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1692,"column":0},"generated":{"line":1692,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1693,"column":0},"generated":{"line":1693,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1694,"column":0},"generated":{"line":1694,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1695,"column":0},"generated":{"line":1695,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1696,"column":0},"generated":{"line":1696,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1697,"column":0},"generated":{"line":1697,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1698,"column":0},"generated":{"line":1698,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1699,"column":0},"generated":{"line":1699,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1700,"column":0},"generated":{"line":1700,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1701,"column":0},"generated":{"line":1701,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1702,"column":0},"generated":{"line":1702,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1703,"column":0},"generated":{"line":1703,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1704,"column":0},"generated":{"line":1704,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1705,"column":0},"generated":{"line":1705,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1706,"column":0},"generated":{"line":1706,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1707,"column":0},"generated":{"line":1707,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1708,"column":0},"generated":{"line":1708,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1709,"column":0},"generated":{"line":1709,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1710,"column":0},"generated":{"line":1710,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1711,"column":0},"generated":{"line":1711,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1712,"column":0},"generated":{"line":1712,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1713,"column":0},"generated":{"line":1713,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1714,"column":0},"generated":{"line":1714,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1715,"column":0},"generated":{"line":1715,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1716,"column":0},"generated":{"line":1716,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1717,"column":0},"generated":{"line":1717,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1718,"column":0},"generated":{"line":1718,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1719,"column":0},"generated":{"line":1719,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1720,"column":0},"generated":{"line":1720,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1721,"column":0},"generated":{"line":1721,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1722,"column":0},"generated":{"line":1722,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1723,"column":0},"generated":{"line":1723,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1724,"column":0},"generated":{"line":1724,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1725,"column":0},"generated":{"line":1725,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1726,"column":0},"generated":{"line":1726,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1727,"column":0},"generated":{"line":1727,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1728,"column":0},"generated":{"line":1728,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1729,"column":0},"generated":{"line":1729,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1730,"column":0},"generated":{"line":1730,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1731,"column":0},"generated":{"line":1731,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1732,"column":0},"generated":{"line":1732,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1733,"column":0},"generated":{"line":1733,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1734,"column":0},"generated":{"line":1734,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1735,"column":0},"generated":{"line":1735,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1736,"column":0},"generated":{"line":1736,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1737,"column":0},"generated":{"line":1737,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1738,"column":0},"generated":{"line":1738,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1739,"column":0},"generated":{"line":1739,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1740,"column":0},"generated":{"line":1740,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1741,"column":0},"generated":{"line":1741,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1742,"column":0},"generated":{"line":1742,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1743,"column":0},"generated":{"line":1743,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1744,"column":0},"generated":{"line":1744,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1745,"column":0},"generated":{"line":1745,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1746,"column":0},"generated":{"line":1746,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1747,"column":0},"generated":{"line":1747,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1748,"column":0},"generated":{"line":1748,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1749,"column":0},"generated":{"line":1749,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1750,"column":0},"generated":{"line":1750,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1751,"column":0},"generated":{"line":1751,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1752,"column":0},"generated":{"line":1752,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1753,"column":0},"generated":{"line":1753,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1754,"column":0},"generated":{"line":1754,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1755,"column":0},"generated":{"line":1755,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1756,"column":0},"generated":{"line":1756,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1757,"column":0},"generated":{"line":1757,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1758,"column":0},"generated":{"line":1758,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1759,"column":0},"generated":{"line":1759,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1760,"column":0},"generated":{"line":1760,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1761,"column":0},"generated":{"line":1761,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1762,"column":0},"generated":{"line":1762,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1763,"column":0},"generated":{"line":1763,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1764,"column":0},"generated":{"line":1764,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1765,"column":0},"generated":{"line":1765,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1766,"column":0},"generated":{"line":1766,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1767,"column":0},"generated":{"line":1767,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1768,"column":0},"generated":{"line":1768,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1769,"column":0},"generated":{"line":1769,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1770,"column":0},"generated":{"line":1770,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1771,"column":0},"generated":{"line":1771,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1772,"column":0},"generated":{"line":1772,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1773,"column":0},"generated":{"line":1773,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1774,"column":0},"generated":{"line":1774,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1775,"column":0},"generated":{"line":1775,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1776,"column":0},"generated":{"line":1776,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1777,"column":0},"generated":{"line":1777,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1778,"column":0},"generated":{"line":1778,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1779,"column":0},"generated":{"line":1779,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1780,"column":0},"generated":{"line":1780,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1781,"column":0},"generated":{"line":1781,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1782,"column":0},"generated":{"line":1782,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1783,"column":0},"generated":{"line":1783,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1784,"column":0},"generated":{"line":1784,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1785,"column":0},"generated":{"line":1785,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1786,"column":0},"generated":{"line":1786,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1787,"column":0},"generated":{"line":1787,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1788,"column":0},"generated":{"line":1788,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1789,"column":0},"generated":{"line":1789,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1790,"column":0},"generated":{"line":1790,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1791,"column":0},"generated":{"line":1791,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1792,"column":0},"generated":{"line":1792,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1793,"column":0},"generated":{"line":1793,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1794,"column":0},"generated":{"line":1794,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1795,"column":0},"generated":{"line":1795,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1796,"column":0},"generated":{"line":1796,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1797,"column":0},"generated":{"line":1797,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1798,"column":0},"generated":{"line":1798,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1799,"column":0},"generated":{"line":1799,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1800,"column":0},"generated":{"line":1800,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1801,"column":0},"generated":{"line":1801,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1802,"column":0},"generated":{"line":1802,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1803,"column":0},"generated":{"line":1803,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1804,"column":0},"generated":{"line":1804,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1805,"column":0},"generated":{"line":1805,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1806,"column":0},"generated":{"line":1806,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1807,"column":0},"generated":{"line":1807,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1808,"column":0},"generated":{"line":1808,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1809,"column":0},"generated":{"line":1809,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1810,"column":0},"generated":{"line":1810,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1811,"column":0},"generated":{"line":1811,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1812,"column":0},"generated":{"line":1812,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1813,"column":0},"generated":{"line":1813,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1814,"column":0},"generated":{"line":1814,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1815,"column":0},"generated":{"line":1815,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1816,"column":0},"generated":{"line":1816,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1817,"column":0},"generated":{"line":1817,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1818,"column":0},"generated":{"line":1818,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1819,"column":0},"generated":{"line":1819,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1820,"column":0},"generated":{"line":1820,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1821,"column":0},"generated":{"line":1821,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1822,"column":0},"generated":{"line":1822,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1823,"column":0},"generated":{"line":1823,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1824,"column":0},"generated":{"line":1824,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1825,"column":0},"generated":{"line":1825,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1826,"column":0},"generated":{"line":1826,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1827,"column":0},"generated":{"line":1827,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1828,"column":0},"generated":{"line":1828,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1829,"column":0},"generated":{"line":1829,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1830,"column":0},"generated":{"line":1830,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1831,"column":0},"generated":{"line":1831,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1832,"column":0},"generated":{"line":1832,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1833,"column":0},"generated":{"line":1833,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1834,"column":0},"generated":{"line":1834,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1835,"column":0},"generated":{"line":1835,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1836,"column":0},"generated":{"line":1836,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1837,"column":0},"generated":{"line":1837,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1838,"column":0},"generated":{"line":1838,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1839,"column":0},"generated":{"line":1839,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1840,"column":0},"generated":{"line":1840,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1841,"column":0},"generated":{"line":1841,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1842,"column":0},"generated":{"line":1842,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1843,"column":0},"generated":{"line":1843,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1844,"column":0},"generated":{"line":1844,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1845,"column":0},"generated":{"line":1845,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1846,"column":0},"generated":{"line":1846,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1847,"column":0},"generated":{"line":1847,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1848,"column":0},"generated":{"line":1848,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1849,"column":0},"generated":{"line":1849,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1850,"column":0},"generated":{"line":1850,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1851,"column":0},"generated":{"line":1851,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1852,"column":0},"generated":{"line":1852,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1853,"column":0},"generated":{"line":1853,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1854,"column":0},"generated":{"line":1854,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1855,"column":0},"generated":{"line":1855,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1856,"column":0},"generated":{"line":1856,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1857,"column":0},"generated":{"line":1857,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1858,"column":0},"generated":{"line":1858,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1859,"column":0},"generated":{"line":1859,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1860,"column":0},"generated":{"line":1860,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1861,"column":0},"generated":{"line":1861,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1862,"column":0},"generated":{"line":1862,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1863,"column":0},"generated":{"line":1863,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1864,"column":0},"generated":{"line":1864,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1865,"column":0},"generated":{"line":1865,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1866,"column":0},"generated":{"line":1866,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1867,"column":0},"generated":{"line":1867,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1868,"column":0},"generated":{"line":1868,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1869,"column":0},"generated":{"line":1869,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1870,"column":0},"generated":{"line":1870,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1871,"column":0},"generated":{"line":1871,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1872,"column":0},"generated":{"line":1872,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1873,"column":0},"generated":{"line":1873,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1874,"column":0},"generated":{"line":1874,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1875,"column":0},"generated":{"line":1875,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1876,"column":0},"generated":{"line":1876,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1877,"column":0},"generated":{"line":1877,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1878,"column":0},"generated":{"line":1878,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1879,"column":0},"generated":{"line":1879,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1880,"column":0},"generated":{"line":1880,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1881,"column":0},"generated":{"line":1881,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1882,"column":0},"generated":{"line":1882,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1883,"column":0},"generated":{"line":1883,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1884,"column":0},"generated":{"line":1884,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1885,"column":0},"generated":{"line":1885,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1886,"column":0},"generated":{"line":1886,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1887,"column":0},"generated":{"line":1887,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1888,"column":0},"generated":{"line":1888,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1889,"column":0},"generated":{"line":1889,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1890,"column":0},"generated":{"line":1890,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1891,"column":0},"generated":{"line":1891,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1892,"column":0},"generated":{"line":1892,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1893,"column":0},"generated":{"line":1893,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1894,"column":0},"generated":{"line":1894,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1895,"column":0},"generated":{"line":1895,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1896,"column":0},"generated":{"line":1896,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1897,"column":0},"generated":{"line":1897,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1898,"column":0},"generated":{"line":1898,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1899,"column":0},"generated":{"line":1899,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1900,"column":0},"generated":{"line":1900,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1901,"column":0},"generated":{"line":1901,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1902,"column":0},"generated":{"line":1902,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1903,"column":0},"generated":{"line":1903,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1904,"column":0},"generated":{"line":1904,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1905,"column":0},"generated":{"line":1905,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1906,"column":0},"generated":{"line":1906,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1907,"column":0},"generated":{"line":1907,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1908,"column":0},"generated":{"line":1908,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1909,"column":0},"generated":{"line":1909,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1910,"column":0},"generated":{"line":1910,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1911,"column":0},"generated":{"line":1911,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1912,"column":0},"generated":{"line":1912,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1913,"column":0},"generated":{"line":1913,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1914,"column":0},"generated":{"line":1914,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1915,"column":0},"generated":{"line":1915,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1916,"column":0},"generated":{"line":1916,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1917,"column":0},"generated":{"line":1917,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1918,"column":0},"generated":{"line":1918,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1919,"column":0},"generated":{"line":1919,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1920,"column":0},"generated":{"line":1920,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1921,"column":0},"generated":{"line":1921,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1922,"column":0},"generated":{"line":1922,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1923,"column":0},"generated":{"line":1923,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1924,"column":0},"generated":{"line":1924,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1925,"column":0},"generated":{"line":1925,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1926,"column":0},"generated":{"line":1926,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1927,"column":0},"generated":{"line":1927,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1928,"column":0},"generated":{"line":1928,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1929,"column":0},"generated":{"line":1929,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1930,"column":0},"generated":{"line":1930,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1931,"column":0},"generated":{"line":1931,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1932,"column":0},"generated":{"line":1932,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1933,"column":0},"generated":{"line":1933,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1934,"column":0},"generated":{"line":1934,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1935,"column":0},"generated":{"line":1935,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1936,"column":0},"generated":{"line":1936,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1937,"column":0},"generated":{"line":1937,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1938,"column":0},"generated":{"line":1938,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1939,"column":0},"generated":{"line":1939,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1940,"column":0},"generated":{"line":1940,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1941,"column":0},"generated":{"line":1941,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1942,"column":0},"generated":{"line":1942,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1943,"column":0},"generated":{"line":1943,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1944,"column":0},"generated":{"line":1944,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1945,"column":0},"generated":{"line":1945,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1946,"column":0},"generated":{"line":1946,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1947,"column":0},"generated":{"line":1947,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1948,"column":0},"generated":{"line":1948,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1949,"column":0},"generated":{"line":1949,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1950,"column":0},"generated":{"line":1950,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1951,"column":0},"generated":{"line":1951,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1952,"column":0},"generated":{"line":1952,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1953,"column":0},"generated":{"line":1953,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1954,"column":0},"generated":{"line":1954,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1955,"column":0},"generated":{"line":1955,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1956,"column":0},"generated":{"line":1956,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1957,"column":0},"generated":{"line":1957,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1958,"column":0},"generated":{"line":1958,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1959,"column":0},"generated":{"line":1959,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1960,"column":0},"generated":{"line":1960,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1961,"column":0},"generated":{"line":1961,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1962,"column":0},"generated":{"line":1962,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1963,"column":0},"generated":{"line":1963,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1964,"column":0},"generated":{"line":1964,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1965,"column":0},"generated":{"line":1965,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1966,"column":0},"generated":{"line":1966,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1967,"column":0},"generated":{"line":1967,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1968,"column":0},"generated":{"line":1968,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1969,"column":0},"generated":{"line":1969,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1970,"column":0},"generated":{"line":1970,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1971,"column":0},"generated":{"line":1971,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1972,"column":0},"generated":{"line":1972,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1973,"column":0},"generated":{"line":1973,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1974,"column":0},"generated":{"line":1974,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1975,"column":0},"generated":{"line":1975,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1976,"column":0},"generated":{"line":1976,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1977,"column":0},"generated":{"line":1977,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1978,"column":0},"generated":{"line":1978,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1979,"column":0},"generated":{"line":1979,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1980,"column":0},"generated":{"line":1980,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1981,"column":0},"generated":{"line":1981,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1982,"column":0},"generated":{"line":1982,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1983,"column":0},"generated":{"line":1983,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1984,"column":0},"generated":{"line":1984,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1985,"column":0},"generated":{"line":1985,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1986,"column":0},"generated":{"line":1986,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1987,"column":0},"generated":{"line":1987,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1988,"column":0},"generated":{"line":1988,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1989,"column":0},"generated":{"line":1989,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1990,"column":0},"generated":{"line":1990,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1991,"column":0},"generated":{"line":1991,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1992,"column":0},"generated":{"line":1992,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1993,"column":0},"generated":{"line":1993,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1994,"column":0},"generated":{"line":1994,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1995,"column":0},"generated":{"line":1995,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1996,"column":0},"generated":{"line":1996,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1997,"column":0},"generated":{"line":1997,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1998,"column":0},"generated":{"line":1998,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":1999,"column":0},"generated":{"line":1999,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2000,"column":0},"generated":{"line":2000,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2001,"column":0},"generated":{"line":2001,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2002,"column":0},"generated":{"line":2002,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2003,"column":0},"generated":{"line":2003,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2004,"column":0},"generated":{"line":2004,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2005,"column":0},"generated":{"line":2005,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2006,"column":0},"generated":{"line":2006,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2007,"column":0},"generated":{"line":2007,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2008,"column":0},"generated":{"line":2008,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2009,"column":0},"generated":{"line":2009,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2010,"column":0},"generated":{"line":2010,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2011,"column":0},"generated":{"line":2011,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2012,"column":0},"generated":{"line":2012,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2013,"column":0},"generated":{"line":2013,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2014,"column":0},"generated":{"line":2014,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2015,"column":0},"generated":{"line":2015,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2016,"column":0},"generated":{"line":2016,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2017,"column":0},"generated":{"line":2017,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2018,"column":0},"generated":{"line":2018,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2019,"column":0},"generated":{"line":2019,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2020,"column":0},"generated":{"line":2020,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2021,"column":0},"generated":{"line":2021,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2022,"column":0},"generated":{"line":2022,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2023,"column":0},"generated":{"line":2023,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2024,"column":0},"generated":{"line":2024,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2025,"column":0},"generated":{"line":2025,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2026,"column":0},"generated":{"line":2026,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2027,"column":0},"generated":{"line":2027,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2028,"column":0},"generated":{"line":2028,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2029,"column":0},"generated":{"line":2029,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2030,"column":0},"generated":{"line":2030,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2031,"column":0},"generated":{"line":2031,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2032,"column":0},"generated":{"line":2032,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2033,"column":0},"generated":{"line":2033,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2034,"column":0},"generated":{"line":2034,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2035,"column":0},"generated":{"line":2035,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2036,"column":0},"generated":{"line":2036,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2037,"column":0},"generated":{"line":2037,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2038,"column":0},"generated":{"line":2038,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2039,"column":0},"generated":{"line":2039,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2040,"column":0},"generated":{"line":2040,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2041,"column":0},"generated":{"line":2041,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2042,"column":0},"generated":{"line":2042,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2043,"column":0},"generated":{"line":2043,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2044,"column":0},"generated":{"line":2044,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2045,"column":0},"generated":{"line":2045,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2046,"column":0},"generated":{"line":2046,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2047,"column":0},"generated":{"line":2047,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2048,"column":0},"generated":{"line":2048,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2049,"column":0},"generated":{"line":2049,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2050,"column":0},"generated":{"line":2050,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2051,"column":0},"generated":{"line":2051,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2052,"column":0},"generated":{"line":2052,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2053,"column":0},"generated":{"line":2053,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2054,"column":0},"generated":{"line":2054,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2055,"column":0},"generated":{"line":2055,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2056,"column":0},"generated":{"line":2056,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2057,"column":0},"generated":{"line":2057,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2058,"column":0},"generated":{"line":2058,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2059,"column":0},"generated":{"line":2059,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2060,"column":0},"generated":{"line":2060,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2061,"column":0},"generated":{"line":2061,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2062,"column":0},"generated":{"line":2062,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2063,"column":0},"generated":{"line":2063,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2064,"column":0},"generated":{"line":2064,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2065,"column":0},"generated":{"line":2065,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2066,"column":0},"generated":{"line":2066,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2067,"column":0},"generated":{"line":2067,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2068,"column":0},"generated":{"line":2068,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2069,"column":0},"generated":{"line":2069,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2070,"column":0},"generated":{"line":2070,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2071,"column":0},"generated":{"line":2071,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2072,"column":0},"generated":{"line":2072,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2073,"column":0},"generated":{"line":2073,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2074,"column":0},"generated":{"line":2074,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2075,"column":0},"generated":{"line":2075,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2076,"column":0},"generated":{"line":2076,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2077,"column":0},"generated":{"line":2077,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2078,"column":0},"generated":{"line":2078,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2079,"column":0},"generated":{"line":2079,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2080,"column":0},"generated":{"line":2080,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2081,"column":0},"generated":{"line":2081,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2082,"column":0},"generated":{"line":2082,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2083,"column":0},"generated":{"line":2083,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2084,"column":0},"generated":{"line":2084,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2085,"column":0},"generated":{"line":2085,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2086,"column":0},"generated":{"line":2086,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2087,"column":0},"generated":{"line":2087,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2088,"column":0},"generated":{"line":2088,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2089,"column":0},"generated":{"line":2089,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2090,"column":0},"generated":{"line":2090,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2091,"column":0},"generated":{"line":2091,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2092,"column":0},"generated":{"line":2092,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2093,"column":0},"generated":{"line":2093,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2094,"column":0},"generated":{"line":2094,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2095,"column":0},"generated":{"line":2095,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2096,"column":0},"generated":{"line":2096,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2097,"column":0},"generated":{"line":2097,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2098,"column":0},"generated":{"line":2098,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2099,"column":0},"generated":{"line":2099,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2100,"column":0},"generated":{"line":2100,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2101,"column":0},"generated":{"line":2101,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2102,"column":0},"generated":{"line":2102,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2103,"column":0},"generated":{"line":2103,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2104,"column":0},"generated":{"line":2104,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2105,"column":0},"generated":{"line":2105,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2106,"column":0},"generated":{"line":2106,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2107,"column":0},"generated":{"line":2107,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2108,"column":0},"generated":{"line":2108,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2109,"column":0},"generated":{"line":2109,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2110,"column":0},"generated":{"line":2110,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2111,"column":0},"generated":{"line":2111,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2112,"column":0},"generated":{"line":2112,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2113,"column":0},"generated":{"line":2113,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2114,"column":0},"generated":{"line":2114,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2115,"column":0},"generated":{"line":2115,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2116,"column":0},"generated":{"line":2116,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2117,"column":0},"generated":{"line":2117,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2118,"column":0},"generated":{"line":2118,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2119,"column":0},"generated":{"line":2119,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2120,"column":0},"generated":{"line":2120,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2121,"column":0},"generated":{"line":2121,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2122,"column":0},"generated":{"line":2122,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2123,"column":0},"generated":{"line":2123,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2124,"column":0},"generated":{"line":2124,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2125,"column":0},"generated":{"line":2125,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2126,"column":0},"generated":{"line":2126,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2127,"column":0},"generated":{"line":2127,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2128,"column":0},"generated":{"line":2128,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2129,"column":0},"generated":{"line":2129,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2130,"column":0},"generated":{"line":2130,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2131,"column":0},"generated":{"line":2131,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2132,"column":0},"generated":{"line":2132,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2133,"column":0},"generated":{"line":2133,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2134,"column":0},"generated":{"line":2134,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2135,"column":0},"generated":{"line":2135,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2136,"column":0},"generated":{"line":2136,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2137,"column":0},"generated":{"line":2137,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2138,"column":0},"generated":{"line":2138,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2139,"column":0},"generated":{"line":2139,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2140,"column":0},"generated":{"line":2140,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2141,"column":0},"generated":{"line":2141,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2142,"column":0},"generated":{"line":2142,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2143,"column":0},"generated":{"line":2143,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2144,"column":0},"generated":{"line":2144,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2145,"column":0},"generated":{"line":2145,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2146,"column":0},"generated":{"line":2146,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2147,"column":0},"generated":{"line":2147,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2148,"column":0},"generated":{"line":2148,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2149,"column":0},"generated":{"line":2149,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2150,"column":0},"generated":{"line":2150,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2151,"column":0},"generated":{"line":2151,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2152,"column":0},"generated":{"line":2152,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2153,"column":0},"generated":{"line":2153,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2154,"column":0},"generated":{"line":2154,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2155,"column":0},"generated":{"line":2155,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2156,"column":0},"generated":{"line":2156,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2157,"column":0},"generated":{"line":2157,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2158,"column":0},"generated":{"line":2158,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2159,"column":0},"generated":{"line":2159,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2160,"column":0},"generated":{"line":2160,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2161,"column":0},"generated":{"line":2161,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2162,"column":0},"generated":{"line":2162,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2163,"column":0},"generated":{"line":2163,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2164,"column":0},"generated":{"line":2164,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2165,"column":0},"generated":{"line":2165,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2166,"column":0},"generated":{"line":2166,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2167,"column":0},"generated":{"line":2167,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2168,"column":0},"generated":{"line":2168,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2169,"column":0},"generated":{"line":2169,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2170,"column":0},"generated":{"line":2170,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2171,"column":0},"generated":{"line":2171,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2172,"column":0},"generated":{"line":2172,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2173,"column":0},"generated":{"line":2173,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2174,"column":0},"generated":{"line":2174,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2175,"column":0},"generated":{"line":2175,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2176,"column":0},"generated":{"line":2176,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2177,"column":0},"generated":{"line":2177,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2178,"column":0},"generated":{"line":2178,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2179,"column":0},"generated":{"line":2179,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2180,"column":0},"generated":{"line":2180,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2181,"column":0},"generated":{"line":2181,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2182,"column":0},"generated":{"line":2182,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2183,"column":0},"generated":{"line":2183,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2184,"column":0},"generated":{"line":2184,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2185,"column":0},"generated":{"line":2185,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2186,"column":0},"generated":{"line":2186,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2187,"column":0},"generated":{"line":2187,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2188,"column":0},"generated":{"line":2188,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2189,"column":0},"generated":{"line":2189,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2190,"column":0},"generated":{"line":2190,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2191,"column":0},"generated":{"line":2191,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2192,"column":0},"generated":{"line":2192,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2193,"column":0},"generated":{"line":2193,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2194,"column":0},"generated":{"line":2194,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2195,"column":0},"generated":{"line":2195,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2196,"column":0},"generated":{"line":2196,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2197,"column":0},"generated":{"line":2197,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2198,"column":0},"generated":{"line":2198,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2199,"column":0},"generated":{"line":2199,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2200,"column":0},"generated":{"line":2200,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2201,"column":0},"generated":{"line":2201,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2202,"column":0},"generated":{"line":2202,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2203,"column":0},"generated":{"line":2203,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2204,"column":0},"generated":{"line":2204,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2205,"column":0},"generated":{"line":2205,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2206,"column":0},"generated":{"line":2206,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2207,"column":0},"generated":{"line":2207,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2208,"column":0},"generated":{"line":2208,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2209,"column":0},"generated":{"line":2209,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2210,"column":0},"generated":{"line":2210,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2211,"column":0},"generated":{"line":2211,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2212,"column":0},"generated":{"line":2212,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2213,"column":0},"generated":{"line":2213,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2214,"column":0},"generated":{"line":2214,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2215,"column":0},"generated":{"line":2215,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2216,"column":0},"generated":{"line":2216,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2217,"column":0},"generated":{"line":2217,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2218,"column":0},"generated":{"line":2218,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2219,"column":0},"generated":{"line":2219,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2220,"column":0},"generated":{"line":2220,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2221,"column":0},"generated":{"line":2221,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2222,"column":0},"generated":{"line":2222,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2223,"column":0},"generated":{"line":2223,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2224,"column":0},"generated":{"line":2224,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2225,"column":0},"generated":{"line":2225,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2226,"column":0},"generated":{"line":2226,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2227,"column":0},"generated":{"line":2227,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2228,"column":0},"generated":{"line":2228,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2229,"column":0},"generated":{"line":2229,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2230,"column":0},"generated":{"line":2230,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2231,"column":0},"generated":{"line":2231,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2232,"column":0},"generated":{"line":2232,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2233,"column":0},"generated":{"line":2233,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2234,"column":0},"generated":{"line":2234,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2235,"column":0},"generated":{"line":2235,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2236,"column":0},"generated":{"line":2236,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2237,"column":0},"generated":{"line":2237,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2238,"column":0},"generated":{"line":2238,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2239,"column":0},"generated":{"line":2239,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2240,"column":0},"generated":{"line":2240,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2241,"column":0},"generated":{"line":2241,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2242,"column":0},"generated":{"line":2242,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2243,"column":0},"generated":{"line":2243,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2244,"column":0},"generated":{"line":2244,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2245,"column":0},"generated":{"line":2245,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2246,"column":0},"generated":{"line":2246,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2247,"column":0},"generated":{"line":2247,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2248,"column":0},"generated":{"line":2248,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2249,"column":0},"generated":{"line":2249,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2250,"column":0},"generated":{"line":2250,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2251,"column":0},"generated":{"line":2251,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2252,"column":0},"generated":{"line":2252,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2253,"column":0},"generated":{"line":2253,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2254,"column":0},"generated":{"line":2254,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2255,"column":0},"generated":{"line":2255,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2256,"column":0},"generated":{"line":2256,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2257,"column":0},"generated":{"line":2257,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2258,"column":0},"generated":{"line":2258,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2259,"column":0},"generated":{"line":2259,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2260,"column":0},"generated":{"line":2260,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2261,"column":0},"generated":{"line":2261,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2262,"column":0},"generated":{"line":2262,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2263,"column":0},"generated":{"line":2263,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2264,"column":0},"generated":{"line":2264,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2265,"column":0},"generated":{"line":2265,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2266,"column":0},"generated":{"line":2266,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2267,"column":0},"generated":{"line":2267,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2268,"column":0},"generated":{"line":2268,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2269,"column":0},"generated":{"line":2269,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2270,"column":0},"generated":{"line":2270,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2271,"column":0},"generated":{"line":2271,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2272,"column":0},"generated":{"line":2272,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2273,"column":0},"generated":{"line":2273,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2274,"column":0},"generated":{"line":2274,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2275,"column":0},"generated":{"line":2275,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2276,"column":0},"generated":{"line":2276,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2277,"column":0},"generated":{"line":2277,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2278,"column":0},"generated":{"line":2278,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2279,"column":0},"generated":{"line":2279,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2280,"column":0},"generated":{"line":2280,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2281,"column":0},"generated":{"line":2281,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2282,"column":0},"generated":{"line":2282,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2283,"column":0},"generated":{"line":2283,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2284,"column":0},"generated":{"line":2284,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2285,"column":0},"generated":{"line":2285,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2286,"column":0},"generated":{"line":2286,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2287,"column":0},"generated":{"line":2287,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2288,"column":0},"generated":{"line":2288,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2289,"column":0},"generated":{"line":2289,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2290,"column":0},"generated":{"line":2290,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2291,"column":0},"generated":{"line":2291,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2292,"column":0},"generated":{"line":2292,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2293,"column":0},"generated":{"line":2293,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2294,"column":0},"generated":{"line":2294,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2295,"column":0},"generated":{"line":2295,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2296,"column":0},"generated":{"line":2296,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2297,"column":0},"generated":{"line":2297,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2298,"column":0},"generated":{"line":2298,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2299,"column":0},"generated":{"line":2299,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2300,"column":0},"generated":{"line":2300,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2301,"column":0},"generated":{"line":2301,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2302,"column":0},"generated":{"line":2302,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2303,"column":0},"generated":{"line":2303,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2304,"column":0},"generated":{"line":2304,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2305,"column":0},"generated":{"line":2305,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2306,"column":0},"generated":{"line":2306,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2307,"column":0},"generated":{"line":2307,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2308,"column":0},"generated":{"line":2308,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2309,"column":0},"generated":{"line":2309,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2310,"column":0},"generated":{"line":2310,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2311,"column":0},"generated":{"line":2311,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2312,"column":0},"generated":{"line":2312,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2313,"column":0},"generated":{"line":2313,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2314,"column":0},"generated":{"line":2314,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2315,"column":0},"generated":{"line":2315,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2316,"column":0},"generated":{"line":2316,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2317,"column":0},"generated":{"line":2317,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2318,"column":0},"generated":{"line":2318,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2319,"column":0},"generated":{"line":2319,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2320,"column":0},"generated":{"line":2320,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2321,"column":0},"generated":{"line":2321,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2322,"column":0},"generated":{"line":2322,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2323,"column":0},"generated":{"line":2323,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2324,"column":0},"generated":{"line":2324,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2325,"column":0},"generated":{"line":2325,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2326,"column":0},"generated":{"line":2326,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2327,"column":0},"generated":{"line":2327,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2328,"column":0},"generated":{"line":2328,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2329,"column":0},"generated":{"line":2329,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2330,"column":0},"generated":{"line":2330,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2331,"column":0},"generated":{"line":2331,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2332,"column":0},"generated":{"line":2332,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2333,"column":0},"generated":{"line":2333,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2334,"column":0},"generated":{"line":2334,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2335,"column":0},"generated":{"line":2335,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2336,"column":0},"generated":{"line":2336,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2337,"column":0},"generated":{"line":2337,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2338,"column":0},"generated":{"line":2338,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2339,"column":0},"generated":{"line":2339,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2340,"column":0},"generated":{"line":2340,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2341,"column":0},"generated":{"line":2341,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2342,"column":0},"generated":{"line":2342,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2343,"column":0},"generated":{"line":2343,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2344,"column":0},"generated":{"line":2344,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2345,"column":0},"generated":{"line":2345,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2346,"column":0},"generated":{"line":2346,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2347,"column":0},"generated":{"line":2347,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2348,"column":0},"generated":{"line":2348,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2349,"column":0},"generated":{"line":2349,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2350,"column":0},"generated":{"line":2350,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2351,"column":0},"generated":{"line":2351,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2352,"column":0},"generated":{"line":2352,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2353,"column":0},"generated":{"line":2353,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2354,"column":0},"generated":{"line":2354,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2355,"column":0},"generated":{"line":2355,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2356,"column":0},"generated":{"line":2356,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2357,"column":0},"generated":{"line":2357,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2358,"column":0},"generated":{"line":2358,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2359,"column":0},"generated":{"line":2359,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2360,"column":0},"generated":{"line":2360,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2361,"column":0},"generated":{"line":2361,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2362,"column":0},"generated":{"line":2362,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2363,"column":0},"generated":{"line":2363,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2364,"column":0},"generated":{"line":2364,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2365,"column":0},"generated":{"line":2365,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2366,"column":0},"generated":{"line":2366,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2367,"column":0},"generated":{"line":2367,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2368,"column":0},"generated":{"line":2368,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2369,"column":0},"generated":{"line":2369,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2370,"column":0},"generated":{"line":2370,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2371,"column":0},"generated":{"line":2371,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2372,"column":0},"generated":{"line":2372,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2373,"column":0},"generated":{"line":2373,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2374,"column":0},"generated":{"line":2374,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2375,"column":0},"generated":{"line":2375,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2376,"column":0},"generated":{"line":2376,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2377,"column":0},"generated":{"line":2377,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2378,"column":0},"generated":{"line":2378,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2379,"column":0},"generated":{"line":2379,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2380,"column":0},"generated":{"line":2380,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2381,"column":0},"generated":{"line":2381,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2382,"column":0},"generated":{"line":2382,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2383,"column":0},"generated":{"line":2383,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2384,"column":0},"generated":{"line":2384,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2385,"column":0},"generated":{"line":2385,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2386,"column":0},"generated":{"line":2386,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2387,"column":0},"generated":{"line":2387,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2388,"column":0},"generated":{"line":2388,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2389,"column":0},"generated":{"line":2389,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2390,"column":0},"generated":{"line":2390,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2391,"column":0},"generated":{"line":2391,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2392,"column":0},"generated":{"line":2392,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2393,"column":0},"generated":{"line":2393,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2394,"column":0},"generated":{"line":2394,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2395,"column":0},"generated":{"line":2395,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2396,"column":0},"generated":{"line":2396,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2397,"column":0},"generated":{"line":2397,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2398,"column":0},"generated":{"line":2398,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2399,"column":0},"generated":{"line":2399,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2400,"column":0},"generated":{"line":2400,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2401,"column":0},"generated":{"line":2401,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2402,"column":0},"generated":{"line":2402,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2403,"column":0},"generated":{"line":2403,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2404,"column":0},"generated":{"line":2404,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2405,"column":0},"generated":{"line":2405,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2406,"column":0},"generated":{"line":2406,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2407,"column":0},"generated":{"line":2407,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2408,"column":0},"generated":{"line":2408,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2409,"column":0},"generated":{"line":2409,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2410,"column":0},"generated":{"line":2410,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2411,"column":0},"generated":{"line":2411,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2412,"column":0},"generated":{"line":2412,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2413,"column":0},"generated":{"line":2413,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2414,"column":0},"generated":{"line":2414,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2415,"column":0},"generated":{"line":2415,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2416,"column":0},"generated":{"line":2416,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2417,"column":0},"generated":{"line":2417,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2418,"column":0},"generated":{"line":2418,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2419,"column":0},"generated":{"line":2419,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2420,"column":0},"generated":{"line":2420,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2421,"column":0},"generated":{"line":2421,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2422,"column":0},"generated":{"line":2422,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2423,"column":0},"generated":{"line":2423,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2424,"column":0},"generated":{"line":2424,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2425,"column":0},"generated":{"line":2425,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2426,"column":0},"generated":{"line":2426,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2427,"column":0},"generated":{"line":2427,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2428,"column":0},"generated":{"line":2428,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2429,"column":0},"generated":{"line":2429,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2430,"column":0},"generated":{"line":2430,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2431,"column":0},"generated":{"line":2431,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2432,"column":0},"generated":{"line":2432,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2433,"column":0},"generated":{"line":2433,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2434,"column":0},"generated":{"line":2434,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2435,"column":0},"generated":{"line":2435,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2436,"column":0},"generated":{"line":2436,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2437,"column":0},"generated":{"line":2437,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2438,"column":0},"generated":{"line":2438,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2439,"column":0},"generated":{"line":2439,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2440,"column":0},"generated":{"line":2440,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2441,"column":0},"generated":{"line":2441,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2442,"column":0},"generated":{"line":2442,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2443,"column":0},"generated":{"line":2443,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2444,"column":0},"generated":{"line":2444,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2445,"column":0},"generated":{"line":2445,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2446,"column":0},"generated":{"line":2446,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2447,"column":0},"generated":{"line":2447,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2448,"column":0},"generated":{"line":2448,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2449,"column":0},"generated":{"line":2449,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2450,"column":0},"generated":{"line":2450,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2451,"column":0},"generated":{"line":2451,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2452,"column":0},"generated":{"line":2452,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2453,"column":0},"generated":{"line":2453,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2454,"column":0},"generated":{"line":2454,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2455,"column":0},"generated":{"line":2455,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2456,"column":0},"generated":{"line":2456,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2457,"column":0},"generated":{"line":2457,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2458,"column":0},"generated":{"line":2458,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2459,"column":0},"generated":{"line":2459,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2460,"column":0},"generated":{"line":2460,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2461,"column":0},"generated":{"line":2461,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2462,"column":0},"generated":{"line":2462,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2463,"column":0},"generated":{"line":2463,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2464,"column":0},"generated":{"line":2464,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2465,"column":0},"generated":{"line":2465,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2466,"column":0},"generated":{"line":2466,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2467,"column":0},"generated":{"line":2467,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2468,"column":0},"generated":{"line":2468,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2469,"column":0},"generated":{"line":2469,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2470,"column":0},"generated":{"line":2470,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2471,"column":0},"generated":{"line":2471,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2472,"column":0},"generated":{"line":2472,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2473,"column":0},"generated":{"line":2473,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2474,"column":0},"generated":{"line":2474,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2475,"column":0},"generated":{"line":2475,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2476,"column":0},"generated":{"line":2476,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2477,"column":0},"generated":{"line":2477,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2478,"column":0},"generated":{"line":2478,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2479,"column":0},"generated":{"line":2479,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2480,"column":0},"generated":{"line":2480,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2481,"column":0},"generated":{"line":2481,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2482,"column":0},"generated":{"line":2482,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2483,"column":0},"generated":{"line":2483,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2484,"column":0},"generated":{"line":2484,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2485,"column":0},"generated":{"line":2485,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2486,"column":0},"generated":{"line":2486,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2487,"column":0},"generated":{"line":2487,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2488,"column":0},"generated":{"line":2488,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2489,"column":0},"generated":{"line":2489,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2490,"column":0},"generated":{"line":2490,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2491,"column":0},"generated":{"line":2491,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2492,"column":0},"generated":{"line":2492,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2493,"column":0},"generated":{"line":2493,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2494,"column":0},"generated":{"line":2494,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2495,"column":0},"generated":{"line":2495,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2496,"column":0},"generated":{"line":2496,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2497,"column":0},"generated":{"line":2497,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2498,"column":0},"generated":{"line":2498,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2499,"column":0},"generated":{"line":2499,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2500,"column":0},"generated":{"line":2500,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2501,"column":0},"generated":{"line":2501,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2502,"column":0},"generated":{"line":2502,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2503,"column":0},"generated":{"line":2503,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2504,"column":0},"generated":{"line":2504,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2505,"column":0},"generated":{"line":2505,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2506,"column":0},"generated":{"line":2506,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2507,"column":0},"generated":{"line":2507,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2508,"column":0},"generated":{"line":2508,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2509,"column":0},"generated":{"line":2509,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2510,"column":0},"generated":{"line":2510,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2511,"column":0},"generated":{"line":2511,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2512,"column":0},"generated":{"line":2512,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2513,"column":0},"generated":{"line":2513,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2514,"column":0},"generated":{"line":2514,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2515,"column":0},"generated":{"line":2515,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2516,"column":0},"generated":{"line":2516,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2517,"column":0},"generated":{"line":2517,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2518,"column":0},"generated":{"line":2518,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2519,"column":0},"generated":{"line":2519,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2520,"column":0},"generated":{"line":2520,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2521,"column":0},"generated":{"line":2521,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2522,"column":0},"generated":{"line":2522,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2523,"column":0},"generated":{"line":2523,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2524,"column":0},"generated":{"line":2524,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2525,"column":0},"generated":{"line":2525,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2526,"column":0},"generated":{"line":2526,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2527,"column":0},"generated":{"line":2527,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2528,"column":0},"generated":{"line":2528,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2529,"column":0},"generated":{"line":2529,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2530,"column":0},"generated":{"line":2530,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2531,"column":0},"generated":{"line":2531,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2532,"column":0},"generated":{"line":2532,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2533,"column":0},"generated":{"line":2533,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2534,"column":0},"generated":{"line":2534,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2535,"column":0},"generated":{"line":2535,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2536,"column":0},"generated":{"line":2536,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2537,"column":0},"generated":{"line":2537,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2538,"column":0},"generated":{"line":2538,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2539,"column":0},"generated":{"line":2539,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2540,"column":0},"generated":{"line":2540,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2541,"column":0},"generated":{"line":2541,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2542,"column":0},"generated":{"line":2542,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2543,"column":0},"generated":{"line":2543,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2544,"column":0},"generated":{"line":2544,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2545,"column":0},"generated":{"line":2545,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2546,"column":0},"generated":{"line":2546,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2547,"column":0},"generated":{"line":2547,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2548,"column":0},"generated":{"line":2548,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2549,"column":0},"generated":{"line":2549,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2550,"column":0},"generated":{"line":2550,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2551,"column":0},"generated":{"line":2551,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2552,"column":0},"generated":{"line":2552,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2553,"column":0},"generated":{"line":2553,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2554,"column":0},"generated":{"line":2554,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2555,"column":0},"generated":{"line":2555,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2556,"column":0},"generated":{"line":2556,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2557,"column":0},"generated":{"line":2557,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2558,"column":0},"generated":{"line":2558,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2559,"column":0},"generated":{"line":2559,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2560,"column":0},"generated":{"line":2560,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2561,"column":0},"generated":{"line":2561,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2562,"column":0},"generated":{"line":2562,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2563,"column":0},"generated":{"line":2563,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2564,"column":0},"generated":{"line":2564,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2565,"column":0},"generated":{"line":2565,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2566,"column":0},"generated":{"line":2566,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2567,"column":0},"generated":{"line":2567,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2568,"column":0},"generated":{"line":2568,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2569,"column":0},"generated":{"line":2569,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2570,"column":0},"generated":{"line":2570,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2571,"column":0},"generated":{"line":2571,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2572,"column":0},"generated":{"line":2572,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2573,"column":0},"generated":{"line":2573,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2574,"column":0},"generated":{"line":2574,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2575,"column":0},"generated":{"line":2575,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2576,"column":0},"generated":{"line":2576,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2577,"column":0},"generated":{"line":2577,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2578,"column":0},"generated":{"line":2578,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2579,"column":0},"generated":{"line":2579,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2580,"column":0},"generated":{"line":2580,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2581,"column":0},"generated":{"line":2581,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2582,"column":0},"generated":{"line":2582,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2583,"column":0},"generated":{"line":2583,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2584,"column":0},"generated":{"line":2584,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2585,"column":0},"generated":{"line":2585,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2586,"column":0},"generated":{"line":2586,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2587,"column":0},"generated":{"line":2587,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2588,"column":0},"generated":{"line":2588,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2589,"column":0},"generated":{"line":2589,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2590,"column":0},"generated":{"line":2590,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2591,"column":0},"generated":{"line":2591,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2592,"column":0},"generated":{"line":2592,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2593,"column":0},"generated":{"line":2593,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2594,"column":0},"generated":{"line":2594,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2595,"column":0},"generated":{"line":2595,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2596,"column":0},"generated":{"line":2596,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2597,"column":0},"generated":{"line":2597,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2598,"column":0},"generated":{"line":2598,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2599,"column":0},"generated":{"line":2599,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2600,"column":0},"generated":{"line":2600,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2601,"column":0},"generated":{"line":2601,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2602,"column":0},"generated":{"line":2602,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2603,"column":0},"generated":{"line":2603,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2604,"column":0},"generated":{"line":2604,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2605,"column":0},"generated":{"line":2605,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2606,"column":0},"generated":{"line":2606,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2607,"column":0},"generated":{"line":2607,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2608,"column":0},"generated":{"line":2608,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2609,"column":0},"generated":{"line":2609,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2610,"column":0},"generated":{"line":2610,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2611,"column":0},"generated":{"line":2611,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2612,"column":0},"generated":{"line":2612,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2613,"column":0},"generated":{"line":2613,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2614,"column":0},"generated":{"line":2614,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2615,"column":0},"generated":{"line":2615,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2616,"column":0},"generated":{"line":2616,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2617,"column":0},"generated":{"line":2617,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2618,"column":0},"generated":{"line":2618,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2619,"column":0},"generated":{"line":2619,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2620,"column":0},"generated":{"line":2620,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2621,"column":0},"generated":{"line":2621,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2622,"column":0},"generated":{"line":2622,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2623,"column":0},"generated":{"line":2623,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2624,"column":0},"generated":{"line":2624,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2625,"column":0},"generated":{"line":2625,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2626,"column":0},"generated":{"line":2626,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2627,"column":0},"generated":{"line":2627,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2628,"column":0},"generated":{"line":2628,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2629,"column":0},"generated":{"line":2629,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2630,"column":0},"generated":{"line":2630,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2631,"column":0},"generated":{"line":2631,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2632,"column":0},"generated":{"line":2632,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2633,"column":0},"generated":{"line":2633,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2634,"column":0},"generated":{"line":2634,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2635,"column":0},"generated":{"line":2635,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2636,"column":0},"generated":{"line":2636,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2637,"column":0},"generated":{"line":2637,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2638,"column":0},"generated":{"line":2638,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2639,"column":0},"generated":{"line":2639,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2640,"column":0},"generated":{"line":2640,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2641,"column":0},"generated":{"line":2641,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2642,"column":0},"generated":{"line":2642,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2643,"column":0},"generated":{"line":2643,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2644,"column":0},"generated":{"line":2644,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2645,"column":0},"generated":{"line":2645,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2646,"column":0},"generated":{"line":2646,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2647,"column":0},"generated":{"line":2647,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2648,"column":0},"generated":{"line":2648,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2649,"column":0},"generated":{"line":2649,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2650,"column":0},"generated":{"line":2650,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2651,"column":0},"generated":{"line":2651,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2652,"column":0},"generated":{"line":2652,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2653,"column":0},"generated":{"line":2653,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2654,"column":0},"generated":{"line":2654,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2655,"column":0},"generated":{"line":2655,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2656,"column":0},"generated":{"line":2656,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2657,"column":0},"generated":{"line":2657,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2658,"column":0},"generated":{"line":2658,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2659,"column":0},"generated":{"line":2659,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2660,"column":0},"generated":{"line":2660,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2661,"column":0},"generated":{"line":2661,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2662,"column":0},"generated":{"line":2662,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2663,"column":0},"generated":{"line":2663,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2664,"column":0},"generated":{"line":2664,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2665,"column":0},"generated":{"line":2665,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2666,"column":0},"generated":{"line":2666,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2667,"column":0},"generated":{"line":2667,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2668,"column":0},"generated":{"line":2668,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2669,"column":0},"generated":{"line":2669,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2670,"column":0},"generated":{"line":2670,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2671,"column":0},"generated":{"line":2671,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2672,"column":0},"generated":{"line":2672,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2673,"column":0},"generated":{"line":2673,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2674,"column":0},"generated":{"line":2674,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2675,"column":0},"generated":{"line":2675,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2676,"column":0},"generated":{"line":2676,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2677,"column":0},"generated":{"line":2677,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2678,"column":0},"generated":{"line":2678,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2679,"column":0},"generated":{"line":2679,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2680,"column":0},"generated":{"line":2680,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2681,"column":0},"generated":{"line":2681,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2682,"column":0},"generated":{"line":2682,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2683,"column":0},"generated":{"line":2683,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2684,"column":0},"generated":{"line":2684,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2685,"column":0},"generated":{"line":2685,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2686,"column":0},"generated":{"line":2686,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2687,"column":0},"generated":{"line":2687,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2688,"column":0},"generated":{"line":2688,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2689,"column":0},"generated":{"line":2689,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2690,"column":0},"generated":{"line":2690,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2691,"column":0},"generated":{"line":2691,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2692,"column":0},"generated":{"line":2692,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2693,"column":0},"generated":{"line":2693,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2694,"column":0},"generated":{"line":2694,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2695,"column":0},"generated":{"line":2695,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2696,"column":0},"generated":{"line":2696,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2697,"column":0},"generated":{"line":2697,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2698,"column":0},"generated":{"line":2698,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2699,"column":0},"generated":{"line":2699,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2700,"column":0},"generated":{"line":2700,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2701,"column":0},"generated":{"line":2701,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2702,"column":0},"generated":{"line":2702,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2703,"column":0},"generated":{"line":2703,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2704,"column":0},"generated":{"line":2704,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2705,"column":0},"generated":{"line":2705,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2706,"column":0},"generated":{"line":2706,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2707,"column":0},"generated":{"line":2707,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2708,"column":0},"generated":{"line":2708,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2709,"column":0},"generated":{"line":2709,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2710,"column":0},"generated":{"line":2710,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2711,"column":0},"generated":{"line":2711,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2712,"column":0},"generated":{"line":2712,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2713,"column":0},"generated":{"line":2713,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2714,"column":0},"generated":{"line":2714,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2715,"column":0},"generated":{"line":2715,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2716,"column":0},"generated":{"line":2716,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2717,"column":0},"generated":{"line":2717,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2718,"column":0},"generated":{"line":2718,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2719,"column":0},"generated":{"line":2719,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2720,"column":0},"generated":{"line":2720,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2721,"column":0},"generated":{"line":2721,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2722,"column":0},"generated":{"line":2722,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2723,"column":0},"generated":{"line":2723,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2724,"column":0},"generated":{"line":2724,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2725,"column":0},"generated":{"line":2725,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2726,"column":0},"generated":{"line":2726,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2727,"column":0},"generated":{"line":2727,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2728,"column":0},"generated":{"line":2728,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2729,"column":0},"generated":{"line":2729,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2730,"column":0},"generated":{"line":2730,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2731,"column":0},"generated":{"line":2731,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2732,"column":0},"generated":{"line":2732,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2733,"column":0},"generated":{"line":2733,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2734,"column":0},"generated":{"line":2734,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2735,"column":0},"generated":{"line":2735,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2736,"column":0},"generated":{"line":2736,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2737,"column":0},"generated":{"line":2737,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2738,"column":0},"generated":{"line":2738,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2739,"column":0},"generated":{"line":2739,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2740,"column":0},"generated":{"line":2740,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2741,"column":0},"generated":{"line":2741,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2742,"column":0},"generated":{"line":2742,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2743,"column":0},"generated":{"line":2743,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2744,"column":0},"generated":{"line":2744,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2745,"column":0},"generated":{"line":2745,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2746,"column":0},"generated":{"line":2746,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2747,"column":0},"generated":{"line":2747,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2748,"column":0},"generated":{"line":2748,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2749,"column":0},"generated":{"line":2749,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2750,"column":0},"generated":{"line":2750,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2751,"column":0},"generated":{"line":2751,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2752,"column":0},"generated":{"line":2752,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2753,"column":0},"generated":{"line":2753,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2754,"column":0},"generated":{"line":2754,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2755,"column":0},"generated":{"line":2755,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2756,"column":0},"generated":{"line":2756,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2757,"column":0},"generated":{"line":2757,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2758,"column":0},"generated":{"line":2758,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2759,"column":0},"generated":{"line":2759,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2760,"column":0},"generated":{"line":2760,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2761,"column":0},"generated":{"line":2761,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2762,"column":0},"generated":{"line":2762,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2763,"column":0},"generated":{"line":2763,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2764,"column":0},"generated":{"line":2764,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2765,"column":0},"generated":{"line":2765,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2766,"column":0},"generated":{"line":2766,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2767,"column":0},"generated":{"line":2767,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2768,"column":0},"generated":{"line":2768,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2769,"column":0},"generated":{"line":2769,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2770,"column":0},"generated":{"line":2770,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2771,"column":0},"generated":{"line":2771,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2772,"column":0},"generated":{"line":2772,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2773,"column":0},"generated":{"line":2773,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2774,"column":0},"generated":{"line":2774,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2775,"column":0},"generated":{"line":2775,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2776,"column":0},"generated":{"line":2776,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2777,"column":0},"generated":{"line":2777,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2778,"column":0},"generated":{"line":2778,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2779,"column":0},"generated":{"line":2779,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2780,"column":0},"generated":{"line":2780,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2781,"column":0},"generated":{"line":2781,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2782,"column":0},"generated":{"line":2782,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2783,"column":0},"generated":{"line":2783,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2784,"column":0},"generated":{"line":2784,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2785,"column":0},"generated":{"line":2785,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2786,"column":0},"generated":{"line":2786,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2787,"column":0},"generated":{"line":2787,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2788,"column":0},"generated":{"line":2788,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2789,"column":0},"generated":{"line":2789,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2790,"column":0},"generated":{"line":2790,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2791,"column":0},"generated":{"line":2791,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2792,"column":0},"generated":{"line":2792,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2793,"column":0},"generated":{"line":2793,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2794,"column":0},"generated":{"line":2794,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2795,"column":0},"generated":{"line":2795,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2796,"column":0},"generated":{"line":2796,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2797,"column":0},"generated":{"line":2797,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2798,"column":0},"generated":{"line":2798,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2799,"column":0},"generated":{"line":2799,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2800,"column":0},"generated":{"line":2800,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2801,"column":0},"generated":{"line":2801,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2802,"column":0},"generated":{"line":2802,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2803,"column":0},"generated":{"line":2803,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2804,"column":0},"generated":{"line":2804,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2805,"column":0},"generated":{"line":2805,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2806,"column":0},"generated":{"line":2806,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2807,"column":0},"generated":{"line":2807,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2808,"column":0},"generated":{"line":2808,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2809,"column":0},"generated":{"line":2809,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2810,"column":0},"generated":{"line":2810,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2811,"column":0},"generated":{"line":2811,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2812,"column":0},"generated":{"line":2812,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2813,"column":0},"generated":{"line":2813,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2814,"column":0},"generated":{"line":2814,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2815,"column":0},"generated":{"line":2815,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2816,"column":0},"generated":{"line":2816,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2817,"column":0},"generated":{"line":2817,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2818,"column":0},"generated":{"line":2818,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2819,"column":0},"generated":{"line":2819,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2820,"column":0},"generated":{"line":2820,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2821,"column":0},"generated":{"line":2821,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2822,"column":0},"generated":{"line":2822,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2823,"column":0},"generated":{"line":2823,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2824,"column":0},"generated":{"line":2824,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2825,"column":0},"generated":{"line":2825,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2826,"column":0},"generated":{"line":2826,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2827,"column":0},"generated":{"line":2827,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2828,"column":0},"generated":{"line":2828,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2829,"column":0},"generated":{"line":2829,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2830,"column":0},"generated":{"line":2830,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2831,"column":0},"generated":{"line":2831,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2832,"column":0},"generated":{"line":2832,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2833,"column":0},"generated":{"line":2833,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2834,"column":0},"generated":{"line":2834,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2835,"column":0},"generated":{"line":2835,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2836,"column":0},"generated":{"line":2836,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2837,"column":0},"generated":{"line":2837,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2838,"column":0},"generated":{"line":2838,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2839,"column":0},"generated":{"line":2839,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2840,"column":0},"generated":{"line":2840,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2841,"column":0},"generated":{"line":2841,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2842,"column":0},"generated":{"line":2842,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2843,"column":0},"generated":{"line":2843,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2844,"column":0},"generated":{"line":2844,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2845,"column":0},"generated":{"line":2845,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2846,"column":0},"generated":{"line":2846,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2847,"column":0},"generated":{"line":2847,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2848,"column":0},"generated":{"line":2848,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2849,"column":0},"generated":{"line":2849,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2850,"column":0},"generated":{"line":2850,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2851,"column":0},"generated":{"line":2851,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2852,"column":0},"generated":{"line":2852,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2853,"column":0},"generated":{"line":2853,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2854,"column":0},"generated":{"line":2854,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2855,"column":0},"generated":{"line":2855,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2856,"column":0},"generated":{"line":2856,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2857,"column":0},"generated":{"line":2857,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2858,"column":0},"generated":{"line":2858,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2859,"column":0},"generated":{"line":2859,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2860,"column":0},"generated":{"line":2860,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2861,"column":0},"generated":{"line":2861,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2862,"column":0},"generated":{"line":2862,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2863,"column":0},"generated":{"line":2863,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2864,"column":0},"generated":{"line":2864,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2865,"column":0},"generated":{"line":2865,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2866,"column":0},"generated":{"line":2866,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2867,"column":0},"generated":{"line":2867,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2868,"column":0},"generated":{"line":2868,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2869,"column":0},"generated":{"line":2869,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2870,"column":0},"generated":{"line":2870,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2871,"column":0},"generated":{"line":2871,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2872,"column":0},"generated":{"line":2872,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2873,"column":0},"generated":{"line":2873,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2874,"column":0},"generated":{"line":2874,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2875,"column":0},"generated":{"line":2875,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2876,"column":0},"generated":{"line":2876,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2877,"column":0},"generated":{"line":2877,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2878,"column":0},"generated":{"line":2878,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2879,"column":0},"generated":{"line":2879,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2880,"column":0},"generated":{"line":2880,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2881,"column":0},"generated":{"line":2881,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2882,"column":0},"generated":{"line":2882,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2883,"column":0},"generated":{"line":2883,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2884,"column":0},"generated":{"line":2884,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2885,"column":0},"generated":{"line":2885,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2886,"column":0},"generated":{"line":2886,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2887,"column":0},"generated":{"line":2887,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2888,"column":0},"generated":{"line":2888,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2889,"column":0},"generated":{"line":2889,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2890,"column":0},"generated":{"line":2890,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2891,"column":0},"generated":{"line":2891,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2892,"column":0},"generated":{"line":2892,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2893,"column":0},"generated":{"line":2893,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2894,"column":0},"generated":{"line":2894,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2895,"column":0},"generated":{"line":2895,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2896,"column":0},"generated":{"line":2896,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2897,"column":0},"generated":{"line":2897,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2898,"column":0},"generated":{"line":2898,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2899,"column":0},"generated":{"line":2899,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2900,"column":0},"generated":{"line":2900,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2901,"column":0},"generated":{"line":2901,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2902,"column":0},"generated":{"line":2902,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2903,"column":0},"generated":{"line":2903,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2904,"column":0},"generated":{"line":2904,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2905,"column":0},"generated":{"line":2905,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2906,"column":0},"generated":{"line":2906,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2907,"column":0},"generated":{"line":2907,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2908,"column":0},"generated":{"line":2908,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2909,"column":0},"generated":{"line":2909,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2910,"column":0},"generated":{"line":2910,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2911,"column":0},"generated":{"line":2911,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2912,"column":0},"generated":{"line":2912,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2913,"column":0},"generated":{"line":2913,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2914,"column":0},"generated":{"line":2914,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2915,"column":0},"generated":{"line":2915,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2916,"column":0},"generated":{"line":2916,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2917,"column":0},"generated":{"line":2917,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2918,"column":0},"generated":{"line":2918,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2919,"column":0},"generated":{"line":2919,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2920,"column":0},"generated":{"line":2920,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2921,"column":0},"generated":{"line":2921,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2922,"column":0},"generated":{"line":2922,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2923,"column":0},"generated":{"line":2923,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2924,"column":0},"generated":{"line":2924,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2925,"column":0},"generated":{"line":2925,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2926,"column":0},"generated":{"line":2926,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2927,"column":0},"generated":{"line":2927,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2928,"column":0},"generated":{"line":2928,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2929,"column":0},"generated":{"line":2929,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2930,"column":0},"generated":{"line":2930,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2931,"column":0},"generated":{"line":2931,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2932,"column":0},"generated":{"line":2932,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2933,"column":0},"generated":{"line":2933,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2934,"column":0},"generated":{"line":2934,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2935,"column":0},"generated":{"line":2935,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2936,"column":0},"generated":{"line":2936,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2937,"column":0},"generated":{"line":2937,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2938,"column":0},"generated":{"line":2938,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2939,"column":0},"generated":{"line":2939,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2940,"column":0},"generated":{"line":2940,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2941,"column":0},"generated":{"line":2941,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2942,"column":0},"generated":{"line":2942,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2943,"column":0},"generated":{"line":2943,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2944,"column":0},"generated":{"line":2944,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2945,"column":0},"generated":{"line":2945,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2946,"column":0},"generated":{"line":2946,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2947,"column":0},"generated":{"line":2947,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2948,"column":0},"generated":{"line":2948,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2949,"column":0},"generated":{"line":2949,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2950,"column":0},"generated":{"line":2950,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2951,"column":0},"generated":{"line":2951,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2952,"column":0},"generated":{"line":2952,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2953,"column":0},"generated":{"line":2953,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2954,"column":0},"generated":{"line":2954,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2955,"column":0},"generated":{"line":2955,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2956,"column":0},"generated":{"line":2956,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2957,"column":0},"generated":{"line":2957,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2958,"column":0},"generated":{"line":2958,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2959,"column":0},"generated":{"line":2959,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2960,"column":0},"generated":{"line":2960,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2961,"column":0},"generated":{"line":2961,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2962,"column":0},"generated":{"line":2962,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2963,"column":0},"generated":{"line":2963,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2964,"column":0},"generated":{"line":2964,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2965,"column":0},"generated":{"line":2965,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2966,"column":0},"generated":{"line":2966,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2967,"column":0},"generated":{"line":2967,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2968,"column":0},"generated":{"line":2968,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2969,"column":0},"generated":{"line":2969,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2970,"column":0},"generated":{"line":2970,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2971,"column":0},"generated":{"line":2971,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2972,"column":0},"generated":{"line":2972,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2973,"column":0},"generated":{"line":2973,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2974,"column":0},"generated":{"line":2974,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2975,"column":0},"generated":{"line":2975,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2976,"column":0},"generated":{"line":2976,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2977,"column":0},"generated":{"line":2977,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2978,"column":0},"generated":{"line":2978,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2979,"column":0},"generated":{"line":2979,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2980,"column":0},"generated":{"line":2980,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2981,"column":0},"generated":{"line":2981,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2982,"column":0},"generated":{"line":2982,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2983,"column":0},"generated":{"line":2983,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2984,"column":0},"generated":{"line":2984,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2985,"column":0},"generated":{"line":2985,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2986,"column":0},"generated":{"line":2986,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2987,"column":0},"generated":{"line":2987,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2988,"column":0},"generated":{"line":2988,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2989,"column":0},"generated":{"line":2989,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2990,"column":0},"generated":{"line":2990,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2991,"column":0},"generated":{"line":2991,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2992,"column":0},"generated":{"line":2992,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2993,"column":0},"generated":{"line":2993,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2994,"column":0},"generated":{"line":2994,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2995,"column":0},"generated":{"line":2995,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2996,"column":0},"generated":{"line":2996,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2997,"column":0},"generated":{"line":2997,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2998,"column":0},"generated":{"line":2998,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":2999,"column":0},"generated":{"line":2999,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3000,"column":0},"generated":{"line":3000,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3001,"column":0},"generated":{"line":3001,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3002,"column":0},"generated":{"line":3002,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3003,"column":0},"generated":{"line":3003,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3004,"column":0},"generated":{"line":3004,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3005,"column":0},"generated":{"line":3005,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3006,"column":0},"generated":{"line":3006,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3007,"column":0},"generated":{"line":3007,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3008,"column":0},"generated":{"line":3008,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3009,"column":0},"generated":{"line":3009,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3010,"column":0},"generated":{"line":3010,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3011,"column":0},"generated":{"line":3011,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3012,"column":0},"generated":{"line":3012,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3013,"column":0},"generated":{"line":3013,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3014,"column":0},"generated":{"line":3014,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3015,"column":0},"generated":{"line":3015,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3016,"column":0},"generated":{"line":3016,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3017,"column":0},"generated":{"line":3017,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3018,"column":0},"generated":{"line":3018,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3019,"column":0},"generated":{"line":3019,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3020,"column":0},"generated":{"line":3020,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3021,"column":0},"generated":{"line":3021,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3022,"column":0},"generated":{"line":3022,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3023,"column":0},"generated":{"line":3023,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3024,"column":0},"generated":{"line":3024,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3025,"column":0},"generated":{"line":3025,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3026,"column":0},"generated":{"line":3026,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3027,"column":0},"generated":{"line":3027,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3028,"column":0},"generated":{"line":3028,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3029,"column":0},"generated":{"line":3029,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3030,"column":0},"generated":{"line":3030,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3031,"column":0},"generated":{"line":3031,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3032,"column":0},"generated":{"line":3032,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3033,"column":0},"generated":{"line":3033,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3034,"column":0},"generated":{"line":3034,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3035,"column":0},"generated":{"line":3035,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3036,"column":0},"generated":{"line":3036,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3037,"column":0},"generated":{"line":3037,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3038,"column":0},"generated":{"line":3038,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3039,"column":0},"generated":{"line":3039,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3040,"column":0},"generated":{"line":3040,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3041,"column":0},"generated":{"line":3041,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3042,"column":0},"generated":{"line":3042,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3043,"column":0},"generated":{"line":3043,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3044,"column":0},"generated":{"line":3044,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3045,"column":0},"generated":{"line":3045,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3046,"column":0},"generated":{"line":3046,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3047,"column":0},"generated":{"line":3047,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3048,"column":0},"generated":{"line":3048,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3049,"column":0},"generated":{"line":3049,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3050,"column":0},"generated":{"line":3050,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3051,"column":0},"generated":{"line":3051,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3052,"column":0},"generated":{"line":3052,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3053,"column":0},"generated":{"line":3053,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3054,"column":0},"generated":{"line":3054,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3055,"column":0},"generated":{"line":3055,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3056,"column":0},"generated":{"line":3056,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3057,"column":0},"generated":{"line":3057,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3058,"column":0},"generated":{"line":3058,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3059,"column":0},"generated":{"line":3059,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3060,"column":0},"generated":{"line":3060,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3061,"column":0},"generated":{"line":3061,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3062,"column":0},"generated":{"line":3062,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3063,"column":0},"generated":{"line":3063,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3064,"column":0},"generated":{"line":3064,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3065,"column":0},"generated":{"line":3065,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3066,"column":0},"generated":{"line":3066,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3067,"column":0},"generated":{"line":3067,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3068,"column":0},"generated":{"line":3068,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3069,"column":0},"generated":{"line":3069,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3070,"column":0},"generated":{"line":3070,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3071,"column":0},"generated":{"line":3071,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3072,"column":0},"generated":{"line":3072,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3073,"column":0},"generated":{"line":3073,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3074,"column":0},"generated":{"line":3074,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3075,"column":0},"generated":{"line":3075,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3076,"column":0},"generated":{"line":3076,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3077,"column":0},"generated":{"line":3077,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3078,"column":0},"generated":{"line":3078,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3079,"column":0},"generated":{"line":3079,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3080,"column":0},"generated":{"line":3080,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3081,"column":0},"generated":{"line":3081,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3082,"column":0},"generated":{"line":3082,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3083,"column":0},"generated":{"line":3083,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3084,"column":0},"generated":{"line":3084,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3085,"column":0},"generated":{"line":3085,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3086,"column":0},"generated":{"line":3086,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3087,"column":0},"generated":{"line":3087,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3088,"column":0},"generated":{"line":3088,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3089,"column":0},"generated":{"line":3089,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3090,"column":0},"generated":{"line":3090,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3091,"column":0},"generated":{"line":3091,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3092,"column":0},"generated":{"line":3092,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3093,"column":0},"generated":{"line":3093,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3094,"column":0},"generated":{"line":3094,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3095,"column":0},"generated":{"line":3095,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3096,"column":0},"generated":{"line":3096,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3097,"column":0},"generated":{"line":3097,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3098,"column":0},"generated":{"line":3098,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3099,"column":0},"generated":{"line":3099,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3100,"column":0},"generated":{"line":3100,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3101,"column":0},"generated":{"line":3101,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3102,"column":0},"generated":{"line":3102,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3103,"column":0},"generated":{"line":3103,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3104,"column":0},"generated":{"line":3104,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3105,"column":0},"generated":{"line":3105,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3106,"column":0},"generated":{"line":3106,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3107,"column":0},"generated":{"line":3107,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3108,"column":0},"generated":{"line":3108,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3109,"column":0},"generated":{"line":3109,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3110,"column":0},"generated":{"line":3110,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3111,"column":0},"generated":{"line":3111,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3112,"column":0},"generated":{"line":3112,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3113,"column":0},"generated":{"line":3113,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3114,"column":0},"generated":{"line":3114,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3115,"column":0},"generated":{"line":3115,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3116,"column":0},"generated":{"line":3116,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3117,"column":0},"generated":{"line":3117,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3118,"column":0},"generated":{"line":3118,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3119,"column":0},"generated":{"line":3119,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3120,"column":0},"generated":{"line":3120,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3121,"column":0},"generated":{"line":3121,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3122,"column":0},"generated":{"line":3122,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3123,"column":0},"generated":{"line":3123,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3124,"column":0},"generated":{"line":3124,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3125,"column":0},"generated":{"line":3125,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3126,"column":0},"generated":{"line":3126,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3127,"column":0},"generated":{"line":3127,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3128,"column":0},"generated":{"line":3128,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3129,"column":0},"generated":{"line":3129,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3130,"column":0},"generated":{"line":3130,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3131,"column":0},"generated":{"line":3131,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3132,"column":0},"generated":{"line":3132,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3133,"column":0},"generated":{"line":3133,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3134,"column":0},"generated":{"line":3134,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3135,"column":0},"generated":{"line":3135,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3136,"column":0},"generated":{"line":3136,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3137,"column":0},"generated":{"line":3137,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3138,"column":0},"generated":{"line":3138,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3139,"column":0},"generated":{"line":3139,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3140,"column":0},"generated":{"line":3140,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3141,"column":0},"generated":{"line":3141,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3142,"column":0},"generated":{"line":3142,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3143,"column":0},"generated":{"line":3143,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3144,"column":0},"generated":{"line":3144,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3145,"column":0},"generated":{"line":3145,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3146,"column":0},"generated":{"line":3146,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3147,"column":0},"generated":{"line":3147,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3148,"column":0},"generated":{"line":3148,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3149,"column":0},"generated":{"line":3149,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3150,"column":0},"generated":{"line":3150,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3151,"column":0},"generated":{"line":3151,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3152,"column":0},"generated":{"line":3152,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3153,"column":0},"generated":{"line":3153,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3154,"column":0},"generated":{"line":3154,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3155,"column":0},"generated":{"line":3155,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3156,"column":0},"generated":{"line":3156,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3157,"column":0},"generated":{"line":3157,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3158,"column":0},"generated":{"line":3158,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3159,"column":0},"generated":{"line":3159,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3160,"column":0},"generated":{"line":3160,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3161,"column":0},"generated":{"line":3161,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3162,"column":0},"generated":{"line":3162,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3163,"column":0},"generated":{"line":3163,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3164,"column":0},"generated":{"line":3164,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3165,"column":0},"generated":{"line":3165,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3166,"column":0},"generated":{"line":3166,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3167,"column":0},"generated":{"line":3167,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3168,"column":0},"generated":{"line":3168,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3169,"column":0},"generated":{"line":3169,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3170,"column":0},"generated":{"line":3170,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3171,"column":0},"generated":{"line":3171,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3172,"column":0},"generated":{"line":3172,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3173,"column":0},"generated":{"line":3173,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3174,"column":0},"generated":{"line":3174,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3175,"column":0},"generated":{"line":3175,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3176,"column":0},"generated":{"line":3176,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3177,"column":0},"generated":{"line":3177,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3178,"column":0},"generated":{"line":3178,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3179,"column":0},"generated":{"line":3179,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3180,"column":0},"generated":{"line":3180,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3181,"column":0},"generated":{"line":3181,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3182,"column":0},"generated":{"line":3182,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3183,"column":0},"generated":{"line":3183,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3184,"column":0},"generated":{"line":3184,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3185,"column":0},"generated":{"line":3185,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3186,"column":0},"generated":{"line":3186,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3187,"column":0},"generated":{"line":3187,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3188,"column":0},"generated":{"line":3188,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3189,"column":0},"generated":{"line":3189,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3190,"column":0},"generated":{"line":3190,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3191,"column":0},"generated":{"line":3191,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3192,"column":0},"generated":{"line":3192,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3193,"column":0},"generated":{"line":3193,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3194,"column":0},"generated":{"line":3194,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3195,"column":0},"generated":{"line":3195,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3196,"column":0},"generated":{"line":3196,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3197,"column":0},"generated":{"line":3197,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3198,"column":0},"generated":{"line":3198,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3199,"column":0},"generated":{"line":3199,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3200,"column":0},"generated":{"line":3200,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3201,"column":0},"generated":{"line":3201,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3202,"column":0},"generated":{"line":3202,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3203,"column":0},"generated":{"line":3203,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3204,"column":0},"generated":{"line":3204,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3205,"column":0},"generated":{"line":3205,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3206,"column":0},"generated":{"line":3206,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3207,"column":0},"generated":{"line":3207,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3208,"column":0},"generated":{"line":3208,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3209,"column":0},"generated":{"line":3209,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3210,"column":0},"generated":{"line":3210,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3211,"column":0},"generated":{"line":3211,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3212,"column":0},"generated":{"line":3212,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3213,"column":0},"generated":{"line":3213,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3214,"column":0},"generated":{"line":3214,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3215,"column":0},"generated":{"line":3215,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3216,"column":0},"generated":{"line":3216,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3217,"column":0},"generated":{"line":3217,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3218,"column":0},"generated":{"line":3218,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3219,"column":0},"generated":{"line":3219,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3220,"column":0},"generated":{"line":3220,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3221,"column":0},"generated":{"line":3221,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3222,"column":0},"generated":{"line":3222,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3223,"column":0},"generated":{"line":3223,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3224,"column":0},"generated":{"line":3224,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3225,"column":0},"generated":{"line":3225,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3226,"column":0},"generated":{"line":3226,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3227,"column":0},"generated":{"line":3227,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3228,"column":0},"generated":{"line":3228,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3229,"column":0},"generated":{"line":3229,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3230,"column":0},"generated":{"line":3230,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3231,"column":0},"generated":{"line":3231,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3232,"column":0},"generated":{"line":3232,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3233,"column":0},"generated":{"line":3233,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3234,"column":0},"generated":{"line":3234,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3235,"column":0},"generated":{"line":3235,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3236,"column":0},"generated":{"line":3236,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3237,"column":0},"generated":{"line":3237,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3238,"column":0},"generated":{"line":3238,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3239,"column":0},"generated":{"line":3239,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3240,"column":0},"generated":{"line":3240,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3241,"column":0},"generated":{"line":3241,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3242,"column":0},"generated":{"line":3242,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3243,"column":0},"generated":{"line":3243,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3244,"column":0},"generated":{"line":3244,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3245,"column":0},"generated":{"line":3245,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3246,"column":0},"generated":{"line":3246,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3247,"column":0},"generated":{"line":3247,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3248,"column":0},"generated":{"line":3248,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3249,"column":0},"generated":{"line":3249,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3250,"column":0},"generated":{"line":3250,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3251,"column":0},"generated":{"line":3251,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3252,"column":0},"generated":{"line":3252,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3253,"column":0},"generated":{"line":3253,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3254,"column":0},"generated":{"line":3254,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3255,"column":0},"generated":{"line":3255,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3256,"column":0},"generated":{"line":3256,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3257,"column":0},"generated":{"line":3257,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3258,"column":0},"generated":{"line":3258,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3259,"column":0},"generated":{"line":3259,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3260,"column":0},"generated":{"line":3260,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3261,"column":0},"generated":{"line":3261,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3262,"column":0},"generated":{"line":3262,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3263,"column":0},"generated":{"line":3263,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3264,"column":0},"generated":{"line":3264,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3265,"column":0},"generated":{"line":3265,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3266,"column":0},"generated":{"line":3266,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3267,"column":0},"generated":{"line":3267,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3268,"column":0},"generated":{"line":3268,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3269,"column":0},"generated":{"line":3269,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3270,"column":0},"generated":{"line":3270,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3271,"column":0},"generated":{"line":3271,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3272,"column":0},"generated":{"line":3272,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3273,"column":0},"generated":{"line":3273,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3274,"column":0},"generated":{"line":3274,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3275,"column":0},"generated":{"line":3275,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3276,"column":0},"generated":{"line":3276,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3277,"column":0},"generated":{"line":3277,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3278,"column":0},"generated":{"line":3278,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3279,"column":0},"generated":{"line":3279,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3280,"column":0},"generated":{"line":3280,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3281,"column":0},"generated":{"line":3281,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3282,"column":0},"generated":{"line":3282,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3283,"column":0},"generated":{"line":3283,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3284,"column":0},"generated":{"line":3284,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3285,"column":0},"generated":{"line":3285,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3286,"column":0},"generated":{"line":3286,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3287,"column":0},"generated":{"line":3287,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3288,"column":0},"generated":{"line":3288,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3289,"column":0},"generated":{"line":3289,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3290,"column":0},"generated":{"line":3290,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3291,"column":0},"generated":{"line":3291,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3292,"column":0},"generated":{"line":3292,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3293,"column":0},"generated":{"line":3293,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3294,"column":0},"generated":{"line":3294,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3295,"column":0},"generated":{"line":3295,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3296,"column":0},"generated":{"line":3296,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3297,"column":0},"generated":{"line":3297,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3298,"column":0},"generated":{"line":3298,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3299,"column":0},"generated":{"line":3299,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3300,"column":0},"generated":{"line":3300,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3301,"column":0},"generated":{"line":3301,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3302,"column":0},"generated":{"line":3302,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3303,"column":0},"generated":{"line":3303,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3304,"column":0},"generated":{"line":3304,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3305,"column":0},"generated":{"line":3305,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3306,"column":0},"generated":{"line":3306,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3307,"column":0},"generated":{"line":3307,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3308,"column":0},"generated":{"line":3308,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3309,"column":0},"generated":{"line":3309,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3310,"column":0},"generated":{"line":3310,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3311,"column":0},"generated":{"line":3311,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3312,"column":0},"generated":{"line":3312,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3313,"column":0},"generated":{"line":3313,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3314,"column":0},"generated":{"line":3314,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3315,"column":0},"generated":{"line":3315,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3316,"column":0},"generated":{"line":3316,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3317,"column":0},"generated":{"line":3317,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3318,"column":0},"generated":{"line":3318,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3319,"column":0},"generated":{"line":3319,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3320,"column":0},"generated":{"line":3320,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3321,"column":0},"generated":{"line":3321,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3322,"column":0},"generated":{"line":3322,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3323,"column":0},"generated":{"line":3323,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3324,"column":0},"generated":{"line":3324,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3325,"column":0},"generated":{"line":3325,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3326,"column":0},"generated":{"line":3326,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3327,"column":0},"generated":{"line":3327,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3328,"column":0},"generated":{"line":3328,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3329,"column":0},"generated":{"line":3329,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3330,"column":0},"generated":{"line":3330,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3331,"column":0},"generated":{"line":3331,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3332,"column":0},"generated":{"line":3332,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3333,"column":0},"generated":{"line":3333,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3334,"column":0},"generated":{"line":3334,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3335,"column":0},"generated":{"line":3335,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3336,"column":0},"generated":{"line":3336,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3337,"column":0},"generated":{"line":3337,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3338,"column":0},"generated":{"line":3338,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3339,"column":0},"generated":{"line":3339,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3340,"column":0},"generated":{"line":3340,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3341,"column":0},"generated":{"line":3341,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3342,"column":0},"generated":{"line":3342,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3343,"column":0},"generated":{"line":3343,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3344,"column":0},"generated":{"line":3344,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3345,"column":0},"generated":{"line":3345,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3346,"column":0},"generated":{"line":3346,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3347,"column":0},"generated":{"line":3347,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3348,"column":0},"generated":{"line":3348,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3349,"column":0},"generated":{"line":3349,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3350,"column":0},"generated":{"line":3350,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3351,"column":0},"generated":{"line":3351,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3352,"column":0},"generated":{"line":3352,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3353,"column":0},"generated":{"line":3353,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3354,"column":0},"generated":{"line":3354,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3355,"column":0},"generated":{"line":3355,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3356,"column":0},"generated":{"line":3356,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3357,"column":0},"generated":{"line":3357,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3358,"column":0},"generated":{"line":3358,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3359,"column":0},"generated":{"line":3359,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3360,"column":0},"generated":{"line":3360,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3361,"column":0},"generated":{"line":3361,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3362,"column":0},"generated":{"line":3362,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3363,"column":0},"generated":{"line":3363,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3364,"column":0},"generated":{"line":3364,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3365,"column":0},"generated":{"line":3365,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3366,"column":0},"generated":{"line":3366,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3367,"column":0},"generated":{"line":3367,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3368,"column":0},"generated":{"line":3368,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3369,"column":0},"generated":{"line":3369,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3370,"column":0},"generated":{"line":3370,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3371,"column":0},"generated":{"line":3371,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3372,"column":0},"generated":{"line":3372,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3373,"column":0},"generated":{"line":3373,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3374,"column":0},"generated":{"line":3374,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3375,"column":0},"generated":{"line":3375,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3376,"column":0},"generated":{"line":3376,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3377,"column":0},"generated":{"line":3377,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3378,"column":0},"generated":{"line":3378,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3379,"column":0},"generated":{"line":3379,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3380,"column":0},"generated":{"line":3380,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3381,"column":0},"generated":{"line":3381,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3382,"column":0},"generated":{"line":3382,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3383,"column":0},"generated":{"line":3383,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3384,"column":0},"generated":{"line":3384,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3385,"column":0},"generated":{"line":3385,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3386,"column":0},"generated":{"line":3386,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3387,"column":0},"generated":{"line":3387,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3388,"column":0},"generated":{"line":3388,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3389,"column":0},"generated":{"line":3389,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3390,"column":0},"generated":{"line":3390,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3391,"column":0},"generated":{"line":3391,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3392,"column":0},"generated":{"line":3392,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3393,"column":0},"generated":{"line":3393,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3394,"column":0},"generated":{"line":3394,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3395,"column":0},"generated":{"line":3395,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3396,"column":0},"generated":{"line":3396,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3397,"column":0},"generated":{"line":3397,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3398,"column":0},"generated":{"line":3398,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3399,"column":0},"generated":{"line":3399,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3400,"column":0},"generated":{"line":3400,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3401,"column":0},"generated":{"line":3401,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3402,"column":0},"generated":{"line":3402,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3403,"column":0},"generated":{"line":3403,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3404,"column":0},"generated":{"line":3404,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3405,"column":0},"generated":{"line":3405,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3406,"column":0},"generated":{"line":3406,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3407,"column":0},"generated":{"line":3407,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3408,"column":0},"generated":{"line":3408,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3409,"column":0},"generated":{"line":3409,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3410,"column":0},"generated":{"line":3410,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3411,"column":0},"generated":{"line":3411,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3412,"column":0},"generated":{"line":3412,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3413,"column":0},"generated":{"line":3413,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3414,"column":0},"generated":{"line":3414,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3415,"column":0},"generated":{"line":3415,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3416,"column":0},"generated":{"line":3416,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3417,"column":0},"generated":{"line":3417,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3418,"column":0},"generated":{"line":3418,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3419,"column":0},"generated":{"line":3419,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3420,"column":0},"generated":{"line":3420,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3421,"column":0},"generated":{"line":3421,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3422,"column":0},"generated":{"line":3422,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3423,"column":0},"generated":{"line":3423,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3424,"column":0},"generated":{"line":3424,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3425,"column":0},"generated":{"line":3425,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3426,"column":0},"generated":{"line":3426,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3427,"column":0},"generated":{"line":3427,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3428,"column":0},"generated":{"line":3428,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3429,"column":0},"generated":{"line":3429,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3430,"column":0},"generated":{"line":3430,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3431,"column":0},"generated":{"line":3431,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3432,"column":0},"generated":{"line":3432,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3433,"column":0},"generated":{"line":3433,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3434,"column":0},"generated":{"line":3434,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3435,"column":0},"generated":{"line":3435,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3436,"column":0},"generated":{"line":3436,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3437,"column":0},"generated":{"line":3437,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3438,"column":0},"generated":{"line":3438,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3439,"column":0},"generated":{"line":3439,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3440,"column":0},"generated":{"line":3440,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3441,"column":0},"generated":{"line":3441,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3442,"column":0},"generated":{"line":3442,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3443,"column":0},"generated":{"line":3443,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3444,"column":0},"generated":{"line":3444,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3445,"column":0},"generated":{"line":3445,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3446,"column":0},"generated":{"line":3446,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3447,"column":0},"generated":{"line":3447,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3448,"column":0},"generated":{"line":3448,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3449,"column":0},"generated":{"line":3449,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3450,"column":0},"generated":{"line":3450,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3451,"column":0},"generated":{"line":3451,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3452,"column":0},"generated":{"line":3452,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3453,"column":0},"generated":{"line":3453,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3454,"column":0},"generated":{"line":3454,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3455,"column":0},"generated":{"line":3455,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3456,"column":0},"generated":{"line":3456,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3457,"column":0},"generated":{"line":3457,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3458,"column":0},"generated":{"line":3458,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3459,"column":0},"generated":{"line":3459,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3460,"column":0},"generated":{"line":3460,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3461,"column":0},"generated":{"line":3461,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3462,"column":0},"generated":{"line":3462,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3463,"column":0},"generated":{"line":3463,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3464,"column":0},"generated":{"line":3464,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3465,"column":0},"generated":{"line":3465,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3466,"column":0},"generated":{"line":3466,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3467,"column":0},"generated":{"line":3467,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3468,"column":0},"generated":{"line":3468,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3469,"column":0},"generated":{"line":3469,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3470,"column":0},"generated":{"line":3470,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3471,"column":0},"generated":{"line":3471,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3472,"column":0},"generated":{"line":3472,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3473,"column":0},"generated":{"line":3473,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3474,"column":0},"generated":{"line":3474,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3475,"column":0},"generated":{"line":3475,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3476,"column":0},"generated":{"line":3476,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3477,"column":0},"generated":{"line":3477,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3478,"column":0},"generated":{"line":3478,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3479,"column":0},"generated":{"line":3479,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3480,"column":0},"generated":{"line":3480,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3481,"column":0},"generated":{"line":3481,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3482,"column":0},"generated":{"line":3482,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3483,"column":0},"generated":{"line":3483,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3484,"column":0},"generated":{"line":3484,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3485,"column":0},"generated":{"line":3485,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3486,"column":0},"generated":{"line":3486,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3487,"column":0},"generated":{"line":3487,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3488,"column":0},"generated":{"line":3488,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3489,"column":0},"generated":{"line":3489,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3490,"column":0},"generated":{"line":3490,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3491,"column":0},"generated":{"line":3491,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3492,"column":0},"generated":{"line":3492,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3493,"column":0},"generated":{"line":3493,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3494,"column":0},"generated":{"line":3494,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3495,"column":0},"generated":{"line":3495,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3496,"column":0},"generated":{"line":3496,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3497,"column":0},"generated":{"line":3497,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3498,"column":0},"generated":{"line":3498,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3499,"column":0},"generated":{"line":3499,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3500,"column":0},"generated":{"line":3500,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3501,"column":0},"generated":{"line":3501,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3502,"column":0},"generated":{"line":3502,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3503,"column":0},"generated":{"line":3503,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3504,"column":0},"generated":{"line":3504,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3505,"column":0},"generated":{"line":3505,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3506,"column":0},"generated":{"line":3506,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3507,"column":0},"generated":{"line":3507,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3508,"column":0},"generated":{"line":3508,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3509,"column":0},"generated":{"line":3509,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3510,"column":0},"generated":{"line":3510,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3511,"column":0},"generated":{"line":3511,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3512,"column":0},"generated":{"line":3512,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3513,"column":0},"generated":{"line":3513,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3514,"column":0},"generated":{"line":3514,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3515,"column":0},"generated":{"line":3515,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3516,"column":0},"generated":{"line":3516,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3517,"column":0},"generated":{"line":3517,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3518,"column":0},"generated":{"line":3518,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3519,"column":0},"generated":{"line":3519,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3520,"column":0},"generated":{"line":3520,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3521,"column":0},"generated":{"line":3521,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3522,"column":0},"generated":{"line":3522,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3523,"column":0},"generated":{"line":3523,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3524,"column":0},"generated":{"line":3524,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3525,"column":0},"generated":{"line":3525,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3526,"column":0},"generated":{"line":3526,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3527,"column":0},"generated":{"line":3527,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3528,"column":0},"generated":{"line":3528,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3529,"column":0},"generated":{"line":3529,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3530,"column":0},"generated":{"line":3530,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3531,"column":0},"generated":{"line":3531,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3532,"column":0},"generated":{"line":3532,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3533,"column":0},"generated":{"line":3533,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3534,"column":0},"generated":{"line":3534,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3535,"column":0},"generated":{"line":3535,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3536,"column":0},"generated":{"line":3536,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3537,"column":0},"generated":{"line":3537,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3538,"column":0},"generated":{"line":3538,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3539,"column":0},"generated":{"line":3539,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3540,"column":0},"generated":{"line":3540,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3541,"column":0},"generated":{"line":3541,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3542,"column":0},"generated":{"line":3542,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3543,"column":0},"generated":{"line":3543,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3544,"column":0},"generated":{"line":3544,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3545,"column":0},"generated":{"line":3545,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3546,"column":0},"generated":{"line":3546,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3547,"column":0},"generated":{"line":3547,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3548,"column":0},"generated":{"line":3548,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3549,"column":0},"generated":{"line":3549,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3550,"column":0},"generated":{"line":3550,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3551,"column":0},"generated":{"line":3551,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3552,"column":0},"generated":{"line":3552,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3553,"column":0},"generated":{"line":3553,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3554,"column":0},"generated":{"line":3554,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3555,"column":0},"generated":{"line":3555,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3556,"column":0},"generated":{"line":3556,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3557,"column":0},"generated":{"line":3557,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3558,"column":0},"generated":{"line":3558,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3559,"column":0},"generated":{"line":3559,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3560,"column":0},"generated":{"line":3560,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3561,"column":0},"generated":{"line":3561,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3562,"column":0},"generated":{"line":3562,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3563,"column":0},"generated":{"line":3563,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3564,"column":0},"generated":{"line":3564,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3565,"column":0},"generated":{"line":3565,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3566,"column":0},"generated":{"line":3566,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3567,"column":0},"generated":{"line":3567,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3568,"column":0},"generated":{"line":3568,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3569,"column":0},"generated":{"line":3569,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3570,"column":0},"generated":{"line":3570,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3571,"column":0},"generated":{"line":3571,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3572,"column":0},"generated":{"line":3572,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3573,"column":0},"generated":{"line":3573,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3574,"column":0},"generated":{"line":3574,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3575,"column":0},"generated":{"line":3575,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3576,"column":0},"generated":{"line":3576,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3577,"column":0},"generated":{"line":3577,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3578,"column":0},"generated":{"line":3578,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3579,"column":0},"generated":{"line":3579,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3580,"column":0},"generated":{"line":3580,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3581,"column":0},"generated":{"line":3581,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3582,"column":0},"generated":{"line":3582,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3583,"column":0},"generated":{"line":3583,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3584,"column":0},"generated":{"line":3584,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3585,"column":0},"generated":{"line":3585,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3586,"column":0},"generated":{"line":3586,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3587,"column":0},"generated":{"line":3587,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3588,"column":0},"generated":{"line":3588,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3589,"column":0},"generated":{"line":3589,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3590,"column":0},"generated":{"line":3590,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3591,"column":0},"generated":{"line":3591,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3592,"column":0},"generated":{"line":3592,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3593,"column":0},"generated":{"line":3593,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3594,"column":0},"generated":{"line":3594,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3595,"column":0},"generated":{"line":3595,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3596,"column":0},"generated":{"line":3596,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3597,"column":0},"generated":{"line":3597,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3598,"column":0},"generated":{"line":3598,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3599,"column":0},"generated":{"line":3599,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3600,"column":0},"generated":{"line":3600,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3601,"column":0},"generated":{"line":3601,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3602,"column":0},"generated":{"line":3602,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3603,"column":0},"generated":{"line":3603,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3604,"column":0},"generated":{"line":3604,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3605,"column":0},"generated":{"line":3605,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3606,"column":0},"generated":{"line":3606,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3607,"column":0},"generated":{"line":3607,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3608,"column":0},"generated":{"line":3608,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3609,"column":0},"generated":{"line":3609,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3610,"column":0},"generated":{"line":3610,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3611,"column":0},"generated":{"line":3611,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3612,"column":0},"generated":{"line":3612,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3613,"column":0},"generated":{"line":3613,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3614,"column":0},"generated":{"line":3614,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3615,"column":0},"generated":{"line":3615,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3616,"column":0},"generated":{"line":3616,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3617,"column":0},"generated":{"line":3617,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3618,"column":0},"generated":{"line":3618,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3619,"column":0},"generated":{"line":3619,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3620,"column":0},"generated":{"line":3620,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3621,"column":0},"generated":{"line":3621,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3622,"column":0},"generated":{"line":3622,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3623,"column":0},"generated":{"line":3623,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3624,"column":0},"generated":{"line":3624,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3625,"column":0},"generated":{"line":3625,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3626,"column":0},"generated":{"line":3626,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3627,"column":0},"generated":{"line":3627,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3628,"column":0},"generated":{"line":3628,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3629,"column":0},"generated":{"line":3629,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3630,"column":0},"generated":{"line":3630,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3631,"column":0},"generated":{"line":3631,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3632,"column":0},"generated":{"line":3632,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3633,"column":0},"generated":{"line":3633,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3634,"column":0},"generated":{"line":3634,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3635,"column":0},"generated":{"line":3635,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3636,"column":0},"generated":{"line":3636,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3637,"column":0},"generated":{"line":3637,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3638,"column":0},"generated":{"line":3638,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3639,"column":0},"generated":{"line":3639,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3640,"column":0},"generated":{"line":3640,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3641,"column":0},"generated":{"line":3641,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3642,"column":0},"generated":{"line":3642,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3643,"column":0},"generated":{"line":3643,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3644,"column":0},"generated":{"line":3644,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3645,"column":0},"generated":{"line":3645,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3646,"column":0},"generated":{"line":3646,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3647,"column":0},"generated":{"line":3647,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3648,"column":0},"generated":{"line":3648,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3649,"column":0},"generated":{"line":3649,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3650,"column":0},"generated":{"line":3650,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3651,"column":0},"generated":{"line":3651,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3652,"column":0},"generated":{"line":3652,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3653,"column":0},"generated":{"line":3653,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3654,"column":0},"generated":{"line":3654,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3655,"column":0},"generated":{"line":3655,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3656,"column":0},"generated":{"line":3656,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3657,"column":0},"generated":{"line":3657,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3658,"column":0},"generated":{"line":3658,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3659,"column":0},"generated":{"line":3659,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3660,"column":0},"generated":{"line":3660,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3661,"column":0},"generated":{"line":3661,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3662,"column":0},"generated":{"line":3662,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3663,"column":0},"generated":{"line":3663,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3664,"column":0},"generated":{"line":3664,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3665,"column":0},"generated":{"line":3665,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3666,"column":0},"generated":{"line":3666,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3667,"column":0},"generated":{"line":3667,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3668,"column":0},"generated":{"line":3668,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3669,"column":0},"generated":{"line":3669,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3670,"column":0},"generated":{"line":3670,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3671,"column":0},"generated":{"line":3671,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3672,"column":0},"generated":{"line":3672,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3673,"column":0},"generated":{"line":3673,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3674,"column":0},"generated":{"line":3674,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3675,"column":0},"generated":{"line":3675,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3676,"column":0},"generated":{"line":3676,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3677,"column":0},"generated":{"line":3677,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3678,"column":0},"generated":{"line":3678,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3679,"column":0},"generated":{"line":3679,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3680,"column":0},"generated":{"line":3680,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3681,"column":0},"generated":{"line":3681,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3682,"column":0},"generated":{"line":3682,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3683,"column":0},"generated":{"line":3683,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3684,"column":0},"generated":{"line":3684,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3685,"column":0},"generated":{"line":3685,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3686,"column":0},"generated":{"line":3686,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3687,"column":0},"generated":{"line":3687,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3688,"column":0},"generated":{"line":3688,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3689,"column":0},"generated":{"line":3689,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3690,"column":0},"generated":{"line":3690,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3691,"column":0},"generated":{"line":3691,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3692,"column":0},"generated":{"line":3692,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3693,"column":0},"generated":{"line":3693,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3694,"column":0},"generated":{"line":3694,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3695,"column":0},"generated":{"line":3695,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3696,"column":0},"generated":{"line":3696,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3697,"column":0},"generated":{"line":3697,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3698,"column":0},"generated":{"line":3698,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3699,"column":0},"generated":{"line":3699,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3700,"column":0},"generated":{"line":3700,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3701,"column":0},"generated":{"line":3701,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3702,"column":0},"generated":{"line":3702,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3703,"column":0},"generated":{"line":3703,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3704,"column":0},"generated":{"line":3704,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3705,"column":0},"generated":{"line":3705,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3706,"column":0},"generated":{"line":3706,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3707,"column":0},"generated":{"line":3707,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3708,"column":0},"generated":{"line":3708,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3709,"column":0},"generated":{"line":3709,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3710,"column":0},"generated":{"line":3710,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3711,"column":0},"generated":{"line":3711,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3712,"column":0},"generated":{"line":3712,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3713,"column":0},"generated":{"line":3713,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3714,"column":0},"generated":{"line":3714,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3715,"column":0},"generated":{"line":3715,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3716,"column":0},"generated":{"line":3716,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3717,"column":0},"generated":{"line":3717,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3718,"column":0},"generated":{"line":3718,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3719,"column":0},"generated":{"line":3719,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3720,"column":0},"generated":{"line":3720,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3721,"column":0},"generated":{"line":3721,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3722,"column":0},"generated":{"line":3722,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3723,"column":0},"generated":{"line":3723,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3724,"column":0},"generated":{"line":3724,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3725,"column":0},"generated":{"line":3725,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3726,"column":0},"generated":{"line":3726,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3727,"column":0},"generated":{"line":3727,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3728,"column":0},"generated":{"line":3728,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3729,"column":0},"generated":{"line":3729,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3730,"column":0},"generated":{"line":3730,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3731,"column":0},"generated":{"line":3731,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3732,"column":0},"generated":{"line":3732,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3733,"column":0},"generated":{"line":3733,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3734,"column":0},"generated":{"line":3734,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3735,"column":0},"generated":{"line":3735,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3736,"column":0},"generated":{"line":3736,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3737,"column":0},"generated":{"line":3737,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3738,"column":0},"generated":{"line":3738,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3739,"column":0},"generated":{"line":3739,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3740,"column":0},"generated":{"line":3740,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3741,"column":0},"generated":{"line":3741,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3742,"column":0},"generated":{"line":3742,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3743,"column":0},"generated":{"line":3743,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3744,"column":0},"generated":{"line":3744,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3745,"column":0},"generated":{"line":3745,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3746,"column":0},"generated":{"line":3746,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3747,"column":0},"generated":{"line":3747,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3748,"column":0},"generated":{"line":3748,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3749,"column":0},"generated":{"line":3749,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3750,"column":0},"generated":{"line":3750,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3751,"column":0},"generated":{"line":3751,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3752,"column":0},"generated":{"line":3752,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3753,"column":0},"generated":{"line":3753,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3754,"column":0},"generated":{"line":3754,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3755,"column":0},"generated":{"line":3755,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3756,"column":0},"generated":{"line":3756,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3757,"column":0},"generated":{"line":3757,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3758,"column":0},"generated":{"line":3758,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3759,"column":0},"generated":{"line":3759,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3760,"column":0},"generated":{"line":3760,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3761,"column":0},"generated":{"line":3761,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3762,"column":0},"generated":{"line":3762,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3763,"column":0},"generated":{"line":3763,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3764,"column":0},"generated":{"line":3764,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3765,"column":0},"generated":{"line":3765,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3766,"column":0},"generated":{"line":3766,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3767,"column":0},"generated":{"line":3767,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3768,"column":0},"generated":{"line":3768,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3769,"column":0},"generated":{"line":3769,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3770,"column":0},"generated":{"line":3770,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3771,"column":0},"generated":{"line":3771,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3772,"column":0},"generated":{"line":3772,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3773,"column":0},"generated":{"line":3773,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3774,"column":0},"generated":{"line":3774,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3775,"column":0},"generated":{"line":3775,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3776,"column":0},"generated":{"line":3776,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3777,"column":0},"generated":{"line":3777,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3778,"column":0},"generated":{"line":3778,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3779,"column":0},"generated":{"line":3779,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3780,"column":0},"generated":{"line":3780,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3781,"column":0},"generated":{"line":3781,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3782,"column":0},"generated":{"line":3782,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3783,"column":0},"generated":{"line":3783,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3784,"column":0},"generated":{"line":3784,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3785,"column":0},"generated":{"line":3785,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3786,"column":0},"generated":{"line":3786,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3787,"column":0},"generated":{"line":3787,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3788,"column":0},"generated":{"line":3788,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3789,"column":0},"generated":{"line":3789,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3790,"column":0},"generated":{"line":3790,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3791,"column":0},"generated":{"line":3791,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3792,"column":0},"generated":{"line":3792,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3793,"column":0},"generated":{"line":3793,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3794,"column":0},"generated":{"line":3794,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3795,"column":0},"generated":{"line":3795,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3796,"column":0},"generated":{"line":3796,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3797,"column":0},"generated":{"line":3797,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3798,"column":0},"generated":{"line":3798,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3799,"column":0},"generated":{"line":3799,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3800,"column":0},"generated":{"line":3800,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3801,"column":0},"generated":{"line":3801,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3802,"column":0},"generated":{"line":3802,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3803,"column":0},"generated":{"line":3803,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3804,"column":0},"generated":{"line":3804,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3805,"column":0},"generated":{"line":3805,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3806,"column":0},"generated":{"line":3806,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3807,"column":0},"generated":{"line":3807,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3808,"column":0},"generated":{"line":3808,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3809,"column":0},"generated":{"line":3809,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3810,"column":0},"generated":{"line":3810,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3811,"column":0},"generated":{"line":3811,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3812,"column":0},"generated":{"line":3812,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3813,"column":0},"generated":{"line":3813,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3814,"column":0},"generated":{"line":3814,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3815,"column":0},"generated":{"line":3815,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3816,"column":0},"generated":{"line":3816,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3817,"column":0},"generated":{"line":3817,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3818,"column":0},"generated":{"line":3818,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3819,"column":0},"generated":{"line":3819,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3820,"column":0},"generated":{"line":3820,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3821,"column":0},"generated":{"line":3821,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3822,"column":0},"generated":{"line":3822,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3823,"column":0},"generated":{"line":3823,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3824,"column":0},"generated":{"line":3824,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3825,"column":0},"generated":{"line":3825,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3826,"column":0},"generated":{"line":3826,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3827,"column":0},"generated":{"line":3827,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3828,"column":0},"generated":{"line":3828,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3829,"column":0},"generated":{"line":3829,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3830,"column":0},"generated":{"line":3830,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3831,"column":0},"generated":{"line":3831,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3832,"column":0},"generated":{"line":3832,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3833,"column":0},"generated":{"line":3833,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3834,"column":0},"generated":{"line":3834,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3835,"column":0},"generated":{"line":3835,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3836,"column":0},"generated":{"line":3836,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3837,"column":0},"generated":{"line":3837,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3838,"column":0},"generated":{"line":3838,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3839,"column":0},"generated":{"line":3839,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3840,"column":0},"generated":{"line":3840,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3841,"column":0},"generated":{"line":3841,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3842,"column":0},"generated":{"line":3842,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3843,"column":0},"generated":{"line":3843,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3844,"column":0},"generated":{"line":3844,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3845,"column":0},"generated":{"line":3845,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3846,"column":0},"generated":{"line":3846,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3847,"column":0},"generated":{"line":3847,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3848,"column":0},"generated":{"line":3848,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3849,"column":0},"generated":{"line":3849,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3850,"column":0},"generated":{"line":3850,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3851,"column":0},"generated":{"line":3851,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3852,"column":0},"generated":{"line":3852,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3853,"column":0},"generated":{"line":3853,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3854,"column":0},"generated":{"line":3854,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3855,"column":0},"generated":{"line":3855,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3856,"column":0},"generated":{"line":3856,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3857,"column":0},"generated":{"line":3857,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3858,"column":0},"generated":{"line":3858,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3859,"column":0},"generated":{"line":3859,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3860,"column":0},"generated":{"line":3860,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3861,"column":0},"generated":{"line":3861,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3862,"column":0},"generated":{"line":3862,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3863,"column":0},"generated":{"line":3863,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3864,"column":0},"generated":{"line":3864,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3865,"column":0},"generated":{"line":3865,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3866,"column":0},"generated":{"line":3866,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3867,"column":0},"generated":{"line":3867,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3868,"column":0},"generated":{"line":3868,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3869,"column":0},"generated":{"line":3869,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3870,"column":0},"generated":{"line":3870,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3871,"column":0},"generated":{"line":3871,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3872,"column":0},"generated":{"line":3872,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3873,"column":0},"generated":{"line":3873,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3874,"column":0},"generated":{"line":3874,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3875,"column":0},"generated":{"line":3875,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3876,"column":0},"generated":{"line":3876,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3877,"column":0},"generated":{"line":3877,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3878,"column":0},"generated":{"line":3878,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3879,"column":0},"generated":{"line":3879,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3880,"column":0},"generated":{"line":3880,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3881,"column":0},"generated":{"line":3881,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3882,"column":0},"generated":{"line":3882,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3883,"column":0},"generated":{"line":3883,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3884,"column":0},"generated":{"line":3884,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3885,"column":0},"generated":{"line":3885,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3886,"column":0},"generated":{"line":3886,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3887,"column":0},"generated":{"line":3887,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3888,"column":0},"generated":{"line":3888,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3889,"column":0},"generated":{"line":3889,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3890,"column":0},"generated":{"line":3890,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3891,"column":0},"generated":{"line":3891,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3892,"column":0},"generated":{"line":3892,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3893,"column":0},"generated":{"line":3893,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3894,"column":0},"generated":{"line":3894,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3895,"column":0},"generated":{"line":3895,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3896,"column":0},"generated":{"line":3896,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3897,"column":0},"generated":{"line":3897,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3898,"column":0},"generated":{"line":3898,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3899,"column":0},"generated":{"line":3899,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3900,"column":0},"generated":{"line":3900,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3901,"column":0},"generated":{"line":3901,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3902,"column":0},"generated":{"line":3902,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3903,"column":0},"generated":{"line":3903,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3904,"column":0},"generated":{"line":3904,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3905,"column":0},"generated":{"line":3905,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3906,"column":0},"generated":{"line":3906,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3907,"column":0},"generated":{"line":3907,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3908,"column":0},"generated":{"line":3908,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3909,"column":0},"generated":{"line":3909,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3910,"column":0},"generated":{"line":3910,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3911,"column":0},"generated":{"line":3911,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3912,"column":0},"generated":{"line":3912,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3913,"column":0},"generated":{"line":3913,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3914,"column":0},"generated":{"line":3914,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3915,"column":0},"generated":{"line":3915,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3916,"column":0},"generated":{"line":3916,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3917,"column":0},"generated":{"line":3917,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3918,"column":0},"generated":{"line":3918,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3919,"column":0},"generated":{"line":3919,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3920,"column":0},"generated":{"line":3920,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3921,"column":0},"generated":{"line":3921,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3922,"column":0},"generated":{"line":3922,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3923,"column":0},"generated":{"line":3923,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3924,"column":0},"generated":{"line":3924,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3925,"column":0},"generated":{"line":3925,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3926,"column":0},"generated":{"line":3926,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3927,"column":0},"generated":{"line":3927,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3928,"column":0},"generated":{"line":3928,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3929,"column":0},"generated":{"line":3929,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3930,"column":0},"generated":{"line":3930,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3931,"column":0},"generated":{"line":3931,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3932,"column":0},"generated":{"line":3932,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3933,"column":0},"generated":{"line":3933,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3934,"column":0},"generated":{"line":3934,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3935,"column":0},"generated":{"line":3935,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3936,"column":0},"generated":{"line":3936,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3937,"column":0},"generated":{"line":3937,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3938,"column":0},"generated":{"line":3938,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3939,"column":0},"generated":{"line":3939,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3940,"column":0},"generated":{"line":3940,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3941,"column":0},"generated":{"line":3941,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3942,"column":0},"generated":{"line":3942,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3943,"column":0},"generated":{"line":3943,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3944,"column":0},"generated":{"line":3944,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3945,"column":0},"generated":{"line":3945,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3946,"column":0},"generated":{"line":3946,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3947,"column":0},"generated":{"line":3947,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3948,"column":0},"generated":{"line":3948,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3949,"column":0},"generated":{"line":3949,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3950,"column":0},"generated":{"line":3950,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3951,"column":0},"generated":{"line":3951,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3952,"column":0},"generated":{"line":3952,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3953,"column":0},"generated":{"line":3953,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3954,"column":0},"generated":{"line":3954,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3955,"column":0},"generated":{"line":3955,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3956,"column":0},"generated":{"line":3956,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3957,"column":0},"generated":{"line":3957,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3958,"column":0},"generated":{"line":3958,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3959,"column":0},"generated":{"line":3959,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3960,"column":0},"generated":{"line":3960,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3961,"column":0},"generated":{"line":3961,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3962,"column":0},"generated":{"line":3962,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3963,"column":0},"generated":{"line":3963,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3964,"column":0},"generated":{"line":3964,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3965,"column":0},"generated":{"line":3965,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3966,"column":0},"generated":{"line":3966,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3967,"column":0},"generated":{"line":3967,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3968,"column":0},"generated":{"line":3968,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3969,"column":0},"generated":{"line":3969,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3970,"column":0},"generated":{"line":3970,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3971,"column":0},"generated":{"line":3971,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3972,"column":0},"generated":{"line":3972,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3973,"column":0},"generated":{"line":3973,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3974,"column":0},"generated":{"line":3974,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3975,"column":0},"generated":{"line":3975,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3976,"column":0},"generated":{"line":3976,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3977,"column":0},"generated":{"line":3977,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3978,"column":0},"generated":{"line":3978,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3979,"column":0},"generated":{"line":3979,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3980,"column":0},"generated":{"line":3980,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3981,"column":0},"generated":{"line":3981,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3982,"column":0},"generated":{"line":3982,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3983,"column":0},"generated":{"line":3983,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3984,"column":0},"generated":{"line":3984,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3985,"column":0},"generated":{"line":3985,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3986,"column":0},"generated":{"line":3986,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3987,"column":0},"generated":{"line":3987,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3988,"column":0},"generated":{"line":3988,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3989,"column":0},"generated":{"line":3989,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3990,"column":0},"generated":{"line":3990,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3991,"column":0},"generated":{"line":3991,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3992,"column":0},"generated":{"line":3992,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3993,"column":0},"generated":{"line":3993,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3994,"column":0},"generated":{"line":3994,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3995,"column":0},"generated":{"line":3995,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3996,"column":0},"generated":{"line":3996,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3997,"column":0},"generated":{"line":3997,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3998,"column":0},"generated":{"line":3998,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":3999,"column":0},"generated":{"line":3999,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4000,"column":0},"generated":{"line":4000,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4001,"column":0},"generated":{"line":4001,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4002,"column":0},"generated":{"line":4002,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4003,"column":0},"generated":{"line":4003,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4004,"column":0},"generated":{"line":4004,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4005,"column":0},"generated":{"line":4005,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4006,"column":0},"generated":{"line":4006,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4007,"column":0},"generated":{"line":4007,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4008,"column":0},"generated":{"line":4008,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4009,"column":0},"generated":{"line":4009,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4010,"column":0},"generated":{"line":4010,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4011,"column":0},"generated":{"line":4011,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4012,"column":0},"generated":{"line":4012,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4013,"column":0},"generated":{"line":4013,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4014,"column":0},"generated":{"line":4014,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4015,"column":0},"generated":{"line":4015,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4016,"column":0},"generated":{"line":4016,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4017,"column":0},"generated":{"line":4017,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4018,"column":0},"generated":{"line":4018,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4019,"column":0},"generated":{"line":4019,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4020,"column":0},"generated":{"line":4020,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4021,"column":0},"generated":{"line":4021,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4022,"column":0},"generated":{"line":4022,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4023,"column":0},"generated":{"line":4023,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4024,"column":0},"generated":{"line":4024,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4025,"column":0},"generated":{"line":4025,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4026,"column":0},"generated":{"line":4026,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4027,"column":0},"generated":{"line":4027,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4028,"column":0},"generated":{"line":4028,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4029,"column":0},"generated":{"line":4029,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4030,"column":0},"generated":{"line":4030,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4031,"column":0},"generated":{"line":4031,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4032,"column":0},"generated":{"line":4032,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4033,"column":0},"generated":{"line":4033,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4034,"column":0},"generated":{"line":4034,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4035,"column":0},"generated":{"line":4035,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4036,"column":0},"generated":{"line":4036,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4037,"column":0},"generated":{"line":4037,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4038,"column":0},"generated":{"line":4038,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4039,"column":0},"generated":{"line":4039,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4040,"column":0},"generated":{"line":4040,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4041,"column":0},"generated":{"line":4041,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4042,"column":0},"generated":{"line":4042,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4043,"column":0},"generated":{"line":4043,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4044,"column":0},"generated":{"line":4044,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4045,"column":0},"generated":{"line":4045,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4046,"column":0},"generated":{"line":4046,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4047,"column":0},"generated":{"line":4047,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4048,"column":0},"generated":{"line":4048,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4049,"column":0},"generated":{"line":4049,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4050,"column":0},"generated":{"line":4050,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4051,"column":0},"generated":{"line":4051,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4052,"column":0},"generated":{"line":4052,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4053,"column":0},"generated":{"line":4053,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4054,"column":0},"generated":{"line":4054,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4055,"column":0},"generated":{"line":4055,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4056,"column":0},"generated":{"line":4056,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4057,"column":0},"generated":{"line":4057,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4058,"column":0},"generated":{"line":4058,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4059,"column":0},"generated":{"line":4059,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4060,"column":0},"generated":{"line":4060,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4061,"column":0},"generated":{"line":4061,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4062,"column":0},"generated":{"line":4062,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4063,"column":0},"generated":{"line":4063,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4064,"column":0},"generated":{"line":4064,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4065,"column":0},"generated":{"line":4065,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4066,"column":0},"generated":{"line":4066,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4067,"column":0},"generated":{"line":4067,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4068,"column":0},"generated":{"line":4068,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4069,"column":0},"generated":{"line":4069,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4070,"column":0},"generated":{"line":4070,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4071,"column":0},"generated":{"line":4071,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4072,"column":0},"generated":{"line":4072,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4073,"column":0},"generated":{"line":4073,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4074,"column":0},"generated":{"line":4074,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4075,"column":0},"generated":{"line":4075,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4076,"column":0},"generated":{"line":4076,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4077,"column":0},"generated":{"line":4077,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4078,"column":0},"generated":{"line":4078,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4079,"column":0},"generated":{"line":4079,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4080,"column":0},"generated":{"line":4080,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4081,"column":0},"generated":{"line":4081,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4082,"column":0},"generated":{"line":4082,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4083,"column":0},"generated":{"line":4083,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4084,"column":0},"generated":{"line":4084,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4085,"column":0},"generated":{"line":4085,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4086,"column":0},"generated":{"line":4086,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4087,"column":0},"generated":{"line":4087,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4088,"column":0},"generated":{"line":4088,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4089,"column":0},"generated":{"line":4089,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4090,"column":0},"generated":{"line":4090,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4091,"column":0},"generated":{"line":4091,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4092,"column":0},"generated":{"line":4092,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4093,"column":0},"generated":{"line":4093,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4094,"column":0},"generated":{"line":4094,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4095,"column":0},"generated":{"line":4095,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4096,"column":0},"generated":{"line":4096,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4097,"column":0},"generated":{"line":4097,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4098,"column":0},"generated":{"line":4098,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4099,"column":0},"generated":{"line":4099,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4100,"column":0},"generated":{"line":4100,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4101,"column":0},"generated":{"line":4101,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4102,"column":0},"generated":{"line":4102,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4103,"column":0},"generated":{"line":4103,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4104,"column":0},"generated":{"line":4104,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4105,"column":0},"generated":{"line":4105,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4106,"column":0},"generated":{"line":4106,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4107,"column":0},"generated":{"line":4107,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4108,"column":0},"generated":{"line":4108,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4109,"column":0},"generated":{"line":4109,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4110,"column":0},"generated":{"line":4110,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4111,"column":0},"generated":{"line":4111,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4112,"column":0},"generated":{"line":4112,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4113,"column":0},"generated":{"line":4113,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4114,"column":0},"generated":{"line":4114,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4115,"column":0},"generated":{"line":4115,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4116,"column":0},"generated":{"line":4116,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4117,"column":0},"generated":{"line":4117,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4118,"column":0},"generated":{"line":4118,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4119,"column":0},"generated":{"line":4119,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4120,"column":0},"generated":{"line":4120,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4121,"column":0},"generated":{"line":4121,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4122,"column":0},"generated":{"line":4122,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4123,"column":0},"generated":{"line":4123,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4124,"column":0},"generated":{"line":4124,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4125,"column":0},"generated":{"line":4125,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4126,"column":0},"generated":{"line":4126,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4127,"column":0},"generated":{"line":4127,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4128,"column":0},"generated":{"line":4128,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4129,"column":0},"generated":{"line":4129,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4130,"column":0},"generated":{"line":4130,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4131,"column":0},"generated":{"line":4131,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4132,"column":0},"generated":{"line":4132,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4133,"column":0},"generated":{"line":4133,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4134,"column":0},"generated":{"line":4134,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4135,"column":0},"generated":{"line":4135,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4136,"column":0},"generated":{"line":4136,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4137,"column":0},"generated":{"line":4137,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4138,"column":0},"generated":{"line":4138,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4139,"column":0},"generated":{"line":4139,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4140,"column":0},"generated":{"line":4140,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4141,"column":0},"generated":{"line":4141,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4142,"column":0},"generated":{"line":4142,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4143,"column":0},"generated":{"line":4143,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4144,"column":0},"generated":{"line":4144,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4145,"column":0},"generated":{"line":4145,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4146,"column":0},"generated":{"line":4146,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4147,"column":0},"generated":{"line":4147,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4148,"column":0},"generated":{"line":4148,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4149,"column":0},"generated":{"line":4149,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4150,"column":0},"generated":{"line":4150,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4151,"column":0},"generated":{"line":4151,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4152,"column":0},"generated":{"line":4152,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4153,"column":0},"generated":{"line":4153,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4154,"column":0},"generated":{"line":4154,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4155,"column":0},"generated":{"line":4155,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4156,"column":0},"generated":{"line":4156,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4157,"column":0},"generated":{"line":4157,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4158,"column":0},"generated":{"line":4158,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4159,"column":0},"generated":{"line":4159,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4160,"column":0},"generated":{"line":4160,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4161,"column":0},"generated":{"line":4161,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4162,"column":0},"generated":{"line":4162,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4163,"column":0},"generated":{"line":4163,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4164,"column":0},"generated":{"line":4164,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4165,"column":0},"generated":{"line":4165,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4166,"column":0},"generated":{"line":4166,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4167,"column":0},"generated":{"line":4167,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4168,"column":0},"generated":{"line":4168,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4169,"column":0},"generated":{"line":4169,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4170,"column":0},"generated":{"line":4170,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4171,"column":0},"generated":{"line":4171,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4172,"column":0},"generated":{"line":4172,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4173,"column":0},"generated":{"line":4173,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4174,"column":0},"generated":{"line":4174,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4175,"column":0},"generated":{"line":4175,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4176,"column":0},"generated":{"line":4176,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4177,"column":0},"generated":{"line":4177,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4178,"column":0},"generated":{"line":4178,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4179,"column":0},"generated":{"line":4179,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4180,"column":0},"generated":{"line":4180,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4181,"column":0},"generated":{"line":4181,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4182,"column":0},"generated":{"line":4182,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4183,"column":0},"generated":{"line":4183,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4184,"column":0},"generated":{"line":4184,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4185,"column":0},"generated":{"line":4185,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4186,"column":0},"generated":{"line":4186,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4187,"column":0},"generated":{"line":4187,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4188,"column":0},"generated":{"line":4188,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4189,"column":0},"generated":{"line":4189,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4190,"column":0},"generated":{"line":4190,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4191,"column":0},"generated":{"line":4191,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4192,"column":0},"generated":{"line":4192,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4193,"column":0},"generated":{"line":4193,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4194,"column":0},"generated":{"line":4194,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4195,"column":0},"generated":{"line":4195,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4196,"column":0},"generated":{"line":4196,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4197,"column":0},"generated":{"line":4197,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4198,"column":0},"generated":{"line":4198,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4199,"column":0},"generated":{"line":4199,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4200,"column":0},"generated":{"line":4200,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4201,"column":0},"generated":{"line":4201,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4202,"column":0},"generated":{"line":4202,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4203,"column":0},"generated":{"line":4203,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4204,"column":0},"generated":{"line":4204,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4205,"column":0},"generated":{"line":4205,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4206,"column":0},"generated":{"line":4206,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4207,"column":0},"generated":{"line":4207,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4208,"column":0},"generated":{"line":4208,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4209,"column":0},"generated":{"line":4209,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4210,"column":0},"generated":{"line":4210,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4211,"column":0},"generated":{"line":4211,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4212,"column":0},"generated":{"line":4212,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4213,"column":0},"generated":{"line":4213,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4214,"column":0},"generated":{"line":4214,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4215,"column":0},"generated":{"line":4215,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4216,"column":0},"generated":{"line":4216,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4217,"column":0},"generated":{"line":4217,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4218,"column":0},"generated":{"line":4218,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4219,"column":0},"generated":{"line":4219,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4220,"column":0},"generated":{"line":4220,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4221,"column":0},"generated":{"line":4221,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4222,"column":0},"generated":{"line":4222,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4223,"column":0},"generated":{"line":4223,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4224,"column":0},"generated":{"line":4224,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4225,"column":0},"generated":{"line":4225,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4226,"column":0},"generated":{"line":4226,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4227,"column":0},"generated":{"line":4227,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4228,"column":0},"generated":{"line":4228,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4229,"column":0},"generated":{"line":4229,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4230,"column":0},"generated":{"line":4230,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4231,"column":0},"generated":{"line":4231,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4232,"column":0},"generated":{"line":4232,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4233,"column":0},"generated":{"line":4233,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4234,"column":0},"generated":{"line":4234,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4235,"column":0},"generated":{"line":4235,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4236,"column":0},"generated":{"line":4236,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4237,"column":0},"generated":{"line":4237,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4238,"column":0},"generated":{"line":4238,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4239,"column":0},"generated":{"line":4239,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4240,"column":0},"generated":{"line":4240,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4241,"column":0},"generated":{"line":4241,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4242,"column":0},"generated":{"line":4242,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4243,"column":0},"generated":{"line":4243,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4244,"column":0},"generated":{"line":4244,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4245,"column":0},"generated":{"line":4245,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4246,"column":0},"generated":{"line":4246,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4247,"column":0},"generated":{"line":4247,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4248,"column":0},"generated":{"line":4248,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4249,"column":0},"generated":{"line":4249,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4250,"column":0},"generated":{"line":4250,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4251,"column":0},"generated":{"line":4251,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4252,"column":0},"generated":{"line":4252,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4253,"column":0},"generated":{"line":4253,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4254,"column":0},"generated":{"line":4254,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4255,"column":0},"generated":{"line":4255,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4256,"column":0},"generated":{"line":4256,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4257,"column":0},"generated":{"line":4257,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4258,"column":0},"generated":{"line":4258,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4259,"column":0},"generated":{"line":4259,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4260,"column":0},"generated":{"line":4260,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4261,"column":0},"generated":{"line":4261,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4262,"column":0},"generated":{"line":4262,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4263,"column":0},"generated":{"line":4263,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4264,"column":0},"generated":{"line":4264,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4265,"column":0},"generated":{"line":4265,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4266,"column":0},"generated":{"line":4266,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4267,"column":0},"generated":{"line":4267,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4268,"column":0},"generated":{"line":4268,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4269,"column":0},"generated":{"line":4269,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4270,"column":0},"generated":{"line":4270,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4271,"column":0},"generated":{"line":4271,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4272,"column":0},"generated":{"line":4272,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4273,"column":0},"generated":{"line":4273,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4274,"column":0},"generated":{"line":4274,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4275,"column":0},"generated":{"line":4275,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4276,"column":0},"generated":{"line":4276,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4277,"column":0},"generated":{"line":4277,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4278,"column":0},"generated":{"line":4278,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4279,"column":0},"generated":{"line":4279,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4280,"column":0},"generated":{"line":4280,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4281,"column":0},"generated":{"line":4281,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4282,"column":0},"generated":{"line":4282,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4283,"column":0},"generated":{"line":4283,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4284,"column":0},"generated":{"line":4284,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4285,"column":0},"generated":{"line":4285,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4286,"column":0},"generated":{"line":4286,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4287,"column":0},"generated":{"line":4287,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4288,"column":0},"generated":{"line":4288,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4289,"column":0},"generated":{"line":4289,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4290,"column":0},"generated":{"line":4290,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4291,"column":0},"generated":{"line":4291,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4292,"column":0},"generated":{"line":4292,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4293,"column":0},"generated":{"line":4293,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4294,"column":0},"generated":{"line":4294,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4295,"column":0},"generated":{"line":4295,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4296,"column":0},"generated":{"line":4296,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4297,"column":0},"generated":{"line":4297,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4298,"column":0},"generated":{"line":4298,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4299,"column":0},"generated":{"line":4299,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4300,"column":0},"generated":{"line":4300,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4301,"column":0},"generated":{"line":4301,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4302,"column":0},"generated":{"line":4302,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4303,"column":0},"generated":{"line":4303,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4304,"column":0},"generated":{"line":4304,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4305,"column":0},"generated":{"line":4305,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4306,"column":0},"generated":{"line":4306,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4307,"column":0},"generated":{"line":4307,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4308,"column":0},"generated":{"line":4308,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4309,"column":0},"generated":{"line":4309,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4310,"column":0},"generated":{"line":4310,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4311,"column":0},"generated":{"line":4311,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4312,"column":0},"generated":{"line":4312,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4313,"column":0},"generated":{"line":4313,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4314,"column":0},"generated":{"line":4314,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4315,"column":0},"generated":{"line":4315,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4316,"column":0},"generated":{"line":4316,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4317,"column":0},"generated":{"line":4317,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4318,"column":0},"generated":{"line":4318,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4319,"column":0},"generated":{"line":4319,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4320,"column":0},"generated":{"line":4320,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4321,"column":0},"generated":{"line":4321,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4322,"column":0},"generated":{"line":4322,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4323,"column":0},"generated":{"line":4323,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4324,"column":0},"generated":{"line":4324,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4325,"column":0},"generated":{"line":4325,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4326,"column":0},"generated":{"line":4326,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4327,"column":0},"generated":{"line":4327,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4328,"column":0},"generated":{"line":4328,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4329,"column":0},"generated":{"line":4329,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4330,"column":0},"generated":{"line":4330,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4331,"column":0},"generated":{"line":4331,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4332,"column":0},"generated":{"line":4332,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4333,"column":0},"generated":{"line":4333,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4334,"column":0},"generated":{"line":4334,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4335,"column":0},"generated":{"line":4335,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4336,"column":0},"generated":{"line":4336,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4337,"column":0},"generated":{"line":4337,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4338,"column":0},"generated":{"line":4338,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4339,"column":0},"generated":{"line":4339,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4340,"column":0},"generated":{"line":4340,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4341,"column":0},"generated":{"line":4341,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4342,"column":0},"generated":{"line":4342,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4343,"column":0},"generated":{"line":4343,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4344,"column":0},"generated":{"line":4344,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4345,"column":0},"generated":{"line":4345,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4346,"column":0},"generated":{"line":4346,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4347,"column":0},"generated":{"line":4347,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4348,"column":0},"generated":{"line":4348,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4349,"column":0},"generated":{"line":4349,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4350,"column":0},"generated":{"line":4350,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4351,"column":0},"generated":{"line":4351,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4352,"column":0},"generated":{"line":4352,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4353,"column":0},"generated":{"line":4353,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4354,"column":0},"generated":{"line":4354,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4355,"column":0},"generated":{"line":4355,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4356,"column":0},"generated":{"line":4356,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4357,"column":0},"generated":{"line":4357,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4358,"column":0},"generated":{"line":4358,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4359,"column":0},"generated":{"line":4359,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4360,"column":0},"generated":{"line":4360,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4361,"column":0},"generated":{"line":4361,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4362,"column":0},"generated":{"line":4362,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4363,"column":0},"generated":{"line":4363,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4364,"column":0},"generated":{"line":4364,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4365,"column":0},"generated":{"line":4365,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4366,"column":0},"generated":{"line":4366,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4367,"column":0},"generated":{"line":4367,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4368,"column":0},"generated":{"line":4368,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4369,"column":0},"generated":{"line":4369,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4370,"column":0},"generated":{"line":4370,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4371,"column":0},"generated":{"line":4371,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4372,"column":0},"generated":{"line":4372,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4373,"column":0},"generated":{"line":4373,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4374,"column":0},"generated":{"line":4374,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4375,"column":0},"generated":{"line":4375,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4376,"column":0},"generated":{"line":4376,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4377,"column":0},"generated":{"line":4377,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4378,"column":0},"generated":{"line":4378,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4379,"column":0},"generated":{"line":4379,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4380,"column":0},"generated":{"line":4380,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4381,"column":0},"generated":{"line":4381,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4382,"column":0},"generated":{"line":4382,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4383,"column":0},"generated":{"line":4383,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4384,"column":0},"generated":{"line":4384,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4385,"column":0},"generated":{"line":4385,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4386,"column":0},"generated":{"line":4386,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4387,"column":0},"generated":{"line":4387,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4388,"column":0},"generated":{"line":4388,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4389,"column":0},"generated":{"line":4389,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4390,"column":0},"generated":{"line":4390,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4391,"column":0},"generated":{"line":4391,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4392,"column":0},"generated":{"line":4392,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4393,"column":0},"generated":{"line":4393,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4394,"column":0},"generated":{"line":4394,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4395,"column":0},"generated":{"line":4395,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4396,"column":0},"generated":{"line":4396,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4397,"column":0},"generated":{"line":4397,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4398,"column":0},"generated":{"line":4398,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4399,"column":0},"generated":{"line":4399,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4400,"column":0},"generated":{"line":4400,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4401,"column":0},"generated":{"line":4401,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4402,"column":0},"generated":{"line":4402,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4403,"column":0},"generated":{"line":4403,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4404,"column":0},"generated":{"line":4404,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4405,"column":0},"generated":{"line":4405,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4406,"column":0},"generated":{"line":4406,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4407,"column":0},"generated":{"line":4407,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4408,"column":0},"generated":{"line":4408,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4409,"column":0},"generated":{"line":4409,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4410,"column":0},"generated":{"line":4410,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4411,"column":0},"generated":{"line":4411,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4412,"column":0},"generated":{"line":4412,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4413,"column":0},"generated":{"line":4413,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4414,"column":0},"generated":{"line":4414,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4415,"column":0},"generated":{"line":4415,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4416,"column":0},"generated":{"line":4416,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4417,"column":0},"generated":{"line":4417,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4418,"column":0},"generated":{"line":4418,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4419,"column":0},"generated":{"line":4419,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4420,"column":0},"generated":{"line":4420,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4421,"column":0},"generated":{"line":4421,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4422,"column":0},"generated":{"line":4422,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4423,"column":0},"generated":{"line":4423,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4424,"column":0},"generated":{"line":4424,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4425,"column":0},"generated":{"line":4425,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4426,"column":0},"generated":{"line":4426,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4427,"column":0},"generated":{"line":4427,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4428,"column":0},"generated":{"line":4428,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4429,"column":0},"generated":{"line":4429,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4430,"column":0},"generated":{"line":4430,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4431,"column":0},"generated":{"line":4431,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4432,"column":0},"generated":{"line":4432,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4433,"column":0},"generated":{"line":4433,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4434,"column":0},"generated":{"line":4434,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4435,"column":0},"generated":{"line":4435,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4436,"column":0},"generated":{"line":4436,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4437,"column":0},"generated":{"line":4437,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4438,"column":0},"generated":{"line":4438,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4439,"column":0},"generated":{"line":4439,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4440,"column":0},"generated":{"line":4440,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4441,"column":0},"generated":{"line":4441,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4442,"column":0},"generated":{"line":4442,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4443,"column":0},"generated":{"line":4443,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4444,"column":0},"generated":{"line":4444,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4445,"column":0},"generated":{"line":4445,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4446,"column":0},"generated":{"line":4446,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4447,"column":0},"generated":{"line":4447,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4448,"column":0},"generated":{"line":4448,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4449,"column":0},"generated":{"line":4449,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4450,"column":0},"generated":{"line":4450,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4451,"column":0},"generated":{"line":4451,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4452,"column":0},"generated":{"line":4452,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4453,"column":0},"generated":{"line":4453,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4454,"column":0},"generated":{"line":4454,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4455,"column":0},"generated":{"line":4455,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4456,"column":0},"generated":{"line":4456,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4457,"column":0},"generated":{"line":4457,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4458,"column":0},"generated":{"line":4458,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4459,"column":0},"generated":{"line":4459,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4460,"column":0},"generated":{"line":4460,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4461,"column":0},"generated":{"line":4461,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4462,"column":0},"generated":{"line":4462,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4463,"column":0},"generated":{"line":4463,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4464,"column":0},"generated":{"line":4464,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4465,"column":0},"generated":{"line":4465,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4466,"column":0},"generated":{"line":4466,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4467,"column":0},"generated":{"line":4467,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4468,"column":0},"generated":{"line":4468,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4469,"column":0},"generated":{"line":4469,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4470,"column":0},"generated":{"line":4470,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4471,"column":0},"generated":{"line":4471,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4472,"column":0},"generated":{"line":4472,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4473,"column":0},"generated":{"line":4473,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4474,"column":0},"generated":{"line":4474,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4475,"column":0},"generated":{"line":4475,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4476,"column":0},"generated":{"line":4476,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4477,"column":0},"generated":{"line":4477,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4478,"column":0},"generated":{"line":4478,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4479,"column":0},"generated":{"line":4479,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4480,"column":0},"generated":{"line":4480,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4481,"column":0},"generated":{"line":4481,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4482,"column":0},"generated":{"line":4482,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4483,"column":0},"generated":{"line":4483,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4484,"column":0},"generated":{"line":4484,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4485,"column":0},"generated":{"line":4485,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4486,"column":0},"generated":{"line":4486,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4487,"column":0},"generated":{"line":4487,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4488,"column":0},"generated":{"line":4488,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4489,"column":0},"generated":{"line":4489,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4490,"column":0},"generated":{"line":4490,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4491,"column":0},"generated":{"line":4491,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4492,"column":0},"generated":{"line":4492,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4493,"column":0},"generated":{"line":4493,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4494,"column":0},"generated":{"line":4494,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4495,"column":0},"generated":{"line":4495,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4496,"column":0},"generated":{"line":4496,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4497,"column":0},"generated":{"line":4497,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4498,"column":0},"generated":{"line":4498,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4499,"column":0},"generated":{"line":4499,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4500,"column":0},"generated":{"line":4500,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4501,"column":0},"generated":{"line":4501,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4502,"column":0},"generated":{"line":4502,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4503,"column":0},"generated":{"line":4503,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4504,"column":0},"generated":{"line":4504,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4505,"column":0},"generated":{"line":4505,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4506,"column":0},"generated":{"line":4506,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4507,"column":0},"generated":{"line":4507,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4508,"column":0},"generated":{"line":4508,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4509,"column":0},"generated":{"line":4509,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4510,"column":0},"generated":{"line":4510,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4511,"column":0},"generated":{"line":4511,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4512,"column":0},"generated":{"line":4512,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4513,"column":0},"generated":{"line":4513,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4514,"column":0},"generated":{"line":4514,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4515,"column":0},"generated":{"line":4515,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4516,"column":0},"generated":{"line":4516,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4517,"column":0},"generated":{"line":4517,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4518,"column":0},"generated":{"line":4518,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4519,"column":0},"generated":{"line":4519,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4520,"column":0},"generated":{"line":4520,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4521,"column":0},"generated":{"line":4521,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4522,"column":0},"generated":{"line":4522,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4523,"column":0},"generated":{"line":4523,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4524,"column":0},"generated":{"line":4524,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4525,"column":0},"generated":{"line":4525,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4526,"column":0},"generated":{"line":4526,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4527,"column":0},"generated":{"line":4527,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4528,"column":0},"generated":{"line":4528,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4529,"column":0},"generated":{"line":4529,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4530,"column":0},"generated":{"line":4530,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4531,"column":0},"generated":{"line":4531,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4532,"column":0},"generated":{"line":4532,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4533,"column":0},"generated":{"line":4533,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4534,"column":0},"generated":{"line":4534,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4535,"column":0},"generated":{"line":4535,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4536,"column":0},"generated":{"line":4536,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4537,"column":0},"generated":{"line":4537,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4538,"column":0},"generated":{"line":4538,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4539,"column":0},"generated":{"line":4539,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4540,"column":0},"generated":{"line":4540,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4541,"column":0},"generated":{"line":4541,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4542,"column":0},"generated":{"line":4542,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4543,"column":0},"generated":{"line":4543,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4544,"column":0},"generated":{"line":4544,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4545,"column":0},"generated":{"line":4545,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4546,"column":0},"generated":{"line":4546,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4547,"column":0},"generated":{"line":4547,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4548,"column":0},"generated":{"line":4548,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4549,"column":0},"generated":{"line":4549,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4550,"column":0},"generated":{"line":4550,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4551,"column":0},"generated":{"line":4551,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4552,"column":0},"generated":{"line":4552,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4553,"column":0},"generated":{"line":4553,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4554,"column":0},"generated":{"line":4554,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4555,"column":0},"generated":{"line":4555,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4556,"column":0},"generated":{"line":4556,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4557,"column":0},"generated":{"line":4557,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4558,"column":0},"generated":{"line":4558,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4559,"column":0},"generated":{"line":4559,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4560,"column":0},"generated":{"line":4560,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4561,"column":0},"generated":{"line":4561,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4562,"column":0},"generated":{"line":4562,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4563,"column":0},"generated":{"line":4563,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4564,"column":0},"generated":{"line":4564,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4565,"column":0},"generated":{"line":4565,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4566,"column":0},"generated":{"line":4566,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4567,"column":0},"generated":{"line":4567,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4568,"column":0},"generated":{"line":4568,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4569,"column":0},"generated":{"line":4569,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4570,"column":0},"generated":{"line":4570,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4571,"column":0},"generated":{"line":4571,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4572,"column":0},"generated":{"line":4572,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4573,"column":0},"generated":{"line":4573,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4574,"column":0},"generated":{"line":4574,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4575,"column":0},"generated":{"line":4575,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4576,"column":0},"generated":{"line":4576,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4577,"column":0},"generated":{"line":4577,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4578,"column":0},"generated":{"line":4578,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4579,"column":0},"generated":{"line":4579,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4580,"column":0},"generated":{"line":4580,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4581,"column":0},"generated":{"line":4581,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4582,"column":0},"generated":{"line":4582,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4583,"column":0},"generated":{"line":4583,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4584,"column":0},"generated":{"line":4584,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4585,"column":0},"generated":{"line":4585,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4586,"column":0},"generated":{"line":4586,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4587,"column":0},"generated":{"line":4587,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4588,"column":0},"generated":{"line":4588,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4589,"column":0},"generated":{"line":4589,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4590,"column":0},"generated":{"line":4590,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4591,"column":0},"generated":{"line":4591,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4592,"column":0},"generated":{"line":4592,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4593,"column":0},"generated":{"line":4593,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4594,"column":0},"generated":{"line":4594,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4595,"column":0},"generated":{"line":4595,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4596,"column":0},"generated":{"line":4596,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4597,"column":0},"generated":{"line":4597,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4598,"column":0},"generated":{"line":4598,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4599,"column":0},"generated":{"line":4599,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4600,"column":0},"generated":{"line":4600,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4601,"column":0},"generated":{"line":4601,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4602,"column":0},"generated":{"line":4602,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4603,"column":0},"generated":{"line":4603,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4604,"column":0},"generated":{"line":4604,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4605,"column":0},"generated":{"line":4605,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4606,"column":0},"generated":{"line":4606,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4607,"column":0},"generated":{"line":4607,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4608,"column":0},"generated":{"line":4608,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4609,"column":0},"generated":{"line":4609,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4610,"column":0},"generated":{"line":4610,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4611,"column":0},"generated":{"line":4611,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4612,"column":0},"generated":{"line":4612,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4613,"column":0},"generated":{"line":4613,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4614,"column":0},"generated":{"line":4614,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4615,"column":0},"generated":{"line":4615,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4616,"column":0},"generated":{"line":4616,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4617,"column":0},"generated":{"line":4617,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4618,"column":0},"generated":{"line":4618,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4619,"column":0},"generated":{"line":4619,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4620,"column":0},"generated":{"line":4620,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4621,"column":0},"generated":{"line":4621,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4622,"column":0},"generated":{"line":4622,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4623,"column":0},"generated":{"line":4623,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4624,"column":0},"generated":{"line":4624,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4625,"column":0},"generated":{"line":4625,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4626,"column":0},"generated":{"line":4626,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4627,"column":0},"generated":{"line":4627,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4628,"column":0},"generated":{"line":4628,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4629,"column":0},"generated":{"line":4629,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4630,"column":0},"generated":{"line":4630,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4631,"column":0},"generated":{"line":4631,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4632,"column":0},"generated":{"line":4632,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4633,"column":0},"generated":{"line":4633,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4634,"column":0},"generated":{"line":4634,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4635,"column":0},"generated":{"line":4635,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4636,"column":0},"generated":{"line":4636,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4637,"column":0},"generated":{"line":4637,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4638,"column":0},"generated":{"line":4638,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4639,"column":0},"generated":{"line":4639,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4640,"column":0},"generated":{"line":4640,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4641,"column":0},"generated":{"line":4641,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4642,"column":0},"generated":{"line":4642,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4643,"column":0},"generated":{"line":4643,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4644,"column":0},"generated":{"line":4644,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4645,"column":0},"generated":{"line":4645,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4646,"column":0},"generated":{"line":4646,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4647,"column":0},"generated":{"line":4647,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4648,"column":0},"generated":{"line":4648,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4649,"column":0},"generated":{"line":4649,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4650,"column":0},"generated":{"line":4650,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4651,"column":0},"generated":{"line":4651,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4652,"column":0},"generated":{"line":4652,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4653,"column":0},"generated":{"line":4653,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4654,"column":0},"generated":{"line":4654,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4655,"column":0},"generated":{"line":4655,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4656,"column":0},"generated":{"line":4656,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4657,"column":0},"generated":{"line":4657,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4658,"column":0},"generated":{"line":4658,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4659,"column":0},"generated":{"line":4659,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4660,"column":0},"generated":{"line":4660,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4661,"column":0},"generated":{"line":4661,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4662,"column":0},"generated":{"line":4662,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4663,"column":0},"generated":{"line":4663,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4664,"column":0},"generated":{"line":4664,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4665,"column":0},"generated":{"line":4665,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4666,"column":0},"generated":{"line":4666,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4667,"column":0},"generated":{"line":4667,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4668,"column":0},"generated":{"line":4668,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4669,"column":0},"generated":{"line":4669,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4670,"column":0},"generated":{"line":4670,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4671,"column":0},"generated":{"line":4671,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4672,"column":0},"generated":{"line":4672,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4673,"column":0},"generated":{"line":4673,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4674,"column":0},"generated":{"line":4674,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4675,"column":0},"generated":{"line":4675,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4676,"column":0},"generated":{"line":4676,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4677,"column":0},"generated":{"line":4677,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4678,"column":0},"generated":{"line":4678,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4679,"column":0},"generated":{"line":4679,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4680,"column":0},"generated":{"line":4680,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4681,"column":0},"generated":{"line":4681,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4682,"column":0},"generated":{"line":4682,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4683,"column":0},"generated":{"line":4683,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4684,"column":0},"generated":{"line":4684,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4685,"column":0},"generated":{"line":4685,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4686,"column":0},"generated":{"line":4686,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4687,"column":0},"generated":{"line":4687,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4688,"column":0},"generated":{"line":4688,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4689,"column":0},"generated":{"line":4689,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4690,"column":0},"generated":{"line":4690,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4691,"column":0},"generated":{"line":4691,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4692,"column":0},"generated":{"line":4692,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4693,"column":0},"generated":{"line":4693,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4694,"column":0},"generated":{"line":4694,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4695,"column":0},"generated":{"line":4695,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4696,"column":0},"generated":{"line":4696,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4697,"column":0},"generated":{"line":4697,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4698,"column":0},"generated":{"line":4698,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4699,"column":0},"generated":{"line":4699,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4700,"column":0},"generated":{"line":4700,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4701,"column":0},"generated":{"line":4701,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4702,"column":0},"generated":{"line":4702,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4703,"column":0},"generated":{"line":4703,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4704,"column":0},"generated":{"line":4704,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4705,"column":0},"generated":{"line":4705,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4706,"column":0},"generated":{"line":4706,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4707,"column":0},"generated":{"line":4707,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4708,"column":0},"generated":{"line":4708,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4709,"column":0},"generated":{"line":4709,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4710,"column":0},"generated":{"line":4710,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4711,"column":0},"generated":{"line":4711,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4712,"column":0},"generated":{"line":4712,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4713,"column":0},"generated":{"line":4713,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4714,"column":0},"generated":{"line":4714,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4715,"column":0},"generated":{"line":4715,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4716,"column":0},"generated":{"line":4716,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4717,"column":0},"generated":{"line":4717,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4718,"column":0},"generated":{"line":4718,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4719,"column":0},"generated":{"line":4719,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4720,"column":0},"generated":{"line":4720,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4721,"column":0},"generated":{"line":4721,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4722,"column":0},"generated":{"line":4722,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4723,"column":0},"generated":{"line":4723,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4724,"column":0},"generated":{"line":4724,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4725,"column":0},"generated":{"line":4725,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4726,"column":0},"generated":{"line":4726,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4727,"column":0},"generated":{"line":4727,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4728,"column":0},"generated":{"line":4728,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4729,"column":0},"generated":{"line":4729,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4730,"column":0},"generated":{"line":4730,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4731,"column":0},"generated":{"line":4731,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4732,"column":0},"generated":{"line":4732,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4733,"column":0},"generated":{"line":4733,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4734,"column":0},"generated":{"line":4734,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4735,"column":0},"generated":{"line":4735,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4736,"column":0},"generated":{"line":4736,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4737,"column":0},"generated":{"line":4737,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4738,"column":0},"generated":{"line":4738,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4739,"column":0},"generated":{"line":4739,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4740,"column":0},"generated":{"line":4740,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4741,"column":0},"generated":{"line":4741,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4742,"column":0},"generated":{"line":4742,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4743,"column":0},"generated":{"line":4743,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4744,"column":0},"generated":{"line":4744,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4745,"column":0},"generated":{"line":4745,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4746,"column":0},"generated":{"line":4746,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4747,"column":0},"generated":{"line":4747,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4748,"column":0},"generated":{"line":4748,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4749,"column":0},"generated":{"line":4749,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4750,"column":0},"generated":{"line":4750,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4751,"column":0},"generated":{"line":4751,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4752,"column":0},"generated":{"line":4752,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4753,"column":0},"generated":{"line":4753,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4754,"column":0},"generated":{"line":4754,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4755,"column":0},"generated":{"line":4755,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4756,"column":0},"generated":{"line":4756,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4757,"column":0},"generated":{"line":4757,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4758,"column":0},"generated":{"line":4758,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4759,"column":0},"generated":{"line":4759,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4760,"column":0},"generated":{"line":4760,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4761,"column":0},"generated":{"line":4761,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4762,"column":0},"generated":{"line":4762,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4763,"column":0},"generated":{"line":4763,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4764,"column":0},"generated":{"line":4764,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4765,"column":0},"generated":{"line":4765,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4766,"column":0},"generated":{"line":4766,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4767,"column":0},"generated":{"line":4767,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4768,"column":0},"generated":{"line":4768,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4769,"column":0},"generated":{"line":4769,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4770,"column":0},"generated":{"line":4770,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4771,"column":0},"generated":{"line":4771,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4772,"column":0},"generated":{"line":4772,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4773,"column":0},"generated":{"line":4773,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4774,"column":0},"generated":{"line":4774,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4775,"column":0},"generated":{"line":4775,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4776,"column":0},"generated":{"line":4776,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4777,"column":0},"generated":{"line":4777,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4778,"column":0},"generated":{"line":4778,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4779,"column":0},"generated":{"line":4779,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4780,"column":0},"generated":{"line":4780,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4781,"column":0},"generated":{"line":4781,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4782,"column":0},"generated":{"line":4782,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4783,"column":0},"generated":{"line":4783,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4784,"column":0},"generated":{"line":4784,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4785,"column":0},"generated":{"line":4785,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4786,"column":0},"generated":{"line":4786,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4787,"column":0},"generated":{"line":4787,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4788,"column":0},"generated":{"line":4788,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4789,"column":0},"generated":{"line":4789,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4790,"column":0},"generated":{"line":4790,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4791,"column":0},"generated":{"line":4791,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4792,"column":0},"generated":{"line":4792,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4793,"column":0},"generated":{"line":4793,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4794,"column":0},"generated":{"line":4794,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4795,"column":0},"generated":{"line":4795,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4796,"column":0},"generated":{"line":4796,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4797,"column":0},"generated":{"line":4797,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4798,"column":0},"generated":{"line":4798,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4799,"column":0},"generated":{"line":4799,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4800,"column":0},"generated":{"line":4800,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4801,"column":0},"generated":{"line":4801,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4802,"column":0},"generated":{"line":4802,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4803,"column":0},"generated":{"line":4803,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4804,"column":0},"generated":{"line":4804,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4805,"column":0},"generated":{"line":4805,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4806,"column":0},"generated":{"line":4806,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4807,"column":0},"generated":{"line":4807,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4808,"column":0},"generated":{"line":4808,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4809,"column":0},"generated":{"line":4809,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4810,"column":0},"generated":{"line":4810,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4811,"column":0},"generated":{"line":4811,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4812,"column":0},"generated":{"line":4812,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4813,"column":0},"generated":{"line":4813,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4814,"column":0},"generated":{"line":4814,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4815,"column":0},"generated":{"line":4815,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4816,"column":0},"generated":{"line":4816,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4817,"column":0},"generated":{"line":4817,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4818,"column":0},"generated":{"line":4818,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4819,"column":0},"generated":{"line":4819,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4820,"column":0},"generated":{"line":4820,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4821,"column":0},"generated":{"line":4821,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4822,"column":0},"generated":{"line":4822,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4823,"column":0},"generated":{"line":4823,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4824,"column":0},"generated":{"line":4824,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4825,"column":0},"generated":{"line":4825,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4826,"column":0},"generated":{"line":4826,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4827,"column":0},"generated":{"line":4827,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4828,"column":0},"generated":{"line":4828,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4829,"column":0},"generated":{"line":4829,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4830,"column":0},"generated":{"line":4830,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4831,"column":0},"generated":{"line":4831,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4832,"column":0},"generated":{"line":4832,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4833,"column":0},"generated":{"line":4833,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4834,"column":0},"generated":{"line":4834,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4835,"column":0},"generated":{"line":4835,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4836,"column":0},"generated":{"line":4836,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4837,"column":0},"generated":{"line":4837,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4838,"column":0},"generated":{"line":4838,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4839,"column":0},"generated":{"line":4839,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4840,"column":0},"generated":{"line":4840,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4841,"column":0},"generated":{"line":4841,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4842,"column":0},"generated":{"line":4842,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4843,"column":0},"generated":{"line":4843,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4844,"column":0},"generated":{"line":4844,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4845,"column":0},"generated":{"line":4845,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4846,"column":0},"generated":{"line":4846,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4847,"column":0},"generated":{"line":4847,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4848,"column":0},"generated":{"line":4848,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4849,"column":0},"generated":{"line":4849,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4850,"column":0},"generated":{"line":4850,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4851,"column":0},"generated":{"line":4851,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4852,"column":0},"generated":{"line":4852,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4853,"column":0},"generated":{"line":4853,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4854,"column":0},"generated":{"line":4854,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4855,"column":0},"generated":{"line":4855,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4856,"column":0},"generated":{"line":4856,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4857,"column":0},"generated":{"line":4857,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4858,"column":0},"generated":{"line":4858,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4859,"column":0},"generated":{"line":4859,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4860,"column":0},"generated":{"line":4860,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4861,"column":0},"generated":{"line":4861,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4862,"column":0},"generated":{"line":4862,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4863,"column":0},"generated":{"line":4863,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4864,"column":0},"generated":{"line":4864,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4865,"column":0},"generated":{"line":4865,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4866,"column":0},"generated":{"line":4866,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4867,"column":0},"generated":{"line":4867,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4868,"column":0},"generated":{"line":4868,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4869,"column":0},"generated":{"line":4869,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4870,"column":0},"generated":{"line":4870,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4871,"column":0},"generated":{"line":4871,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4872,"column":0},"generated":{"line":4872,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4873,"column":0},"generated":{"line":4873,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4874,"column":0},"generated":{"line":4874,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4875,"column":0},"generated":{"line":4875,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4876,"column":0},"generated":{"line":4876,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4877,"column":0},"generated":{"line":4877,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4878,"column":0},"generated":{"line":4878,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4879,"column":0},"generated":{"line":4879,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4880,"column":0},"generated":{"line":4880,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4881,"column":0},"generated":{"line":4881,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4882,"column":0},"generated":{"line":4882,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4883,"column":0},"generated":{"line":4883,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4884,"column":0},"generated":{"line":4884,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4885,"column":0},"generated":{"line":4885,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4886,"column":0},"generated":{"line":4886,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4887,"column":0},"generated":{"line":4887,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4888,"column":0},"generated":{"line":4888,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4889,"column":0},"generated":{"line":4889,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4890,"column":0},"generated":{"line":4890,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4891,"column":0},"generated":{"line":4891,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4892,"column":0},"generated":{"line":4892,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4893,"column":0},"generated":{"line":4893,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4894,"column":0},"generated":{"line":4894,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4895,"column":0},"generated":{"line":4895,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4896,"column":0},"generated":{"line":4896,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4897,"column":0},"generated":{"line":4897,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4898,"column":0},"generated":{"line":4898,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4899,"column":0},"generated":{"line":4899,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4900,"column":0},"generated":{"line":4900,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4901,"column":0},"generated":{"line":4901,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4902,"column":0},"generated":{"line":4902,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4903,"column":0},"generated":{"line":4903,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4904,"column":0},"generated":{"line":4904,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4905,"column":0},"generated":{"line":4905,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4906,"column":0},"generated":{"line":4906,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4907,"column":0},"generated":{"line":4907,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4908,"column":0},"generated":{"line":4908,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4909,"column":0},"generated":{"line":4909,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4910,"column":0},"generated":{"line":4910,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4911,"column":0},"generated":{"line":4911,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4912,"column":0},"generated":{"line":4912,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4913,"column":0},"generated":{"line":4913,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4914,"column":0},"generated":{"line":4914,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4915,"column":0},"generated":{"line":4915,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4916,"column":0},"generated":{"line":4916,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4917,"column":0},"generated":{"line":4917,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4918,"column":0},"generated":{"line":4918,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4919,"column":0},"generated":{"line":4919,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4920,"column":0},"generated":{"line":4920,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4921,"column":0},"generated":{"line":4921,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4922,"column":0},"generated":{"line":4922,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4923,"column":0},"generated":{"line":4923,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4924,"column":0},"generated":{"line":4924,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4925,"column":0},"generated":{"line":4925,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4926,"column":0},"generated":{"line":4926,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4927,"column":0},"generated":{"line":4927,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4928,"column":0},"generated":{"line":4928,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4929,"column":0},"generated":{"line":4929,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4930,"column":0},"generated":{"line":4930,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4931,"column":0},"generated":{"line":4931,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4932,"column":0},"generated":{"line":4932,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4933,"column":0},"generated":{"line":4933,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4934,"column":0},"generated":{"line":4934,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4935,"column":0},"generated":{"line":4935,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4936,"column":0},"generated":{"line":4936,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4937,"column":0},"generated":{"line":4937,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4938,"column":0},"generated":{"line":4938,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4939,"column":0},"generated":{"line":4939,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4940,"column":0},"generated":{"line":4940,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4941,"column":0},"generated":{"line":4941,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4942,"column":0},"generated":{"line":4942,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4943,"column":0},"generated":{"line":4943,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4944,"column":0},"generated":{"line":4944,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4945,"column":0},"generated":{"line":4945,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4946,"column":0},"generated":{"line":4946,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4947,"column":0},"generated":{"line":4947,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4948,"column":0},"generated":{"line":4948,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4949,"column":0},"generated":{"line":4949,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4950,"column":0},"generated":{"line":4950,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4951,"column":0},"generated":{"line":4951,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4952,"column":0},"generated":{"line":4952,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4953,"column":0},"generated":{"line":4953,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4954,"column":0},"generated":{"line":4954,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4955,"column":0},"generated":{"line":4955,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4956,"column":0},"generated":{"line":4956,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4957,"column":0},"generated":{"line":4957,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4958,"column":0},"generated":{"line":4958,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4959,"column":0},"generated":{"line":4959,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4960,"column":0},"generated":{"line":4960,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4961,"column":0},"generated":{"line":4961,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4962,"column":0},"generated":{"line":4962,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4963,"column":0},"generated":{"line":4963,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4964,"column":0},"generated":{"line":4964,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4965,"column":0},"generated":{"line":4965,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4966,"column":0},"generated":{"line":4966,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4967,"column":0},"generated":{"line":4967,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4968,"column":0},"generated":{"line":4968,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4969,"column":0},"generated":{"line":4969,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4970,"column":0},"generated":{"line":4970,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4971,"column":0},"generated":{"line":4971,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4972,"column":0},"generated":{"line":4972,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4973,"column":0},"generated":{"line":4973,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4974,"column":0},"generated":{"line":4974,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4975,"column":0},"generated":{"line":4975,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4976,"column":0},"generated":{"line":4976,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4977,"column":0},"generated":{"line":4977,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4978,"column":0},"generated":{"line":4978,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4979,"column":0},"generated":{"line":4979,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4980,"column":0},"generated":{"line":4980,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4981,"column":0},"generated":{"line":4981,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4982,"column":0},"generated":{"line":4982,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4983,"column":0},"generated":{"line":4983,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4984,"column":0},"generated":{"line":4984,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4985,"column":0},"generated":{"line":4985,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4986,"column":0},"generated":{"line":4986,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4987,"column":0},"generated":{"line":4987,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4988,"column":0},"generated":{"line":4988,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4989,"column":0},"generated":{"line":4989,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4990,"column":0},"generated":{"line":4990,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4991,"column":0},"generated":{"line":4991,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4992,"column":0},"generated":{"line":4992,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4993,"column":0},"generated":{"line":4993,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4994,"column":0},"generated":{"line":4994,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4995,"column":0},"generated":{"line":4995,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4996,"column":0},"generated":{"line":4996,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4997,"column":0},"generated":{"line":4997,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4998,"column":0},"generated":{"line":4998,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":4999,"column":0},"generated":{"line":4999,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5000,"column":0},"generated":{"line":5000,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5001,"column":0},"generated":{"line":5001,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5002,"column":0},"generated":{"line":5002,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5003,"column":0},"generated":{"line":5003,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5004,"column":0},"generated":{"line":5004,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5005,"column":0},"generated":{"line":5005,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5006,"column":0},"generated":{"line":5006,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5007,"column":0},"generated":{"line":5007,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5008,"column":0},"generated":{"line":5008,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5009,"column":0},"generated":{"line":5009,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5010,"column":0},"generated":{"line":5010,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5011,"column":0},"generated":{"line":5011,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5012,"column":0},"generated":{"line":5012,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5013,"column":0},"generated":{"line":5013,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5014,"column":0},"generated":{"line":5014,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5015,"column":0},"generated":{"line":5015,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5016,"column":0},"generated":{"line":5016,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5017,"column":0},"generated":{"line":5017,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5018,"column":0},"generated":{"line":5018,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5019,"column":0},"generated":{"line":5019,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5020,"column":0},"generated":{"line":5020,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5021,"column":0},"generated":{"line":5021,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5022,"column":0},"generated":{"line":5022,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5023,"column":0},"generated":{"line":5023,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5024,"column":0},"generated":{"line":5024,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5025,"column":0},"generated":{"line":5025,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5026,"column":0},"generated":{"line":5026,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5027,"column":0},"generated":{"line":5027,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5028,"column":0},"generated":{"line":5028,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5029,"column":0},"generated":{"line":5029,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5030,"column":0},"generated":{"line":5030,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5031,"column":0},"generated":{"line":5031,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5032,"column":0},"generated":{"line":5032,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5033,"column":0},"generated":{"line":5033,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5034,"column":0},"generated":{"line":5034,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5035,"column":0},"generated":{"line":5035,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5036,"column":0},"generated":{"line":5036,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5037,"column":0},"generated":{"line":5037,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5038,"column":0},"generated":{"line":5038,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5039,"column":0},"generated":{"line":5039,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5040,"column":0},"generated":{"line":5040,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5041,"column":0},"generated":{"line":5041,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5042,"column":0},"generated":{"line":5042,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5043,"column":0},"generated":{"line":5043,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5044,"column":0},"generated":{"line":5044,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5045,"column":0},"generated":{"line":5045,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5046,"column":0},"generated":{"line":5046,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5047,"column":0},"generated":{"line":5047,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5048,"column":0},"generated":{"line":5048,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5049,"column":0},"generated":{"line":5049,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5050,"column":0},"generated":{"line":5050,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5051,"column":0},"generated":{"line":5051,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5052,"column":0},"generated":{"line":5052,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5053,"column":0},"generated":{"line":5053,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5054,"column":0},"generated":{"line":5054,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5055,"column":0},"generated":{"line":5055,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5056,"column":0},"generated":{"line":5056,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5057,"column":0},"generated":{"line":5057,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5058,"column":0},"generated":{"line":5058,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5059,"column":0},"generated":{"line":5059,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5060,"column":0},"generated":{"line":5060,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5061,"column":0},"generated":{"line":5061,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5062,"column":0},"generated":{"line":5062,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5063,"column":0},"generated":{"line":5063,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5064,"column":0},"generated":{"line":5064,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5065,"column":0},"generated":{"line":5065,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5066,"column":0},"generated":{"line":5066,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5067,"column":0},"generated":{"line":5067,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5068,"column":0},"generated":{"line":5068,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5069,"column":0},"generated":{"line":5069,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5070,"column":0},"generated":{"line":5070,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5071,"column":0},"generated":{"line":5071,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5072,"column":0},"generated":{"line":5072,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5073,"column":0},"generated":{"line":5073,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5074,"column":0},"generated":{"line":5074,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5075,"column":0},"generated":{"line":5075,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5076,"column":0},"generated":{"line":5076,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5077,"column":0},"generated":{"line":5077,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5078,"column":0},"generated":{"line":5078,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5079,"column":0},"generated":{"line":5079,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5080,"column":0},"generated":{"line":5080,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5081,"column":0},"generated":{"line":5081,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5082,"column":0},"generated":{"line":5082,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5083,"column":0},"generated":{"line":5083,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5084,"column":0},"generated":{"line":5084,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5085,"column":0},"generated":{"line":5085,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5086,"column":0},"generated":{"line":5086,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5087,"column":0},"generated":{"line":5087,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5088,"column":0},"generated":{"line":5088,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5089,"column":0},"generated":{"line":5089,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5090,"column":0},"generated":{"line":5090,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5091,"column":0},"generated":{"line":5091,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5092,"column":0},"generated":{"line":5092,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5093,"column":0},"generated":{"line":5093,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5094,"column":0},"generated":{"line":5094,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5095,"column":0},"generated":{"line":5095,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5096,"column":0},"generated":{"line":5096,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5097,"column":0},"generated":{"line":5097,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5098,"column":0},"generated":{"line":5098,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5099,"column":0},"generated":{"line":5099,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5100,"column":0},"generated":{"line":5100,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5101,"column":0},"generated":{"line":5101,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5102,"column":0},"generated":{"line":5102,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5103,"column":0},"generated":{"line":5103,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5104,"column":0},"generated":{"line":5104,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5105,"column":0},"generated":{"line":5105,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5106,"column":0},"generated":{"line":5106,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5107,"column":0},"generated":{"line":5107,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5108,"column":0},"generated":{"line":5108,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5109,"column":0},"generated":{"line":5109,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5110,"column":0},"generated":{"line":5110,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5111,"column":0},"generated":{"line":5111,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5112,"column":0},"generated":{"line":5112,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5113,"column":0},"generated":{"line":5113,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5114,"column":0},"generated":{"line":5114,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5115,"column":0},"generated":{"line":5115,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5116,"column":0},"generated":{"line":5116,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5117,"column":0},"generated":{"line":5117,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5118,"column":0},"generated":{"line":5118,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5119,"column":0},"generated":{"line":5119,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5120,"column":0},"generated":{"line":5120,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5121,"column":0},"generated":{"line":5121,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5122,"column":0},"generated":{"line":5122,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5123,"column":0},"generated":{"line":5123,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5124,"column":0},"generated":{"line":5124,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5125,"column":0},"generated":{"line":5125,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5126,"column":0},"generated":{"line":5126,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5127,"column":0},"generated":{"line":5127,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5128,"column":0},"generated":{"line":5128,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5129,"column":0},"generated":{"line":5129,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5130,"column":0},"generated":{"line":5130,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5131,"column":0},"generated":{"line":5131,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5132,"column":0},"generated":{"line":5132,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5133,"column":0},"generated":{"line":5133,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5134,"column":0},"generated":{"line":5134,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5135,"column":0},"generated":{"line":5135,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5136,"column":0},"generated":{"line":5136,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5137,"column":0},"generated":{"line":5137,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5138,"column":0},"generated":{"line":5138,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5139,"column":0},"generated":{"line":5139,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5140,"column":0},"generated":{"line":5140,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5141,"column":0},"generated":{"line":5141,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5142,"column":0},"generated":{"line":5142,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5143,"column":0},"generated":{"line":5143,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5144,"column":0},"generated":{"line":5144,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5145,"column":0},"generated":{"line":5145,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5146,"column":0},"generated":{"line":5146,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5147,"column":0},"generated":{"line":5147,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5148,"column":0},"generated":{"line":5148,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5149,"column":0},"generated":{"line":5149,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5150,"column":0},"generated":{"line":5150,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5151,"column":0},"generated":{"line":5151,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5152,"column":0},"generated":{"line":5152,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5153,"column":0},"generated":{"line":5153,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5154,"column":0},"generated":{"line":5154,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5155,"column":0},"generated":{"line":5155,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5156,"column":0},"generated":{"line":5156,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5157,"column":0},"generated":{"line":5157,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5158,"column":0},"generated":{"line":5158,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5159,"column":0},"generated":{"line":5159,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5160,"column":0},"generated":{"line":5160,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5161,"column":0},"generated":{"line":5161,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5162,"column":0},"generated":{"line":5162,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5163,"column":0},"generated":{"line":5163,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5164,"column":0},"generated":{"line":5164,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5165,"column":0},"generated":{"line":5165,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5166,"column":0},"generated":{"line":5166,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5167,"column":0},"generated":{"line":5167,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5168,"column":0},"generated":{"line":5168,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5169,"column":0},"generated":{"line":5169,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5170,"column":0},"generated":{"line":5170,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5171,"column":0},"generated":{"line":5171,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5172,"column":0},"generated":{"line":5172,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5173,"column":0},"generated":{"line":5173,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5174,"column":0},"generated":{"line":5174,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5175,"column":0},"generated":{"line":5175,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5176,"column":0},"generated":{"line":5176,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5177,"column":0},"generated":{"line":5177,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5178,"column":0},"generated":{"line":5178,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5179,"column":0},"generated":{"line":5179,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5180,"column":0},"generated":{"line":5180,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5181,"column":0},"generated":{"line":5181,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5182,"column":0},"generated":{"line":5182,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5183,"column":0},"generated":{"line":5183,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5184,"column":0},"generated":{"line":5184,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5185,"column":0},"generated":{"line":5185,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5186,"column":0},"generated":{"line":5186,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5187,"column":0},"generated":{"line":5187,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5188,"column":0},"generated":{"line":5188,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5189,"column":0},"generated":{"line":5189,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5190,"column":0},"generated":{"line":5190,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5191,"column":0},"generated":{"line":5191,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5192,"column":0},"generated":{"line":5192,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5193,"column":0},"generated":{"line":5193,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5194,"column":0},"generated":{"line":5194,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5195,"column":0},"generated":{"line":5195,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5196,"column":0},"generated":{"line":5196,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5197,"column":0},"generated":{"line":5197,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5198,"column":0},"generated":{"line":5198,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5199,"column":0},"generated":{"line":5199,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5200,"column":0},"generated":{"line":5200,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5201,"column":0},"generated":{"line":5201,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5202,"column":0},"generated":{"line":5202,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5203,"column":0},"generated":{"line":5203,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5204,"column":0},"generated":{"line":5204,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5205,"column":0},"generated":{"line":5205,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5206,"column":0},"generated":{"line":5206,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5207,"column":0},"generated":{"line":5207,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5208,"column":0},"generated":{"line":5208,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5209,"column":0},"generated":{"line":5209,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5210,"column":0},"generated":{"line":5210,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5211,"column":0},"generated":{"line":5211,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5212,"column":0},"generated":{"line":5212,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5213,"column":0},"generated":{"line":5213,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5214,"column":0},"generated":{"line":5214,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5215,"column":0},"generated":{"line":5215,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5216,"column":0},"generated":{"line":5216,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5217,"column":0},"generated":{"line":5217,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5218,"column":0},"generated":{"line":5218,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5219,"column":0},"generated":{"line":5219,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5220,"column":0},"generated":{"line":5220,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5221,"column":0},"generated":{"line":5221,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5222,"column":0},"generated":{"line":5222,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5223,"column":0},"generated":{"line":5223,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5224,"column":0},"generated":{"line":5224,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5225,"column":0},"generated":{"line":5225,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5226,"column":0},"generated":{"line":5226,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5227,"column":0},"generated":{"line":5227,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5228,"column":0},"generated":{"line":5228,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5229,"column":0},"generated":{"line":5229,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5230,"column":0},"generated":{"line":5230,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5231,"column":0},"generated":{"line":5231,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5232,"column":0},"generated":{"line":5232,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5233,"column":0},"generated":{"line":5233,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5234,"column":0},"generated":{"line":5234,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5235,"column":0},"generated":{"line":5235,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5236,"column":0},"generated":{"line":5236,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5237,"column":0},"generated":{"line":5237,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5238,"column":0},"generated":{"line":5238,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5239,"column":0},"generated":{"line":5239,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5240,"column":0},"generated":{"line":5240,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5241,"column":0},"generated":{"line":5241,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5242,"column":0},"generated":{"line":5242,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5243,"column":0},"generated":{"line":5243,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5244,"column":0},"generated":{"line":5244,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5245,"column":0},"generated":{"line":5245,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5246,"column":0},"generated":{"line":5246,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5247,"column":0},"generated":{"line":5247,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5248,"column":0},"generated":{"line":5248,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5249,"column":0},"generated":{"line":5249,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5250,"column":0},"generated":{"line":5250,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5251,"column":0},"generated":{"line":5251,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5252,"column":0},"generated":{"line":5252,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5253,"column":0},"generated":{"line":5253,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5254,"column":0},"generated":{"line":5254,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5255,"column":0},"generated":{"line":5255,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5256,"column":0},"generated":{"line":5256,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5257,"column":0},"generated":{"line":5257,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5258,"column":0},"generated":{"line":5258,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5259,"column":0},"generated":{"line":5259,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5260,"column":0},"generated":{"line":5260,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5261,"column":0},"generated":{"line":5261,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5262,"column":0},"generated":{"line":5262,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5263,"column":0},"generated":{"line":5263,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5264,"column":0},"generated":{"line":5264,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5265,"column":0},"generated":{"line":5265,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5266,"column":0},"generated":{"line":5266,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5267,"column":0},"generated":{"line":5267,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5268,"column":0},"generated":{"line":5268,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5269,"column":0},"generated":{"line":5269,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5270,"column":0},"generated":{"line":5270,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5271,"column":0},"generated":{"line":5271,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5272,"column":0},"generated":{"line":5272,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5273,"column":0},"generated":{"line":5273,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5274,"column":0},"generated":{"line":5274,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5275,"column":0},"generated":{"line":5275,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5276,"column":0},"generated":{"line":5276,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5277,"column":0},"generated":{"line":5277,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5278,"column":0},"generated":{"line":5278,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5279,"column":0},"generated":{"line":5279,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5280,"column":0},"generated":{"line":5280,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5281,"column":0},"generated":{"line":5281,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5282,"column":0},"generated":{"line":5282,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5283,"column":0},"generated":{"line":5283,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5284,"column":0},"generated":{"line":5284,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5285,"column":0},"generated":{"line":5285,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5286,"column":0},"generated":{"line":5286,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5287,"column":0},"generated":{"line":5287,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5288,"column":0},"generated":{"line":5288,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5289,"column":0},"generated":{"line":5289,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5290,"column":0},"generated":{"line":5290,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5291,"column":0},"generated":{"line":5291,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5292,"column":0},"generated":{"line":5292,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5293,"column":0},"generated":{"line":5293,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5294,"column":0},"generated":{"line":5294,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5295,"column":0},"generated":{"line":5295,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5296,"column":0},"generated":{"line":5296,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5297,"column":0},"generated":{"line":5297,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5298,"column":0},"generated":{"line":5298,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5299,"column":0},"generated":{"line":5299,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5300,"column":0},"generated":{"line":5300,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5301,"column":0},"generated":{"line":5301,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5302,"column":0},"generated":{"line":5302,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5303,"column":0},"generated":{"line":5303,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5304,"column":0},"generated":{"line":5304,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5305,"column":0},"generated":{"line":5305,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5306,"column":0},"generated":{"line":5306,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5307,"column":0},"generated":{"line":5307,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5308,"column":0},"generated":{"line":5308,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5309,"column":0},"generated":{"line":5309,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5310,"column":0},"generated":{"line":5310,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5311,"column":0},"generated":{"line":5311,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5312,"column":0},"generated":{"line":5312,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5313,"column":0},"generated":{"line":5313,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5314,"column":0},"generated":{"line":5314,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5315,"column":0},"generated":{"line":5315,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5316,"column":0},"generated":{"line":5316,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5317,"column":0},"generated":{"line":5317,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5318,"column":0},"generated":{"line":5318,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5319,"column":0},"generated":{"line":5319,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5320,"column":0},"generated":{"line":5320,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5321,"column":0},"generated":{"line":5321,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5322,"column":0},"generated":{"line":5322,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5323,"column":0},"generated":{"line":5323,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5324,"column":0},"generated":{"line":5324,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5325,"column":0},"generated":{"line":5325,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5326,"column":0},"generated":{"line":5326,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5327,"column":0},"generated":{"line":5327,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5328,"column":0},"generated":{"line":5328,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5329,"column":0},"generated":{"line":5329,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5330,"column":0},"generated":{"line":5330,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5331,"column":0},"generated":{"line":5331,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5332,"column":0},"generated":{"line":5332,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5333,"column":0},"generated":{"line":5333,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5334,"column":0},"generated":{"line":5334,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5335,"column":0},"generated":{"line":5335,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5336,"column":0},"generated":{"line":5336,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5337,"column":0},"generated":{"line":5337,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5338,"column":0},"generated":{"line":5338,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5339,"column":0},"generated":{"line":5339,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5340,"column":0},"generated":{"line":5340,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5341,"column":0},"generated":{"line":5341,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5342,"column":0},"generated":{"line":5342,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5343,"column":0},"generated":{"line":5343,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5344,"column":0},"generated":{"line":5344,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5345,"column":0},"generated":{"line":5345,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5346,"column":0},"generated":{"line":5346,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5347,"column":0},"generated":{"line":5347,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5348,"column":0},"generated":{"line":5348,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5349,"column":0},"generated":{"line":5349,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5350,"column":0},"generated":{"line":5350,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5351,"column":0},"generated":{"line":5351,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5352,"column":0},"generated":{"line":5352,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5353,"column":0},"generated":{"line":5353,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5354,"column":0},"generated":{"line":5354,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5355,"column":0},"generated":{"line":5355,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5356,"column":0},"generated":{"line":5356,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5357,"column":0},"generated":{"line":5357,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5358,"column":0},"generated":{"line":5358,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5359,"column":0},"generated":{"line":5359,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5360,"column":0},"generated":{"line":5360,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5361,"column":0},"generated":{"line":5361,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5362,"column":0},"generated":{"line":5362,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5363,"column":0},"generated":{"line":5363,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5364,"column":0},"generated":{"line":5364,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5365,"column":0},"generated":{"line":5365,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5366,"column":0},"generated":{"line":5366,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5367,"column":0},"generated":{"line":5367,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5368,"column":0},"generated":{"line":5368,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5369,"column":0},"generated":{"line":5369,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5370,"column":0},"generated":{"line":5370,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5371,"column":0},"generated":{"line":5371,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5372,"column":0},"generated":{"line":5372,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5373,"column":0},"generated":{"line":5373,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5374,"column":0},"generated":{"line":5374,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5375,"column":0},"generated":{"line":5375,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5376,"column":0},"generated":{"line":5376,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5377,"column":0},"generated":{"line":5377,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5378,"column":0},"generated":{"line":5378,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5379,"column":0},"generated":{"line":5379,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5380,"column":0},"generated":{"line":5380,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5381,"column":0},"generated":{"line":5381,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5382,"column":0},"generated":{"line":5382,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5383,"column":0},"generated":{"line":5383,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5384,"column":0},"generated":{"line":5384,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5385,"column":0},"generated":{"line":5385,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5386,"column":0},"generated":{"line":5386,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5387,"column":0},"generated":{"line":5387,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5388,"column":0},"generated":{"line":5388,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5389,"column":0},"generated":{"line":5389,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5390,"column":0},"generated":{"line":5390,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5391,"column":0},"generated":{"line":5391,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5392,"column":0},"generated":{"line":5392,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5393,"column":0},"generated":{"line":5393,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5394,"column":0},"generated":{"line":5394,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5395,"column":0},"generated":{"line":5395,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5396,"column":0},"generated":{"line":5396,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5397,"column":0},"generated":{"line":5397,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5398,"column":0},"generated":{"line":5398,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5399,"column":0},"generated":{"line":5399,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5400,"column":0},"generated":{"line":5400,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5401,"column":0},"generated":{"line":5401,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5402,"column":0},"generated":{"line":5402,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5403,"column":0},"generated":{"line":5403,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5404,"column":0},"generated":{"line":5404,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5405,"column":0},"generated":{"line":5405,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5406,"column":0},"generated":{"line":5406,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5407,"column":0},"generated":{"line":5407,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5408,"column":0},"generated":{"line":5408,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5409,"column":0},"generated":{"line":5409,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5410,"column":0},"generated":{"line":5410,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5411,"column":0},"generated":{"line":5411,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5412,"column":0},"generated":{"line":5412,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5413,"column":0},"generated":{"line":5413,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5414,"column":0},"generated":{"line":5414,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5415,"column":0},"generated":{"line":5415,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5416,"column":0},"generated":{"line":5416,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5417,"column":0},"generated":{"line":5417,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5418,"column":0},"generated":{"line":5418,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5419,"column":0},"generated":{"line":5419,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5420,"column":0},"generated":{"line":5420,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5421,"column":0},"generated":{"line":5421,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5422,"column":0},"generated":{"line":5422,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5423,"column":0},"generated":{"line":5423,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5424,"column":0},"generated":{"line":5424,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5425,"column":0},"generated":{"line":5425,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5426,"column":0},"generated":{"line":5426,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5427,"column":0},"generated":{"line":5427,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5428,"column":0},"generated":{"line":5428,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5429,"column":0},"generated":{"line":5429,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5430,"column":0},"generated":{"line":5430,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5431,"column":0},"generated":{"line":5431,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5432,"column":0},"generated":{"line":5432,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5433,"column":0},"generated":{"line":5433,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5434,"column":0},"generated":{"line":5434,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5435,"column":0},"generated":{"line":5435,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5436,"column":0},"generated":{"line":5436,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5437,"column":0},"generated":{"line":5437,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5438,"column":0},"generated":{"line":5438,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5439,"column":0},"generated":{"line":5439,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5440,"column":0},"generated":{"line":5440,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5441,"column":0},"generated":{"line":5441,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5442,"column":0},"generated":{"line":5442,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5443,"column":0},"generated":{"line":5443,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5444,"column":0},"generated":{"line":5444,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5445,"column":0},"generated":{"line":5445,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5446,"column":0},"generated":{"line":5446,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5447,"column":0},"generated":{"line":5447,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5448,"column":0},"generated":{"line":5448,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5449,"column":0},"generated":{"line":5449,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5450,"column":0},"generated":{"line":5450,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5451,"column":0},"generated":{"line":5451,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5452,"column":0},"generated":{"line":5452,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5453,"column":0},"generated":{"line":5453,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5454,"column":0},"generated":{"line":5454,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5455,"column":0},"generated":{"line":5455,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5456,"column":0},"generated":{"line":5456,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5457,"column":0},"generated":{"line":5457,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5458,"column":0},"generated":{"line":5458,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5459,"column":0},"generated":{"line":5459,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5460,"column":0},"generated":{"line":5460,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5461,"column":0},"generated":{"line":5461,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5462,"column":0},"generated":{"line":5462,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5463,"column":0},"generated":{"line":5463,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5464,"column":0},"generated":{"line":5464,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5465,"column":0},"generated":{"line":5465,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5466,"column":0},"generated":{"line":5466,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5467,"column":0},"generated":{"line":5467,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5468,"column":0},"generated":{"line":5468,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5469,"column":0},"generated":{"line":5469,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5470,"column":0},"generated":{"line":5470,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5471,"column":0},"generated":{"line":5471,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5472,"column":0},"generated":{"line":5472,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5473,"column":0},"generated":{"line":5473,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5474,"column":0},"generated":{"line":5474,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5475,"column":0},"generated":{"line":5475,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5476,"column":0},"generated":{"line":5476,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5477,"column":0},"generated":{"line":5477,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5478,"column":0},"generated":{"line":5478,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5479,"column":0},"generated":{"line":5479,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5480,"column":0},"generated":{"line":5480,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5481,"column":0},"generated":{"line":5481,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5482,"column":0},"generated":{"line":5482,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5483,"column":0},"generated":{"line":5483,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5484,"column":0},"generated":{"line":5484,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5485,"column":0},"generated":{"line":5485,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5486,"column":0},"generated":{"line":5486,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5487,"column":0},"generated":{"line":5487,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5488,"column":0},"generated":{"line":5488,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5489,"column":0},"generated":{"line":5489,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5490,"column":0},"generated":{"line":5490,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5491,"column":0},"generated":{"line":5491,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5492,"column":0},"generated":{"line":5492,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5493,"column":0},"generated":{"line":5493,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5494,"column":0},"generated":{"line":5494,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5495,"column":0},"generated":{"line":5495,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5496,"column":0},"generated":{"line":5496,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5497,"column":0},"generated":{"line":5497,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5498,"column":0},"generated":{"line":5498,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5499,"column":0},"generated":{"line":5499,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5500,"column":0},"generated":{"line":5500,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5501,"column":0},"generated":{"line":5501,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5502,"column":0},"generated":{"line":5502,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5503,"column":0},"generated":{"line":5503,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5504,"column":0},"generated":{"line":5504,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5505,"column":0},"generated":{"line":5505,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5506,"column":0},"generated":{"line":5506,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5507,"column":0},"generated":{"line":5507,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5508,"column":0},"generated":{"line":5508,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5509,"column":0},"generated":{"line":5509,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5510,"column":0},"generated":{"line":5510,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5511,"column":0},"generated":{"line":5511,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5512,"column":0},"generated":{"line":5512,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5513,"column":0},"generated":{"line":5513,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5514,"column":0},"generated":{"line":5514,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5515,"column":0},"generated":{"line":5515,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5516,"column":0},"generated":{"line":5516,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5517,"column":0},"generated":{"line":5517,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5518,"column":0},"generated":{"line":5518,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5519,"column":0},"generated":{"line":5519,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5520,"column":0},"generated":{"line":5520,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5521,"column":0},"generated":{"line":5521,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5522,"column":0},"generated":{"line":5522,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5523,"column":0},"generated":{"line":5523,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5524,"column":0},"generated":{"line":5524,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5525,"column":0},"generated":{"line":5525,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5526,"column":0},"generated":{"line":5526,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5527,"column":0},"generated":{"line":5527,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5528,"column":0},"generated":{"line":5528,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5529,"column":0},"generated":{"line":5529,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5530,"column":0},"generated":{"line":5530,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5531,"column":0},"generated":{"line":5531,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5532,"column":0},"generated":{"line":5532,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5533,"column":0},"generated":{"line":5533,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5534,"column":0},"generated":{"line":5534,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5535,"column":0},"generated":{"line":5535,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5536,"column":0},"generated":{"line":5536,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5537,"column":0},"generated":{"line":5537,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5538,"column":0},"generated":{"line":5538,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5539,"column":0},"generated":{"line":5539,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5540,"column":0},"generated":{"line":5540,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5541,"column":0},"generated":{"line":5541,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5542,"column":0},"generated":{"line":5542,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5543,"column":0},"generated":{"line":5543,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5544,"column":0},"generated":{"line":5544,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5545,"column":0},"generated":{"line":5545,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5546,"column":0},"generated":{"line":5546,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5547,"column":0},"generated":{"line":5547,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5548,"column":0},"generated":{"line":5548,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5549,"column":0},"generated":{"line":5549,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5550,"column":0},"generated":{"line":5550,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5551,"column":0},"generated":{"line":5551,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5552,"column":0},"generated":{"line":5552,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5553,"column":0},"generated":{"line":5553,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5554,"column":0},"generated":{"line":5554,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5555,"column":0},"generated":{"line":5555,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5556,"column":0},"generated":{"line":5556,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5557,"column":0},"generated":{"line":5557,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5558,"column":0},"generated":{"line":5558,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5559,"column":0},"generated":{"line":5559,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5560,"column":0},"generated":{"line":5560,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5561,"column":0},"generated":{"line":5561,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5562,"column":0},"generated":{"line":5562,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5563,"column":0},"generated":{"line":5563,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5564,"column":0},"generated":{"line":5564,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5565,"column":0},"generated":{"line":5565,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5566,"column":0},"generated":{"line":5566,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5567,"column":0},"generated":{"line":5567,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5568,"column":0},"generated":{"line":5568,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5569,"column":0},"generated":{"line":5569,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5570,"column":0},"generated":{"line":5570,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5571,"column":0},"generated":{"line":5571,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5572,"column":0},"generated":{"line":5572,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5573,"column":0},"generated":{"line":5573,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5574,"column":0},"generated":{"line":5574,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5575,"column":0},"generated":{"line":5575,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5576,"column":0},"generated":{"line":5576,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5577,"column":0},"generated":{"line":5577,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5578,"column":0},"generated":{"line":5578,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5579,"column":0},"generated":{"line":5579,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5580,"column":0},"generated":{"line":5580,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5581,"column":0},"generated":{"line":5581,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5582,"column":0},"generated":{"line":5582,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5583,"column":0},"generated":{"line":5583,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5584,"column":0},"generated":{"line":5584,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5585,"column":0},"generated":{"line":5585,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5586,"column":0},"generated":{"line":5586,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5587,"column":0},"generated":{"line":5587,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5588,"column":0},"generated":{"line":5588,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5589,"column":0},"generated":{"line":5589,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5590,"column":0},"generated":{"line":5590,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5591,"column":0},"generated":{"line":5591,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5592,"column":0},"generated":{"line":5592,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5593,"column":0},"generated":{"line":5593,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5594,"column":0},"generated":{"line":5594,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5595,"column":0},"generated":{"line":5595,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5596,"column":0},"generated":{"line":5596,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5597,"column":0},"generated":{"line":5597,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5598,"column":0},"generated":{"line":5598,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5599,"column":0},"generated":{"line":5599,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5600,"column":0},"generated":{"line":5600,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5601,"column":0},"generated":{"line":5601,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5602,"column":0},"generated":{"line":5602,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5603,"column":0},"generated":{"line":5603,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5604,"column":0},"generated":{"line":5604,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5605,"column":0},"generated":{"line":5605,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5606,"column":0},"generated":{"line":5606,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5607,"column":0},"generated":{"line":5607,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5608,"column":0},"generated":{"line":5608,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5609,"column":0},"generated":{"line":5609,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5610,"column":0},"generated":{"line":5610,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5611,"column":0},"generated":{"line":5611,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5612,"column":0},"generated":{"line":5612,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5613,"column":0},"generated":{"line":5613,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5614,"column":0},"generated":{"line":5614,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5615,"column":0},"generated":{"line":5615,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5616,"column":0},"generated":{"line":5616,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5617,"column":0},"generated":{"line":5617,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5618,"column":0},"generated":{"line":5618,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5619,"column":0},"generated":{"line":5619,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5620,"column":0},"generated":{"line":5620,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5621,"column":0},"generated":{"line":5621,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5622,"column":0},"generated":{"line":5622,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5623,"column":0},"generated":{"line":5623,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5624,"column":0},"generated":{"line":5624,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5625,"column":0},"generated":{"line":5625,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5626,"column":0},"generated":{"line":5626,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5627,"column":0},"generated":{"line":5627,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5628,"column":0},"generated":{"line":5628,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5629,"column":0},"generated":{"line":5629,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5630,"column":0},"generated":{"line":5630,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5631,"column":0},"generated":{"line":5631,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5632,"column":0},"generated":{"line":5632,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5633,"column":0},"generated":{"line":5633,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5634,"column":0},"generated":{"line":5634,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5635,"column":0},"generated":{"line":5635,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5636,"column":0},"generated":{"line":5636,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5637,"column":0},"generated":{"line":5637,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5638,"column":0},"generated":{"line":5638,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5639,"column":0},"generated":{"line":5639,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5640,"column":0},"generated":{"line":5640,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5641,"column":0},"generated":{"line":5641,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5642,"column":0},"generated":{"line":5642,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5643,"column":0},"generated":{"line":5643,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5644,"column":0},"generated":{"line":5644,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5645,"column":0},"generated":{"line":5645,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5646,"column":0},"generated":{"line":5646,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5647,"column":0},"generated":{"line":5647,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5648,"column":0},"generated":{"line":5648,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5649,"column":0},"generated":{"line":5649,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5650,"column":0},"generated":{"line":5650,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5651,"column":0},"generated":{"line":5651,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5652,"column":0},"generated":{"line":5652,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5653,"column":0},"generated":{"line":5653,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5654,"column":0},"generated":{"line":5654,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5655,"column":0},"generated":{"line":5655,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5656,"column":0},"generated":{"line":5656,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5657,"column":0},"generated":{"line":5657,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5658,"column":0},"generated":{"line":5658,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5659,"column":0},"generated":{"line":5659,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5660,"column":0},"generated":{"line":5660,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5661,"column":0},"generated":{"line":5661,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5662,"column":0},"generated":{"line":5662,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5663,"column":0},"generated":{"line":5663,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5664,"column":0},"generated":{"line":5664,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5665,"column":0},"generated":{"line":5665,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5666,"column":0},"generated":{"line":5666,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5667,"column":0},"generated":{"line":5667,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5668,"column":0},"generated":{"line":5668,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5669,"column":0},"generated":{"line":5669,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5670,"column":0},"generated":{"line":5670,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5671,"column":0},"generated":{"line":5671,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5672,"column":0},"generated":{"line":5672,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5673,"column":0},"generated":{"line":5673,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5674,"column":0},"generated":{"line":5674,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5675,"column":0},"generated":{"line":5675,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5676,"column":0},"generated":{"line":5676,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5677,"column":0},"generated":{"line":5677,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5678,"column":0},"generated":{"line":5678,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5679,"column":0},"generated":{"line":5679,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5680,"column":0},"generated":{"line":5680,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5681,"column":0},"generated":{"line":5681,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5682,"column":0},"generated":{"line":5682,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5683,"column":0},"generated":{"line":5683,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5684,"column":0},"generated":{"line":5684,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5685,"column":0},"generated":{"line":5685,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5686,"column":0},"generated":{"line":5686,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5687,"column":0},"generated":{"line":5687,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5688,"column":0},"generated":{"line":5688,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5689,"column":0},"generated":{"line":5689,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5690,"column":0},"generated":{"line":5690,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5691,"column":0},"generated":{"line":5691,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5692,"column":0},"generated":{"line":5692,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5693,"column":0},"generated":{"line":5693,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5694,"column":0},"generated":{"line":5694,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5695,"column":0},"generated":{"line":5695,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5696,"column":0},"generated":{"line":5696,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5697,"column":0},"generated":{"line":5697,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5698,"column":0},"generated":{"line":5698,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5699,"column":0},"generated":{"line":5699,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5700,"column":0},"generated":{"line":5700,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5701,"column":0},"generated":{"line":5701,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5702,"column":0},"generated":{"line":5702,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5703,"column":0},"generated":{"line":5703,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5704,"column":0},"generated":{"line":5704,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5705,"column":0},"generated":{"line":5705,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5706,"column":0},"generated":{"line":5706,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5707,"column":0},"generated":{"line":5707,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5708,"column":0},"generated":{"line":5708,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5709,"column":0},"generated":{"line":5709,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5710,"column":0},"generated":{"line":5710,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5711,"column":0},"generated":{"line":5711,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5712,"column":0},"generated":{"line":5712,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5713,"column":0},"generated":{"line":5713,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5714,"column":0},"generated":{"line":5714,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5715,"column":0},"generated":{"line":5715,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5716,"column":0},"generated":{"line":5716,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5717,"column":0},"generated":{"line":5717,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5718,"column":0},"generated":{"line":5718,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5719,"column":0},"generated":{"line":5719,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5720,"column":0},"generated":{"line":5720,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5721,"column":0},"generated":{"line":5721,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5722,"column":0},"generated":{"line":5722,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5723,"column":0},"generated":{"line":5723,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5724,"column":0},"generated":{"line":5724,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5725,"column":0},"generated":{"line":5725,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5726,"column":0},"generated":{"line":5726,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5727,"column":0},"generated":{"line":5727,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5728,"column":0},"generated":{"line":5728,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5729,"column":0},"generated":{"line":5729,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5730,"column":0},"generated":{"line":5730,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5731,"column":0},"generated":{"line":5731,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5732,"column":0},"generated":{"line":5732,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5733,"column":0},"generated":{"line":5733,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5734,"column":0},"generated":{"line":5734,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5735,"column":0},"generated":{"line":5735,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5736,"column":0},"generated":{"line":5736,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5737,"column":0},"generated":{"line":5737,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5738,"column":0},"generated":{"line":5738,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5739,"column":0},"generated":{"line":5739,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5740,"column":0},"generated":{"line":5740,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5741,"column":0},"generated":{"line":5741,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5742,"column":0},"generated":{"line":5742,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5743,"column":0},"generated":{"line":5743,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5744,"column":0},"generated":{"line":5744,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5745,"column":0},"generated":{"line":5745,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5746,"column":0},"generated":{"line":5746,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5747,"column":0},"generated":{"line":5747,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5748,"column":0},"generated":{"line":5748,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5749,"column":0},"generated":{"line":5749,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5750,"column":0},"generated":{"line":5750,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5751,"column":0},"generated":{"line":5751,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5752,"column":0},"generated":{"line":5752,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5753,"column":0},"generated":{"line":5753,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5754,"column":0},"generated":{"line":5754,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5755,"column":0},"generated":{"line":5755,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5756,"column":0},"generated":{"line":5756,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5757,"column":0},"generated":{"line":5757,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5758,"column":0},"generated":{"line":5758,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5759,"column":0},"generated":{"line":5759,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5760,"column":0},"generated":{"line":5760,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5761,"column":0},"generated":{"line":5761,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5762,"column":0},"generated":{"line":5762,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5763,"column":0},"generated":{"line":5763,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5764,"column":0},"generated":{"line":5764,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5765,"column":0},"generated":{"line":5765,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5766,"column":0},"generated":{"line":5766,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5767,"column":0},"generated":{"line":5767,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5768,"column":0},"generated":{"line":5768,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5769,"column":0},"generated":{"line":5769,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5770,"column":0},"generated":{"line":5770,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5771,"column":0},"generated":{"line":5771,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5772,"column":0},"generated":{"line":5772,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5773,"column":0},"generated":{"line":5773,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5774,"column":0},"generated":{"line":5774,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5775,"column":0},"generated":{"line":5775,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5776,"column":0},"generated":{"line":5776,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5777,"column":0},"generated":{"line":5777,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5778,"column":0},"generated":{"line":5778,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5779,"column":0},"generated":{"line":5779,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5780,"column":0},"generated":{"line":5780,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5781,"column":0},"generated":{"line":5781,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5782,"column":0},"generated":{"line":5782,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5783,"column":0},"generated":{"line":5783,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5784,"column":0},"generated":{"line":5784,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5785,"column":0},"generated":{"line":5785,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5786,"column":0},"generated":{"line":5786,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5787,"column":0},"generated":{"line":5787,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5788,"column":0},"generated":{"line":5788,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5789,"column":0},"generated":{"line":5789,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5790,"column":0},"generated":{"line":5790,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5791,"column":0},"generated":{"line":5791,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5792,"column":0},"generated":{"line":5792,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5793,"column":0},"generated":{"line":5793,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5794,"column":0},"generated":{"line":5794,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5795,"column":0},"generated":{"line":5795,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5796,"column":0},"generated":{"line":5796,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5797,"column":0},"generated":{"line":5797,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5798,"column":0},"generated":{"line":5798,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5799,"column":0},"generated":{"line":5799,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5800,"column":0},"generated":{"line":5800,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5801,"column":0},"generated":{"line":5801,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5802,"column":0},"generated":{"line":5802,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5803,"column":0},"generated":{"line":5803,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5804,"column":0},"generated":{"line":5804,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5805,"column":0},"generated":{"line":5805,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5806,"column":0},"generated":{"line":5806,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5807,"column":0},"generated":{"line":5807,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5808,"column":0},"generated":{"line":5808,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5809,"column":0},"generated":{"line":5809,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5810,"column":0},"generated":{"line":5810,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5811,"column":0},"generated":{"line":5811,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5812,"column":0},"generated":{"line":5812,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5813,"column":0},"generated":{"line":5813,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5814,"column":0},"generated":{"line":5814,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5815,"column":0},"generated":{"line":5815,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5816,"column":0},"generated":{"line":5816,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5817,"column":0},"generated":{"line":5817,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5818,"column":0},"generated":{"line":5818,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5819,"column":0},"generated":{"line":5819,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5820,"column":0},"generated":{"line":5820,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5821,"column":0},"generated":{"line":5821,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5822,"column":0},"generated":{"line":5822,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5823,"column":0},"generated":{"line":5823,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5824,"column":0},"generated":{"line":5824,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5825,"column":0},"generated":{"line":5825,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5826,"column":0},"generated":{"line":5826,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5827,"column":0},"generated":{"line":5827,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5828,"column":0},"generated":{"line":5828,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5829,"column":0},"generated":{"line":5829,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5830,"column":0},"generated":{"line":5830,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5831,"column":0},"generated":{"line":5831,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5832,"column":0},"generated":{"line":5832,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5833,"column":0},"generated":{"line":5833,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5834,"column":0},"generated":{"line":5834,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5835,"column":0},"generated":{"line":5835,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5836,"column":0},"generated":{"line":5836,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5837,"column":0},"generated":{"line":5837,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5838,"column":0},"generated":{"line":5838,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5839,"column":0},"generated":{"line":5839,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5840,"column":0},"generated":{"line":5840,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5841,"column":0},"generated":{"line":5841,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5842,"column":0},"generated":{"line":5842,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5843,"column":0},"generated":{"line":5843,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5844,"column":0},"generated":{"line":5844,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5845,"column":0},"generated":{"line":5845,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5846,"column":0},"generated":{"line":5846,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5847,"column":0},"generated":{"line":5847,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5848,"column":0},"generated":{"line":5848,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5849,"column":0},"generated":{"line":5849,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5850,"column":0},"generated":{"line":5850,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5851,"column":0},"generated":{"line":5851,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5852,"column":0},"generated":{"line":5852,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5853,"column":0},"generated":{"line":5853,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5854,"column":0},"generated":{"line":5854,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5855,"column":0},"generated":{"line":5855,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5856,"column":0},"generated":{"line":5856,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5857,"column":0},"generated":{"line":5857,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5858,"column":0},"generated":{"line":5858,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5859,"column":0},"generated":{"line":5859,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5860,"column":0},"generated":{"line":5860,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5861,"column":0},"generated":{"line":5861,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5862,"column":0},"generated":{"line":5862,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5863,"column":0},"generated":{"line":5863,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5864,"column":0},"generated":{"line":5864,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5865,"column":0},"generated":{"line":5865,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5866,"column":0},"generated":{"line":5866,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5867,"column":0},"generated":{"line":5867,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5868,"column":0},"generated":{"line":5868,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5869,"column":0},"generated":{"line":5869,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5870,"column":0},"generated":{"line":5870,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5871,"column":0},"generated":{"line":5871,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5872,"column":0},"generated":{"line":5872,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5873,"column":0},"generated":{"line":5873,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5874,"column":0},"generated":{"line":5874,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5875,"column":0},"generated":{"line":5875,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5876,"column":0},"generated":{"line":5876,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5877,"column":0},"generated":{"line":5877,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5878,"column":0},"generated":{"line":5878,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5879,"column":0},"generated":{"line":5879,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5880,"column":0},"generated":{"line":5880,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5881,"column":0},"generated":{"line":5881,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5882,"column":0},"generated":{"line":5882,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5883,"column":0},"generated":{"line":5883,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5884,"column":0},"generated":{"line":5884,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5885,"column":0},"generated":{"line":5885,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5886,"column":0},"generated":{"line":5886,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5887,"column":0},"generated":{"line":5887,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5888,"column":0},"generated":{"line":5888,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5889,"column":0},"generated":{"line":5889,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5890,"column":0},"generated":{"line":5890,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5891,"column":0},"generated":{"line":5891,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5892,"column":0},"generated":{"line":5892,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5893,"column":0},"generated":{"line":5893,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5894,"column":0},"generated":{"line":5894,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5895,"column":0},"generated":{"line":5895,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5896,"column":0},"generated":{"line":5896,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5897,"column":0},"generated":{"line":5897,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5898,"column":0},"generated":{"line":5898,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5899,"column":0},"generated":{"line":5899,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5900,"column":0},"generated":{"line":5900,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5901,"column":0},"generated":{"line":5901,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5902,"column":0},"generated":{"line":5902,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5903,"column":0},"generated":{"line":5903,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5904,"column":0},"generated":{"line":5904,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5905,"column":0},"generated":{"line":5905,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5906,"column":0},"generated":{"line":5906,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5907,"column":0},"generated":{"line":5907,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5908,"column":0},"generated":{"line":5908,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5909,"column":0},"generated":{"line":5909,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5910,"column":0},"generated":{"line":5910,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5911,"column":0},"generated":{"line":5911,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5912,"column":0},"generated":{"line":5912,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5913,"column":0},"generated":{"line":5913,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5914,"column":0},"generated":{"line":5914,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5915,"column":0},"generated":{"line":5915,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5916,"column":0},"generated":{"line":5916,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5917,"column":0},"generated":{"line":5917,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5918,"column":0},"generated":{"line":5918,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5919,"column":0},"generated":{"line":5919,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5920,"column":0},"generated":{"line":5920,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5921,"column":0},"generated":{"line":5921,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5922,"column":0},"generated":{"line":5922,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5923,"column":0},"generated":{"line":5923,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5924,"column":0},"generated":{"line":5924,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5925,"column":0},"generated":{"line":5925,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5926,"column":0},"generated":{"line":5926,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5927,"column":0},"generated":{"line":5927,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5928,"column":0},"generated":{"line":5928,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5929,"column":0},"generated":{"line":5929,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5930,"column":0},"generated":{"line":5930,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5931,"column":0},"generated":{"line":5931,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5932,"column":0},"generated":{"line":5932,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5933,"column":0},"generated":{"line":5933,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5934,"column":0},"generated":{"line":5934,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5935,"column":0},"generated":{"line":5935,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5936,"column":0},"generated":{"line":5936,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5937,"column":0},"generated":{"line":5937,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5938,"column":0},"generated":{"line":5938,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5939,"column":0},"generated":{"line":5939,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5940,"column":0},"generated":{"line":5940,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5941,"column":0},"generated":{"line":5941,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5942,"column":0},"generated":{"line":5942,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5943,"column":0},"generated":{"line":5943,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5944,"column":0},"generated":{"line":5944,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5945,"column":0},"generated":{"line":5945,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5946,"column":0},"generated":{"line":5946,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5947,"column":0},"generated":{"line":5947,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5948,"column":0},"generated":{"line":5948,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5949,"column":0},"generated":{"line":5949,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5950,"column":0},"generated":{"line":5950,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5951,"column":0},"generated":{"line":5951,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5952,"column":0},"generated":{"line":5952,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5953,"column":0},"generated":{"line":5953,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5954,"column":0},"generated":{"line":5954,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5955,"column":0},"generated":{"line":5955,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5956,"column":0},"generated":{"line":5956,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5957,"column":0},"generated":{"line":5957,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5958,"column":0},"generated":{"line":5958,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5959,"column":0},"generated":{"line":5959,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5960,"column":0},"generated":{"line":5960,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5961,"column":0},"generated":{"line":5961,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5962,"column":0},"generated":{"line":5962,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5963,"column":0},"generated":{"line":5963,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5964,"column":0},"generated":{"line":5964,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5965,"column":0},"generated":{"line":5965,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5966,"column":0},"generated":{"line":5966,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5967,"column":0},"generated":{"line":5967,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5968,"column":0},"generated":{"line":5968,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5969,"column":0},"generated":{"line":5969,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5970,"column":0},"generated":{"line":5970,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5971,"column":0},"generated":{"line":5971,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5972,"column":0},"generated":{"line":5972,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5973,"column":0},"generated":{"line":5973,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5974,"column":0},"generated":{"line":5974,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5975,"column":0},"generated":{"line":5975,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5976,"column":0},"generated":{"line":5976,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5977,"column":0},"generated":{"line":5977,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5978,"column":0},"generated":{"line":5978,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5979,"column":0},"generated":{"line":5979,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5980,"column":0},"generated":{"line":5980,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5981,"column":0},"generated":{"line":5981,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5982,"column":0},"generated":{"line":5982,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5983,"column":0},"generated":{"line":5983,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5984,"column":0},"generated":{"line":5984,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5985,"column":0},"generated":{"line":5985,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5986,"column":0},"generated":{"line":5986,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5987,"column":0},"generated":{"line":5987,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5988,"column":0},"generated":{"line":5988,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5989,"column":0},"generated":{"line":5989,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5990,"column":0},"generated":{"line":5990,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5991,"column":0},"generated":{"line":5991,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5992,"column":0},"generated":{"line":5992,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5993,"column":0},"generated":{"line":5993,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5994,"column":0},"generated":{"line":5994,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5995,"column":0},"generated":{"line":5995,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5996,"column":0},"generated":{"line":5996,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5997,"column":0},"generated":{"line":5997,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5998,"column":0},"generated":{"line":5998,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":5999,"column":0},"generated":{"line":5999,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6000,"column":0},"generated":{"line":6000,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6001,"column":0},"generated":{"line":6001,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6002,"column":0},"generated":{"line":6002,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6003,"column":0},"generated":{"line":6003,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6004,"column":0},"generated":{"line":6004,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6005,"column":0},"generated":{"line":6005,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6006,"column":0},"generated":{"line":6006,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6007,"column":0},"generated":{"line":6007,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6008,"column":0},"generated":{"line":6008,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6009,"column":0},"generated":{"line":6009,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6010,"column":0},"generated":{"line":6010,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6011,"column":0},"generated":{"line":6011,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6012,"column":0},"generated":{"line":6012,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6013,"column":0},"generated":{"line":6013,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6014,"column":0},"generated":{"line":6014,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6015,"column":0},"generated":{"line":6015,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6016,"column":0},"generated":{"line":6016,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6017,"column":0},"generated":{"line":6017,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6018,"column":0},"generated":{"line":6018,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6019,"column":0},"generated":{"line":6019,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6020,"column":0},"generated":{"line":6020,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6021,"column":0},"generated":{"line":6021,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6022,"column":0},"generated":{"line":6022,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6023,"column":0},"generated":{"line":6023,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6024,"column":0},"generated":{"line":6024,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6025,"column":0},"generated":{"line":6025,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6026,"column":0},"generated":{"line":6026,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6027,"column":0},"generated":{"line":6027,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6028,"column":0},"generated":{"line":6028,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6029,"column":0},"generated":{"line":6029,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6030,"column":0},"generated":{"line":6030,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6031,"column":0},"generated":{"line":6031,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6032,"column":0},"generated":{"line":6032,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6033,"column":0},"generated":{"line":6033,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6034,"column":0},"generated":{"line":6034,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6035,"column":0},"generated":{"line":6035,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6036,"column":0},"generated":{"line":6036,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6037,"column":0},"generated":{"line":6037,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6038,"column":0},"generated":{"line":6038,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6039,"column":0},"generated":{"line":6039,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6040,"column":0},"generated":{"line":6040,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6041,"column":0},"generated":{"line":6041,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6042,"column":0},"generated":{"line":6042,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6043,"column":0},"generated":{"line":6043,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6044,"column":0},"generated":{"line":6044,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6045,"column":0},"generated":{"line":6045,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6046,"column":0},"generated":{"line":6046,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6047,"column":0},"generated":{"line":6047,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6048,"column":0},"generated":{"line":6048,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6049,"column":0},"generated":{"line":6049,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6050,"column":0},"generated":{"line":6050,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6051,"column":0},"generated":{"line":6051,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6052,"column":0},"generated":{"line":6052,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6053,"column":0},"generated":{"line":6053,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6054,"column":0},"generated":{"line":6054,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6055,"column":0},"generated":{"line":6055,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6056,"column":0},"generated":{"line":6056,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6057,"column":0},"generated":{"line":6057,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6058,"column":0},"generated":{"line":6058,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6059,"column":0},"generated":{"line":6059,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6060,"column":0},"generated":{"line":6060,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6061,"column":0},"generated":{"line":6061,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6062,"column":0},"generated":{"line":6062,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6063,"column":0},"generated":{"line":6063,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6064,"column":0},"generated":{"line":6064,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6065,"column":0},"generated":{"line":6065,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6066,"column":0},"generated":{"line":6066,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6067,"column":0},"generated":{"line":6067,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6068,"column":0},"generated":{"line":6068,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6069,"column":0},"generated":{"line":6069,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6070,"column":0},"generated":{"line":6070,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6071,"column":0},"generated":{"line":6071,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6072,"column":0},"generated":{"line":6072,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6073,"column":0},"generated":{"line":6073,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6074,"column":0},"generated":{"line":6074,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6075,"column":0},"generated":{"line":6075,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6076,"column":0},"generated":{"line":6076,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6077,"column":0},"generated":{"line":6077,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6078,"column":0},"generated":{"line":6078,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6079,"column":0},"generated":{"line":6079,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6080,"column":0},"generated":{"line":6080,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6081,"column":0},"generated":{"line":6081,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6082,"column":0},"generated":{"line":6082,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6083,"column":0},"generated":{"line":6083,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6084,"column":0},"generated":{"line":6084,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6085,"column":0},"generated":{"line":6085,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6086,"column":0},"generated":{"line":6086,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6087,"column":0},"generated":{"line":6087,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6088,"column":0},"generated":{"line":6088,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6089,"column":0},"generated":{"line":6089,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6090,"column":0},"generated":{"line":6090,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6091,"column":0},"generated":{"line":6091,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6092,"column":0},"generated":{"line":6092,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6093,"column":0},"generated":{"line":6093,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6094,"column":0},"generated":{"line":6094,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6095,"column":0},"generated":{"line":6095,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6096,"column":0},"generated":{"line":6096,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6097,"column":0},"generated":{"line":6097,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6098,"column":0},"generated":{"line":6098,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6099,"column":0},"generated":{"line":6099,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6100,"column":0},"generated":{"line":6100,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6101,"column":0},"generated":{"line":6101,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6102,"column":0},"generated":{"line":6102,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6103,"column":0},"generated":{"line":6103,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6104,"column":0},"generated":{"line":6104,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6105,"column":0},"generated":{"line":6105,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6106,"column":0},"generated":{"line":6106,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6107,"column":0},"generated":{"line":6107,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6108,"column":0},"generated":{"line":6108,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6109,"column":0},"generated":{"line":6109,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6110,"column":0},"generated":{"line":6110,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6111,"column":0},"generated":{"line":6111,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6112,"column":0},"generated":{"line":6112,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6113,"column":0},"generated":{"line":6113,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6114,"column":0},"generated":{"line":6114,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6115,"column":0},"generated":{"line":6115,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6116,"column":0},"generated":{"line":6116,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6117,"column":0},"generated":{"line":6117,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6118,"column":0},"generated":{"line":6118,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6119,"column":0},"generated":{"line":6119,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6120,"column":0},"generated":{"line":6120,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6121,"column":0},"generated":{"line":6121,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6122,"column":0},"generated":{"line":6122,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6123,"column":0},"generated":{"line":6123,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6124,"column":0},"generated":{"line":6124,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6125,"column":0},"generated":{"line":6125,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6126,"column":0},"generated":{"line":6126,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6127,"column":0},"generated":{"line":6127,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6128,"column":0},"generated":{"line":6128,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6129,"column":0},"generated":{"line":6129,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6130,"column":0},"generated":{"line":6130,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6131,"column":0},"generated":{"line":6131,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6132,"column":0},"generated":{"line":6132,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6133,"column":0},"generated":{"line":6133,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6134,"column":0},"generated":{"line":6134,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6135,"column":0},"generated":{"line":6135,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6136,"column":0},"generated":{"line":6136,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6137,"column":0},"generated":{"line":6137,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6138,"column":0},"generated":{"line":6138,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6139,"column":0},"generated":{"line":6139,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6140,"column":0},"generated":{"line":6140,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6141,"column":0},"generated":{"line":6141,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6142,"column":0},"generated":{"line":6142,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6143,"column":0},"generated":{"line":6143,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6144,"column":0},"generated":{"line":6144,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6145,"column":0},"generated":{"line":6145,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6146,"column":0},"generated":{"line":6146,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6147,"column":0},"generated":{"line":6147,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6148,"column":0},"generated":{"line":6148,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6149,"column":0},"generated":{"line":6149,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6150,"column":0},"generated":{"line":6150,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6151,"column":0},"generated":{"line":6151,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6152,"column":0},"generated":{"line":6152,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6153,"column":0},"generated":{"line":6153,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6154,"column":0},"generated":{"line":6154,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6155,"column":0},"generated":{"line":6155,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6156,"column":0},"generated":{"line":6156,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6157,"column":0},"generated":{"line":6157,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6158,"column":0},"generated":{"line":6158,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6159,"column":0},"generated":{"line":6159,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6160,"column":0},"generated":{"line":6160,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6161,"column":0},"generated":{"line":6161,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6162,"column":0},"generated":{"line":6162,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6163,"column":0},"generated":{"line":6163,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6164,"column":0},"generated":{"line":6164,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6165,"column":0},"generated":{"line":6165,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6166,"column":0},"generated":{"line":6166,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6167,"column":0},"generated":{"line":6167,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6168,"column":0},"generated":{"line":6168,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6169,"column":0},"generated":{"line":6169,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6170,"column":0},"generated":{"line":6170,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6171,"column":0},"generated":{"line":6171,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6172,"column":0},"generated":{"line":6172,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6173,"column":0},"generated":{"line":6173,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6174,"column":0},"generated":{"line":6174,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6175,"column":0},"generated":{"line":6175,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6176,"column":0},"generated":{"line":6176,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6177,"column":0},"generated":{"line":6177,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6178,"column":0},"generated":{"line":6178,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6179,"column":0},"generated":{"line":6179,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6180,"column":0},"generated":{"line":6180,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6181,"column":0},"generated":{"line":6181,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6182,"column":0},"generated":{"line":6182,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6183,"column":0},"generated":{"line":6183,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6184,"column":0},"generated":{"line":6184,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6185,"column":0},"generated":{"line":6185,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6186,"column":0},"generated":{"line":6186,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6187,"column":0},"generated":{"line":6187,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6188,"column":0},"generated":{"line":6188,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6189,"column":0},"generated":{"line":6189,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6190,"column":0},"generated":{"line":6190,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6191,"column":0},"generated":{"line":6191,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6192,"column":0},"generated":{"line":6192,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6193,"column":0},"generated":{"line":6193,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6194,"column":0},"generated":{"line":6194,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6195,"column":0},"generated":{"line":6195,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6196,"column":0},"generated":{"line":6196,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6197,"column":0},"generated":{"line":6197,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6198,"column":0},"generated":{"line":6198,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6199,"column":0},"generated":{"line":6199,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6200,"column":0},"generated":{"line":6200,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6201,"column":0},"generated":{"line":6201,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6202,"column":0},"generated":{"line":6202,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6203,"column":0},"generated":{"line":6203,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6204,"column":0},"generated":{"line":6204,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6205,"column":0},"generated":{"line":6205,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6206,"column":0},"generated":{"line":6206,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6207,"column":0},"generated":{"line":6207,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6208,"column":0},"generated":{"line":6208,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6209,"column":0},"generated":{"line":6209,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6210,"column":0},"generated":{"line":6210,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6211,"column":0},"generated":{"line":6211,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6212,"column":0},"generated":{"line":6212,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6213,"column":0},"generated":{"line":6213,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6214,"column":0},"generated":{"line":6214,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6215,"column":0},"generated":{"line":6215,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6216,"column":0},"generated":{"line":6216,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6217,"column":0},"generated":{"line":6217,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6218,"column":0},"generated":{"line":6218,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6219,"column":0},"generated":{"line":6219,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6220,"column":0},"generated":{"line":6220,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6221,"column":0},"generated":{"line":6221,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6222,"column":0},"generated":{"line":6222,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6223,"column":0},"generated":{"line":6223,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6224,"column":0},"generated":{"line":6224,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6225,"column":0},"generated":{"line":6225,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6226,"column":0},"generated":{"line":6226,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6227,"column":0},"generated":{"line":6227,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6228,"column":0},"generated":{"line":6228,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6229,"column":0},"generated":{"line":6229,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6230,"column":0},"generated":{"line":6230,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6231,"column":0},"generated":{"line":6231,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6232,"column":0},"generated":{"line":6232,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6233,"column":0},"generated":{"line":6233,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6234,"column":0},"generated":{"line":6234,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6235,"column":0},"generated":{"line":6235,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6236,"column":0},"generated":{"line":6236,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6237,"column":0},"generated":{"line":6237,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6238,"column":0},"generated":{"line":6238,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6239,"column":0},"generated":{"line":6239,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6240,"column":0},"generated":{"line":6240,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6241,"column":0},"generated":{"line":6241,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6242,"column":0},"generated":{"line":6242,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6243,"column":0},"generated":{"line":6243,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6244,"column":0},"generated":{"line":6244,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6245,"column":0},"generated":{"line":6245,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6246,"column":0},"generated":{"line":6246,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6247,"column":0},"generated":{"line":6247,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6248,"column":0},"generated":{"line":6248,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6249,"column":0},"generated":{"line":6249,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6250,"column":0},"generated":{"line":6250,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6251,"column":0},"generated":{"line":6251,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6252,"column":0},"generated":{"line":6252,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6253,"column":0},"generated":{"line":6253,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6254,"column":0},"generated":{"line":6254,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6255,"column":0},"generated":{"line":6255,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6256,"column":0},"generated":{"line":6256,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6257,"column":0},"generated":{"line":6257,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6258,"column":0},"generated":{"line":6258,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6259,"column":0},"generated":{"line":6259,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6260,"column":0},"generated":{"line":6260,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6261,"column":0},"generated":{"line":6261,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6262,"column":0},"generated":{"line":6262,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6263,"column":0},"generated":{"line":6263,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6264,"column":0},"generated":{"line":6264,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6265,"column":0},"generated":{"line":6265,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6266,"column":0},"generated":{"line":6266,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6267,"column":0},"generated":{"line":6267,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6268,"column":0},"generated":{"line":6268,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6269,"column":0},"generated":{"line":6269,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6270,"column":0},"generated":{"line":6270,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6271,"column":0},"generated":{"line":6271,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6272,"column":0},"generated":{"line":6272,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6273,"column":0},"generated":{"line":6273,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6274,"column":0},"generated":{"line":6274,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6275,"column":0},"generated":{"line":6275,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6276,"column":0},"generated":{"line":6276,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6277,"column":0},"generated":{"line":6277,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6278,"column":0},"generated":{"line":6278,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6279,"column":0},"generated":{"line":6279,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6280,"column":0},"generated":{"line":6280,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6281,"column":0},"generated":{"line":6281,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6282,"column":0},"generated":{"line":6282,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6283,"column":0},"generated":{"line":6283,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6284,"column":0},"generated":{"line":6284,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6285,"column":0},"generated":{"line":6285,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6286,"column":0},"generated":{"line":6286,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6287,"column":0},"generated":{"line":6287,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6288,"column":0},"generated":{"line":6288,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6289,"column":0},"generated":{"line":6289,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6290,"column":0},"generated":{"line":6290,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6291,"column":0},"generated":{"line":6291,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6292,"column":0},"generated":{"line":6292,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6293,"column":0},"generated":{"line":6293,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6294,"column":0},"generated":{"line":6294,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6295,"column":0},"generated":{"line":6295,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6296,"column":0},"generated":{"line":6296,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6297,"column":0},"generated":{"line":6297,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6298,"column":0},"generated":{"line":6298,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6299,"column":0},"generated":{"line":6299,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6300,"column":0},"generated":{"line":6300,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6301,"column":0},"generated":{"line":6301,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6302,"column":0},"generated":{"line":6302,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6303,"column":0},"generated":{"line":6303,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6304,"column":0},"generated":{"line":6304,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6305,"column":0},"generated":{"line":6305,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6306,"column":0},"generated":{"line":6306,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6307,"column":0},"generated":{"line":6307,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6308,"column":0},"generated":{"line":6308,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6309,"column":0},"generated":{"line":6309,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6310,"column":0},"generated":{"line":6310,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6311,"column":0},"generated":{"line":6311,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6312,"column":0},"generated":{"line":6312,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6313,"column":0},"generated":{"line":6313,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6314,"column":0},"generated":{"line":6314,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6315,"column":0},"generated":{"line":6315,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6316,"column":0},"generated":{"line":6316,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6317,"column":0},"generated":{"line":6317,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6318,"column":0},"generated":{"line":6318,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6319,"column":0},"generated":{"line":6319,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6320,"column":0},"generated":{"line":6320,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6321,"column":0},"generated":{"line":6321,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6322,"column":0},"generated":{"line":6322,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6323,"column":0},"generated":{"line":6323,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6324,"column":0},"generated":{"line":6324,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6325,"column":0},"generated":{"line":6325,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6326,"column":0},"generated":{"line":6326,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6327,"column":0},"generated":{"line":6327,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6328,"column":0},"generated":{"line":6328,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6329,"column":0},"generated":{"line":6329,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6330,"column":0},"generated":{"line":6330,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6331,"column":0},"generated":{"line":6331,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6332,"column":0},"generated":{"line":6332,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6333,"column":0},"generated":{"line":6333,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6334,"column":0},"generated":{"line":6334,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6335,"column":0},"generated":{"line":6335,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6336,"column":0},"generated":{"line":6336,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6337,"column":0},"generated":{"line":6337,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6338,"column":0},"generated":{"line":6338,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6339,"column":0},"generated":{"line":6339,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6340,"column":0},"generated":{"line":6340,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6341,"column":0},"generated":{"line":6341,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6342,"column":0},"generated":{"line":6342,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6343,"column":0},"generated":{"line":6343,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6344,"column":0},"generated":{"line":6344,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6345,"column":0},"generated":{"line":6345,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6346,"column":0},"generated":{"line":6346,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6347,"column":0},"generated":{"line":6347,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6348,"column":0},"generated":{"line":6348,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6349,"column":0},"generated":{"line":6349,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6350,"column":0},"generated":{"line":6350,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6351,"column":0},"generated":{"line":6351,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6352,"column":0},"generated":{"line":6352,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6353,"column":0},"generated":{"line":6353,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6354,"column":0},"generated":{"line":6354,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6355,"column":0},"generated":{"line":6355,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6356,"column":0},"generated":{"line":6356,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6357,"column":0},"generated":{"line":6357,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6358,"column":0},"generated":{"line":6358,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6359,"column":0},"generated":{"line":6359,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6360,"column":0},"generated":{"line":6360,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6361,"column":0},"generated":{"line":6361,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6362,"column":0},"generated":{"line":6362,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6363,"column":0},"generated":{"line":6363,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6364,"column":0},"generated":{"line":6364,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6365,"column":0},"generated":{"line":6365,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6366,"column":0},"generated":{"line":6366,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6367,"column":0},"generated":{"line":6367,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6368,"column":0},"generated":{"line":6368,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6369,"column":0},"generated":{"line":6369,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6370,"column":0},"generated":{"line":6370,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6371,"column":0},"generated":{"line":6371,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6372,"column":0},"generated":{"line":6372,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6373,"column":0},"generated":{"line":6373,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6374,"column":0},"generated":{"line":6374,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6375,"column":0},"generated":{"line":6375,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6376,"column":0},"generated":{"line":6376,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6377,"column":0},"generated":{"line":6377,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6378,"column":0},"generated":{"line":6378,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6379,"column":0},"generated":{"line":6379,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6380,"column":0},"generated":{"line":6380,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6381,"column":0},"generated":{"line":6381,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6382,"column":0},"generated":{"line":6382,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6383,"column":0},"generated":{"line":6383,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6384,"column":0},"generated":{"line":6384,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6385,"column":0},"generated":{"line":6385,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6386,"column":0},"generated":{"line":6386,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6387,"column":0},"generated":{"line":6387,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6388,"column":0},"generated":{"line":6388,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6389,"column":0},"generated":{"line":6389,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6390,"column":0},"generated":{"line":6390,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6391,"column":0},"generated":{"line":6391,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6392,"column":0},"generated":{"line":6392,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6393,"column":0},"generated":{"line":6393,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6394,"column":0},"generated":{"line":6394,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6395,"column":0},"generated":{"line":6395,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6396,"column":0},"generated":{"line":6396,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6397,"column":0},"generated":{"line":6397,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6398,"column":0},"generated":{"line":6398,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6399,"column":0},"generated":{"line":6399,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6400,"column":0},"generated":{"line":6400,"column":0}},{"source":"../node_modules/esprima/dist/esprima.js","original":{"line":6401,"column":0},"generated":{"line":6401,"column":0}}],"sources":{"../node_modules/esprima/dist/esprima.js":"(function webpackUniversalModuleDefinition(root, factory) {\n/* istanbul ignore next */\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n/* istanbul ignore next */\n\telse if(typeof exports === 'object')\n\t\texports[\"esprima\"] = factory();\n\telse\n\t\troot[\"esprima\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/* istanbul ignore if */\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*\n\t  Copyright JS Foundation and other contributors, https://js.foundation/\n\n\t  Redistribution and use in source and binary forms, with or without\n\t  modification, are permitted provided that the following conditions are met:\n\n\t    * Redistributions of source code must retain the above copyright\n\t      notice, this list of conditions and the following disclaimer.\n\t    * Redistributions in binary form must reproduce the above copyright\n\t      notice, this list of conditions and the following disclaimer in the\n\t      documentation and/or other materials provided with the distribution.\n\n\t  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n\t  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n\t  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n\t  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n\t  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n\t  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n\t  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n\t  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\t  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n\t  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\t*/\n\t\"use strict\";\n\tvar comment_handler_1 = __webpack_require__(1);\n\tvar parser_1 = __webpack_require__(3);\n\tvar jsx_parser_1 = __webpack_require__(11);\n\tvar tokenizer_1 = __webpack_require__(15);\n\tfunction parse(code, options, delegate) {\n\t    var commentHandler = null;\n\t    var proxyDelegate = function (node, metadata) {\n\t        if (delegate) {\n\t            delegate(node, metadata);\n\t        }\n\t        if (commentHandler) {\n\t            commentHandler.visit(node, metadata);\n\t        }\n\t    };\n\t    var parserDelegate = (typeof delegate === 'function') ? proxyDelegate : null;\n\t    var collectComment = false;\n\t    if (options) {\n\t        collectComment = (typeof options.comment === 'boolean' && options.comment);\n\t        var attachComment = (typeof options.attachComment === 'boolean' && options.attachComment);\n\t        if (collectComment || attachComment) {\n\t            commentHandler = new comment_handler_1.CommentHandler();\n\t            commentHandler.attach = attachComment;\n\t            options.comment = true;\n\t            parserDelegate = proxyDelegate;\n\t        }\n\t    }\n\t    var parser;\n\t    if (options && typeof options.jsx === 'boolean' && options.jsx) {\n\t        parser = new jsx_parser_1.JSXParser(code, options, parserDelegate);\n\t    }\n\t    else {\n\t        parser = new parser_1.Parser(code, options, parserDelegate);\n\t    }\n\t    var ast = (parser.parseProgram());\n\t    if (collectComment) {\n\t        ast.comments = commentHandler.comments;\n\t    }\n\t    if (parser.config.tokens) {\n\t        ast.tokens = parser.tokens;\n\t    }\n\t    if (parser.config.tolerant) {\n\t        ast.errors = parser.errorHandler.errors;\n\t    }\n\t    return ast;\n\t}\n\texports.parse = parse;\n\tfunction tokenize(code, options, delegate) {\n\t    var tokenizer = new tokenizer_1.Tokenizer(code, options);\n\t    var tokens;\n\t    tokens = [];\n\t    try {\n\t        while (true) {\n\t            var token = tokenizer.getNextToken();\n\t            if (!token) {\n\t                break;\n\t            }\n\t            if (delegate) {\n\t                token = delegate(token);\n\t            }\n\t            tokens.push(token);\n\t        }\n\t    }\n\t    catch (e) {\n\t        tokenizer.errorHandler.tolerate(e);\n\t    }\n\t    if (tokenizer.errorHandler.tolerant) {\n\t        tokens.errors = tokenizer.errors();\n\t    }\n\t    return tokens;\n\t}\n\texports.tokenize = tokenize;\n\tvar syntax_1 = __webpack_require__(2);\n\texports.Syntax = syntax_1.Syntax;\n\t// Sync with *.json manifests.\n\texports.version = '3.1.3';\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar syntax_1 = __webpack_require__(2);\n\tvar CommentHandler = (function () {\n\t    function CommentHandler() {\n\t        this.attach = false;\n\t        this.comments = [];\n\t        this.stack = [];\n\t        this.leading = [];\n\t        this.trailing = [];\n\t    }\n\t    CommentHandler.prototype.insertInnerComments = function (node, metadata) {\n\t        //  innnerComments for properties empty block\n\t        //  `function a() {/** comments **\\/}`\n\t        if (node.type === syntax_1.Syntax.BlockStatement && node.body.length === 0) {\n\t            var innerComments = [];\n\t            for (var i = this.leading.length - 1; i >= 0; --i) {\n\t                var entry = this.leading[i];\n\t                if (metadata.end.offset >= entry.start) {\n\t                    innerComments.unshift(entry.comment);\n\t                    this.leading.splice(i, 1);\n\t                    this.trailing.splice(i, 1);\n\t                }\n\t            }\n\t            if (innerComments.length) {\n\t                node.innerComments = innerComments;\n\t            }\n\t        }\n\t    };\n\t    CommentHandler.prototype.findTrailingComments = function (node, metadata) {\n\t        var trailingComments = [];\n\t        if (this.trailing.length > 0) {\n\t            for (var i = this.trailing.length - 1; i >= 0; --i) {\n\t                var entry_1 = this.trailing[i];\n\t                if (entry_1.start >= metadata.end.offset) {\n\t                    trailingComments.unshift(entry_1.comment);\n\t                }\n\t            }\n\t            this.trailing.length = 0;\n\t            return trailingComments;\n\t        }\n\t        var entry = this.stack[this.stack.length - 1];\n\t        if (entry && entry.node.trailingComments) {\n\t            var firstComment = entry.node.trailingComments[0];\n\t            if (firstComment && firstComment.range[0] >= metadata.end.offset) {\n\t                trailingComments = entry.node.trailingComments;\n\t                delete entry.node.trailingComments;\n\t            }\n\t        }\n\t        return trailingComments;\n\t    };\n\t    CommentHandler.prototype.findLeadingComments = function (node, metadata) {\n\t        var leadingComments = [];\n\t        var target;\n\t        while (this.stack.length > 0) {\n\t            var entry = this.stack[this.stack.length - 1];\n\t            if (entry && entry.start >= metadata.start.offset) {\n\t                target = this.stack.pop().node;\n\t            }\n\t            else {\n\t                break;\n\t            }\n\t        }\n\t        if (target) {\n\t            var count = target.leadingComments ? target.leadingComments.length : 0;\n\t            for (var i = count - 1; i >= 0; --i) {\n\t                var comment = target.leadingComments[i];\n\t                if (comment.range[1] <= metadata.start.offset) {\n\t                    leadingComments.unshift(comment);\n\t                    target.leadingComments.splice(i, 1);\n\t                }\n\t            }\n\t            if (target.leadingComments && target.leadingComments.length === 0) {\n\t                delete target.leadingComments;\n\t            }\n\t            return leadingComments;\n\t        }\n\t        for (var i = this.leading.length - 1; i >= 0; --i) {\n\t            var entry = this.leading[i];\n\t            if (entry.start <= metadata.start.offset) {\n\t                leadingComments.unshift(entry.comment);\n\t                this.leading.splice(i, 1);\n\t            }\n\t        }\n\t        return leadingComments;\n\t    };\n\t    CommentHandler.prototype.visitNode = function (node, metadata) {\n\t        if (node.type === syntax_1.Syntax.Program && node.body.length > 0) {\n\t            return;\n\t        }\n\t        this.insertInnerComments(node, metadata);\n\t        var trailingComments = this.findTrailingComments(node, metadata);\n\t        var leadingComments = this.findLeadingComments(node, metadata);\n\t        if (leadingComments.length > 0) {\n\t            node.leadingComments = leadingComments;\n\t        }\n\t        if (trailingComments.length > 0) {\n\t            node.trailingComments = trailingComments;\n\t        }\n\t        this.stack.push({\n\t            node: node,\n\t            start: metadata.start.offset\n\t        });\n\t    };\n\t    CommentHandler.prototype.visitComment = function (node, metadata) {\n\t        var type = (node.type[0] === 'L') ? 'Line' : 'Block';\n\t        var comment = {\n\t            type: type,\n\t            value: node.value\n\t        };\n\t        if (node.range) {\n\t            comment.range = node.range;\n\t        }\n\t        if (node.loc) {\n\t            comment.loc = node.loc;\n\t        }\n\t        this.comments.push(comment);\n\t        if (this.attach) {\n\t            var entry = {\n\t                comment: {\n\t                    type: type,\n\t                    value: node.value,\n\t                    range: [metadata.start.offset, metadata.end.offset]\n\t                },\n\t                start: metadata.start.offset\n\t            };\n\t            if (node.loc) {\n\t                entry.comment.loc = node.loc;\n\t            }\n\t            node.type = type;\n\t            this.leading.push(entry);\n\t            this.trailing.push(entry);\n\t        }\n\t    };\n\t    CommentHandler.prototype.visit = function (node, metadata) {\n\t        if (node.type === 'LineComment') {\n\t            this.visitComment(node, metadata);\n\t        }\n\t        else if (node.type === 'BlockComment') {\n\t            this.visitComment(node, metadata);\n\t        }\n\t        else if (this.attach) {\n\t            this.visitNode(node, metadata);\n\t        }\n\t    };\n\t    return CommentHandler;\n\t}());\n\texports.CommentHandler = CommentHandler;\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\texports.Syntax = {\n\t    AssignmentExpression: 'AssignmentExpression',\n\t    AssignmentPattern: 'AssignmentPattern',\n\t    ArrayExpression: 'ArrayExpression',\n\t    ArrayPattern: 'ArrayPattern',\n\t    ArrowFunctionExpression: 'ArrowFunctionExpression',\n\t    BlockStatement: 'BlockStatement',\n\t    BinaryExpression: 'BinaryExpression',\n\t    BreakStatement: 'BreakStatement',\n\t    CallExpression: 'CallExpression',\n\t    CatchClause: 'CatchClause',\n\t    ClassBody: 'ClassBody',\n\t    ClassDeclaration: 'ClassDeclaration',\n\t    ClassExpression: 'ClassExpression',\n\t    ConditionalExpression: 'ConditionalExpression',\n\t    ContinueStatement: 'ContinueStatement',\n\t    DoWhileStatement: 'DoWhileStatement',\n\t    DebuggerStatement: 'DebuggerStatement',\n\t    EmptyStatement: 'EmptyStatement',\n\t    ExportAllDeclaration: 'ExportAllDeclaration',\n\t    ExportDefaultDeclaration: 'ExportDefaultDeclaration',\n\t    ExportNamedDeclaration: 'ExportNamedDeclaration',\n\t    ExportSpecifier: 'ExportSpecifier',\n\t    ExpressionStatement: 'ExpressionStatement',\n\t    ForStatement: 'ForStatement',\n\t    ForOfStatement: 'ForOfStatement',\n\t    ForInStatement: 'ForInStatement',\n\t    FunctionDeclaration: 'FunctionDeclaration',\n\t    FunctionExpression: 'FunctionExpression',\n\t    Identifier: 'Identifier',\n\t    IfStatement: 'IfStatement',\n\t    ImportDeclaration: 'ImportDeclaration',\n\t    ImportDefaultSpecifier: 'ImportDefaultSpecifier',\n\t    ImportNamespaceSpecifier: 'ImportNamespaceSpecifier',\n\t    ImportSpecifier: 'ImportSpecifier',\n\t    Literal: 'Literal',\n\t    LabeledStatement: 'LabeledStatement',\n\t    LogicalExpression: 'LogicalExpression',\n\t    MemberExpression: 'MemberExpression',\n\t    MetaProperty: 'MetaProperty',\n\t    MethodDefinition: 'MethodDefinition',\n\t    NewExpression: 'NewExpression',\n\t    ObjectExpression: 'ObjectExpression',\n\t    ObjectPattern: 'ObjectPattern',\n\t    Program: 'Program',\n\t    Property: 'Property',\n\t    RestElement: 'RestElement',\n\t    ReturnStatement: 'ReturnStatement',\n\t    SequenceExpression: 'SequenceExpression',\n\t    SpreadElement: 'SpreadElement',\n\t    Super: 'Super',\n\t    SwitchCase: 'SwitchCase',\n\t    SwitchStatement: 'SwitchStatement',\n\t    TaggedTemplateExpression: 'TaggedTemplateExpression',\n\t    TemplateElement: 'TemplateElement',\n\t    TemplateLiteral: 'TemplateLiteral',\n\t    ThisExpression: 'ThisExpression',\n\t    ThrowStatement: 'ThrowStatement',\n\t    TryStatement: 'TryStatement',\n\t    UnaryExpression: 'UnaryExpression',\n\t    UpdateExpression: 'UpdateExpression',\n\t    VariableDeclaration: 'VariableDeclaration',\n\t    VariableDeclarator: 'VariableDeclarator',\n\t    WhileStatement: 'WhileStatement',\n\t    WithStatement: 'WithStatement',\n\t    YieldExpression: 'YieldExpression'\n\t};\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar assert_1 = __webpack_require__(4);\n\tvar messages_1 = __webpack_require__(5);\n\tvar error_handler_1 = __webpack_require__(6);\n\tvar token_1 = __webpack_require__(7);\n\tvar scanner_1 = __webpack_require__(8);\n\tvar syntax_1 = __webpack_require__(2);\n\tvar Node = __webpack_require__(10);\n\tvar ArrowParameterPlaceHolder = 'ArrowParameterPlaceHolder';\n\tvar Parser = (function () {\n\t    function Parser(code, options, delegate) {\n\t        if (options === void 0) { options = {}; }\n\t        this.config = {\n\t            range: (typeof options.range === 'boolean') && options.range,\n\t            loc: (typeof options.loc === 'boolean') && options.loc,\n\t            source: null,\n\t            tokens: (typeof options.tokens === 'boolean') && options.tokens,\n\t            comment: (typeof options.comment === 'boolean') && options.comment,\n\t            tolerant: (typeof options.tolerant === 'boolean') && options.tolerant\n\t        };\n\t        if (this.config.loc && options.source && options.source !== null) {\n\t            this.config.source = String(options.source);\n\t        }\n\t        this.delegate = delegate;\n\t        this.errorHandler = new error_handler_1.ErrorHandler();\n\t        this.errorHandler.tolerant = this.config.tolerant;\n\t        this.scanner = new scanner_1.Scanner(code, this.errorHandler);\n\t        this.scanner.trackComment = this.config.comment;\n\t        this.operatorPrecedence = {\n\t            ')': 0,\n\t            ';': 0,\n\t            ',': 0,\n\t            '=': 0,\n\t            ']': 0,\n\t            '||': 1,\n\t            '&&': 2,\n\t            '|': 3,\n\t            '^': 4,\n\t            '&': 5,\n\t            '==': 6,\n\t            '!=': 6,\n\t            '===': 6,\n\t            '!==': 6,\n\t            '<': 7,\n\t            '>': 7,\n\t            '<=': 7,\n\t            '>=': 7,\n\t            '<<': 8,\n\t            '>>': 8,\n\t            '>>>': 8,\n\t            '+': 9,\n\t            '-': 9,\n\t            '*': 11,\n\t            '/': 11,\n\t            '%': 11\n\t        };\n\t        this.sourceType = (options && options.sourceType === 'module') ? 'module' : 'script';\n\t        this.lookahead = null;\n\t        this.hasLineTerminator = false;\n\t        this.context = {\n\t            allowIn: true,\n\t            allowYield: true,\n\t            firstCoverInitializedNameError: null,\n\t            isAssignmentTarget: false,\n\t            isBindingElement: false,\n\t            inFunctionBody: false,\n\t            inIteration: false,\n\t            inSwitch: false,\n\t            labelSet: {},\n\t            strict: (this.sourceType === 'module')\n\t        };\n\t        this.tokens = [];\n\t        this.startMarker = {\n\t            index: 0,\n\t            lineNumber: this.scanner.lineNumber,\n\t            lineStart: 0\n\t        };\n\t        this.lastMarker = {\n\t            index: 0,\n\t            lineNumber: this.scanner.lineNumber,\n\t            lineStart: 0\n\t        };\n\t        this.nextToken();\n\t        this.lastMarker = {\n\t            index: this.scanner.index,\n\t            lineNumber: this.scanner.lineNumber,\n\t            lineStart: this.scanner.lineStart\n\t        };\n\t    }\n\t    Parser.prototype.throwError = function (messageFormat) {\n\t        var values = [];\n\t        for (var _i = 1; _i < arguments.length; _i++) {\n\t            values[_i - 1] = arguments[_i];\n\t        }\n\t        var args = Array.prototype.slice.call(arguments, 1);\n\t        var msg = messageFormat.replace(/%(\\d)/g, function (whole, idx) {\n\t            assert_1.assert(idx < args.length, 'Message reference must be in range');\n\t            return args[idx];\n\t        });\n\t        var index = this.lastMarker.index;\n\t        var line = this.lastMarker.lineNumber;\n\t        var column = this.lastMarker.index - this.lastMarker.lineStart + 1;\n\t        throw this.errorHandler.createError(index, line, column, msg);\n\t    };\n\t    Parser.prototype.tolerateError = function (messageFormat) {\n\t        var values = [];\n\t        for (var _i = 1; _i < arguments.length; _i++) {\n\t            values[_i - 1] = arguments[_i];\n\t        }\n\t        var args = Array.prototype.slice.call(arguments, 1);\n\t        var msg = messageFormat.replace(/%(\\d)/g, function (whole, idx) {\n\t            assert_1.assert(idx < args.length, 'Message reference must be in range');\n\t            return args[idx];\n\t        });\n\t        var index = this.lastMarker.index;\n\t        var line = this.scanner.lineNumber;\n\t        var column = this.lastMarker.index - this.lastMarker.lineStart + 1;\n\t        this.errorHandler.tolerateError(index, line, column, msg);\n\t    };\n\t    // Throw an exception because of the token.\n\t    Parser.prototype.unexpectedTokenError = function (token, message) {\n\t        var msg = message || messages_1.Messages.UnexpectedToken;\n\t        var value;\n\t        if (token) {\n\t            if (!message) {\n\t                msg = (token.type === token_1.Token.EOF) ? messages_1.Messages.UnexpectedEOS :\n\t                    (token.type === token_1.Token.Identifier) ? messages_1.Messages.UnexpectedIdentifier :\n\t                        (token.type === token_1.Token.NumericLiteral) ? messages_1.Messages.UnexpectedNumber :\n\t                            (token.type === token_1.Token.StringLiteral) ? messages_1.Messages.UnexpectedString :\n\t                                (token.type === token_1.Token.Template) ? messages_1.Messages.UnexpectedTemplate :\n\t                                    messages_1.Messages.UnexpectedToken;\n\t                if (token.type === token_1.Token.Keyword) {\n\t                    if (this.scanner.isFutureReservedWord(token.value)) {\n\t                        msg = messages_1.Messages.UnexpectedReserved;\n\t                    }\n\t                    else if (this.context.strict && this.scanner.isStrictModeReservedWord(token.value)) {\n\t                        msg = messages_1.Messages.StrictReservedWord;\n\t                    }\n\t                }\n\t            }\n\t            value = (token.type === token_1.Token.Template) ? token.value.raw : token.value;\n\t        }\n\t        else {\n\t            value = 'ILLEGAL';\n\t        }\n\t        msg = msg.replace('%0', value);\n\t        if (token && typeof token.lineNumber === 'number') {\n\t            var index = token.start;\n\t            var line = token.lineNumber;\n\t            var column = token.start - this.lastMarker.lineStart + 1;\n\t            return this.errorHandler.createError(index, line, column, msg);\n\t        }\n\t        else {\n\t            var index = this.lastMarker.index;\n\t            var line = this.lastMarker.lineNumber;\n\t            var column = index - this.lastMarker.lineStart + 1;\n\t            return this.errorHandler.createError(index, line, column, msg);\n\t        }\n\t    };\n\t    Parser.prototype.throwUnexpectedToken = function (token, message) {\n\t        throw this.unexpectedTokenError(token, message);\n\t    };\n\t    Parser.prototype.tolerateUnexpectedToken = function (token, message) {\n\t        this.errorHandler.tolerate(this.unexpectedTokenError(token, message));\n\t    };\n\t    Parser.prototype.collectComments = function () {\n\t        if (!this.config.comment) {\n\t            this.scanner.scanComments();\n\t        }\n\t        else {\n\t            var comments = this.scanner.scanComments();\n\t            if (comments.length > 0 && this.delegate) {\n\t                for (var i = 0; i < comments.length; ++i) {\n\t                    var e = comments[i];\n\t                    var node = void 0;\n\t                    node = {\n\t                        type: e.multiLine ? 'BlockComment' : 'LineComment',\n\t                        value: this.scanner.source.slice(e.slice[0], e.slice[1])\n\t                    };\n\t                    if (this.config.range) {\n\t                        node.range = e.range;\n\t                    }\n\t                    if (this.config.loc) {\n\t                        node.loc = e.loc;\n\t                    }\n\t                    var metadata = {\n\t                        start: {\n\t                            line: e.loc.start.line,\n\t                            column: e.loc.start.column,\n\t                            offset: e.range[0]\n\t                        },\n\t                        end: {\n\t                            line: e.loc.end.line,\n\t                            column: e.loc.end.column,\n\t                            offset: e.range[1]\n\t                        }\n\t                    };\n\t                    this.delegate(node, metadata);\n\t                }\n\t            }\n\t        }\n\t    };\n\t    // From internal representation to an external structure\n\t    Parser.prototype.getTokenRaw = function (token) {\n\t        return this.scanner.source.slice(token.start, token.end);\n\t    };\n\t    Parser.prototype.convertToken = function (token) {\n\t        var t;\n\t        t = {\n\t            type: token_1.TokenName[token.type],\n\t            value: this.getTokenRaw(token)\n\t        };\n\t        if (this.config.range) {\n\t            t.range = [token.start, token.end];\n\t        }\n\t        if (this.config.loc) {\n\t            t.loc = {\n\t                start: {\n\t                    line: this.startMarker.lineNumber,\n\t                    column: this.startMarker.index - this.startMarker.lineStart\n\t                },\n\t                end: {\n\t                    line: this.scanner.lineNumber,\n\t                    column: this.scanner.index - this.scanner.lineStart\n\t                }\n\t            };\n\t        }\n\t        if (token.regex) {\n\t            t.regex = token.regex;\n\t        }\n\t        return t;\n\t    };\n\t    Parser.prototype.nextToken = function () {\n\t        var token = this.lookahead;\n\t        this.lastMarker.index = this.scanner.index;\n\t        this.lastMarker.lineNumber = this.scanner.lineNumber;\n\t        this.lastMarker.lineStart = this.scanner.lineStart;\n\t        this.collectComments();\n\t        this.startMarker.index = this.scanner.index;\n\t        this.startMarker.lineNumber = this.scanner.lineNumber;\n\t        this.startMarker.lineStart = this.scanner.lineStart;\n\t        var next;\n\t        next = this.scanner.lex();\n\t        this.hasLineTerminator = (token && next) ? (token.lineNumber !== next.lineNumber) : false;\n\t        if (next && this.context.strict && next.type === token_1.Token.Identifier) {\n\t            if (this.scanner.isStrictModeReservedWord(next.value)) {\n\t                next.type = token_1.Token.Keyword;\n\t            }\n\t        }\n\t        this.lookahead = next;\n\t        if (this.config.tokens && next.type !== token_1.Token.EOF) {\n\t            this.tokens.push(this.convertToken(next));\n\t        }\n\t        return token;\n\t    };\n\t    Parser.prototype.nextRegexToken = function () {\n\t        this.collectComments();\n\t        var token = this.scanner.scanRegExp();\n\t        if (this.config.tokens) {\n\t            // Pop the previous token, '/' or '/='\n\t            // This is added from the lookahead token.\n\t            this.tokens.pop();\n\t            this.tokens.push(this.convertToken(token));\n\t        }\n\t        // Prime the next lookahead.\n\t        this.lookahead = token;\n\t        this.nextToken();\n\t        return token;\n\t    };\n\t    Parser.prototype.createNode = function () {\n\t        return {\n\t            index: this.startMarker.index,\n\t            line: this.startMarker.lineNumber,\n\t            column: this.startMarker.index - this.startMarker.lineStart\n\t        };\n\t    };\n\t    Parser.prototype.startNode = function (token) {\n\t        return {\n\t            index: token.start,\n\t            line: token.lineNumber,\n\t            column: token.start - token.lineStart\n\t        };\n\t    };\n\t    Parser.prototype.finalize = function (meta, node) {\n\t        if (this.config.range) {\n\t            node.range = [meta.index, this.lastMarker.index];\n\t        }\n\t        if (this.config.loc) {\n\t            node.loc = {\n\t                start: {\n\t                    line: meta.line,\n\t                    column: meta.column\n\t                },\n\t                end: {\n\t                    line: this.lastMarker.lineNumber,\n\t                    column: this.lastMarker.index - this.lastMarker.lineStart\n\t                }\n\t            };\n\t            if (this.config.source) {\n\t                node.loc.source = this.config.source;\n\t            }\n\t        }\n\t        if (this.delegate) {\n\t            var metadata = {\n\t                start: {\n\t                    line: meta.line,\n\t                    column: meta.column,\n\t                    offset: meta.index\n\t                },\n\t                end: {\n\t                    line: this.lastMarker.lineNumber,\n\t                    column: this.lastMarker.index - this.lastMarker.lineStart,\n\t                    offset: this.lastMarker.index\n\t                }\n\t            };\n\t            this.delegate(node, metadata);\n\t        }\n\t        return node;\n\t    };\n\t    // Expect the next token to match the specified punctuator.\n\t    // If not, an exception will be thrown.\n\t    Parser.prototype.expect = function (value) {\n\t        var token = this.nextToken();\n\t        if (token.type !== token_1.Token.Punctuator || token.value !== value) {\n\t            this.throwUnexpectedToken(token);\n\t        }\n\t    };\n\t    // Quietly expect a comma when in tolerant mode, otherwise delegates to expect().\n\t    Parser.prototype.expectCommaSeparator = function () {\n\t        if (this.config.tolerant) {\n\t            var token = this.lookahead;\n\t            if (token.type === token_1.Token.Punctuator && token.value === ',') {\n\t                this.nextToken();\n\t            }\n\t            else if (token.type === token_1.Token.Punctuator && token.value === ';') {\n\t                this.nextToken();\n\t                this.tolerateUnexpectedToken(token);\n\t            }\n\t            else {\n\t                this.tolerateUnexpectedToken(token, messages_1.Messages.UnexpectedToken);\n\t            }\n\t        }\n\t        else {\n\t            this.expect(',');\n\t        }\n\t    };\n\t    // Expect the next token to match the specified keyword.\n\t    // If not, an exception will be thrown.\n\t    Parser.prototype.expectKeyword = function (keyword) {\n\t        var token = this.nextToken();\n\t        if (token.type !== token_1.Token.Keyword || token.value !== keyword) {\n\t            this.throwUnexpectedToken(token);\n\t        }\n\t    };\n\t    // Return true if the next token matches the specified punctuator.\n\t    Parser.prototype.match = function (value) {\n\t        return this.lookahead.type === token_1.Token.Punctuator && this.lookahead.value === value;\n\t    };\n\t    // Return true if the next token matches the specified keyword\n\t    Parser.prototype.matchKeyword = function (keyword) {\n\t        return this.lookahead.type === token_1.Token.Keyword && this.lookahead.value === keyword;\n\t    };\n\t    // Return true if the next token matches the specified contextual keyword\n\t    // (where an identifier is sometimes a keyword depending on the context)\n\t    Parser.prototype.matchContextualKeyword = function (keyword) {\n\t        return this.lookahead.type === token_1.Token.Identifier && this.lookahead.value === keyword;\n\t    };\n\t    // Return true if the next token is an assignment operator\n\t    Parser.prototype.matchAssign = function () {\n\t        if (this.lookahead.type !== token_1.Token.Punctuator) {\n\t            return false;\n\t        }\n\t        var op = this.lookahead.value;\n\t        return op === '=' ||\n\t            op === '*=' ||\n\t            op === '**=' ||\n\t            op === '/=' ||\n\t            op === '%=' ||\n\t            op === '+=' ||\n\t            op === '-=' ||\n\t            op === '<<=' ||\n\t            op === '>>=' ||\n\t            op === '>>>=' ||\n\t            op === '&=' ||\n\t            op === '^=' ||\n\t            op === '|=';\n\t    };\n\t    // Cover grammar support.\n\t    //\n\t    // When an assignment expression position starts with an left parenthesis, the determination of the type\n\t    // of the syntax is to be deferred arbitrarily long until the end of the parentheses pair (plus a lookahead)\n\t    // or the first comma. This situation also defers the determination of all the expressions nested in the pair.\n\t    //\n\t    // There are three productions that can be parsed in a parentheses pair that needs to be determined\n\t    // after the outermost pair is closed. They are:\n\t    //\n\t    //   1. AssignmentExpression\n\t    //   2. BindingElements\n\t    //   3. AssignmentTargets\n\t    //\n\t    // In order to avoid exponential backtracking, we use two flags to denote if the production can be\n\t    // binding element or assignment target.\n\t    //\n\t    // The three productions have the relationship:\n\t    //\n\t    //   BindingElements ⊆ AssignmentTargets ⊆ AssignmentExpression\n\t    //\n\t    // with a single exception that CoverInitializedName when used directly in an Expression, generates\n\t    // an early error. Therefore, we need the third state, firstCoverInitializedNameError, to track the\n\t    // first usage of CoverInitializedName and report it when we reached the end of the parentheses pair.\n\t    //\n\t    // isolateCoverGrammar function runs the given parser function with a new cover grammar context, and it does not\n\t    // effect the current flags. This means the production the parser parses is only used as an expression. Therefore\n\t    // the CoverInitializedName check is conducted.\n\t    //\n\t    // inheritCoverGrammar function runs the given parse function with a new cover grammar context, and it propagates\n\t    // the flags outside of the parser. This means the production the parser parses is used as a part of a potential\n\t    // pattern. The CoverInitializedName check is deferred.\n\t    Parser.prototype.isolateCoverGrammar = function (parseFunction) {\n\t        var previousIsBindingElement = this.context.isBindingElement;\n\t        var previousIsAssignmentTarget = this.context.isAssignmentTarget;\n\t        var previousFirstCoverInitializedNameError = this.context.firstCoverInitializedNameError;\n\t        this.context.isBindingElement = true;\n\t        this.context.isAssignmentTarget = true;\n\t        this.context.firstCoverInitializedNameError = null;\n\t        var result = parseFunction.call(this);\n\t        if (this.context.firstCoverInitializedNameError !== null) {\n\t            this.throwUnexpectedToken(this.context.firstCoverInitializedNameError);\n\t        }\n\t        this.context.isBindingElement = previousIsBindingElement;\n\t        this.context.isAssignmentTarget = previousIsAssignmentTarget;\n\t        this.context.firstCoverInitializedNameError = previousFirstCoverInitializedNameError;\n\t        return result;\n\t    };\n\t    Parser.prototype.inheritCoverGrammar = function (parseFunction) {\n\t        var previousIsBindingElement = this.context.isBindingElement;\n\t        var previousIsAssignmentTarget = this.context.isAssignmentTarget;\n\t        var previousFirstCoverInitializedNameError = this.context.firstCoverInitializedNameError;\n\t        this.context.isBindingElement = true;\n\t        this.context.isAssignmentTarget = true;\n\t        this.context.firstCoverInitializedNameError = null;\n\t        var result = parseFunction.call(this);\n\t        this.context.isBindingElement = this.context.isBindingElement && previousIsBindingElement;\n\t        this.context.isAssignmentTarget = this.context.isAssignmentTarget && previousIsAssignmentTarget;\n\t        this.context.firstCoverInitializedNameError = previousFirstCoverInitializedNameError || this.context.firstCoverInitializedNameError;\n\t        return result;\n\t    };\n\t    Parser.prototype.consumeSemicolon = function () {\n\t        if (this.match(';')) {\n\t            this.nextToken();\n\t        }\n\t        else if (!this.hasLineTerminator) {\n\t            if (this.lookahead.type !== token_1.Token.EOF && !this.match('}')) {\n\t                this.throwUnexpectedToken(this.lookahead);\n\t            }\n\t            this.lastMarker.index = this.startMarker.index;\n\t            this.lastMarker.lineNumber = this.startMarker.lineNumber;\n\t            this.lastMarker.lineStart = this.startMarker.lineStart;\n\t        }\n\t    };\n\t    // ECMA-262 12.2 Primary Expressions\n\t    Parser.prototype.parsePrimaryExpression = function () {\n\t        var node = this.createNode();\n\t        var expr;\n\t        var value, token, raw;\n\t        switch (this.lookahead.type) {\n\t            case token_1.Token.Identifier:\n\t                if (this.sourceType === 'module' && this.lookahead.value === 'await') {\n\t                    this.tolerateUnexpectedToken(this.lookahead);\n\t                }\n\t                expr = this.finalize(node, new Node.Identifier(this.nextToken().value));\n\t                break;\n\t            case token_1.Token.NumericLiteral:\n\t            case token_1.Token.StringLiteral:\n\t                if (this.context.strict && this.lookahead.octal) {\n\t                    this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.StrictOctalLiteral);\n\t                }\n\t                this.context.isAssignmentTarget = false;\n\t                this.context.isBindingElement = false;\n\t                token = this.nextToken();\n\t                raw = this.getTokenRaw(token);\n\t                expr = this.finalize(node, new Node.Literal(token.value, raw));\n\t                break;\n\t            case token_1.Token.BooleanLiteral:\n\t                this.context.isAssignmentTarget = false;\n\t                this.context.isBindingElement = false;\n\t                token = this.nextToken();\n\t                token.value = (token.value === 'true');\n\t                raw = this.getTokenRaw(token);\n\t                expr = this.finalize(node, new Node.Literal(token.value, raw));\n\t                break;\n\t            case token_1.Token.NullLiteral:\n\t                this.context.isAssignmentTarget = false;\n\t                this.context.isBindingElement = false;\n\t                token = this.nextToken();\n\t                token.value = null;\n\t                raw = this.getTokenRaw(token);\n\t                expr = this.finalize(node, new Node.Literal(token.value, raw));\n\t                break;\n\t            case token_1.Token.Template:\n\t                expr = this.parseTemplateLiteral();\n\t                break;\n\t            case token_1.Token.Punctuator:\n\t                value = this.lookahead.value;\n\t                switch (value) {\n\t                    case '(':\n\t                        this.context.isBindingElement = false;\n\t                        expr = this.inheritCoverGrammar(this.parseGroupExpression);\n\t                        break;\n\t                    case '[':\n\t                        expr = this.inheritCoverGrammar(this.parseArrayInitializer);\n\t                        break;\n\t                    case '{':\n\t                        expr = this.inheritCoverGrammar(this.parseObjectInitializer);\n\t                        break;\n\t                    case '/':\n\t                    case '/=':\n\t                        this.context.isAssignmentTarget = false;\n\t                        this.context.isBindingElement = false;\n\t                        this.scanner.index = this.startMarker.index;\n\t                        token = this.nextRegexToken();\n\t                        raw = this.getTokenRaw(token);\n\t                        expr = this.finalize(node, new Node.RegexLiteral(token.value, raw, token.regex));\n\t                        break;\n\t                    default:\n\t                        this.throwUnexpectedToken(this.nextToken());\n\t                }\n\t                break;\n\t            case token_1.Token.Keyword:\n\t                if (!this.context.strict && this.context.allowYield && this.matchKeyword('yield')) {\n\t                    expr = this.parseIdentifierName();\n\t                }\n\t                else if (!this.context.strict && this.matchKeyword('let')) {\n\t                    expr = this.finalize(node, new Node.Identifier(this.nextToken().value));\n\t                }\n\t                else {\n\t                    this.context.isAssignmentTarget = false;\n\t                    this.context.isBindingElement = false;\n\t                    if (this.matchKeyword('function')) {\n\t                        expr = this.parseFunctionExpression();\n\t                    }\n\t                    else if (this.matchKeyword('this')) {\n\t                        this.nextToken();\n\t                        expr = this.finalize(node, new Node.ThisExpression());\n\t                    }\n\t                    else if (this.matchKeyword('class')) {\n\t                        expr = this.parseClassExpression();\n\t                    }\n\t                    else {\n\t                        this.throwUnexpectedToken(this.nextToken());\n\t                    }\n\t                }\n\t                break;\n\t            default:\n\t                this.throwUnexpectedToken(this.nextToken());\n\t        }\n\t        return expr;\n\t    };\n\t    // ECMA-262 12.2.5 Array Initializer\n\t    Parser.prototype.parseSpreadElement = function () {\n\t        var node = this.createNode();\n\t        this.expect('...');\n\t        var arg = this.inheritCoverGrammar(this.parseAssignmentExpression);\n\t        return this.finalize(node, new Node.SpreadElement(arg));\n\t    };\n\t    Parser.prototype.parseArrayInitializer = function () {\n\t        var node = this.createNode();\n\t        var elements = [];\n\t        this.expect('[');\n\t        while (!this.match(']')) {\n\t            if (this.match(',')) {\n\t                this.nextToken();\n\t                elements.push(null);\n\t            }\n\t            else if (this.match('...')) {\n\t                var element = this.parseSpreadElement();\n\t                if (!this.match(']')) {\n\t                    this.context.isAssignmentTarget = false;\n\t                    this.context.isBindingElement = false;\n\t                    this.expect(',');\n\t                }\n\t                elements.push(element);\n\t            }\n\t            else {\n\t                elements.push(this.inheritCoverGrammar(this.parseAssignmentExpression));\n\t                if (!this.match(']')) {\n\t                    this.expect(',');\n\t                }\n\t            }\n\t        }\n\t        this.expect(']');\n\t        return this.finalize(node, new Node.ArrayExpression(elements));\n\t    };\n\t    // ECMA-262 12.2.6 Object Initializer\n\t    Parser.prototype.parsePropertyMethod = function (params) {\n\t        this.context.isAssignmentTarget = false;\n\t        this.context.isBindingElement = false;\n\t        var previousStrict = this.context.strict;\n\t        var body = this.isolateCoverGrammar(this.parseFunctionSourceElements);\n\t        if (this.context.strict && params.firstRestricted) {\n\t            this.tolerateUnexpectedToken(params.firstRestricted, params.message);\n\t        }\n\t        if (this.context.strict && params.stricted) {\n\t            this.tolerateUnexpectedToken(params.stricted, params.message);\n\t        }\n\t        this.context.strict = previousStrict;\n\t        return body;\n\t    };\n\t    Parser.prototype.parsePropertyMethodFunction = function () {\n\t        var isGenerator = false;\n\t        var node = this.createNode();\n\t        var previousAllowYield = this.context.allowYield;\n\t        this.context.allowYield = false;\n\t        var params = this.parseFormalParameters();\n\t        var method = this.parsePropertyMethod(params);\n\t        this.context.allowYield = previousAllowYield;\n\t        return this.finalize(node, new Node.FunctionExpression(null, params.params, method, isGenerator));\n\t    };\n\t    Parser.prototype.parseObjectPropertyKey = function () {\n\t        var node = this.createNode();\n\t        var token = this.nextToken();\n\t        var key = null;\n\t        switch (token.type) {\n\t            case token_1.Token.StringLiteral:\n\t            case token_1.Token.NumericLiteral:\n\t                if (this.context.strict && token.octal) {\n\t                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictOctalLiteral);\n\t                }\n\t                var raw = this.getTokenRaw(token);\n\t                key = this.finalize(node, new Node.Literal(token.value, raw));\n\t                break;\n\t            case token_1.Token.Identifier:\n\t            case token_1.Token.BooleanLiteral:\n\t            case token_1.Token.NullLiteral:\n\t            case token_1.Token.Keyword:\n\t                key = this.finalize(node, new Node.Identifier(token.value));\n\t                break;\n\t            case token_1.Token.Punctuator:\n\t                if (token.value === '[') {\n\t                    key = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t                    this.expect(']');\n\t                }\n\t                else {\n\t                    this.throwUnexpectedToken(token);\n\t                }\n\t                break;\n\t            default:\n\t                this.throwUnexpectedToken(token);\n\t        }\n\t        return key;\n\t    };\n\t    Parser.prototype.isPropertyKey = function (key, value) {\n\t        return (key.type === syntax_1.Syntax.Identifier && key.name === value) ||\n\t            (key.type === syntax_1.Syntax.Literal && key.value === value);\n\t    };\n\t    Parser.prototype.parseObjectProperty = function (hasProto) {\n\t        var node = this.createNode();\n\t        var token = this.lookahead;\n\t        var kind;\n\t        var key;\n\t        var value;\n\t        var computed = false;\n\t        var method = false;\n\t        var shorthand = false;\n\t        if (token.type === token_1.Token.Identifier) {\n\t            this.nextToken();\n\t            key = this.finalize(node, new Node.Identifier(token.value));\n\t        }\n\t        else if (this.match('*')) {\n\t            this.nextToken();\n\t        }\n\t        else {\n\t            computed = this.match('[');\n\t            key = this.parseObjectPropertyKey();\n\t        }\n\t        var lookaheadPropertyKey = this.qualifiedPropertyName(this.lookahead);\n\t        if (token.type === token_1.Token.Identifier && token.value === 'get' && lookaheadPropertyKey) {\n\t            kind = 'get';\n\t            computed = this.match('[');\n\t            key = this.parseObjectPropertyKey();\n\t            this.context.allowYield = false;\n\t            value = this.parseGetterMethod();\n\t        }\n\t        else if (token.type === token_1.Token.Identifier && token.value === 'set' && lookaheadPropertyKey) {\n\t            kind = 'set';\n\t            computed = this.match('[');\n\t            key = this.parseObjectPropertyKey();\n\t            value = this.parseSetterMethod();\n\t        }\n\t        else if (token.type === token_1.Token.Punctuator && token.value === '*' && lookaheadPropertyKey) {\n\t            kind = 'init';\n\t            computed = this.match('[');\n\t            key = this.parseObjectPropertyKey();\n\t            value = this.parseGeneratorMethod();\n\t            method = true;\n\t        }\n\t        else {\n\t            if (!key) {\n\t                this.throwUnexpectedToken(this.lookahead);\n\t            }\n\t            kind = 'init';\n\t            if (this.match(':')) {\n\t                if (!computed && this.isPropertyKey(key, '__proto__')) {\n\t                    if (hasProto.value) {\n\t                        this.tolerateError(messages_1.Messages.DuplicateProtoProperty);\n\t                    }\n\t                    hasProto.value = true;\n\t                }\n\t                this.nextToken();\n\t                value = this.inheritCoverGrammar(this.parseAssignmentExpression);\n\t            }\n\t            else if (this.match('(')) {\n\t                value = this.parsePropertyMethodFunction();\n\t                method = true;\n\t            }\n\t            else if (token.type === token_1.Token.Identifier) {\n\t                var id = this.finalize(node, new Node.Identifier(token.value));\n\t                if (this.match('=')) {\n\t                    this.context.firstCoverInitializedNameError = this.lookahead;\n\t                    this.nextToken();\n\t                    shorthand = true;\n\t                    var init = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t                    value = this.finalize(node, new Node.AssignmentPattern(id, init));\n\t                }\n\t                else {\n\t                    shorthand = true;\n\t                    value = id;\n\t                }\n\t            }\n\t            else {\n\t                this.throwUnexpectedToken(this.nextToken());\n\t            }\n\t        }\n\t        return this.finalize(node, new Node.Property(kind, key, computed, value, method, shorthand));\n\t    };\n\t    Parser.prototype.parseObjectInitializer = function () {\n\t        var node = this.createNode();\n\t        this.expect('{');\n\t        var properties = [];\n\t        var hasProto = { value: false };\n\t        while (!this.match('}')) {\n\t            properties.push(this.parseObjectProperty(hasProto));\n\t            if (!this.match('}')) {\n\t                this.expectCommaSeparator();\n\t            }\n\t        }\n\t        this.expect('}');\n\t        return this.finalize(node, new Node.ObjectExpression(properties));\n\t    };\n\t    // ECMA-262 12.2.9 Template Literals\n\t    Parser.prototype.parseTemplateHead = function () {\n\t        assert_1.assert(this.lookahead.head, 'Template literal must start with a template head');\n\t        var node = this.createNode();\n\t        var token = this.nextToken();\n\t        var value = {\n\t            raw: token.value.raw,\n\t            cooked: token.value.cooked\n\t        };\n\t        return this.finalize(node, new Node.TemplateElement(value, token.tail));\n\t    };\n\t    Parser.prototype.parseTemplateElement = function () {\n\t        if (this.lookahead.type !== token_1.Token.Template) {\n\t            this.throwUnexpectedToken();\n\t        }\n\t        var node = this.createNode();\n\t        var token = this.nextToken();\n\t        var value = {\n\t            raw: token.value.raw,\n\t            cooked: token.value.cooked\n\t        };\n\t        return this.finalize(node, new Node.TemplateElement(value, token.tail));\n\t    };\n\t    Parser.prototype.parseTemplateLiteral = function () {\n\t        var node = this.createNode();\n\t        var expressions = [];\n\t        var quasis = [];\n\t        var quasi = this.parseTemplateHead();\n\t        quasis.push(quasi);\n\t        while (!quasi.tail) {\n\t            expressions.push(this.parseExpression());\n\t            quasi = this.parseTemplateElement();\n\t            quasis.push(quasi);\n\t        }\n\t        return this.finalize(node, new Node.TemplateLiteral(quasis, expressions));\n\t    };\n\t    // ECMA-262 12.2.10 The Grouping Operator\n\t    Parser.prototype.reinterpretExpressionAsPattern = function (expr) {\n\t        switch (expr.type) {\n\t            case syntax_1.Syntax.Identifier:\n\t            case syntax_1.Syntax.MemberExpression:\n\t            case syntax_1.Syntax.RestElement:\n\t            case syntax_1.Syntax.AssignmentPattern:\n\t                break;\n\t            case syntax_1.Syntax.SpreadElement:\n\t                expr.type = syntax_1.Syntax.RestElement;\n\t                this.reinterpretExpressionAsPattern(expr.argument);\n\t                break;\n\t            case syntax_1.Syntax.ArrayExpression:\n\t                expr.type = syntax_1.Syntax.ArrayPattern;\n\t                for (var i = 0; i < expr.elements.length; i++) {\n\t                    if (expr.elements[i] !== null) {\n\t                        this.reinterpretExpressionAsPattern(expr.elements[i]);\n\t                    }\n\t                }\n\t                break;\n\t            case syntax_1.Syntax.ObjectExpression:\n\t                expr.type = syntax_1.Syntax.ObjectPattern;\n\t                for (var i = 0; i < expr.properties.length; i++) {\n\t                    this.reinterpretExpressionAsPattern(expr.properties[i].value);\n\t                }\n\t                break;\n\t            case syntax_1.Syntax.AssignmentExpression:\n\t                expr.type = syntax_1.Syntax.AssignmentPattern;\n\t                delete expr.operator;\n\t                this.reinterpretExpressionAsPattern(expr.left);\n\t                break;\n\t            default:\n\t                // Allow other node type for tolerant parsing.\n\t                break;\n\t        }\n\t    };\n\t    Parser.prototype.parseGroupExpression = function () {\n\t        var expr;\n\t        this.expect('(');\n\t        if (this.match(')')) {\n\t            this.nextToken();\n\t            if (!this.match('=>')) {\n\t                this.expect('=>');\n\t            }\n\t            expr = {\n\t                type: ArrowParameterPlaceHolder,\n\t                params: []\n\t            };\n\t        }\n\t        else {\n\t            var startToken = this.lookahead;\n\t            var params = [];\n\t            if (this.match('...')) {\n\t                expr = this.parseRestElement(params);\n\t                this.expect(')');\n\t                if (!this.match('=>')) {\n\t                    this.expect('=>');\n\t                }\n\t                expr = {\n\t                    type: ArrowParameterPlaceHolder,\n\t                    params: [expr]\n\t                };\n\t            }\n\t            else {\n\t                var arrow = false;\n\t                this.context.isBindingElement = true;\n\t                expr = this.inheritCoverGrammar(this.parseAssignmentExpression);\n\t                if (this.match(',')) {\n\t                    var expressions = [];\n\t                    this.context.isAssignmentTarget = false;\n\t                    expressions.push(expr);\n\t                    while (this.startMarker.index < this.scanner.length) {\n\t                        if (!this.match(',')) {\n\t                            break;\n\t                        }\n\t                        this.nextToken();\n\t                        if (this.match('...')) {\n\t                            if (!this.context.isBindingElement) {\n\t                                this.throwUnexpectedToken(this.lookahead);\n\t                            }\n\t                            expressions.push(this.parseRestElement(params));\n\t                            this.expect(')');\n\t                            if (!this.match('=>')) {\n\t                                this.expect('=>');\n\t                            }\n\t                            this.context.isBindingElement = false;\n\t                            for (var i = 0; i < expressions.length; i++) {\n\t                                this.reinterpretExpressionAsPattern(expressions[i]);\n\t                            }\n\t                            arrow = true;\n\t                            expr = {\n\t                                type: ArrowParameterPlaceHolder,\n\t                                params: expressions\n\t                            };\n\t                        }\n\t                        else {\n\t                            expressions.push(this.inheritCoverGrammar(this.parseAssignmentExpression));\n\t                        }\n\t                        if (arrow) {\n\t                            break;\n\t                        }\n\t                    }\n\t                    if (!arrow) {\n\t                        expr = this.finalize(this.startNode(startToken), new Node.SequenceExpression(expressions));\n\t                    }\n\t                }\n\t                if (!arrow) {\n\t                    this.expect(')');\n\t                    if (this.match('=>')) {\n\t                        if (expr.type === syntax_1.Syntax.Identifier && expr.name === 'yield') {\n\t                            arrow = true;\n\t                            expr = {\n\t                                type: ArrowParameterPlaceHolder,\n\t                                params: [expr]\n\t                            };\n\t                        }\n\t                        if (!arrow) {\n\t                            if (!this.context.isBindingElement) {\n\t                                this.throwUnexpectedToken(this.lookahead);\n\t                            }\n\t                            if (expr.type === syntax_1.Syntax.SequenceExpression) {\n\t                                for (var i = 0; i < expr.expressions.length; i++) {\n\t                                    this.reinterpretExpressionAsPattern(expr.expressions[i]);\n\t                                }\n\t                            }\n\t                            else {\n\t                                this.reinterpretExpressionAsPattern(expr);\n\t                            }\n\t                            var params_1 = (expr.type === syntax_1.Syntax.SequenceExpression ? expr.expressions : [expr]);\n\t                            expr = {\n\t                                type: ArrowParameterPlaceHolder,\n\t                                params: params_1\n\t                            };\n\t                        }\n\t                    }\n\t                    this.context.isBindingElement = false;\n\t                }\n\t            }\n\t        }\n\t        return expr;\n\t    };\n\t    // ECMA-262 12.3 Left-Hand-Side Expressions\n\t    Parser.prototype.parseArguments = function () {\n\t        this.expect('(');\n\t        var args = [];\n\t        if (!this.match(')')) {\n\t            while (true) {\n\t                var expr = this.match('...') ? this.parseSpreadElement() :\n\t                    this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t                args.push(expr);\n\t                if (this.match(')')) {\n\t                    break;\n\t                }\n\t                this.expectCommaSeparator();\n\t            }\n\t        }\n\t        this.expect(')');\n\t        return args;\n\t    };\n\t    Parser.prototype.isIdentifierName = function (token) {\n\t        return token.type === token_1.Token.Identifier ||\n\t            token.type === token_1.Token.Keyword ||\n\t            token.type === token_1.Token.BooleanLiteral ||\n\t            token.type === token_1.Token.NullLiteral;\n\t    };\n\t    Parser.prototype.parseIdentifierName = function () {\n\t        var node = this.createNode();\n\t        var token = this.nextToken();\n\t        if (!this.isIdentifierName(token)) {\n\t            this.throwUnexpectedToken(token);\n\t        }\n\t        return this.finalize(node, new Node.Identifier(token.value));\n\t    };\n\t    Parser.prototype.parseNewExpression = function () {\n\t        var node = this.createNode();\n\t        var id = this.parseIdentifierName();\n\t        assert_1.assert(id.name === 'new', 'New expression must start with `new`');\n\t        var expr;\n\t        if (this.match('.')) {\n\t            this.nextToken();\n\t            if (this.lookahead.type === token_1.Token.Identifier && this.context.inFunctionBody && this.lookahead.value === 'target') {\n\t                var property = this.parseIdentifierName();\n\t                expr = new Node.MetaProperty(id, property);\n\t            }\n\t            else {\n\t                this.throwUnexpectedToken(this.lookahead);\n\t            }\n\t        }\n\t        else {\n\t            var callee = this.isolateCoverGrammar(this.parseLeftHandSideExpression);\n\t            var args = this.match('(') ? this.parseArguments() : [];\n\t            expr = new Node.NewExpression(callee, args);\n\t            this.context.isAssignmentTarget = false;\n\t            this.context.isBindingElement = false;\n\t        }\n\t        return this.finalize(node, expr);\n\t    };\n\t    Parser.prototype.parseLeftHandSideExpressionAllowCall = function () {\n\t        var startToken = this.lookahead;\n\t        var previousAllowIn = this.context.allowIn;\n\t        this.context.allowIn = true;\n\t        var expr;\n\t        if (this.matchKeyword('super') && this.context.inFunctionBody) {\n\t            expr = this.createNode();\n\t            this.nextToken();\n\t            expr = this.finalize(expr, new Node.Super());\n\t            if (!this.match('(') && !this.match('.') && !this.match('[')) {\n\t                this.throwUnexpectedToken(this.lookahead);\n\t            }\n\t        }\n\t        else {\n\t            expr = this.inheritCoverGrammar(this.matchKeyword('new') ? this.parseNewExpression : this.parsePrimaryExpression);\n\t        }\n\t        while (true) {\n\t            if (this.match('.')) {\n\t                this.context.isBindingElement = false;\n\t                this.context.isAssignmentTarget = true;\n\t                this.expect('.');\n\t                var property = this.parseIdentifierName();\n\t                expr = this.finalize(this.startNode(startToken), new Node.StaticMemberExpression(expr, property));\n\t            }\n\t            else if (this.match('(')) {\n\t                this.context.isBindingElement = false;\n\t                this.context.isAssignmentTarget = false;\n\t                var args = this.parseArguments();\n\t                expr = this.finalize(this.startNode(startToken), new Node.CallExpression(expr, args));\n\t            }\n\t            else if (this.match('[')) {\n\t                this.context.isBindingElement = false;\n\t                this.context.isAssignmentTarget = true;\n\t                this.expect('[');\n\t                var property = this.isolateCoverGrammar(this.parseExpression);\n\t                this.expect(']');\n\t                expr = this.finalize(this.startNode(startToken), new Node.ComputedMemberExpression(expr, property));\n\t            }\n\t            else if (this.lookahead.type === token_1.Token.Template && this.lookahead.head) {\n\t                var quasi = this.parseTemplateLiteral();\n\t                expr = this.finalize(this.startNode(startToken), new Node.TaggedTemplateExpression(expr, quasi));\n\t            }\n\t            else {\n\t                break;\n\t            }\n\t        }\n\t        this.context.allowIn = previousAllowIn;\n\t        return expr;\n\t    };\n\t    Parser.prototype.parseSuper = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('super');\n\t        if (!this.match('[') && !this.match('.')) {\n\t            this.throwUnexpectedToken(this.lookahead);\n\t        }\n\t        return this.finalize(node, new Node.Super());\n\t    };\n\t    Parser.prototype.parseLeftHandSideExpression = function () {\n\t        assert_1.assert(this.context.allowIn, 'callee of new expression always allow in keyword.');\n\t        var node = this.startNode(this.lookahead);\n\t        var expr = (this.matchKeyword('super') && this.context.inFunctionBody) ? this.parseSuper() :\n\t            this.inheritCoverGrammar(this.matchKeyword('new') ? this.parseNewExpression : this.parsePrimaryExpression);\n\t        while (true) {\n\t            if (this.match('[')) {\n\t                this.context.isBindingElement = false;\n\t                this.context.isAssignmentTarget = true;\n\t                this.expect('[');\n\t                var property = this.isolateCoverGrammar(this.parseExpression);\n\t                this.expect(']');\n\t                expr = this.finalize(node, new Node.ComputedMemberExpression(expr, property));\n\t            }\n\t            else if (this.match('.')) {\n\t                this.context.isBindingElement = false;\n\t                this.context.isAssignmentTarget = true;\n\t                this.expect('.');\n\t                var property = this.parseIdentifierName();\n\t                expr = this.finalize(node, new Node.StaticMemberExpression(expr, property));\n\t            }\n\t            else if (this.lookahead.type === token_1.Token.Template && this.lookahead.head) {\n\t                var quasi = this.parseTemplateLiteral();\n\t                expr = this.finalize(node, new Node.TaggedTemplateExpression(expr, quasi));\n\t            }\n\t            else {\n\t                break;\n\t            }\n\t        }\n\t        return expr;\n\t    };\n\t    // ECMA-262 12.4 Update Expressions\n\t    Parser.prototype.parseUpdateExpression = function () {\n\t        var expr;\n\t        var startToken = this.lookahead;\n\t        if (this.match('++') || this.match('--')) {\n\t            var node = this.startNode(startToken);\n\t            var token = this.nextToken();\n\t            expr = this.inheritCoverGrammar(this.parseUnaryExpression);\n\t            if (this.context.strict && expr.type === syntax_1.Syntax.Identifier && this.scanner.isRestrictedWord(expr.name)) {\n\t                this.tolerateError(messages_1.Messages.StrictLHSPrefix);\n\t            }\n\t            if (!this.context.isAssignmentTarget) {\n\t                this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);\n\t            }\n\t            var prefix = true;\n\t            expr = this.finalize(node, new Node.UpdateExpression(token.value, expr, prefix));\n\t            this.context.isAssignmentTarget = false;\n\t            this.context.isBindingElement = false;\n\t        }\n\t        else {\n\t            expr = this.inheritCoverGrammar(this.parseLeftHandSideExpressionAllowCall);\n\t            if (!this.hasLineTerminator && this.lookahead.type === token_1.Token.Punctuator) {\n\t                if (this.match('++') || this.match('--')) {\n\t                    if (this.context.strict && expr.type === syntax_1.Syntax.Identifier && this.scanner.isRestrictedWord(expr.name)) {\n\t                        this.tolerateError(messages_1.Messages.StrictLHSPostfix);\n\t                    }\n\t                    if (!this.context.isAssignmentTarget) {\n\t                        this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);\n\t                    }\n\t                    this.context.isAssignmentTarget = false;\n\t                    this.context.isBindingElement = false;\n\t                    var operator = this.nextToken().value;\n\t                    var prefix = false;\n\t                    expr = this.finalize(this.startNode(startToken), new Node.UpdateExpression(operator, expr, prefix));\n\t                }\n\t            }\n\t        }\n\t        return expr;\n\t    };\n\t    // ECMA-262 12.5 Unary Operators\n\t    Parser.prototype.parseUnaryExpression = function () {\n\t        var expr;\n\t        if (this.match('+') || this.match('-') || this.match('~') || this.match('!') ||\n\t            this.matchKeyword('delete') || this.matchKeyword('void') || this.matchKeyword('typeof')) {\n\t            var node = this.startNode(this.lookahead);\n\t            var token = this.nextToken();\n\t            expr = this.inheritCoverGrammar(this.parseUnaryExpression);\n\t            expr = this.finalize(node, new Node.UnaryExpression(token.value, expr));\n\t            if (this.context.strict && expr.operator === 'delete' && expr.argument.type === syntax_1.Syntax.Identifier) {\n\t                this.tolerateError(messages_1.Messages.StrictDelete);\n\t            }\n\t            this.context.isAssignmentTarget = false;\n\t            this.context.isBindingElement = false;\n\t        }\n\t        else {\n\t            expr = this.parseUpdateExpression();\n\t        }\n\t        return expr;\n\t    };\n\t    Parser.prototype.parseExponentiationExpression = function () {\n\t        var startToken = this.lookahead;\n\t        var expr = this.inheritCoverGrammar(this.parseUnaryExpression);\n\t        if (expr.type !== syntax_1.Syntax.UnaryExpression && this.match('**')) {\n\t            this.nextToken();\n\t            this.context.isAssignmentTarget = false;\n\t            this.context.isBindingElement = false;\n\t            var left = expr;\n\t            var right = this.isolateCoverGrammar(this.parseExponentiationExpression);\n\t            expr = this.finalize(this.startNode(startToken), new Node.BinaryExpression('**', left, right));\n\t        }\n\t        return expr;\n\t    };\n\t    // ECMA-262 12.6 Exponentiation Operators\n\t    // ECMA-262 12.7 Multiplicative Operators\n\t    // ECMA-262 12.8 Additive Operators\n\t    // ECMA-262 12.9 Bitwise Shift Operators\n\t    // ECMA-262 12.10 Relational Operators\n\t    // ECMA-262 12.11 Equality Operators\n\t    // ECMA-262 12.12 Binary Bitwise Operators\n\t    // ECMA-262 12.13 Binary Logical Operators\n\t    Parser.prototype.binaryPrecedence = function (token) {\n\t        var op = token.value;\n\t        var precedence;\n\t        if (token.type === token_1.Token.Punctuator) {\n\t            precedence = this.operatorPrecedence[op] || 0;\n\t        }\n\t        else if (token.type === token_1.Token.Keyword) {\n\t            precedence = (op === 'instanceof' || (this.context.allowIn && op === 'in')) ? 7 : 0;\n\t        }\n\t        else {\n\t            precedence = 0;\n\t        }\n\t        return precedence;\n\t    };\n\t    Parser.prototype.parseBinaryExpression = function () {\n\t        var startToken = this.lookahead;\n\t        var expr = this.inheritCoverGrammar(this.parseExponentiationExpression);\n\t        var token = this.lookahead;\n\t        var prec = this.binaryPrecedence(token);\n\t        if (prec > 0) {\n\t            this.nextToken();\n\t            token.prec = prec;\n\t            this.context.isAssignmentTarget = false;\n\t            this.context.isBindingElement = false;\n\t            var markers = [startToken, this.lookahead];\n\t            var left = expr;\n\t            var right = this.isolateCoverGrammar(this.parseExponentiationExpression);\n\t            var stack = [left, token, right];\n\t            while (true) {\n\t                prec = this.binaryPrecedence(this.lookahead);\n\t                if (prec <= 0) {\n\t                    break;\n\t                }\n\t                // Reduce: make a binary expression from the three topmost entries.\n\t                while ((stack.length > 2) && (prec <= stack[stack.length - 2].prec)) {\n\t                    right = stack.pop();\n\t                    var operator = stack.pop().value;\n\t                    left = stack.pop();\n\t                    markers.pop();\n\t                    var node = this.startNode(markers[markers.length - 1]);\n\t                    stack.push(this.finalize(node, new Node.BinaryExpression(operator, left, right)));\n\t                }\n\t                // Shift.\n\t                token = this.nextToken();\n\t                token.prec = prec;\n\t                stack.push(token);\n\t                markers.push(this.lookahead);\n\t                stack.push(this.isolateCoverGrammar(this.parseExponentiationExpression));\n\t            }\n\t            // Final reduce to clean-up the stack.\n\t            var i = stack.length - 1;\n\t            expr = stack[i];\n\t            markers.pop();\n\t            while (i > 1) {\n\t                var node = this.startNode(markers.pop());\n\t                expr = this.finalize(node, new Node.BinaryExpression(stack[i - 1].value, stack[i - 2], expr));\n\t                i -= 2;\n\t            }\n\t        }\n\t        return expr;\n\t    };\n\t    // ECMA-262 12.14 Conditional Operator\n\t    Parser.prototype.parseConditionalExpression = function () {\n\t        var startToken = this.lookahead;\n\t        var expr = this.inheritCoverGrammar(this.parseBinaryExpression);\n\t        if (this.match('?')) {\n\t            this.nextToken();\n\t            var previousAllowIn = this.context.allowIn;\n\t            this.context.allowIn = true;\n\t            var consequent = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t            this.context.allowIn = previousAllowIn;\n\t            this.expect(':');\n\t            var alternate = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t            expr = this.finalize(this.startNode(startToken), new Node.ConditionalExpression(expr, consequent, alternate));\n\t            this.context.isAssignmentTarget = false;\n\t            this.context.isBindingElement = false;\n\t        }\n\t        return expr;\n\t    };\n\t    // ECMA-262 12.15 Assignment Operators\n\t    Parser.prototype.checkPatternParam = function (options, param) {\n\t        switch (param.type) {\n\t            case syntax_1.Syntax.Identifier:\n\t                this.validateParam(options, param, param.name);\n\t                break;\n\t            case syntax_1.Syntax.RestElement:\n\t                this.checkPatternParam(options, param.argument);\n\t                break;\n\t            case syntax_1.Syntax.AssignmentPattern:\n\t                this.checkPatternParam(options, param.left);\n\t                break;\n\t            case syntax_1.Syntax.ArrayPattern:\n\t                for (var i = 0; i < param.elements.length; i++) {\n\t                    if (param.elements[i] !== null) {\n\t                        this.checkPatternParam(options, param.elements[i]);\n\t                    }\n\t                }\n\t                break;\n\t            case syntax_1.Syntax.YieldExpression:\n\t                break;\n\t            default:\n\t                assert_1.assert(param.type === syntax_1.Syntax.ObjectPattern, 'Invalid type');\n\t                for (var i = 0; i < param.properties.length; i++) {\n\t                    this.checkPatternParam(options, param.properties[i].value);\n\t                }\n\t                break;\n\t        }\n\t    };\n\t    Parser.prototype.reinterpretAsCoverFormalsList = function (expr) {\n\t        var params = [expr];\n\t        var options;\n\t        switch (expr.type) {\n\t            case syntax_1.Syntax.Identifier:\n\t                break;\n\t            case ArrowParameterPlaceHolder:\n\t                params = expr.params;\n\t                break;\n\t            default:\n\t                return null;\n\t        }\n\t        options = {\n\t            paramSet: {}\n\t        };\n\t        for (var i = 0; i < params.length; ++i) {\n\t            var param = params[i];\n\t            if (param.type === syntax_1.Syntax.AssignmentPattern) {\n\t                if (param.right.type === syntax_1.Syntax.YieldExpression) {\n\t                    if (param.right.argument) {\n\t                        this.throwUnexpectedToken(this.lookahead);\n\t                    }\n\t                    param.right.type = syntax_1.Syntax.Identifier;\n\t                    param.right.name = 'yield';\n\t                    delete param.right.argument;\n\t                    delete param.right.delegate;\n\t                }\n\t            }\n\t            this.checkPatternParam(options, param);\n\t            params[i] = param;\n\t        }\n\t        if (this.context.strict || !this.context.allowYield) {\n\t            for (var i = 0; i < params.length; ++i) {\n\t                var param = params[i];\n\t                if (param.type === syntax_1.Syntax.YieldExpression) {\n\t                    this.throwUnexpectedToken(this.lookahead);\n\t                }\n\t            }\n\t        }\n\t        if (options.message === messages_1.Messages.StrictParamDupe) {\n\t            var token = this.context.strict ? options.stricted : options.firstRestricted;\n\t            this.throwUnexpectedToken(token, options.message);\n\t        }\n\t        return {\n\t            params: params,\n\t            stricted: options.stricted,\n\t            firstRestricted: options.firstRestricted,\n\t            message: options.message\n\t        };\n\t    };\n\t    Parser.prototype.parseAssignmentExpression = function () {\n\t        var expr;\n\t        if (!this.context.allowYield && this.matchKeyword('yield')) {\n\t            expr = this.parseYieldExpression();\n\t        }\n\t        else {\n\t            var startToken = this.lookahead;\n\t            var token = startToken;\n\t            expr = this.parseConditionalExpression();\n\t            if (expr.type === ArrowParameterPlaceHolder || this.match('=>')) {\n\t                // ECMA-262 14.2 Arrow Function Definitions\n\t                this.context.isAssignmentTarget = false;\n\t                this.context.isBindingElement = false;\n\t                var list = this.reinterpretAsCoverFormalsList(expr);\n\t                if (list) {\n\t                    if (this.hasLineTerminator) {\n\t                        this.tolerateUnexpectedToken(this.lookahead);\n\t                    }\n\t                    this.context.firstCoverInitializedNameError = null;\n\t                    var previousStrict = this.context.strict;\n\t                    var previousAllowYield = this.context.allowYield;\n\t                    this.context.allowYield = true;\n\t                    var node = this.startNode(startToken);\n\t                    this.expect('=>');\n\t                    var body = this.match('{') ? this.parseFunctionSourceElements() :\n\t                        this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t                    var expression = body.type !== syntax_1.Syntax.BlockStatement;\n\t                    if (this.context.strict && list.firstRestricted) {\n\t                        this.throwUnexpectedToken(list.firstRestricted, list.message);\n\t                    }\n\t                    if (this.context.strict && list.stricted) {\n\t                        this.tolerateUnexpectedToken(list.stricted, list.message);\n\t                    }\n\t                    expr = this.finalize(node, new Node.ArrowFunctionExpression(list.params, body, expression));\n\t                    this.context.strict = previousStrict;\n\t                    this.context.allowYield = previousAllowYield;\n\t                }\n\t            }\n\t            else {\n\t                if (this.matchAssign()) {\n\t                    if (!this.context.isAssignmentTarget) {\n\t                        this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);\n\t                    }\n\t                    if (this.context.strict && expr.type === syntax_1.Syntax.Identifier) {\n\t                        var id = (expr);\n\t                        if (this.scanner.isRestrictedWord(id.name)) {\n\t                            this.tolerateUnexpectedToken(token, messages_1.Messages.StrictLHSAssignment);\n\t                        }\n\t                        if (this.scanner.isStrictModeReservedWord(id.name)) {\n\t                            this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);\n\t                        }\n\t                    }\n\t                    if (!this.match('=')) {\n\t                        this.context.isAssignmentTarget = false;\n\t                        this.context.isBindingElement = false;\n\t                    }\n\t                    else {\n\t                        this.reinterpretExpressionAsPattern(expr);\n\t                    }\n\t                    token = this.nextToken();\n\t                    var right = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t                    expr = this.finalize(this.startNode(startToken), new Node.AssignmentExpression(token.value, expr, right));\n\t                    this.context.firstCoverInitializedNameError = null;\n\t                }\n\t            }\n\t        }\n\t        return expr;\n\t    };\n\t    // ECMA-262 12.16 Comma Operator\n\t    Parser.prototype.parseExpression = function () {\n\t        var startToken = this.lookahead;\n\t        var expr = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t        if (this.match(',')) {\n\t            var expressions = [];\n\t            expressions.push(expr);\n\t            while (this.startMarker.index < this.scanner.length) {\n\t                if (!this.match(',')) {\n\t                    break;\n\t                }\n\t                this.nextToken();\n\t                expressions.push(this.isolateCoverGrammar(this.parseAssignmentExpression));\n\t            }\n\t            expr = this.finalize(this.startNode(startToken), new Node.SequenceExpression(expressions));\n\t        }\n\t        return expr;\n\t    };\n\t    // ECMA-262 13.2 Block\n\t    Parser.prototype.parseStatementListItem = function () {\n\t        var statement = null;\n\t        this.context.isAssignmentTarget = true;\n\t        this.context.isBindingElement = true;\n\t        if (this.lookahead.type === token_1.Token.Keyword) {\n\t            switch (this.lookahead.value) {\n\t                case 'export':\n\t                    if (this.sourceType !== 'module') {\n\t                        this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.IllegalExportDeclaration);\n\t                    }\n\t                    statement = this.parseExportDeclaration();\n\t                    break;\n\t                case 'import':\n\t                    if (this.sourceType !== 'module') {\n\t                        this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.IllegalImportDeclaration);\n\t                    }\n\t                    statement = this.parseImportDeclaration();\n\t                    break;\n\t                case 'const':\n\t                    statement = this.parseLexicalDeclaration({ inFor: false });\n\t                    break;\n\t                case 'function':\n\t                    statement = this.parseFunctionDeclaration();\n\t                    break;\n\t                case 'class':\n\t                    statement = this.parseClassDeclaration();\n\t                    break;\n\t                case 'let':\n\t                    statement = this.isLexicalDeclaration() ? this.parseLexicalDeclaration({ inFor: false }) : this.parseStatement();\n\t                    break;\n\t                default:\n\t                    statement = this.parseStatement();\n\t                    break;\n\t            }\n\t        }\n\t        else {\n\t            statement = this.parseStatement();\n\t        }\n\t        return statement;\n\t    };\n\t    Parser.prototype.parseBlock = function () {\n\t        var node = this.createNode();\n\t        this.expect('{');\n\t        var block = [];\n\t        while (true) {\n\t            if (this.match('}')) {\n\t                break;\n\t            }\n\t            block.push(this.parseStatementListItem());\n\t        }\n\t        this.expect('}');\n\t        return this.finalize(node, new Node.BlockStatement(block));\n\t    };\n\t    // ECMA-262 13.3.1 Let and Const Declarations\n\t    Parser.prototype.parseLexicalBinding = function (kind, options) {\n\t        var node = this.createNode();\n\t        var params = [];\n\t        var id = this.parsePattern(params, kind);\n\t        // ECMA-262 12.2.1\n\t        if (this.context.strict && id.type === syntax_1.Syntax.Identifier) {\n\t            if (this.scanner.isRestrictedWord((id).name)) {\n\t                this.tolerateError(messages_1.Messages.StrictVarName);\n\t            }\n\t        }\n\t        var init = null;\n\t        if (kind === 'const') {\n\t            if (!this.matchKeyword('in') && !this.matchContextualKeyword('of')) {\n\t                this.expect('=');\n\t                init = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t            }\n\t        }\n\t        else if ((!options.inFor && id.type !== syntax_1.Syntax.Identifier) || this.match('=')) {\n\t            this.expect('=');\n\t            init = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t        }\n\t        return this.finalize(node, new Node.VariableDeclarator(id, init));\n\t    };\n\t    Parser.prototype.parseBindingList = function (kind, options) {\n\t        var list = [this.parseLexicalBinding(kind, options)];\n\t        while (this.match(',')) {\n\t            this.nextToken();\n\t            list.push(this.parseLexicalBinding(kind, options));\n\t        }\n\t        return list;\n\t    };\n\t    Parser.prototype.isLexicalDeclaration = function () {\n\t        var previousIndex = this.scanner.index;\n\t        var previousLineNumber = this.scanner.lineNumber;\n\t        var previousLineStart = this.scanner.lineStart;\n\t        this.collectComments();\n\t        var next = this.scanner.lex();\n\t        this.scanner.index = previousIndex;\n\t        this.scanner.lineNumber = previousLineNumber;\n\t        this.scanner.lineStart = previousLineStart;\n\t        return (next.type === token_1.Token.Identifier) ||\n\t            (next.type === token_1.Token.Punctuator && next.value === '[') ||\n\t            (next.type === token_1.Token.Punctuator && next.value === '{') ||\n\t            (next.type === token_1.Token.Keyword && next.value === 'let') ||\n\t            (next.type === token_1.Token.Keyword && next.value === 'yield');\n\t    };\n\t    Parser.prototype.parseLexicalDeclaration = function (options) {\n\t        var node = this.createNode();\n\t        var kind = this.nextToken().value;\n\t        assert_1.assert(kind === 'let' || kind === 'const', 'Lexical declaration must be either let or const');\n\t        var declarations = this.parseBindingList(kind, options);\n\t        this.consumeSemicolon();\n\t        return this.finalize(node, new Node.VariableDeclaration(declarations, kind));\n\t    };\n\t    // ECMA-262 13.3.3 Destructuring Binding Patterns\n\t    Parser.prototype.parseBindingRestElement = function (params, kind) {\n\t        var node = this.createNode();\n\t        this.expect('...');\n\t        var arg = this.parsePattern(params, kind);\n\t        return this.finalize(node, new Node.RestElement(arg));\n\t    };\n\t    Parser.prototype.parseArrayPattern = function (params, kind) {\n\t        var node = this.createNode();\n\t        this.expect('[');\n\t        var elements = [];\n\t        while (!this.match(']')) {\n\t            if (this.match(',')) {\n\t                this.nextToken();\n\t                elements.push(null);\n\t            }\n\t            else {\n\t                if (this.match('...')) {\n\t                    elements.push(this.parseBindingRestElement(params, kind));\n\t                    break;\n\t                }\n\t                else {\n\t                    elements.push(this.parsePatternWithDefault(params, kind));\n\t                }\n\t                if (!this.match(']')) {\n\t                    this.expect(',');\n\t                }\n\t            }\n\t        }\n\t        this.expect(']');\n\t        return this.finalize(node, new Node.ArrayPattern(elements));\n\t    };\n\t    Parser.prototype.parsePropertyPattern = function (params, kind) {\n\t        var node = this.createNode();\n\t        var computed = false;\n\t        var shorthand = false;\n\t        var method = false;\n\t        var key;\n\t        var value;\n\t        if (this.lookahead.type === token_1.Token.Identifier) {\n\t            var keyToken = this.lookahead;\n\t            key = this.parseVariableIdentifier();\n\t            var init = this.finalize(node, new Node.Identifier(keyToken.value));\n\t            if (this.match('=')) {\n\t                params.push(keyToken);\n\t                shorthand = true;\n\t                this.nextToken();\n\t                var expr = this.parseAssignmentExpression();\n\t                value = this.finalize(this.startNode(keyToken), new Node.AssignmentPattern(init, expr));\n\t            }\n\t            else if (!this.match(':')) {\n\t                params.push(keyToken);\n\t                shorthand = true;\n\t                value = init;\n\t            }\n\t            else {\n\t                this.expect(':');\n\t                value = this.parsePatternWithDefault(params, kind);\n\t            }\n\t        }\n\t        else {\n\t            computed = this.match('[');\n\t            key = this.parseObjectPropertyKey();\n\t            this.expect(':');\n\t            value = this.parsePatternWithDefault(params, kind);\n\t        }\n\t        return this.finalize(node, new Node.Property('init', key, computed, value, method, shorthand));\n\t    };\n\t    Parser.prototype.parseObjectPattern = function (params, kind) {\n\t        var node = this.createNode();\n\t        var properties = [];\n\t        this.expect('{');\n\t        while (!this.match('}')) {\n\t            properties.push(this.parsePropertyPattern(params, kind));\n\t            if (!this.match('}')) {\n\t                this.expect(',');\n\t            }\n\t        }\n\t        this.expect('}');\n\t        return this.finalize(node, new Node.ObjectPattern(properties));\n\t    };\n\t    Parser.prototype.parsePattern = function (params, kind) {\n\t        var pattern;\n\t        if (this.match('[')) {\n\t            pattern = this.parseArrayPattern(params, kind);\n\t        }\n\t        else if (this.match('{')) {\n\t            pattern = this.parseObjectPattern(params, kind);\n\t        }\n\t        else {\n\t            if (this.matchKeyword('let') && (kind === 'const' || kind === 'let')) {\n\t                this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.UnexpectedToken);\n\t            }\n\t            params.push(this.lookahead);\n\t            pattern = this.parseVariableIdentifier(kind);\n\t        }\n\t        return pattern;\n\t    };\n\t    Parser.prototype.parsePatternWithDefault = function (params, kind) {\n\t        var startToken = this.lookahead;\n\t        var pattern = this.parsePattern(params, kind);\n\t        if (this.match('=')) {\n\t            this.nextToken();\n\t            var previousAllowYield = this.context.allowYield;\n\t            this.context.allowYield = true;\n\t            var right = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t            this.context.allowYield = previousAllowYield;\n\t            pattern = this.finalize(this.startNode(startToken), new Node.AssignmentPattern(pattern, right));\n\t        }\n\t        return pattern;\n\t    };\n\t    // ECMA-262 13.3.2 Variable Statement\n\t    Parser.prototype.parseVariableIdentifier = function (kind) {\n\t        var node = this.createNode();\n\t        var token = this.nextToken();\n\t        if (token.type === token_1.Token.Keyword && token.value === 'yield') {\n\t            if (this.context.strict) {\n\t                this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);\n\t            }\n\t            if (!this.context.allowYield) {\n\t                this.throwUnexpectedToken(token);\n\t            }\n\t        }\n\t        else if (token.type !== token_1.Token.Identifier) {\n\t            if (this.context.strict && token.type === token_1.Token.Keyword && this.scanner.isStrictModeReservedWord(token.value)) {\n\t                this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);\n\t            }\n\t            else {\n\t                if (this.context.strict || token.value !== 'let' || kind !== 'var') {\n\t                    this.throwUnexpectedToken(token);\n\t                }\n\t            }\n\t        }\n\t        else if (this.sourceType === 'module' && token.type === token_1.Token.Identifier && token.value === 'await') {\n\t            this.tolerateUnexpectedToken(token);\n\t        }\n\t        return this.finalize(node, new Node.Identifier(token.value));\n\t    };\n\t    Parser.prototype.parseVariableDeclaration = function (options) {\n\t        var node = this.createNode();\n\t        var params = [];\n\t        var id = this.parsePattern(params, 'var');\n\t        // ECMA-262 12.2.1\n\t        if (this.context.strict && id.type === syntax_1.Syntax.Identifier) {\n\t            if (this.scanner.isRestrictedWord((id).name)) {\n\t                this.tolerateError(messages_1.Messages.StrictVarName);\n\t            }\n\t        }\n\t        var init = null;\n\t        if (this.match('=')) {\n\t            this.nextToken();\n\t            init = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t        }\n\t        else if (id.type !== syntax_1.Syntax.Identifier && !options.inFor) {\n\t            this.expect('=');\n\t        }\n\t        return this.finalize(node, new Node.VariableDeclarator(id, init));\n\t    };\n\t    Parser.prototype.parseVariableDeclarationList = function (options) {\n\t        var opt = { inFor: options.inFor };\n\t        var list = [];\n\t        list.push(this.parseVariableDeclaration(opt));\n\t        while (this.match(',')) {\n\t            this.nextToken();\n\t            list.push(this.parseVariableDeclaration(opt));\n\t        }\n\t        return list;\n\t    };\n\t    Parser.prototype.parseVariableStatement = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('var');\n\t        var declarations = this.parseVariableDeclarationList({ inFor: false });\n\t        this.consumeSemicolon();\n\t        return this.finalize(node, new Node.VariableDeclaration(declarations, 'var'));\n\t    };\n\t    // ECMA-262 13.4 Empty Statement\n\t    Parser.prototype.parseEmptyStatement = function () {\n\t        var node = this.createNode();\n\t        this.expect(';');\n\t        return this.finalize(node, new Node.EmptyStatement());\n\t    };\n\t    // ECMA-262 13.5 Expression Statement\n\t    Parser.prototype.parseExpressionStatement = function () {\n\t        var node = this.createNode();\n\t        var expr = this.parseExpression();\n\t        this.consumeSemicolon();\n\t        return this.finalize(node, new Node.ExpressionStatement(expr));\n\t    };\n\t    // ECMA-262 13.6 If statement\n\t    Parser.prototype.parseIfStatement = function () {\n\t        var node = this.createNode();\n\t        var consequent;\n\t        var alternate = null;\n\t        this.expectKeyword('if');\n\t        this.expect('(');\n\t        var test = this.parseExpression();\n\t        if (!this.match(')') && this.config.tolerant) {\n\t            this.tolerateUnexpectedToken(this.nextToken());\n\t            consequent = this.finalize(this.createNode(), new Node.EmptyStatement());\n\t        }\n\t        else {\n\t            this.expect(')');\n\t            consequent = this.parseStatement();\n\t            if (this.matchKeyword('else')) {\n\t                this.nextToken();\n\t                alternate = this.parseStatement();\n\t            }\n\t        }\n\t        return this.finalize(node, new Node.IfStatement(test, consequent, alternate));\n\t    };\n\t    // ECMA-262 13.7.2 The do-while Statement\n\t    Parser.prototype.parseDoWhileStatement = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('do');\n\t        var previousInIteration = this.context.inIteration;\n\t        this.context.inIteration = true;\n\t        var body = this.parseStatement();\n\t        this.context.inIteration = previousInIteration;\n\t        this.expectKeyword('while');\n\t        this.expect('(');\n\t        var test = this.parseExpression();\n\t        this.expect(')');\n\t        if (this.match(';')) {\n\t            this.nextToken();\n\t        }\n\t        return this.finalize(node, new Node.DoWhileStatement(body, test));\n\t    };\n\t    // ECMA-262 13.7.3 The while Statement\n\t    Parser.prototype.parseWhileStatement = function () {\n\t        var node = this.createNode();\n\t        var body;\n\t        this.expectKeyword('while');\n\t        this.expect('(');\n\t        var test = this.parseExpression();\n\t        if (!this.match(')') && this.config.tolerant) {\n\t            this.tolerateUnexpectedToken(this.nextToken());\n\t            body = this.finalize(this.createNode(), new Node.EmptyStatement());\n\t        }\n\t        else {\n\t            this.expect(')');\n\t            var previousInIteration = this.context.inIteration;\n\t            this.context.inIteration = true;\n\t            body = this.parseStatement();\n\t            this.context.inIteration = previousInIteration;\n\t        }\n\t        return this.finalize(node, new Node.WhileStatement(test, body));\n\t    };\n\t    // ECMA-262 13.7.4 The for Statement\n\t    // ECMA-262 13.7.5 The for-in and for-of Statements\n\t    Parser.prototype.parseForStatement = function () {\n\t        var init = null;\n\t        var test = null;\n\t        var update = null;\n\t        var forIn = true;\n\t        var left, right;\n\t        var node = this.createNode();\n\t        this.expectKeyword('for');\n\t        this.expect('(');\n\t        if (this.match(';')) {\n\t            this.nextToken();\n\t        }\n\t        else {\n\t            if (this.matchKeyword('var')) {\n\t                init = this.createNode();\n\t                this.nextToken();\n\t                var previousAllowIn = this.context.allowIn;\n\t                this.context.allowIn = false;\n\t                var declarations = this.parseVariableDeclarationList({ inFor: true });\n\t                this.context.allowIn = previousAllowIn;\n\t                if (declarations.length === 1 && this.matchKeyword('in')) {\n\t                    var decl = declarations[0];\n\t                    if (decl.init && (decl.id.type === syntax_1.Syntax.ArrayPattern || decl.id.type === syntax_1.Syntax.ObjectPattern || this.context.strict)) {\n\t                        this.tolerateError(messages_1.Messages.ForInOfLoopInitializer, 'for-in');\n\t                    }\n\t                    init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));\n\t                    this.nextToken();\n\t                    left = init;\n\t                    right = this.parseExpression();\n\t                    init = null;\n\t                }\n\t                else if (declarations.length === 1 && declarations[0].init === null && this.matchContextualKeyword('of')) {\n\t                    init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));\n\t                    this.nextToken();\n\t                    left = init;\n\t                    right = this.parseAssignmentExpression();\n\t                    init = null;\n\t                    forIn = false;\n\t                }\n\t                else {\n\t                    init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));\n\t                    this.expect(';');\n\t                }\n\t            }\n\t            else if (this.matchKeyword('const') || this.matchKeyword('let')) {\n\t                init = this.createNode();\n\t                var kind = this.nextToken().value;\n\t                if (!this.context.strict && this.lookahead.value === 'in') {\n\t                    init = this.finalize(init, new Node.Identifier(kind));\n\t                    this.nextToken();\n\t                    left = init;\n\t                    right = this.parseExpression();\n\t                    init = null;\n\t                }\n\t                else {\n\t                    var previousAllowIn = this.context.allowIn;\n\t                    this.context.allowIn = false;\n\t                    var declarations = this.parseBindingList(kind, { inFor: true });\n\t                    this.context.allowIn = previousAllowIn;\n\t                    if (declarations.length === 1 && declarations[0].init === null && this.matchKeyword('in')) {\n\t                        init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));\n\t                        this.nextToken();\n\t                        left = init;\n\t                        right = this.parseExpression();\n\t                        init = null;\n\t                    }\n\t                    else if (declarations.length === 1 && declarations[0].init === null && this.matchContextualKeyword('of')) {\n\t                        init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));\n\t                        this.nextToken();\n\t                        left = init;\n\t                        right = this.parseAssignmentExpression();\n\t                        init = null;\n\t                        forIn = false;\n\t                    }\n\t                    else {\n\t                        this.consumeSemicolon();\n\t                        init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));\n\t                    }\n\t                }\n\t            }\n\t            else {\n\t                var initStartToken = this.lookahead;\n\t                var previousAllowIn = this.context.allowIn;\n\t                this.context.allowIn = false;\n\t                init = this.inheritCoverGrammar(this.parseAssignmentExpression);\n\t                this.context.allowIn = previousAllowIn;\n\t                if (this.matchKeyword('in')) {\n\t                    if (!this.context.isAssignmentTarget || init.type === syntax_1.Syntax.AssignmentExpression) {\n\t                        this.tolerateError(messages_1.Messages.InvalidLHSInForIn);\n\t                    }\n\t                    this.nextToken();\n\t                    this.reinterpretExpressionAsPattern(init);\n\t                    left = init;\n\t                    right = this.parseExpression();\n\t                    init = null;\n\t                }\n\t                else if (this.matchContextualKeyword('of')) {\n\t                    if (!this.context.isAssignmentTarget || init.type === syntax_1.Syntax.AssignmentExpression) {\n\t                        this.tolerateError(messages_1.Messages.InvalidLHSInForLoop);\n\t                    }\n\t                    this.nextToken();\n\t                    this.reinterpretExpressionAsPattern(init);\n\t                    left = init;\n\t                    right = this.parseAssignmentExpression();\n\t                    init = null;\n\t                    forIn = false;\n\t                }\n\t                else {\n\t                    if (this.match(',')) {\n\t                        var initSeq = [init];\n\t                        while (this.match(',')) {\n\t                            this.nextToken();\n\t                            initSeq.push(this.isolateCoverGrammar(this.parseAssignmentExpression));\n\t                        }\n\t                        init = this.finalize(this.startNode(initStartToken), new Node.SequenceExpression(initSeq));\n\t                    }\n\t                    this.expect(';');\n\t                }\n\t            }\n\t        }\n\t        if (typeof left === 'undefined') {\n\t            if (!this.match(';')) {\n\t                test = this.parseExpression();\n\t            }\n\t            this.expect(';');\n\t            if (!this.match(')')) {\n\t                update = this.parseExpression();\n\t            }\n\t        }\n\t        var body;\n\t        if (!this.match(')') && this.config.tolerant) {\n\t            this.tolerateUnexpectedToken(this.nextToken());\n\t            body = this.finalize(this.createNode(), new Node.EmptyStatement());\n\t        }\n\t        else {\n\t            this.expect(')');\n\t            var previousInIteration = this.context.inIteration;\n\t            this.context.inIteration = true;\n\t            body = this.isolateCoverGrammar(this.parseStatement);\n\t            this.context.inIteration = previousInIteration;\n\t        }\n\t        return (typeof left === 'undefined') ?\n\t            this.finalize(node, new Node.ForStatement(init, test, update, body)) :\n\t            forIn ? this.finalize(node, new Node.ForInStatement(left, right, body)) :\n\t                this.finalize(node, new Node.ForOfStatement(left, right, body));\n\t    };\n\t    // ECMA-262 13.8 The continue statement\n\t    Parser.prototype.parseContinueStatement = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('continue');\n\t        var label = null;\n\t        if (this.lookahead.type === token_1.Token.Identifier && !this.hasLineTerminator) {\n\t            label = this.parseVariableIdentifier();\n\t            var key = '$' + label.name;\n\t            if (!Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {\n\t                this.throwError(messages_1.Messages.UnknownLabel, label.name);\n\t            }\n\t        }\n\t        this.consumeSemicolon();\n\t        if (label === null && !this.context.inIteration) {\n\t            this.throwError(messages_1.Messages.IllegalContinue);\n\t        }\n\t        return this.finalize(node, new Node.ContinueStatement(label));\n\t    };\n\t    // ECMA-262 13.9 The break statement\n\t    Parser.prototype.parseBreakStatement = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('break');\n\t        var label = null;\n\t        if (this.lookahead.type === token_1.Token.Identifier && !this.hasLineTerminator) {\n\t            label = this.parseVariableIdentifier();\n\t            var key = '$' + label.name;\n\t            if (!Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {\n\t                this.throwError(messages_1.Messages.UnknownLabel, label.name);\n\t            }\n\t        }\n\t        this.consumeSemicolon();\n\t        if (label === null && !this.context.inIteration && !this.context.inSwitch) {\n\t            this.throwError(messages_1.Messages.IllegalBreak);\n\t        }\n\t        return this.finalize(node, new Node.BreakStatement(label));\n\t    };\n\t    // ECMA-262 13.10 The return statement\n\t    Parser.prototype.parseReturnStatement = function () {\n\t        if (!this.context.inFunctionBody) {\n\t            this.tolerateError(messages_1.Messages.IllegalReturn);\n\t        }\n\t        var node = this.createNode();\n\t        this.expectKeyword('return');\n\t        var hasArgument = !this.match(';') && !this.match('}') &&\n\t            !this.hasLineTerminator && this.lookahead.type !== token_1.Token.EOF;\n\t        var argument = hasArgument ? this.parseExpression() : null;\n\t        this.consumeSemicolon();\n\t        return this.finalize(node, new Node.ReturnStatement(argument));\n\t    };\n\t    // ECMA-262 13.11 The with statement\n\t    Parser.prototype.parseWithStatement = function () {\n\t        if (this.context.strict) {\n\t            this.tolerateError(messages_1.Messages.StrictModeWith);\n\t        }\n\t        var node = this.createNode();\n\t        this.expectKeyword('with');\n\t        this.expect('(');\n\t        var object = this.parseExpression();\n\t        this.expect(')');\n\t        var body = this.parseStatement();\n\t        return this.finalize(node, new Node.WithStatement(object, body));\n\t    };\n\t    // ECMA-262 13.12 The switch statement\n\t    Parser.prototype.parseSwitchCase = function () {\n\t        var node = this.createNode();\n\t        var test;\n\t        if (this.matchKeyword('default')) {\n\t            this.nextToken();\n\t            test = null;\n\t        }\n\t        else {\n\t            this.expectKeyword('case');\n\t            test = this.parseExpression();\n\t        }\n\t        this.expect(':');\n\t        var consequent = [];\n\t        while (true) {\n\t            if (this.match('}') || this.matchKeyword('default') || this.matchKeyword('case')) {\n\t                break;\n\t            }\n\t            consequent.push(this.parseStatementListItem());\n\t        }\n\t        return this.finalize(node, new Node.SwitchCase(test, consequent));\n\t    };\n\t    Parser.prototype.parseSwitchStatement = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('switch');\n\t        this.expect('(');\n\t        var discriminant = this.parseExpression();\n\t        this.expect(')');\n\t        var previousInSwitch = this.context.inSwitch;\n\t        this.context.inSwitch = true;\n\t        var cases = [];\n\t        var defaultFound = false;\n\t        this.expect('{');\n\t        while (true) {\n\t            if (this.match('}')) {\n\t                break;\n\t            }\n\t            var clause = this.parseSwitchCase();\n\t            if (clause.test === null) {\n\t                if (defaultFound) {\n\t                    this.throwError(messages_1.Messages.MultipleDefaultsInSwitch);\n\t                }\n\t                defaultFound = true;\n\t            }\n\t            cases.push(clause);\n\t        }\n\t        this.expect('}');\n\t        this.context.inSwitch = previousInSwitch;\n\t        return this.finalize(node, new Node.SwitchStatement(discriminant, cases));\n\t    };\n\t    // ECMA-262 13.13 Labelled Statements\n\t    Parser.prototype.parseLabelledStatement = function () {\n\t        var node = this.createNode();\n\t        var expr = this.parseExpression();\n\t        var statement;\n\t        if ((expr.type === syntax_1.Syntax.Identifier) && this.match(':')) {\n\t            this.nextToken();\n\t            var id = (expr);\n\t            var key = '$' + id.name;\n\t            if (Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {\n\t                this.throwError(messages_1.Messages.Redeclaration, 'Label', id.name);\n\t            }\n\t            this.context.labelSet[key] = true;\n\t            var labeledBody = this.parseStatement();\n\t            delete this.context.labelSet[key];\n\t            statement = new Node.LabeledStatement(id, labeledBody);\n\t        }\n\t        else {\n\t            this.consumeSemicolon();\n\t            statement = new Node.ExpressionStatement(expr);\n\t        }\n\t        return this.finalize(node, statement);\n\t    };\n\t    // ECMA-262 13.14 The throw statement\n\t    Parser.prototype.parseThrowStatement = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('throw');\n\t        if (this.hasLineTerminator) {\n\t            this.throwError(messages_1.Messages.NewlineAfterThrow);\n\t        }\n\t        var argument = this.parseExpression();\n\t        this.consumeSemicolon();\n\t        return this.finalize(node, new Node.ThrowStatement(argument));\n\t    };\n\t    // ECMA-262 13.15 The try statement\n\t    Parser.prototype.parseCatchClause = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('catch');\n\t        this.expect('(');\n\t        if (this.match(')')) {\n\t            this.throwUnexpectedToken(this.lookahead);\n\t        }\n\t        var params = [];\n\t        var param = this.parsePattern(params);\n\t        var paramMap = {};\n\t        for (var i = 0; i < params.length; i++) {\n\t            var key = '$' + params[i].value;\n\t            if (Object.prototype.hasOwnProperty.call(paramMap, key)) {\n\t                this.tolerateError(messages_1.Messages.DuplicateBinding, params[i].value);\n\t            }\n\t            paramMap[key] = true;\n\t        }\n\t        if (this.context.strict && param.type === syntax_1.Syntax.Identifier) {\n\t            if (this.scanner.isRestrictedWord((param).name)) {\n\t                this.tolerateError(messages_1.Messages.StrictCatchVariable);\n\t            }\n\t        }\n\t        this.expect(')');\n\t        var body = this.parseBlock();\n\t        return this.finalize(node, new Node.CatchClause(param, body));\n\t    };\n\t    Parser.prototype.parseFinallyClause = function () {\n\t        this.expectKeyword('finally');\n\t        return this.parseBlock();\n\t    };\n\t    Parser.prototype.parseTryStatement = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('try');\n\t        var block = this.parseBlock();\n\t        var handler = this.matchKeyword('catch') ? this.parseCatchClause() : null;\n\t        var finalizer = this.matchKeyword('finally') ? this.parseFinallyClause() : null;\n\t        if (!handler && !finalizer) {\n\t            this.throwError(messages_1.Messages.NoCatchOrFinally);\n\t        }\n\t        return this.finalize(node, new Node.TryStatement(block, handler, finalizer));\n\t    };\n\t    // ECMA-262 13.16 The debugger statement\n\t    Parser.prototype.parseDebuggerStatement = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('debugger');\n\t        this.consumeSemicolon();\n\t        return this.finalize(node, new Node.DebuggerStatement());\n\t    };\n\t    // ECMA-262 13 Statements\n\t    Parser.prototype.parseStatement = function () {\n\t        var statement = null;\n\t        switch (this.lookahead.type) {\n\t            case token_1.Token.BooleanLiteral:\n\t            case token_1.Token.NullLiteral:\n\t            case token_1.Token.NumericLiteral:\n\t            case token_1.Token.StringLiteral:\n\t            case token_1.Token.Template:\n\t            case token_1.Token.RegularExpression:\n\t                statement = this.parseExpressionStatement();\n\t                break;\n\t            case token_1.Token.Punctuator:\n\t                var value = this.lookahead.value;\n\t                if (value === '{') {\n\t                    statement = this.parseBlock();\n\t                }\n\t                else if (value === '(') {\n\t                    statement = this.parseExpressionStatement();\n\t                }\n\t                else if (value === ';') {\n\t                    statement = this.parseEmptyStatement();\n\t                }\n\t                else {\n\t                    statement = this.parseExpressionStatement();\n\t                }\n\t                break;\n\t            case token_1.Token.Identifier:\n\t                statement = this.parseLabelledStatement();\n\t                break;\n\t            case token_1.Token.Keyword:\n\t                switch (this.lookahead.value) {\n\t                    case 'break':\n\t                        statement = this.parseBreakStatement();\n\t                        break;\n\t                    case 'continue':\n\t                        statement = this.parseContinueStatement();\n\t                        break;\n\t                    case 'debugger':\n\t                        statement = this.parseDebuggerStatement();\n\t                        break;\n\t                    case 'do':\n\t                        statement = this.parseDoWhileStatement();\n\t                        break;\n\t                    case 'for':\n\t                        statement = this.parseForStatement();\n\t                        break;\n\t                    case 'function':\n\t                        statement = this.parseFunctionDeclaration();\n\t                        break;\n\t                    case 'if':\n\t                        statement = this.parseIfStatement();\n\t                        break;\n\t                    case 'return':\n\t                        statement = this.parseReturnStatement();\n\t                        break;\n\t                    case 'switch':\n\t                        statement = this.parseSwitchStatement();\n\t                        break;\n\t                    case 'throw':\n\t                        statement = this.parseThrowStatement();\n\t                        break;\n\t                    case 'try':\n\t                        statement = this.parseTryStatement();\n\t                        break;\n\t                    case 'var':\n\t                        statement = this.parseVariableStatement();\n\t                        break;\n\t                    case 'while':\n\t                        statement = this.parseWhileStatement();\n\t                        break;\n\t                    case 'with':\n\t                        statement = this.parseWithStatement();\n\t                        break;\n\t                    default:\n\t                        statement = this.parseExpressionStatement();\n\t                        break;\n\t                }\n\t                break;\n\t            default:\n\t                this.throwUnexpectedToken(this.lookahead);\n\t        }\n\t        return statement;\n\t    };\n\t    // ECMA-262 14.1 Function Definition\n\t    Parser.prototype.parseFunctionSourceElements = function () {\n\t        var node = this.createNode();\n\t        this.expect('{');\n\t        var body = this.parseDirectivePrologues();\n\t        var previousLabelSet = this.context.labelSet;\n\t        var previousInIteration = this.context.inIteration;\n\t        var previousInSwitch = this.context.inSwitch;\n\t        var previousInFunctionBody = this.context.inFunctionBody;\n\t        this.context.labelSet = {};\n\t        this.context.inIteration = false;\n\t        this.context.inSwitch = false;\n\t        this.context.inFunctionBody = true;\n\t        while (this.startMarker.index < this.scanner.length) {\n\t            if (this.match('}')) {\n\t                break;\n\t            }\n\t            body.push(this.parseStatementListItem());\n\t        }\n\t        this.expect('}');\n\t        this.context.labelSet = previousLabelSet;\n\t        this.context.inIteration = previousInIteration;\n\t        this.context.inSwitch = previousInSwitch;\n\t        this.context.inFunctionBody = previousInFunctionBody;\n\t        return this.finalize(node, new Node.BlockStatement(body));\n\t    };\n\t    Parser.prototype.validateParam = function (options, param, name) {\n\t        var key = '$' + name;\n\t        if (this.context.strict) {\n\t            if (this.scanner.isRestrictedWord(name)) {\n\t                options.stricted = param;\n\t                options.message = messages_1.Messages.StrictParamName;\n\t            }\n\t            if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {\n\t                options.stricted = param;\n\t                options.message = messages_1.Messages.StrictParamDupe;\n\t            }\n\t        }\n\t        else if (!options.firstRestricted) {\n\t            if (this.scanner.isRestrictedWord(name)) {\n\t                options.firstRestricted = param;\n\t                options.message = messages_1.Messages.StrictParamName;\n\t            }\n\t            else if (this.scanner.isStrictModeReservedWord(name)) {\n\t                options.firstRestricted = param;\n\t                options.message = messages_1.Messages.StrictReservedWord;\n\t            }\n\t            else if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {\n\t                options.stricted = param;\n\t                options.message = messages_1.Messages.StrictParamDupe;\n\t            }\n\t        }\n\t        /* istanbul ignore next */\n\t        if (typeof Object.defineProperty === 'function') {\n\t            Object.defineProperty(options.paramSet, key, { value: true, enumerable: true, writable: true, configurable: true });\n\t        }\n\t        else {\n\t            options.paramSet[key] = true;\n\t        }\n\t    };\n\t    Parser.prototype.parseRestElement = function (params) {\n\t        var node = this.createNode();\n\t        this.expect('...');\n\t        var arg = this.parsePattern(params);\n\t        if (this.match('=')) {\n\t            this.throwError(messages_1.Messages.DefaultRestParameter);\n\t        }\n\t        if (!this.match(')')) {\n\t            this.throwError(messages_1.Messages.ParameterAfterRestParameter);\n\t        }\n\t        return this.finalize(node, new Node.RestElement(arg));\n\t    };\n\t    Parser.prototype.parseFormalParameter = function (options) {\n\t        var params = [];\n\t        var param = this.match('...') ? this.parseRestElement(params) : this.parsePatternWithDefault(params);\n\t        for (var i = 0; i < params.length; i++) {\n\t            this.validateParam(options, params[i], params[i].value);\n\t        }\n\t        options.params.push(param);\n\t        return !this.match(')');\n\t    };\n\t    Parser.prototype.parseFormalParameters = function (firstRestricted) {\n\t        var options;\n\t        options = {\n\t            params: [],\n\t            firstRestricted: firstRestricted\n\t        };\n\t        this.expect('(');\n\t        if (!this.match(')')) {\n\t            options.paramSet = {};\n\t            while (this.startMarker.index < this.scanner.length) {\n\t                if (!this.parseFormalParameter(options)) {\n\t                    break;\n\t                }\n\t                this.expect(',');\n\t            }\n\t        }\n\t        this.expect(')');\n\t        return {\n\t            params: options.params,\n\t            stricted: options.stricted,\n\t            firstRestricted: options.firstRestricted,\n\t            message: options.message\n\t        };\n\t    };\n\t    Parser.prototype.parseFunctionDeclaration = function (identifierIsOptional) {\n\t        var node = this.createNode();\n\t        this.expectKeyword('function');\n\t        var isGenerator = this.match('*');\n\t        if (isGenerator) {\n\t            this.nextToken();\n\t        }\n\t        var message;\n\t        var id = null;\n\t        var firstRestricted = null;\n\t        if (!identifierIsOptional || !this.match('(')) {\n\t            var token = this.lookahead;\n\t            id = this.parseVariableIdentifier();\n\t            if (this.context.strict) {\n\t                if (this.scanner.isRestrictedWord(token.value)) {\n\t                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictFunctionName);\n\t                }\n\t            }\n\t            else {\n\t                if (this.scanner.isRestrictedWord(token.value)) {\n\t                    firstRestricted = token;\n\t                    message = messages_1.Messages.StrictFunctionName;\n\t                }\n\t                else if (this.scanner.isStrictModeReservedWord(token.value)) {\n\t                    firstRestricted = token;\n\t                    message = messages_1.Messages.StrictReservedWord;\n\t                }\n\t            }\n\t        }\n\t        var previousAllowYield = this.context.allowYield;\n\t        this.context.allowYield = !isGenerator;\n\t        var formalParameters = this.parseFormalParameters(firstRestricted);\n\t        var params = formalParameters.params;\n\t        var stricted = formalParameters.stricted;\n\t        firstRestricted = formalParameters.firstRestricted;\n\t        if (formalParameters.message) {\n\t            message = formalParameters.message;\n\t        }\n\t        var previousStrict = this.context.strict;\n\t        var body = this.parseFunctionSourceElements();\n\t        if (this.context.strict && firstRestricted) {\n\t            this.throwUnexpectedToken(firstRestricted, message);\n\t        }\n\t        if (this.context.strict && stricted) {\n\t            this.tolerateUnexpectedToken(stricted, message);\n\t        }\n\t        this.context.strict = previousStrict;\n\t        this.context.allowYield = previousAllowYield;\n\t        return this.finalize(node, new Node.FunctionDeclaration(id, params, body, isGenerator));\n\t    };\n\t    Parser.prototype.parseFunctionExpression = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('function');\n\t        var isGenerator = this.match('*');\n\t        if (isGenerator) {\n\t            this.nextToken();\n\t        }\n\t        var message;\n\t        var id = null;\n\t        var firstRestricted;\n\t        var previousAllowYield = this.context.allowYield;\n\t        this.context.allowYield = !isGenerator;\n\t        if (!this.match('(')) {\n\t            var token = this.lookahead;\n\t            id = (!this.context.strict && !isGenerator && this.matchKeyword('yield')) ? this.parseIdentifierName() : this.parseVariableIdentifier();\n\t            if (this.context.strict) {\n\t                if (this.scanner.isRestrictedWord(token.value)) {\n\t                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictFunctionName);\n\t                }\n\t            }\n\t            else {\n\t                if (this.scanner.isRestrictedWord(token.value)) {\n\t                    firstRestricted = token;\n\t                    message = messages_1.Messages.StrictFunctionName;\n\t                }\n\t                else if (this.scanner.isStrictModeReservedWord(token.value)) {\n\t                    firstRestricted = token;\n\t                    message = messages_1.Messages.StrictReservedWord;\n\t                }\n\t            }\n\t        }\n\t        var formalParameters = this.parseFormalParameters(firstRestricted);\n\t        var params = formalParameters.params;\n\t        var stricted = formalParameters.stricted;\n\t        firstRestricted = formalParameters.firstRestricted;\n\t        if (formalParameters.message) {\n\t            message = formalParameters.message;\n\t        }\n\t        var previousStrict = this.context.strict;\n\t        var body = this.parseFunctionSourceElements();\n\t        if (this.context.strict && firstRestricted) {\n\t            this.throwUnexpectedToken(firstRestricted, message);\n\t        }\n\t        if (this.context.strict && stricted) {\n\t            this.tolerateUnexpectedToken(stricted, message);\n\t        }\n\t        this.context.strict = previousStrict;\n\t        this.context.allowYield = previousAllowYield;\n\t        return this.finalize(node, new Node.FunctionExpression(id, params, body, isGenerator));\n\t    };\n\t    // ECMA-262 14.1.1 Directive Prologues\n\t    Parser.prototype.parseDirective = function () {\n\t        var token = this.lookahead;\n\t        var directive = null;\n\t        var node = this.createNode();\n\t        var expr = this.parseExpression();\n\t        if (expr.type === syntax_1.Syntax.Literal) {\n\t            directive = this.getTokenRaw(token).slice(1, -1);\n\t        }\n\t        this.consumeSemicolon();\n\t        return this.finalize(node, directive ? new Node.Directive(expr, directive) :\n\t            new Node.ExpressionStatement(expr));\n\t    };\n\t    Parser.prototype.parseDirectivePrologues = function () {\n\t        var firstRestricted = null;\n\t        var body = [];\n\t        while (true) {\n\t            var token = this.lookahead;\n\t            if (token.type !== token_1.Token.StringLiteral) {\n\t                break;\n\t            }\n\t            var statement = this.parseDirective();\n\t            body.push(statement);\n\t            var directive = statement.directive;\n\t            if (typeof directive !== 'string') {\n\t                break;\n\t            }\n\t            if (directive === 'use strict') {\n\t                this.context.strict = true;\n\t                if (firstRestricted) {\n\t                    this.tolerateUnexpectedToken(firstRestricted, messages_1.Messages.StrictOctalLiteral);\n\t                }\n\t            }\n\t            else {\n\t                if (!firstRestricted && token.octal) {\n\t                    firstRestricted = token;\n\t                }\n\t            }\n\t        }\n\t        return body;\n\t    };\n\t    // ECMA-262 14.3 Method Definitions\n\t    Parser.prototype.qualifiedPropertyName = function (token) {\n\t        switch (token.type) {\n\t            case token_1.Token.Identifier:\n\t            case token_1.Token.StringLiteral:\n\t            case token_1.Token.BooleanLiteral:\n\t            case token_1.Token.NullLiteral:\n\t            case token_1.Token.NumericLiteral:\n\t            case token_1.Token.Keyword:\n\t                return true;\n\t            case token_1.Token.Punctuator:\n\t                return token.value === '[';\n\t        }\n\t        return false;\n\t    };\n\t    Parser.prototype.parseGetterMethod = function () {\n\t        var node = this.createNode();\n\t        this.expect('(');\n\t        this.expect(')');\n\t        var isGenerator = false;\n\t        var params = {\n\t            params: [],\n\t            stricted: null,\n\t            firstRestricted: null,\n\t            message: null\n\t        };\n\t        var previousAllowYield = this.context.allowYield;\n\t        this.context.allowYield = false;\n\t        var method = this.parsePropertyMethod(params);\n\t        this.context.allowYield = previousAllowYield;\n\t        return this.finalize(node, new Node.FunctionExpression(null, params.params, method, isGenerator));\n\t    };\n\t    Parser.prototype.parseSetterMethod = function () {\n\t        var node = this.createNode();\n\t        var options = {\n\t            params: [],\n\t            firstRestricted: null,\n\t            paramSet: {}\n\t        };\n\t        var isGenerator = false;\n\t        var previousAllowYield = this.context.allowYield;\n\t        this.context.allowYield = false;\n\t        this.expect('(');\n\t        if (this.match(')')) {\n\t            this.tolerateUnexpectedToken(this.lookahead);\n\t        }\n\t        else {\n\t            this.parseFormalParameter(options);\n\t        }\n\t        this.expect(')');\n\t        var method = this.parsePropertyMethod(options);\n\t        this.context.allowYield = previousAllowYield;\n\t        return this.finalize(node, new Node.FunctionExpression(null, options.params, method, isGenerator));\n\t    };\n\t    Parser.prototype.parseGeneratorMethod = function () {\n\t        var node = this.createNode();\n\t        var isGenerator = true;\n\t        var previousAllowYield = this.context.allowYield;\n\t        this.context.allowYield = true;\n\t        var params = this.parseFormalParameters();\n\t        this.context.allowYield = false;\n\t        var method = this.parsePropertyMethod(params);\n\t        this.context.allowYield = previousAllowYield;\n\t        return this.finalize(node, new Node.FunctionExpression(null, params.params, method, isGenerator));\n\t    };\n\t    // ECMA-262 14.4 Generator Function Definitions\n\t    Parser.prototype.isStartOfExpression = function () {\n\t        var start = true;\n\t        var value = this.lookahead.value;\n\t        switch (this.lookahead.type) {\n\t            case token_1.Token.Punctuator:\n\t                start = (value === '[') || (value === '(') || (value === '{') ||\n\t                    (value === '+') || (value === '-') ||\n\t                    (value === '!') || (value === '~') ||\n\t                    (value === '++') || (value === '--') ||\n\t                    (value === '/') || (value === '/='); // regular expression literal\n\t                break;\n\t            case token_1.Token.Keyword:\n\t                start = (value === 'class') || (value === 'delete') ||\n\t                    (value === 'function') || (value === 'let') || (value === 'new') ||\n\t                    (value === 'super') || (value === 'this') || (value === 'typeof') ||\n\t                    (value === 'void') || (value === 'yield');\n\t                break;\n\t            default:\n\t                break;\n\t        }\n\t        return start;\n\t    };\n\t    Parser.prototype.parseYieldExpression = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('yield');\n\t        var argument = null;\n\t        var delegate = false;\n\t        if (!this.hasLineTerminator) {\n\t            var previousAllowYield = this.context.allowYield;\n\t            this.context.allowYield = false;\n\t            delegate = this.match('*');\n\t            if (delegate) {\n\t                this.nextToken();\n\t                argument = this.parseAssignmentExpression();\n\t            }\n\t            else if (this.isStartOfExpression()) {\n\t                argument = this.parseAssignmentExpression();\n\t            }\n\t            this.context.allowYield = previousAllowYield;\n\t        }\n\t        return this.finalize(node, new Node.YieldExpression(argument, delegate));\n\t    };\n\t    // ECMA-262 14.5 Class Definitions\n\t    Parser.prototype.parseClassElement = function (hasConstructor) {\n\t        var token = this.lookahead;\n\t        var node = this.createNode();\n\t        var kind;\n\t        var key;\n\t        var value;\n\t        var computed = false;\n\t        var method = false;\n\t        var isStatic = false;\n\t        if (this.match('*')) {\n\t            this.nextToken();\n\t        }\n\t        else {\n\t            computed = this.match('[');\n\t            key = this.parseObjectPropertyKey();\n\t            var id = key;\n\t            if (id.name === 'static' && (this.qualifiedPropertyName(this.lookahead) || this.match('*'))) {\n\t                token = this.lookahead;\n\t                isStatic = true;\n\t                computed = this.match('[');\n\t                if (this.match('*')) {\n\t                    this.nextToken();\n\t                }\n\t                else {\n\t                    key = this.parseObjectPropertyKey();\n\t                }\n\t            }\n\t        }\n\t        var lookaheadPropertyKey = this.qualifiedPropertyName(this.lookahead);\n\t        if (token.type === token_1.Token.Identifier) {\n\t            if (token.value === 'get' && lookaheadPropertyKey) {\n\t                kind = 'get';\n\t                computed = this.match('[');\n\t                key = this.parseObjectPropertyKey();\n\t                this.context.allowYield = false;\n\t                value = this.parseGetterMethod();\n\t            }\n\t            else if (token.value === 'set' && lookaheadPropertyKey) {\n\t                kind = 'set';\n\t                computed = this.match('[');\n\t                key = this.parseObjectPropertyKey();\n\t                value = this.parseSetterMethod();\n\t            }\n\t        }\n\t        else if (token.type === token_1.Token.Punctuator && token.value === '*' && lookaheadPropertyKey) {\n\t            kind = 'init';\n\t            computed = this.match('[');\n\t            key = this.parseObjectPropertyKey();\n\t            value = this.parseGeneratorMethod();\n\t            method = true;\n\t        }\n\t        if (!kind && key && this.match('(')) {\n\t            kind = 'init';\n\t            value = this.parsePropertyMethodFunction();\n\t            method = true;\n\t        }\n\t        if (!kind) {\n\t            this.throwUnexpectedToken(this.lookahead);\n\t        }\n\t        if (kind === 'init') {\n\t            kind = 'method';\n\t        }\n\t        if (!computed) {\n\t            if (isStatic && this.isPropertyKey(key, 'prototype')) {\n\t                this.throwUnexpectedToken(token, messages_1.Messages.StaticPrototype);\n\t            }\n\t            if (!isStatic && this.isPropertyKey(key, 'constructor')) {\n\t                if (kind !== 'method' || !method || value.generator) {\n\t                    this.throwUnexpectedToken(token, messages_1.Messages.ConstructorSpecialMethod);\n\t                }\n\t                if (hasConstructor.value) {\n\t                    this.throwUnexpectedToken(token, messages_1.Messages.DuplicateConstructor);\n\t                }\n\t                else {\n\t                    hasConstructor.value = true;\n\t                }\n\t                kind = 'constructor';\n\t            }\n\t        }\n\t        return this.finalize(node, new Node.MethodDefinition(key, computed, value, kind, isStatic));\n\t    };\n\t    Parser.prototype.parseClassElementList = function () {\n\t        var body = [];\n\t        var hasConstructor = { value: false };\n\t        this.expect('{');\n\t        while (!this.match('}')) {\n\t            if (this.match(';')) {\n\t                this.nextToken();\n\t            }\n\t            else {\n\t                body.push(this.parseClassElement(hasConstructor));\n\t            }\n\t        }\n\t        this.expect('}');\n\t        return body;\n\t    };\n\t    Parser.prototype.parseClassBody = function () {\n\t        var node = this.createNode();\n\t        var elementList = this.parseClassElementList();\n\t        return this.finalize(node, new Node.ClassBody(elementList));\n\t    };\n\t    Parser.prototype.parseClassDeclaration = function (identifierIsOptional) {\n\t        var node = this.createNode();\n\t        var previousStrict = this.context.strict;\n\t        this.context.strict = true;\n\t        this.expectKeyword('class');\n\t        var id = (identifierIsOptional && (this.lookahead.type !== token_1.Token.Identifier)) ? null : this.parseVariableIdentifier();\n\t        var superClass = null;\n\t        if (this.matchKeyword('extends')) {\n\t            this.nextToken();\n\t            superClass = this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall);\n\t        }\n\t        var classBody = this.parseClassBody();\n\t        this.context.strict = previousStrict;\n\t        return this.finalize(node, new Node.ClassDeclaration(id, superClass, classBody));\n\t    };\n\t    Parser.prototype.parseClassExpression = function () {\n\t        var node = this.createNode();\n\t        var previousStrict = this.context.strict;\n\t        this.context.strict = true;\n\t        this.expectKeyword('class');\n\t        var id = (this.lookahead.type === token_1.Token.Identifier) ? this.parseVariableIdentifier() : null;\n\t        var superClass = null;\n\t        if (this.matchKeyword('extends')) {\n\t            this.nextToken();\n\t            superClass = this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall);\n\t        }\n\t        var classBody = this.parseClassBody();\n\t        this.context.strict = previousStrict;\n\t        return this.finalize(node, new Node.ClassExpression(id, superClass, classBody));\n\t    };\n\t    // ECMA-262 15.1 Scripts\n\t    // ECMA-262 15.2 Modules\n\t    Parser.prototype.parseProgram = function () {\n\t        var node = this.createNode();\n\t        var body = this.parseDirectivePrologues();\n\t        while (this.startMarker.index < this.scanner.length) {\n\t            body.push(this.parseStatementListItem());\n\t        }\n\t        return this.finalize(node, new Node.Program(body, this.sourceType));\n\t    };\n\t    // ECMA-262 15.2.2 Imports\n\t    Parser.prototype.parseModuleSpecifier = function () {\n\t        var node = this.createNode();\n\t        if (this.lookahead.type !== token_1.Token.StringLiteral) {\n\t            this.throwError(messages_1.Messages.InvalidModuleSpecifier);\n\t        }\n\t        var token = this.nextToken();\n\t        var raw = this.getTokenRaw(token);\n\t        return this.finalize(node, new Node.Literal(token.value, raw));\n\t    };\n\t    // import {<foo as bar>} ...;\n\t    Parser.prototype.parseImportSpecifier = function () {\n\t        var node = this.createNode();\n\t        var imported;\n\t        var local;\n\t        if (this.lookahead.type === token_1.Token.Identifier) {\n\t            imported = this.parseVariableIdentifier();\n\t            local = imported;\n\t            if (this.matchContextualKeyword('as')) {\n\t                this.nextToken();\n\t                local = this.parseVariableIdentifier();\n\t            }\n\t        }\n\t        else {\n\t            imported = this.parseIdentifierName();\n\t            local = imported;\n\t            if (this.matchContextualKeyword('as')) {\n\t                this.nextToken();\n\t                local = this.parseVariableIdentifier();\n\t            }\n\t            else {\n\t                this.throwUnexpectedToken(this.nextToken());\n\t            }\n\t        }\n\t        return this.finalize(node, new Node.ImportSpecifier(local, imported));\n\t    };\n\t    // {foo, bar as bas}\n\t    Parser.prototype.parseNamedImports = function () {\n\t        this.expect('{');\n\t        var specifiers = [];\n\t        while (!this.match('}')) {\n\t            specifiers.push(this.parseImportSpecifier());\n\t            if (!this.match('}')) {\n\t                this.expect(',');\n\t            }\n\t        }\n\t        this.expect('}');\n\t        return specifiers;\n\t    };\n\t    // import <foo> ...;\n\t    Parser.prototype.parseImportDefaultSpecifier = function () {\n\t        var node = this.createNode();\n\t        var local = this.parseIdentifierName();\n\t        return this.finalize(node, new Node.ImportDefaultSpecifier(local));\n\t    };\n\t    // import <* as foo> ...;\n\t    Parser.prototype.parseImportNamespaceSpecifier = function () {\n\t        var node = this.createNode();\n\t        this.expect('*');\n\t        if (!this.matchContextualKeyword('as')) {\n\t            this.throwError(messages_1.Messages.NoAsAfterImportNamespace);\n\t        }\n\t        this.nextToken();\n\t        var local = this.parseIdentifierName();\n\t        return this.finalize(node, new Node.ImportNamespaceSpecifier(local));\n\t    };\n\t    Parser.prototype.parseImportDeclaration = function () {\n\t        if (this.context.inFunctionBody) {\n\t            this.throwError(messages_1.Messages.IllegalImportDeclaration);\n\t        }\n\t        var node = this.createNode();\n\t        this.expectKeyword('import');\n\t        var src;\n\t        var specifiers = [];\n\t        if (this.lookahead.type === token_1.Token.StringLiteral) {\n\t            // import 'foo';\n\t            src = this.parseModuleSpecifier();\n\t        }\n\t        else {\n\t            if (this.match('{')) {\n\t                // import {bar}\n\t                specifiers = specifiers.concat(this.parseNamedImports());\n\t            }\n\t            else if (this.match('*')) {\n\t                // import * as foo\n\t                specifiers.push(this.parseImportNamespaceSpecifier());\n\t            }\n\t            else if (this.isIdentifierName(this.lookahead) && !this.matchKeyword('default')) {\n\t                // import foo\n\t                specifiers.push(this.parseImportDefaultSpecifier());\n\t                if (this.match(',')) {\n\t                    this.nextToken();\n\t                    if (this.match('*')) {\n\t                        // import foo, * as foo\n\t                        specifiers.push(this.parseImportNamespaceSpecifier());\n\t                    }\n\t                    else if (this.match('{')) {\n\t                        // import foo, {bar}\n\t                        specifiers = specifiers.concat(this.parseNamedImports());\n\t                    }\n\t                    else {\n\t                        this.throwUnexpectedToken(this.lookahead);\n\t                    }\n\t                }\n\t            }\n\t            else {\n\t                this.throwUnexpectedToken(this.nextToken());\n\t            }\n\t            if (!this.matchContextualKeyword('from')) {\n\t                var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;\n\t                this.throwError(message, this.lookahead.value);\n\t            }\n\t            this.nextToken();\n\t            src = this.parseModuleSpecifier();\n\t        }\n\t        this.consumeSemicolon();\n\t        return this.finalize(node, new Node.ImportDeclaration(specifiers, src));\n\t    };\n\t    // ECMA-262 15.2.3 Exports\n\t    Parser.prototype.parseExportSpecifier = function () {\n\t        var node = this.createNode();\n\t        var local = this.parseIdentifierName();\n\t        var exported = local;\n\t        if (this.matchContextualKeyword('as')) {\n\t            this.nextToken();\n\t            exported = this.parseIdentifierName();\n\t        }\n\t        return this.finalize(node, new Node.ExportSpecifier(local, exported));\n\t    };\n\t    Parser.prototype.parseExportDeclaration = function () {\n\t        if (this.context.inFunctionBody) {\n\t            this.throwError(messages_1.Messages.IllegalExportDeclaration);\n\t        }\n\t        var node = this.createNode();\n\t        this.expectKeyword('export');\n\t        var exportDeclaration;\n\t        if (this.matchKeyword('default')) {\n\t            // export default ...\n\t            this.nextToken();\n\t            if (this.matchKeyword('function')) {\n\t                // export default function foo () {}\n\t                // export default function () {}\n\t                var declaration = this.parseFunctionDeclaration(true);\n\t                exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));\n\t            }\n\t            else if (this.matchKeyword('class')) {\n\t                // export default class foo {}\n\t                var declaration = this.parseClassDeclaration(true);\n\t                exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));\n\t            }\n\t            else {\n\t                if (this.matchContextualKeyword('from')) {\n\t                    this.throwError(messages_1.Messages.UnexpectedToken, this.lookahead.value);\n\t                }\n\t                // export default {};\n\t                // export default [];\n\t                // export default (1 + 2);\n\t                var declaration = this.match('{') ? this.parseObjectInitializer() :\n\t                    this.match('[') ? this.parseArrayInitializer() : this.parseAssignmentExpression();\n\t                this.consumeSemicolon();\n\t                exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));\n\t            }\n\t        }\n\t        else if (this.match('*')) {\n\t            // export * from 'foo';\n\t            this.nextToken();\n\t            if (!this.matchContextualKeyword('from')) {\n\t                var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;\n\t                this.throwError(message, this.lookahead.value);\n\t            }\n\t            this.nextToken();\n\t            var src = this.parseModuleSpecifier();\n\t            this.consumeSemicolon();\n\t            exportDeclaration = this.finalize(node, new Node.ExportAllDeclaration(src));\n\t        }\n\t        else if (this.lookahead.type === token_1.Token.Keyword) {\n\t            // export var f = 1;\n\t            var declaration = void 0;\n\t            switch (this.lookahead.value) {\n\t                case 'let':\n\t                case 'const':\n\t                    declaration = this.parseLexicalDeclaration({ inFor: false });\n\t                    break;\n\t                case 'var':\n\t                case 'class':\n\t                case 'function':\n\t                    declaration = this.parseStatementListItem();\n\t                    break;\n\t                default:\n\t                    this.throwUnexpectedToken(this.lookahead);\n\t            }\n\t            exportDeclaration = this.finalize(node, new Node.ExportNamedDeclaration(declaration, [], null));\n\t        }\n\t        else {\n\t            var specifiers = [];\n\t            var source = null;\n\t            var isExportFromIdentifier = false;\n\t            this.expect('{');\n\t            while (!this.match('}')) {\n\t                isExportFromIdentifier = isExportFromIdentifier || this.matchKeyword('default');\n\t                specifiers.push(this.parseExportSpecifier());\n\t                if (!this.match('}')) {\n\t                    this.expect(',');\n\t                }\n\t            }\n\t            this.expect('}');\n\t            if (this.matchContextualKeyword('from')) {\n\t                // export {default} from 'foo';\n\t                // export {foo} from 'foo';\n\t                this.nextToken();\n\t                source = this.parseModuleSpecifier();\n\t                this.consumeSemicolon();\n\t            }\n\t            else if (isExportFromIdentifier) {\n\t                // export {default}; // missing fromClause\n\t                var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;\n\t                this.throwError(message, this.lookahead.value);\n\t            }\n\t            else {\n\t                // export {foo};\n\t                this.consumeSemicolon();\n\t            }\n\t            exportDeclaration = this.finalize(node, new Node.ExportNamedDeclaration(null, specifiers, source));\n\t        }\n\t        return exportDeclaration;\n\t    };\n\t    return Parser;\n\t}());\n\texports.Parser = Parser;\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\t// Ensure the condition is true, otherwise throw an error.\n\t// This is only to have a better contract semantic, i.e. another safety net\n\t// to catch a logic error. The condition shall be fulfilled in normal case.\n\t// Do NOT use this to enforce a certain condition on any user input.\n\t\"use strict\";\n\tfunction assert(condition, message) {\n\t    /* istanbul ignore if */\n\t    if (!condition) {\n\t        throw new Error('ASSERT: ' + message);\n\t    }\n\t}\n\texports.assert = assert;\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t// Error messages should be identical to V8.\n\texports.Messages = {\n\t    UnexpectedToken: 'Unexpected token %0',\n\t    UnexpectedTokenIllegal: 'Unexpected token ILLEGAL',\n\t    UnexpectedNumber: 'Unexpected number',\n\t    UnexpectedString: 'Unexpected string',\n\t    UnexpectedIdentifier: 'Unexpected identifier',\n\t    UnexpectedReserved: 'Unexpected reserved word',\n\t    UnexpectedTemplate: 'Unexpected quasi %0',\n\t    UnexpectedEOS: 'Unexpected end of input',\n\t    NewlineAfterThrow: 'Illegal newline after throw',\n\t    InvalidRegExp: 'Invalid regular expression',\n\t    UnterminatedRegExp: 'Invalid regular expression: missing /',\n\t    InvalidLHSInAssignment: 'Invalid left-hand side in assignment',\n\t    InvalidLHSInForIn: 'Invalid left-hand side in for-in',\n\t    InvalidLHSInForLoop: 'Invalid left-hand side in for-loop',\n\t    MultipleDefaultsInSwitch: 'More than one default clause in switch statement',\n\t    NoCatchOrFinally: 'Missing catch or finally after try',\n\t    UnknownLabel: 'Undefined label \\'%0\\'',\n\t    Redeclaration: '%0 \\'%1\\' has already been declared',\n\t    IllegalContinue: 'Illegal continue statement',\n\t    IllegalBreak: 'Illegal break statement',\n\t    IllegalReturn: 'Illegal return statement',\n\t    StrictModeWith: 'Strict mode code may not include a with statement',\n\t    StrictCatchVariable: 'Catch variable may not be eval or arguments in strict mode',\n\t    StrictVarName: 'Variable name may not be eval or arguments in strict mode',\n\t    StrictParamName: 'Parameter name eval or arguments is not allowed in strict mode',\n\t    StrictParamDupe: 'Strict mode function may not have duplicate parameter names',\n\t    StrictFunctionName: 'Function name may not be eval or arguments in strict mode',\n\t    StrictOctalLiteral: 'Octal literals are not allowed in strict mode.',\n\t    StrictDelete: 'Delete of an unqualified identifier in strict mode.',\n\t    StrictLHSAssignment: 'Assignment to eval or arguments is not allowed in strict mode',\n\t    StrictLHSPostfix: 'Postfix increment/decrement may not have eval or arguments operand in strict mode',\n\t    StrictLHSPrefix: 'Prefix increment/decrement may not have eval or arguments operand in strict mode',\n\t    StrictReservedWord: 'Use of future reserved word in strict mode',\n\t    TemplateOctalLiteral: 'Octal literals are not allowed in template strings.',\n\t    ParameterAfterRestParameter: 'Rest parameter must be last formal parameter',\n\t    DefaultRestParameter: 'Unexpected token =',\n\t    DuplicateProtoProperty: 'Duplicate __proto__ fields are not allowed in object literals',\n\t    ConstructorSpecialMethod: 'Class constructor may not be an accessor',\n\t    DuplicateConstructor: 'A class may only have one constructor',\n\t    StaticPrototype: 'Classes may not have static property named prototype',\n\t    MissingFromClause: 'Unexpected token',\n\t    NoAsAfterImportNamespace: 'Unexpected token',\n\t    InvalidModuleSpecifier: 'Unexpected token',\n\t    IllegalImportDeclaration: 'Unexpected token',\n\t    IllegalExportDeclaration: 'Unexpected token',\n\t    DuplicateBinding: 'Duplicate binding %0',\n\t    ForInOfLoopInitializer: '%0 loop variable declaration may not have an initializer'\n\t};\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tvar ErrorHandler = (function () {\n\t    function ErrorHandler() {\n\t        this.errors = [];\n\t        this.tolerant = false;\n\t    }\n\t    ;\n\t    ErrorHandler.prototype.recordError = function (error) {\n\t        this.errors.push(error);\n\t    };\n\t    ;\n\t    ErrorHandler.prototype.tolerate = function (error) {\n\t        if (this.tolerant) {\n\t            this.recordError(error);\n\t        }\n\t        else {\n\t            throw error;\n\t        }\n\t    };\n\t    ;\n\t    ErrorHandler.prototype.constructError = function (msg, column) {\n\t        var error = new Error(msg);\n\t        try {\n\t            throw error;\n\t        }\n\t        catch (base) {\n\t            /* istanbul ignore else */\n\t            if (Object.create && Object.defineProperty) {\n\t                error = Object.create(base);\n\t                Object.defineProperty(error, 'column', { value: column });\n\t            }\n\t        }\n\t        finally {\n\t            return error;\n\t        }\n\t    };\n\t    ;\n\t    ErrorHandler.prototype.createError = function (index, line, col, description) {\n\t        var msg = 'Line ' + line + ': ' + description;\n\t        var error = this.constructError(msg, col);\n\t        error.index = index;\n\t        error.lineNumber = line;\n\t        error.description = description;\n\t        return error;\n\t    };\n\t    ;\n\t    ErrorHandler.prototype.throwError = function (index, line, col, description) {\n\t        throw this.createError(index, line, col, description);\n\t    };\n\t    ;\n\t    ErrorHandler.prototype.tolerateError = function (index, line, col, description) {\n\t        var error = this.createError(index, line, col, description);\n\t        if (this.tolerant) {\n\t            this.recordError(error);\n\t        }\n\t        else {\n\t            throw error;\n\t        }\n\t    };\n\t    ;\n\t    return ErrorHandler;\n\t}());\n\texports.ErrorHandler = ErrorHandler;\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t(function (Token) {\n\t    Token[Token[\"BooleanLiteral\"] = 1] = \"BooleanLiteral\";\n\t    Token[Token[\"EOF\"] = 2] = \"EOF\";\n\t    Token[Token[\"Identifier\"] = 3] = \"Identifier\";\n\t    Token[Token[\"Keyword\"] = 4] = \"Keyword\";\n\t    Token[Token[\"NullLiteral\"] = 5] = \"NullLiteral\";\n\t    Token[Token[\"NumericLiteral\"] = 6] = \"NumericLiteral\";\n\t    Token[Token[\"Punctuator\"] = 7] = \"Punctuator\";\n\t    Token[Token[\"StringLiteral\"] = 8] = \"StringLiteral\";\n\t    Token[Token[\"RegularExpression\"] = 9] = \"RegularExpression\";\n\t    Token[Token[\"Template\"] = 10] = \"Template\";\n\t})(exports.Token || (exports.Token = {}));\n\tvar Token = exports.Token;\n\t;\n\texports.TokenName = {};\n\texports.TokenName[Token.BooleanLiteral] = 'Boolean';\n\texports.TokenName[Token.EOF] = '<end>';\n\texports.TokenName[Token.Identifier] = 'Identifier';\n\texports.TokenName[Token.Keyword] = 'Keyword';\n\texports.TokenName[Token.NullLiteral] = 'Null';\n\texports.TokenName[Token.NumericLiteral] = 'Numeric';\n\texports.TokenName[Token.Punctuator] = 'Punctuator';\n\texports.TokenName[Token.StringLiteral] = 'String';\n\texports.TokenName[Token.RegularExpression] = 'RegularExpression';\n\texports.TokenName[Token.Template] = 'Template';\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar assert_1 = __webpack_require__(4);\n\tvar messages_1 = __webpack_require__(5);\n\tvar character_1 = __webpack_require__(9);\n\tvar token_1 = __webpack_require__(7);\n\tfunction hexValue(ch) {\n\t    return '0123456789abcdef'.indexOf(ch.toLowerCase());\n\t}\n\tfunction octalValue(ch) {\n\t    return '01234567'.indexOf(ch);\n\t}\n\tvar Scanner = (function () {\n\t    function Scanner(code, handler) {\n\t        this.source = code;\n\t        this.errorHandler = handler;\n\t        this.trackComment = false;\n\t        this.length = code.length;\n\t        this.index = 0;\n\t        this.lineNumber = (code.length > 0) ? 1 : 0;\n\t        this.lineStart = 0;\n\t        this.curlyStack = [];\n\t    }\n\t    ;\n\t    Scanner.prototype.eof = function () {\n\t        return this.index >= this.length;\n\t    };\n\t    ;\n\t    Scanner.prototype.throwUnexpectedToken = function (message) {\n\t        if (message === void 0) { message = messages_1.Messages.UnexpectedTokenIllegal; }\n\t        this.errorHandler.throwError(this.index, this.lineNumber, this.index - this.lineStart + 1, message);\n\t    };\n\t    ;\n\t    Scanner.prototype.tolerateUnexpectedToken = function () {\n\t        this.errorHandler.tolerateError(this.index, this.lineNumber, this.index - this.lineStart + 1, messages_1.Messages.UnexpectedTokenIllegal);\n\t    };\n\t    ;\n\t    // ECMA-262 11.4 Comments\n\t    Scanner.prototype.skipSingleLineComment = function (offset) {\n\t        var comments;\n\t        var start, loc;\n\t        if (this.trackComment) {\n\t            comments = [];\n\t            start = this.index - offset;\n\t            loc = {\n\t                start: {\n\t                    line: this.lineNumber,\n\t                    column: this.index - this.lineStart - offset\n\t                },\n\t                end: {}\n\t            };\n\t        }\n\t        while (!this.eof()) {\n\t            var ch = this.source.charCodeAt(this.index);\n\t            ++this.index;\n\t            if (character_1.Character.isLineTerminator(ch)) {\n\t                if (this.trackComment) {\n\t                    loc.end = {\n\t                        line: this.lineNumber,\n\t                        column: this.index - this.lineStart - 1\n\t                    };\n\t                    var entry = {\n\t                        multiLine: false,\n\t                        slice: [start + offset, this.index - 1],\n\t                        range: [start, this.index - 1],\n\t                        loc: loc\n\t                    };\n\t                    comments.push(entry);\n\t                }\n\t                if (ch === 13 && this.source.charCodeAt(this.index) === 10) {\n\t                    ++this.index;\n\t                }\n\t                ++this.lineNumber;\n\t                this.lineStart = this.index;\n\t                return comments;\n\t            }\n\t        }\n\t        if (this.trackComment) {\n\t            loc.end = {\n\t                line: this.lineNumber,\n\t                column: this.index - this.lineStart\n\t            };\n\t            var entry = {\n\t                multiLine: false,\n\t                slice: [start + offset, this.index],\n\t                range: [start, this.index],\n\t                loc: loc\n\t            };\n\t            comments.push(entry);\n\t        }\n\t        return comments;\n\t    };\n\t    ;\n\t    Scanner.prototype.skipMultiLineComment = function () {\n\t        var comments;\n\t        var start, loc;\n\t        if (this.trackComment) {\n\t            comments = [];\n\t            start = this.index - 2;\n\t            loc = {\n\t                start: {\n\t                    line: this.lineNumber,\n\t                    column: this.index - this.lineStart - 2\n\t                },\n\t                end: {}\n\t            };\n\t        }\n\t        while (!this.eof()) {\n\t            var ch = this.source.charCodeAt(this.index);\n\t            if (character_1.Character.isLineTerminator(ch)) {\n\t                if (ch === 0x0D && this.source.charCodeAt(this.index + 1) === 0x0A) {\n\t                    ++this.index;\n\t                }\n\t                ++this.lineNumber;\n\t                ++this.index;\n\t                this.lineStart = this.index;\n\t            }\n\t            else if (ch === 0x2A) {\n\t                // Block comment ends with '*/'.\n\t                if (this.source.charCodeAt(this.index + 1) === 0x2F) {\n\t                    this.index += 2;\n\t                    if (this.trackComment) {\n\t                        loc.end = {\n\t                            line: this.lineNumber,\n\t                            column: this.index - this.lineStart\n\t                        };\n\t                        var entry = {\n\t                            multiLine: true,\n\t                            slice: [start + 2, this.index - 2],\n\t                            range: [start, this.index],\n\t                            loc: loc\n\t                        };\n\t                        comments.push(entry);\n\t                    }\n\t                    return comments;\n\t                }\n\t                ++this.index;\n\t            }\n\t            else {\n\t                ++this.index;\n\t            }\n\t        }\n\t        // Ran off the end of the file - the whole thing is a comment\n\t        if (this.trackComment) {\n\t            loc.end = {\n\t                line: this.lineNumber,\n\t                column: this.index - this.lineStart\n\t            };\n\t            var entry = {\n\t                multiLine: true,\n\t                slice: [start + 2, this.index],\n\t                range: [start, this.index],\n\t                loc: loc\n\t            };\n\t            comments.push(entry);\n\t        }\n\t        this.tolerateUnexpectedToken();\n\t        return comments;\n\t    };\n\t    ;\n\t    Scanner.prototype.scanComments = function () {\n\t        var comments;\n\t        if (this.trackComment) {\n\t            comments = [];\n\t        }\n\t        var start = (this.index === 0);\n\t        while (!this.eof()) {\n\t            var ch = this.source.charCodeAt(this.index);\n\t            if (character_1.Character.isWhiteSpace(ch)) {\n\t                ++this.index;\n\t            }\n\t            else if (character_1.Character.isLineTerminator(ch)) {\n\t                ++this.index;\n\t                if (ch === 0x0D && this.source.charCodeAt(this.index) === 0x0A) {\n\t                    ++this.index;\n\t                }\n\t                ++this.lineNumber;\n\t                this.lineStart = this.index;\n\t                start = true;\n\t            }\n\t            else if (ch === 0x2F) {\n\t                ch = this.source.charCodeAt(this.index + 1);\n\t                if (ch === 0x2F) {\n\t                    this.index += 2;\n\t                    var comment = this.skipSingleLineComment(2);\n\t                    if (this.trackComment) {\n\t                        comments = comments.concat(comment);\n\t                    }\n\t                    start = true;\n\t                }\n\t                else if (ch === 0x2A) {\n\t                    this.index += 2;\n\t                    var comment = this.skipMultiLineComment();\n\t                    if (this.trackComment) {\n\t                        comments = comments.concat(comment);\n\t                    }\n\t                }\n\t                else {\n\t                    break;\n\t                }\n\t            }\n\t            else if (start && ch === 0x2D) {\n\t                // U+003E is '>'\n\t                if ((this.source.charCodeAt(this.index + 1) === 0x2D) && (this.source.charCodeAt(this.index + 2) === 0x3E)) {\n\t                    // '-->' is a single-line comment\n\t                    this.index += 3;\n\t                    var comment = this.skipSingleLineComment(3);\n\t                    if (this.trackComment) {\n\t                        comments = comments.concat(comment);\n\t                    }\n\t                }\n\t                else {\n\t                    break;\n\t                }\n\t            }\n\t            else if (ch === 0x3C) {\n\t                if (this.source.slice(this.index + 1, this.index + 4) === '!--') {\n\t                    this.index += 4; // `<!--`\n\t                    var comment = this.skipSingleLineComment(4);\n\t                    if (this.trackComment) {\n\t                        comments = comments.concat(comment);\n\t                    }\n\t                }\n\t                else {\n\t                    break;\n\t                }\n\t            }\n\t            else {\n\t                break;\n\t            }\n\t        }\n\t        return comments;\n\t    };\n\t    ;\n\t    // ECMA-262 11.6.2.2 Future Reserved Words\n\t    Scanner.prototype.isFutureReservedWord = function (id) {\n\t        switch (id) {\n\t            case 'enum':\n\t            case 'export':\n\t            case 'import':\n\t            case 'super':\n\t                return true;\n\t            default:\n\t                return false;\n\t        }\n\t    };\n\t    ;\n\t    Scanner.prototype.isStrictModeReservedWord = function (id) {\n\t        switch (id) {\n\t            case 'implements':\n\t            case 'interface':\n\t            case 'package':\n\t            case 'private':\n\t            case 'protected':\n\t            case 'public':\n\t            case 'static':\n\t            case 'yield':\n\t            case 'let':\n\t                return true;\n\t            default:\n\t                return false;\n\t        }\n\t    };\n\t    ;\n\t    Scanner.prototype.isRestrictedWord = function (id) {\n\t        return id === 'eval' || id === 'arguments';\n\t    };\n\t    ;\n\t    // ECMA-262 11.6.2.1 Keywords\n\t    Scanner.prototype.isKeyword = function (id) {\n\t        switch (id.length) {\n\t            case 2:\n\t                return (id === 'if') || (id === 'in') || (id === 'do');\n\t            case 3:\n\t                return (id === 'var') || (id === 'for') || (id === 'new') ||\n\t                    (id === 'try') || (id === 'let');\n\t            case 4:\n\t                return (id === 'this') || (id === 'else') || (id === 'case') ||\n\t                    (id === 'void') || (id === 'with') || (id === 'enum');\n\t            case 5:\n\t                return (id === 'while') || (id === 'break') || (id === 'catch') ||\n\t                    (id === 'throw') || (id === 'const') || (id === 'yield') ||\n\t                    (id === 'class') || (id === 'super');\n\t            case 6:\n\t                return (id === 'return') || (id === 'typeof') || (id === 'delete') ||\n\t                    (id === 'switch') || (id === 'export') || (id === 'import');\n\t            case 7:\n\t                return (id === 'default') || (id === 'finally') || (id === 'extends');\n\t            case 8:\n\t                return (id === 'function') || (id === 'continue') || (id === 'debugger');\n\t            case 10:\n\t                return (id === 'instanceof');\n\t            default:\n\t                return false;\n\t        }\n\t    };\n\t    ;\n\t    Scanner.prototype.codePointAt = function (i) {\n\t        var cp = this.source.charCodeAt(i);\n\t        if (cp >= 0xD800 && cp <= 0xDBFF) {\n\t            var second = this.source.charCodeAt(i + 1);\n\t            if (second >= 0xDC00 && second <= 0xDFFF) {\n\t                var first = cp;\n\t                cp = (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n\t            }\n\t        }\n\t        return cp;\n\t    };\n\t    ;\n\t    Scanner.prototype.scanHexEscape = function (prefix) {\n\t        var len = (prefix === 'u') ? 4 : 2;\n\t        var code = 0;\n\t        for (var i = 0; i < len; ++i) {\n\t            if (!this.eof() && character_1.Character.isHexDigit(this.source.charCodeAt(this.index))) {\n\t                code = code * 16 + hexValue(this.source[this.index++]);\n\t            }\n\t            else {\n\t                return '';\n\t            }\n\t        }\n\t        return String.fromCharCode(code);\n\t    };\n\t    ;\n\t    Scanner.prototype.scanUnicodeCodePointEscape = function () {\n\t        var ch = this.source[this.index];\n\t        var code = 0;\n\t        // At least, one hex digit is required.\n\t        if (ch === '}') {\n\t            this.throwUnexpectedToken();\n\t        }\n\t        while (!this.eof()) {\n\t            ch = this.source[this.index++];\n\t            if (!character_1.Character.isHexDigit(ch.charCodeAt(0))) {\n\t                break;\n\t            }\n\t            code = code * 16 + hexValue(ch);\n\t        }\n\t        if (code > 0x10FFFF || ch !== '}') {\n\t            this.throwUnexpectedToken();\n\t        }\n\t        return character_1.Character.fromCodePoint(code);\n\t    };\n\t    ;\n\t    Scanner.prototype.getIdentifier = function () {\n\t        var start = this.index++;\n\t        while (!this.eof()) {\n\t            var ch = this.source.charCodeAt(this.index);\n\t            if (ch === 0x5C) {\n\t                // Blackslash (U+005C) marks Unicode escape sequence.\n\t                this.index = start;\n\t                return this.getComplexIdentifier();\n\t            }\n\t            else if (ch >= 0xD800 && ch < 0xDFFF) {\n\t                // Need to handle surrogate pairs.\n\t                this.index = start;\n\t                return this.getComplexIdentifier();\n\t            }\n\t            if (character_1.Character.isIdentifierPart(ch)) {\n\t                ++this.index;\n\t            }\n\t            else {\n\t                break;\n\t            }\n\t        }\n\t        return this.source.slice(start, this.index);\n\t    };\n\t    ;\n\t    Scanner.prototype.getComplexIdentifier = function () {\n\t        var cp = this.codePointAt(this.index);\n\t        var id = character_1.Character.fromCodePoint(cp);\n\t        this.index += id.length;\n\t        // '\\u' (U+005C, U+0075) denotes an escaped character.\n\t        var ch;\n\t        if (cp === 0x5C) {\n\t            if (this.source.charCodeAt(this.index) !== 0x75) {\n\t                this.throwUnexpectedToken();\n\t            }\n\t            ++this.index;\n\t            if (this.source[this.index] === '{') {\n\t                ++this.index;\n\t                ch = this.scanUnicodeCodePointEscape();\n\t            }\n\t            else {\n\t                ch = this.scanHexEscape('u');\n\t                cp = ch.charCodeAt(0);\n\t                if (!ch || ch === '\\\\' || !character_1.Character.isIdentifierStart(cp)) {\n\t                    this.throwUnexpectedToken();\n\t                }\n\t            }\n\t            id = ch;\n\t        }\n\t        while (!this.eof()) {\n\t            cp = this.codePointAt(this.index);\n\t            if (!character_1.Character.isIdentifierPart(cp)) {\n\t                break;\n\t            }\n\t            ch = character_1.Character.fromCodePoint(cp);\n\t            id += ch;\n\t            this.index += ch.length;\n\t            // '\\u' (U+005C, U+0075) denotes an escaped character.\n\t            if (cp === 0x5C) {\n\t                id = id.substr(0, id.length - 1);\n\t                if (this.source.charCodeAt(this.index) !== 0x75) {\n\t                    this.throwUnexpectedToken();\n\t                }\n\t                ++this.index;\n\t                if (this.source[this.index] === '{') {\n\t                    ++this.index;\n\t                    ch = this.scanUnicodeCodePointEscape();\n\t                }\n\t                else {\n\t                    ch = this.scanHexEscape('u');\n\t                    cp = ch.charCodeAt(0);\n\t                    if (!ch || ch === '\\\\' || !character_1.Character.isIdentifierPart(cp)) {\n\t                        this.throwUnexpectedToken();\n\t                    }\n\t                }\n\t                id += ch;\n\t            }\n\t        }\n\t        return id;\n\t    };\n\t    ;\n\t    Scanner.prototype.octalToDecimal = function (ch) {\n\t        // \\0 is not octal escape sequence\n\t        var octal = (ch !== '0');\n\t        var code = octalValue(ch);\n\t        if (!this.eof() && character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {\n\t            octal = true;\n\t            code = code * 8 + octalValue(this.source[this.index++]);\n\t            // 3 digits are only allowed when string starts\n\t            // with 0, 1, 2, 3\n\t            if ('0123'.indexOf(ch) >= 0 && !this.eof() && character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {\n\t                code = code * 8 + octalValue(this.source[this.index++]);\n\t            }\n\t        }\n\t        return {\n\t            code: code,\n\t            octal: octal\n\t        };\n\t    };\n\t    ;\n\t    // ECMA-262 11.6 Names and Keywords\n\t    Scanner.prototype.scanIdentifier = function () {\n\t        var type;\n\t        var start = this.index;\n\t        // Backslash (U+005C) starts an escaped character.\n\t        var id = (this.source.charCodeAt(start) === 0x5C) ? this.getComplexIdentifier() : this.getIdentifier();\n\t        // There is no keyword or literal with only one character.\n\t        // Thus, it must be an identifier.\n\t        if (id.length === 1) {\n\t            type = token_1.Token.Identifier;\n\t        }\n\t        else if (this.isKeyword(id)) {\n\t            type = token_1.Token.Keyword;\n\t        }\n\t        else if (id === 'null') {\n\t            type = token_1.Token.NullLiteral;\n\t        }\n\t        else if (id === 'true' || id === 'false') {\n\t            type = token_1.Token.BooleanLiteral;\n\t        }\n\t        else {\n\t            type = token_1.Token.Identifier;\n\t        }\n\t        return {\n\t            type: type,\n\t            value: id,\n\t            lineNumber: this.lineNumber,\n\t            lineStart: this.lineStart,\n\t            start: start,\n\t            end: this.index\n\t        };\n\t    };\n\t    ;\n\t    // ECMA-262 11.7 Punctuators\n\t    Scanner.prototype.scanPunctuator = function () {\n\t        var token = {\n\t            type: token_1.Token.Punctuator,\n\t            value: '',\n\t            lineNumber: this.lineNumber,\n\t            lineStart: this.lineStart,\n\t            start: this.index,\n\t            end: this.index\n\t        };\n\t        // Check for most common single-character punctuators.\n\t        var str = this.source[this.index];\n\t        switch (str) {\n\t            case '(':\n\t            case '{':\n\t                if (str === '{') {\n\t                    this.curlyStack.push('{');\n\t                }\n\t                ++this.index;\n\t                break;\n\t            case '.':\n\t                ++this.index;\n\t                if (this.source[this.index] === '.' && this.source[this.index + 1] === '.') {\n\t                    // Spread operator: ...\n\t                    this.index += 2;\n\t                    str = '...';\n\t                }\n\t                break;\n\t            case '}':\n\t                ++this.index;\n\t                this.curlyStack.pop();\n\t                break;\n\t            case ')':\n\t            case ';':\n\t            case ',':\n\t            case '[':\n\t            case ']':\n\t            case ':':\n\t            case '?':\n\t            case '~':\n\t                ++this.index;\n\t                break;\n\t            default:\n\t                // 4-character punctuator.\n\t                str = this.source.substr(this.index, 4);\n\t                if (str === '>>>=') {\n\t                    this.index += 4;\n\t                }\n\t                else {\n\t                    // 3-character punctuators.\n\t                    str = str.substr(0, 3);\n\t                    if (str === '===' || str === '!==' || str === '>>>' ||\n\t                        str === '<<=' || str === '>>=' || str === '**=') {\n\t                        this.index += 3;\n\t                    }\n\t                    else {\n\t                        // 2-character punctuators.\n\t                        str = str.substr(0, 2);\n\t                        if (str === '&&' || str === '||' || str === '==' || str === '!=' ||\n\t                            str === '+=' || str === '-=' || str === '*=' || str === '/=' ||\n\t                            str === '++' || str === '--' || str === '<<' || str === '>>' ||\n\t                            str === '&=' || str === '|=' || str === '^=' || str === '%=' ||\n\t                            str === '<=' || str === '>=' || str === '=>' || str === '**') {\n\t                            this.index += 2;\n\t                        }\n\t                        else {\n\t                            // 1-character punctuators.\n\t                            str = this.source[this.index];\n\t                            if ('<>=!+-*%&|^/'.indexOf(str) >= 0) {\n\t                                ++this.index;\n\t                            }\n\t                        }\n\t                    }\n\t                }\n\t        }\n\t        if (this.index === token.start) {\n\t            this.throwUnexpectedToken();\n\t        }\n\t        token.end = this.index;\n\t        token.value = str;\n\t        return token;\n\t    };\n\t    ;\n\t    // ECMA-262 11.8.3 Numeric Literals\n\t    Scanner.prototype.scanHexLiteral = function (start) {\n\t        var number = '';\n\t        while (!this.eof()) {\n\t            if (!character_1.Character.isHexDigit(this.source.charCodeAt(this.index))) {\n\t                break;\n\t            }\n\t            number += this.source[this.index++];\n\t        }\n\t        if (number.length === 0) {\n\t            this.throwUnexpectedToken();\n\t        }\n\t        if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index))) {\n\t            this.throwUnexpectedToken();\n\t        }\n\t        return {\n\t            type: token_1.Token.NumericLiteral,\n\t            value: parseInt('0x' + number, 16),\n\t            lineNumber: this.lineNumber,\n\t            lineStart: this.lineStart,\n\t            start: start,\n\t            end: this.index\n\t        };\n\t    };\n\t    ;\n\t    Scanner.prototype.scanBinaryLiteral = function (start) {\n\t        var number = '';\n\t        var ch;\n\t        while (!this.eof()) {\n\t            ch = this.source[this.index];\n\t            if (ch !== '0' && ch !== '1') {\n\t                break;\n\t            }\n\t            number += this.source[this.index++];\n\t        }\n\t        if (number.length === 0) {\n\t            // only 0b or 0B\n\t            this.throwUnexpectedToken();\n\t        }\n\t        if (!this.eof()) {\n\t            ch = this.source.charCodeAt(this.index);\n\t            /* istanbul ignore else */\n\t            if (character_1.Character.isIdentifierStart(ch) || character_1.Character.isDecimalDigit(ch)) {\n\t                this.throwUnexpectedToken();\n\t            }\n\t        }\n\t        return {\n\t            type: token_1.Token.NumericLiteral,\n\t            value: parseInt(number, 2),\n\t            lineNumber: this.lineNumber,\n\t            lineStart: this.lineStart,\n\t            start: start,\n\t            end: this.index\n\t        };\n\t    };\n\t    ;\n\t    Scanner.prototype.scanOctalLiteral = function (prefix, start) {\n\t        var number = '';\n\t        var octal = false;\n\t        if (character_1.Character.isOctalDigit(prefix.charCodeAt(0))) {\n\t            octal = true;\n\t            number = '0' + this.source[this.index++];\n\t        }\n\t        else {\n\t            ++this.index;\n\t        }\n\t        while (!this.eof()) {\n\t            if (!character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {\n\t                break;\n\t            }\n\t            number += this.source[this.index++];\n\t        }\n\t        if (!octal && number.length === 0) {\n\t            // only 0o or 0O\n\t            this.throwUnexpectedToken();\n\t        }\n\t        if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index)) || character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\n\t            this.throwUnexpectedToken();\n\t        }\n\t        return {\n\t            type: token_1.Token.NumericLiteral,\n\t            value: parseInt(number, 8),\n\t            octal: octal,\n\t            lineNumber: this.lineNumber,\n\t            lineStart: this.lineStart,\n\t            start: start,\n\t            end: this.index\n\t        };\n\t    };\n\t    ;\n\t    Scanner.prototype.isImplicitOctalLiteral = function () {\n\t        // Implicit octal, unless there is a non-octal digit.\n\t        // (Annex B.1.1 on Numeric Literals)\n\t        for (var i = this.index + 1; i < this.length; ++i) {\n\t            var ch = this.source[i];\n\t            if (ch === '8' || ch === '9') {\n\t                return false;\n\t            }\n\t            if (!character_1.Character.isOctalDigit(ch.charCodeAt(0))) {\n\t                return true;\n\t            }\n\t        }\n\t        return true;\n\t    };\n\t    ;\n\t    Scanner.prototype.scanNumericLiteral = function () {\n\t        var start = this.index;\n\t        var ch = this.source[start];\n\t        assert_1.assert(character_1.Character.isDecimalDigit(ch.charCodeAt(0)) || (ch === '.'), 'Numeric literal must start with a decimal digit or a decimal point');\n\t        var number = '';\n\t        if (ch !== '.') {\n\t            number = this.source[this.index++];\n\t            ch = this.source[this.index];\n\t            // Hex number starts with '0x'.\n\t            // Octal number starts with '0'.\n\t            // Octal number in ES6 starts with '0o'.\n\t            // Binary number in ES6 starts with '0b'.\n\t            if (number === '0') {\n\t                if (ch === 'x' || ch === 'X') {\n\t                    ++this.index;\n\t                    return this.scanHexLiteral(start);\n\t                }\n\t                if (ch === 'b' || ch === 'B') {\n\t                    ++this.index;\n\t                    return this.scanBinaryLiteral(start);\n\t                }\n\t                if (ch === 'o' || ch === 'O') {\n\t                    return this.scanOctalLiteral(ch, start);\n\t                }\n\t                if (ch && character_1.Character.isOctalDigit(ch.charCodeAt(0))) {\n\t                    if (this.isImplicitOctalLiteral()) {\n\t                        return this.scanOctalLiteral(ch, start);\n\t                    }\n\t                }\n\t            }\n\t            while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\n\t                number += this.source[this.index++];\n\t            }\n\t            ch = this.source[this.index];\n\t        }\n\t        if (ch === '.') {\n\t            number += this.source[this.index++];\n\t            while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\n\t                number += this.source[this.index++];\n\t            }\n\t            ch = this.source[this.index];\n\t        }\n\t        if (ch === 'e' || ch === 'E') {\n\t            number += this.source[this.index++];\n\t            ch = this.source[this.index];\n\t            if (ch === '+' || ch === '-') {\n\t                number += this.source[this.index++];\n\t            }\n\t            if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\n\t                while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\n\t                    number += this.source[this.index++];\n\t                }\n\t            }\n\t            else {\n\t                this.throwUnexpectedToken();\n\t            }\n\t        }\n\t        if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index))) {\n\t            this.throwUnexpectedToken();\n\t        }\n\t        return {\n\t            type: token_1.Token.NumericLiteral,\n\t            value: parseFloat(number),\n\t            lineNumber: this.lineNumber,\n\t            lineStart: this.lineStart,\n\t            start: start,\n\t            end: this.index\n\t        };\n\t    };\n\t    ;\n\t    // ECMA-262 11.8.4 String Literals\n\t    Scanner.prototype.scanStringLiteral = function () {\n\t        var start = this.index;\n\t        var quote = this.source[start];\n\t        assert_1.assert((quote === '\\'' || quote === '\"'), 'String literal must starts with a quote');\n\t        ++this.index;\n\t        var octal = false;\n\t        var str = '';\n\t        while (!this.eof()) {\n\t            var ch = this.source[this.index++];\n\t            if (ch === quote) {\n\t                quote = '';\n\t                break;\n\t            }\n\t            else if (ch === '\\\\') {\n\t                ch = this.source[this.index++];\n\t                if (!ch || !character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n\t                    switch (ch) {\n\t                        case 'u':\n\t                        case 'x':\n\t                            if (this.source[this.index] === '{') {\n\t                                ++this.index;\n\t                                str += this.scanUnicodeCodePointEscape();\n\t                            }\n\t                            else {\n\t                                var unescaped = this.scanHexEscape(ch);\n\t                                if (!unescaped) {\n\t                                    this.throwUnexpectedToken();\n\t                                }\n\t                                str += unescaped;\n\t                            }\n\t                            break;\n\t                        case 'n':\n\t                            str += '\\n';\n\t                            break;\n\t                        case 'r':\n\t                            str += '\\r';\n\t                            break;\n\t                        case 't':\n\t                            str += '\\t';\n\t                            break;\n\t                        case 'b':\n\t                            str += '\\b';\n\t                            break;\n\t                        case 'f':\n\t                            str += '\\f';\n\t                            break;\n\t                        case 'v':\n\t                            str += '\\x0B';\n\t                            break;\n\t                        case '8':\n\t                        case '9':\n\t                            str += ch;\n\t                            this.tolerateUnexpectedToken();\n\t                            break;\n\t                        default:\n\t                            if (ch && character_1.Character.isOctalDigit(ch.charCodeAt(0))) {\n\t                                var octToDec = this.octalToDecimal(ch);\n\t                                octal = octToDec.octal || octal;\n\t                                str += String.fromCharCode(octToDec.code);\n\t                            }\n\t                            else {\n\t                                str += ch;\n\t                            }\n\t                            break;\n\t                    }\n\t                }\n\t                else {\n\t                    ++this.lineNumber;\n\t                    if (ch === '\\r' && this.source[this.index] === '\\n') {\n\t                        ++this.index;\n\t                    }\n\t                    this.lineStart = this.index;\n\t                }\n\t            }\n\t            else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n\t                break;\n\t            }\n\t            else {\n\t                str += ch;\n\t            }\n\t        }\n\t        if (quote !== '') {\n\t            this.index = start;\n\t            this.throwUnexpectedToken();\n\t        }\n\t        return {\n\t            type: token_1.Token.StringLiteral,\n\t            value: str,\n\t            octal: octal,\n\t            lineNumber: this.lineNumber,\n\t            lineStart: this.lineStart,\n\t            start: start,\n\t            end: this.index\n\t        };\n\t    };\n\t    ;\n\t    // ECMA-262 11.8.6 Template Literal Lexical Components\n\t    Scanner.prototype.scanTemplate = function () {\n\t        var cooked = '';\n\t        var terminated = false;\n\t        var start = this.index;\n\t        var head = (this.source[start] === '`');\n\t        var tail = false;\n\t        var rawOffset = 2;\n\t        ++this.index;\n\t        while (!this.eof()) {\n\t            var ch = this.source[this.index++];\n\t            if (ch === '`') {\n\t                rawOffset = 1;\n\t                tail = true;\n\t                terminated = true;\n\t                break;\n\t            }\n\t            else if (ch === '$') {\n\t                if (this.source[this.index] === '{') {\n\t                    this.curlyStack.push('${');\n\t                    ++this.index;\n\t                    terminated = true;\n\t                    break;\n\t                }\n\t                cooked += ch;\n\t            }\n\t            else if (ch === '\\\\') {\n\t                ch = this.source[this.index++];\n\t                if (!character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n\t                    switch (ch) {\n\t                        case 'n':\n\t                            cooked += '\\n';\n\t                            break;\n\t                        case 'r':\n\t                            cooked += '\\r';\n\t                            break;\n\t                        case 't':\n\t                            cooked += '\\t';\n\t                            break;\n\t                        case 'u':\n\t                        case 'x':\n\t                            if (this.source[this.index] === '{') {\n\t                                ++this.index;\n\t                                cooked += this.scanUnicodeCodePointEscape();\n\t                            }\n\t                            else {\n\t                                var restore = this.index;\n\t                                var unescaped = this.scanHexEscape(ch);\n\t                                if (unescaped) {\n\t                                    cooked += unescaped;\n\t                                }\n\t                                else {\n\t                                    this.index = restore;\n\t                                    cooked += ch;\n\t                                }\n\t                            }\n\t                            break;\n\t                        case 'b':\n\t                            cooked += '\\b';\n\t                            break;\n\t                        case 'f':\n\t                            cooked += '\\f';\n\t                            break;\n\t                        case 'v':\n\t                            cooked += '\\v';\n\t                            break;\n\t                        default:\n\t                            if (ch === '0') {\n\t                                if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\n\t                                    // Illegal: \\01 \\02 and so on\n\t                                    this.throwUnexpectedToken(messages_1.Messages.TemplateOctalLiteral);\n\t                                }\n\t                                cooked += '\\0';\n\t                            }\n\t                            else if (character_1.Character.isOctalDigit(ch.charCodeAt(0))) {\n\t                                // Illegal: \\1 \\2\n\t                                this.throwUnexpectedToken(messages_1.Messages.TemplateOctalLiteral);\n\t                            }\n\t                            else {\n\t                                cooked += ch;\n\t                            }\n\t                            break;\n\t                    }\n\t                }\n\t                else {\n\t                    ++this.lineNumber;\n\t                    if (ch === '\\r' && this.source[this.index] === '\\n') {\n\t                        ++this.index;\n\t                    }\n\t                    this.lineStart = this.index;\n\t                }\n\t            }\n\t            else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n\t                ++this.lineNumber;\n\t                if (ch === '\\r' && this.source[this.index] === '\\n') {\n\t                    ++this.index;\n\t                }\n\t                this.lineStart = this.index;\n\t                cooked += '\\n';\n\t            }\n\t            else {\n\t                cooked += ch;\n\t            }\n\t        }\n\t        if (!terminated) {\n\t            this.throwUnexpectedToken();\n\t        }\n\t        if (!head) {\n\t            this.curlyStack.pop();\n\t        }\n\t        return {\n\t            type: token_1.Token.Template,\n\t            value: {\n\t                cooked: cooked,\n\t                raw: this.source.slice(start + 1, this.index - rawOffset)\n\t            },\n\t            head: head,\n\t            tail: tail,\n\t            lineNumber: this.lineNumber,\n\t            lineStart: this.lineStart,\n\t            start: start,\n\t            end: this.index\n\t        };\n\t    };\n\t    ;\n\t    // ECMA-262 11.8.5 Regular Expression Literals\n\t    Scanner.prototype.testRegExp = function (pattern, flags) {\n\t        // The BMP character to use as a replacement for astral symbols when\n\t        // translating an ES6 \"u\"-flagged pattern to an ES5-compatible\n\t        // approximation.\n\t        // Note: replacing with '\\uFFFF' enables false positives in unlikely\n\t        // scenarios. For example, `[\\u{1044f}-\\u{10440}]` is an invalid\n\t        // pattern that would not be detected by this substitution.\n\t        var astralSubstitute = '\\uFFFF';\n\t        var tmp = pattern;\n\t        var self = this;\n\t        if (flags.indexOf('u') >= 0) {\n\t            tmp = tmp\n\t                .replace(/\\\\u\\{([0-9a-fA-F]+)\\}|\\\\u([a-fA-F0-9]{4})/g, function ($0, $1, $2) {\n\t                var codePoint = parseInt($1 || $2, 16);\n\t                if (codePoint > 0x10FFFF) {\n\t                    self.throwUnexpectedToken(messages_1.Messages.InvalidRegExp);\n\t                }\n\t                if (codePoint <= 0xFFFF) {\n\t                    return String.fromCharCode(codePoint);\n\t                }\n\t                return astralSubstitute;\n\t            })\n\t                .replace(/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g, astralSubstitute);\n\t        }\n\t        // First, detect invalid regular expressions.\n\t        try {\n\t            RegExp(tmp);\n\t        }\n\t        catch (e) {\n\t            this.throwUnexpectedToken(messages_1.Messages.InvalidRegExp);\n\t        }\n\t        // Return a regular expression object for this pattern-flag pair, or\n\t        // `null` in case the current environment doesn't support the flags it\n\t        // uses.\n\t        try {\n\t            return new RegExp(pattern, flags);\n\t        }\n\t        catch (exception) {\n\t            /* istanbul ignore next */\n\t            return null;\n\t        }\n\t    };\n\t    ;\n\t    Scanner.prototype.scanRegExpBody = function () {\n\t        var ch = this.source[this.index];\n\t        assert_1.assert(ch === '/', 'Regular expression literal must start with a slash');\n\t        var str = this.source[this.index++];\n\t        var classMarker = false;\n\t        var terminated = false;\n\t        while (!this.eof()) {\n\t            ch = this.source[this.index++];\n\t            str += ch;\n\t            if (ch === '\\\\') {\n\t                ch = this.source[this.index++];\n\t                // ECMA-262 7.8.5\n\t                if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n\t                    this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);\n\t                }\n\t                str += ch;\n\t            }\n\t            else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n\t                this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);\n\t            }\n\t            else if (classMarker) {\n\t                if (ch === ']') {\n\t                    classMarker = false;\n\t                }\n\t            }\n\t            else {\n\t                if (ch === '/') {\n\t                    terminated = true;\n\t                    break;\n\t                }\n\t                else if (ch === '[') {\n\t                    classMarker = true;\n\t                }\n\t            }\n\t        }\n\t        if (!terminated) {\n\t            this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);\n\t        }\n\t        // Exclude leading and trailing slash.\n\t        var body = str.substr(1, str.length - 2);\n\t        return {\n\t            value: body,\n\t            literal: str\n\t        };\n\t    };\n\t    ;\n\t    Scanner.prototype.scanRegExpFlags = function () {\n\t        var str = '';\n\t        var flags = '';\n\t        while (!this.eof()) {\n\t            var ch = this.source[this.index];\n\t            if (!character_1.Character.isIdentifierPart(ch.charCodeAt(0))) {\n\t                break;\n\t            }\n\t            ++this.index;\n\t            if (ch === '\\\\' && !this.eof()) {\n\t                ch = this.source[this.index];\n\t                if (ch === 'u') {\n\t                    ++this.index;\n\t                    var restore = this.index;\n\t                    ch = this.scanHexEscape('u');\n\t                    if (ch) {\n\t                        flags += ch;\n\t                        for (str += '\\\\u'; restore < this.index; ++restore) {\n\t                            str += this.source[restore];\n\t                        }\n\t                    }\n\t                    else {\n\t                        this.index = restore;\n\t                        flags += 'u';\n\t                        str += '\\\\u';\n\t                    }\n\t                    this.tolerateUnexpectedToken();\n\t                }\n\t                else {\n\t                    str += '\\\\';\n\t                    this.tolerateUnexpectedToken();\n\t                }\n\t            }\n\t            else {\n\t                flags += ch;\n\t                str += ch;\n\t            }\n\t        }\n\t        return {\n\t            value: flags,\n\t            literal: str\n\t        };\n\t    };\n\t    ;\n\t    Scanner.prototype.scanRegExp = function () {\n\t        var start = this.index;\n\t        var body = this.scanRegExpBody();\n\t        var flags = this.scanRegExpFlags();\n\t        var value = this.testRegExp(body.value, flags.value);\n\t        return {\n\t            type: token_1.Token.RegularExpression,\n\t            value: value,\n\t            literal: body.literal + flags.literal,\n\t            regex: {\n\t                pattern: body.value,\n\t                flags: flags.value\n\t            },\n\t            lineNumber: this.lineNumber,\n\t            lineStart: this.lineStart,\n\t            start: start,\n\t            end: this.index\n\t        };\n\t    };\n\t    ;\n\t    Scanner.prototype.lex = function () {\n\t        if (this.eof()) {\n\t            return {\n\t                type: token_1.Token.EOF,\n\t                lineNumber: this.lineNumber,\n\t                lineStart: this.lineStart,\n\t                start: this.index,\n\t                end: this.index\n\t            };\n\t        }\n\t        var cp = this.source.charCodeAt(this.index);\n\t        if (character_1.Character.isIdentifierStart(cp)) {\n\t            return this.scanIdentifier();\n\t        }\n\t        // Very common: ( and ) and ;\n\t        if (cp === 0x28 || cp === 0x29 || cp === 0x3B) {\n\t            return this.scanPunctuator();\n\t        }\n\t        // String literal starts with single quote (U+0027) or double quote (U+0022).\n\t        if (cp === 0x27 || cp === 0x22) {\n\t            return this.scanStringLiteral();\n\t        }\n\t        // Dot (.) U+002E can also start a floating-point number, hence the need\n\t        // to check the next character.\n\t        if (cp === 0x2E) {\n\t            if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index + 1))) {\n\t                return this.scanNumericLiteral();\n\t            }\n\t            return this.scanPunctuator();\n\t        }\n\t        if (character_1.Character.isDecimalDigit(cp)) {\n\t            return this.scanNumericLiteral();\n\t        }\n\t        // Template literals start with ` (U+0060) for template head\n\t        // or } (U+007D) for template middle or template tail.\n\t        if (cp === 0x60 || (cp === 0x7D && this.curlyStack[this.curlyStack.length - 1] === '${')) {\n\t            return this.scanTemplate();\n\t        }\n\t        // Possible identifier start in a surrogate pair.\n\t        if (cp >= 0xD800 && cp < 0xDFFF) {\n\t            if (character_1.Character.isIdentifierStart(this.codePointAt(this.index))) {\n\t                return this.scanIdentifier();\n\t            }\n\t        }\n\t        return this.scanPunctuator();\n\t    };\n\t    ;\n\t    return Scanner;\n\t}());\n\texports.Scanner = Scanner;\n\n\n/***/ },\n/* 9 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t// See also tools/generate-unicode-regex.js.\n\tvar Regex = {\n\t    // Unicode v8.0.0 NonAsciiIdentifierStart:\n\t    NonAsciiIdentifierStart: /[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B4\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309B-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AD\\uA7B0-\\uA7B7\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF30-\\uDF4A\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC03-\\uDC37\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDF00-\\uDF19]|\\uD806[\\uDCA0-\\uDCDF\\uDCFF\\uDEC0-\\uDEF8]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50\\uDF93-\\uDF9F]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD83A[\\uDC00-\\uDCC4]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1]|\\uD87E[\\uDC00-\\uDE1D]/,\n\t    // Unicode v8.0.0 NonAsciiIdentifierPart:\n\t    NonAsciiIdentifierPart: /[\\xAA\\xB5\\xB7\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0-\\u08B4\\u08E3-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0AF9\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58-\\u0C5A\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D57\\u0D5F-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1369-\\u1371\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19DA\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1CF8\\u1CF9\\u1D00-\\u1DF5\\u1DFC-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AD\\uA7B0-\\uA7B7\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C4\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA8FD\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDDFD\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDEE0\\uDF00-\\uDF1F\\uDF30-\\uDF4A\\uDF50-\\uDF7A\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCA0-\\uDCA9\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE38-\\uDE3A\\uDE3F\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE6\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC00-\\uDC46\\uDC66-\\uDC6F\\uDC7F-\\uDCBA\\uDCD0-\\uDCE8\\uDCF0-\\uDCF9\\uDD00-\\uDD34\\uDD36-\\uDD3F\\uDD50-\\uDD73\\uDD76\\uDD80-\\uDDC4\\uDDCA-\\uDDCC\\uDDD0-\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE37\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEEA\\uDEF0-\\uDEF9\\uDF00-\\uDF03\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3C-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF50\\uDF57\\uDF5D-\\uDF63\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDC80-\\uDCC5\\uDCC7\\uDCD0-\\uDCD9\\uDD80-\\uDDB5\\uDDB8-\\uDDC0\\uDDD8-\\uDDDD\\uDE00-\\uDE40\\uDE44\\uDE50-\\uDE59\\uDE80-\\uDEB7\\uDEC0-\\uDEC9\\uDF00-\\uDF19\\uDF1D-\\uDF2B\\uDF30-\\uDF39]|\\uD806[\\uDCA0-\\uDCE9\\uDCFF\\uDEC0-\\uDEF8]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE60-\\uDE69\\uDED0-\\uDEED\\uDEF0-\\uDEF4\\uDF00-\\uDF36\\uDF40-\\uDF43\\uDF50-\\uDF59\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50-\\uDF7E\\uDF8F-\\uDF9F]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99\\uDC9D\\uDC9E]|\\uD834[\\uDD65-\\uDD69\\uDD6D-\\uDD72\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB\\uDFCE-\\uDFFF]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]|\\uD83A[\\uDC00-\\uDCC4\\uDCD0-\\uDCD6]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1]|\\uD87E[\\uDC00-\\uDE1D]|\\uDB40[\\uDD00-\\uDDEF]/\n\t};\n\texports.Character = {\n\t    fromCodePoint: function (cp) {\n\t        return (cp < 0x10000) ? String.fromCharCode(cp) :\n\t            String.fromCharCode(0xD800 + ((cp - 0x10000) >> 10)) +\n\t                String.fromCharCode(0xDC00 + ((cp - 0x10000) & 1023));\n\t    },\n\t    // ECMA-262 11.2 White Space\n\t    isWhiteSpace: function (cp) {\n\t        return (cp === 0x20) || (cp === 0x09) || (cp === 0x0B) || (cp === 0x0C) || (cp === 0xA0) ||\n\t            (cp >= 0x1680 && [0x1680, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF].indexOf(cp) >= 0);\n\t    },\n\t    // ECMA-262 11.3 Line Terminators\n\t    isLineTerminator: function (cp) {\n\t        return (cp === 0x0A) || (cp === 0x0D) || (cp === 0x2028) || (cp === 0x2029);\n\t    },\n\t    // ECMA-262 11.6 Identifier Names and Identifiers\n\t    isIdentifierStart: function (cp) {\n\t        return (cp === 0x24) || (cp === 0x5F) ||\n\t            (cp >= 0x41 && cp <= 0x5A) ||\n\t            (cp >= 0x61 && cp <= 0x7A) ||\n\t            (cp === 0x5C) ||\n\t            ((cp >= 0x80) && Regex.NonAsciiIdentifierStart.test(exports.Character.fromCodePoint(cp)));\n\t    },\n\t    isIdentifierPart: function (cp) {\n\t        return (cp === 0x24) || (cp === 0x5F) ||\n\t            (cp >= 0x41 && cp <= 0x5A) ||\n\t            (cp >= 0x61 && cp <= 0x7A) ||\n\t            (cp >= 0x30 && cp <= 0x39) ||\n\t            (cp === 0x5C) ||\n\t            ((cp >= 0x80) && Regex.NonAsciiIdentifierPart.test(exports.Character.fromCodePoint(cp)));\n\t    },\n\t    // ECMA-262 11.8.3 Numeric Literals\n\t    isDecimalDigit: function (cp) {\n\t        return (cp >= 0x30 && cp <= 0x39); // 0..9\n\t    },\n\t    isHexDigit: function (cp) {\n\t        return (cp >= 0x30 && cp <= 0x39) ||\n\t            (cp >= 0x41 && cp <= 0x46) ||\n\t            (cp >= 0x61 && cp <= 0x66); // a..f\n\t    },\n\t    isOctalDigit: function (cp) {\n\t        return (cp >= 0x30 && cp <= 0x37); // 0..7\n\t    }\n\t};\n\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar syntax_1 = __webpack_require__(2);\n\tvar ArrayExpression = (function () {\n\t    function ArrayExpression(elements) {\n\t        this.type = syntax_1.Syntax.ArrayExpression;\n\t        this.elements = elements;\n\t    }\n\t    return ArrayExpression;\n\t}());\n\texports.ArrayExpression = ArrayExpression;\n\tvar ArrayPattern = (function () {\n\t    function ArrayPattern(elements) {\n\t        this.type = syntax_1.Syntax.ArrayPattern;\n\t        this.elements = elements;\n\t    }\n\t    return ArrayPattern;\n\t}());\n\texports.ArrayPattern = ArrayPattern;\n\tvar ArrowFunctionExpression = (function () {\n\t    function ArrowFunctionExpression(params, body, expression) {\n\t        this.type = syntax_1.Syntax.ArrowFunctionExpression;\n\t        this.id = null;\n\t        this.params = params;\n\t        this.body = body;\n\t        this.generator = false;\n\t        this.expression = expression;\n\t    }\n\t    return ArrowFunctionExpression;\n\t}());\n\texports.ArrowFunctionExpression = ArrowFunctionExpression;\n\tvar AssignmentExpression = (function () {\n\t    function AssignmentExpression(operator, left, right) {\n\t        this.type = syntax_1.Syntax.AssignmentExpression;\n\t        this.operator = operator;\n\t        this.left = left;\n\t        this.right = right;\n\t    }\n\t    return AssignmentExpression;\n\t}());\n\texports.AssignmentExpression = AssignmentExpression;\n\tvar AssignmentPattern = (function () {\n\t    function AssignmentPattern(left, right) {\n\t        this.type = syntax_1.Syntax.AssignmentPattern;\n\t        this.left = left;\n\t        this.right = right;\n\t    }\n\t    return AssignmentPattern;\n\t}());\n\texports.AssignmentPattern = AssignmentPattern;\n\tvar BinaryExpression = (function () {\n\t    function BinaryExpression(operator, left, right) {\n\t        var logical = (operator === '||' || operator === '&&');\n\t        this.type = logical ? syntax_1.Syntax.LogicalExpression : syntax_1.Syntax.BinaryExpression;\n\t        this.operator = operator;\n\t        this.left = left;\n\t        this.right = right;\n\t    }\n\t    return BinaryExpression;\n\t}());\n\texports.BinaryExpression = BinaryExpression;\n\tvar BlockStatement = (function () {\n\t    function BlockStatement(body) {\n\t        this.type = syntax_1.Syntax.BlockStatement;\n\t        this.body = body;\n\t    }\n\t    return BlockStatement;\n\t}());\n\texports.BlockStatement = BlockStatement;\n\tvar BreakStatement = (function () {\n\t    function BreakStatement(label) {\n\t        this.type = syntax_1.Syntax.BreakStatement;\n\t        this.label = label;\n\t    }\n\t    return BreakStatement;\n\t}());\n\texports.BreakStatement = BreakStatement;\n\tvar CallExpression = (function () {\n\t    function CallExpression(callee, args) {\n\t        this.type = syntax_1.Syntax.CallExpression;\n\t        this.callee = callee;\n\t        this.arguments = args;\n\t    }\n\t    return CallExpression;\n\t}());\n\texports.CallExpression = CallExpression;\n\tvar CatchClause = (function () {\n\t    function CatchClause(param, body) {\n\t        this.type = syntax_1.Syntax.CatchClause;\n\t        this.param = param;\n\t        this.body = body;\n\t    }\n\t    return CatchClause;\n\t}());\n\texports.CatchClause = CatchClause;\n\tvar ClassBody = (function () {\n\t    function ClassBody(body) {\n\t        this.type = syntax_1.Syntax.ClassBody;\n\t        this.body = body;\n\t    }\n\t    return ClassBody;\n\t}());\n\texports.ClassBody = ClassBody;\n\tvar ClassDeclaration = (function () {\n\t    function ClassDeclaration(id, superClass, body) {\n\t        this.type = syntax_1.Syntax.ClassDeclaration;\n\t        this.id = id;\n\t        this.superClass = superClass;\n\t        this.body = body;\n\t    }\n\t    return ClassDeclaration;\n\t}());\n\texports.ClassDeclaration = ClassDeclaration;\n\tvar ClassExpression = (function () {\n\t    function ClassExpression(id, superClass, body) {\n\t        this.type = syntax_1.Syntax.ClassExpression;\n\t        this.id = id;\n\t        this.superClass = superClass;\n\t        this.body = body;\n\t    }\n\t    return ClassExpression;\n\t}());\n\texports.ClassExpression = ClassExpression;\n\tvar ComputedMemberExpression = (function () {\n\t    function ComputedMemberExpression(object, property) {\n\t        this.type = syntax_1.Syntax.MemberExpression;\n\t        this.computed = true;\n\t        this.object = object;\n\t        this.property = property;\n\t    }\n\t    return ComputedMemberExpression;\n\t}());\n\texports.ComputedMemberExpression = ComputedMemberExpression;\n\tvar ConditionalExpression = (function () {\n\t    function ConditionalExpression(test, consequent, alternate) {\n\t        this.type = syntax_1.Syntax.ConditionalExpression;\n\t        this.test = test;\n\t        this.consequent = consequent;\n\t        this.alternate = alternate;\n\t    }\n\t    return ConditionalExpression;\n\t}());\n\texports.ConditionalExpression = ConditionalExpression;\n\tvar ContinueStatement = (function () {\n\t    function ContinueStatement(label) {\n\t        this.type = syntax_1.Syntax.ContinueStatement;\n\t        this.label = label;\n\t    }\n\t    return ContinueStatement;\n\t}());\n\texports.ContinueStatement = ContinueStatement;\n\tvar DebuggerStatement = (function () {\n\t    function DebuggerStatement() {\n\t        this.type = syntax_1.Syntax.DebuggerStatement;\n\t    }\n\t    return DebuggerStatement;\n\t}());\n\texports.DebuggerStatement = DebuggerStatement;\n\tvar Directive = (function () {\n\t    function Directive(expression, directive) {\n\t        this.type = syntax_1.Syntax.ExpressionStatement;\n\t        this.expression = expression;\n\t        this.directive = directive;\n\t    }\n\t    return Directive;\n\t}());\n\texports.Directive = Directive;\n\tvar DoWhileStatement = (function () {\n\t    function DoWhileStatement(body, test) {\n\t        this.type = syntax_1.Syntax.DoWhileStatement;\n\t        this.body = body;\n\t        this.test = test;\n\t    }\n\t    return DoWhileStatement;\n\t}());\n\texports.DoWhileStatement = DoWhileStatement;\n\tvar EmptyStatement = (function () {\n\t    function EmptyStatement() {\n\t        this.type = syntax_1.Syntax.EmptyStatement;\n\t    }\n\t    return EmptyStatement;\n\t}());\n\texports.EmptyStatement = EmptyStatement;\n\tvar ExportAllDeclaration = (function () {\n\t    function ExportAllDeclaration(source) {\n\t        this.type = syntax_1.Syntax.ExportAllDeclaration;\n\t        this.source = source;\n\t    }\n\t    return ExportAllDeclaration;\n\t}());\n\texports.ExportAllDeclaration = ExportAllDeclaration;\n\tvar ExportDefaultDeclaration = (function () {\n\t    function ExportDefaultDeclaration(declaration) {\n\t        this.type = syntax_1.Syntax.ExportDefaultDeclaration;\n\t        this.declaration = declaration;\n\t    }\n\t    return ExportDefaultDeclaration;\n\t}());\n\texports.ExportDefaultDeclaration = ExportDefaultDeclaration;\n\tvar ExportNamedDeclaration = (function () {\n\t    function ExportNamedDeclaration(declaration, specifiers, source) {\n\t        this.type = syntax_1.Syntax.ExportNamedDeclaration;\n\t        this.declaration = declaration;\n\t        this.specifiers = specifiers;\n\t        this.source = source;\n\t    }\n\t    return ExportNamedDeclaration;\n\t}());\n\texports.ExportNamedDeclaration = ExportNamedDeclaration;\n\tvar ExportSpecifier = (function () {\n\t    function ExportSpecifier(local, exported) {\n\t        this.type = syntax_1.Syntax.ExportSpecifier;\n\t        this.exported = exported;\n\t        this.local = local;\n\t    }\n\t    return ExportSpecifier;\n\t}());\n\texports.ExportSpecifier = ExportSpecifier;\n\tvar ExpressionStatement = (function () {\n\t    function ExpressionStatement(expression) {\n\t        this.type = syntax_1.Syntax.ExpressionStatement;\n\t        this.expression = expression;\n\t    }\n\t    return ExpressionStatement;\n\t}());\n\texports.ExpressionStatement = ExpressionStatement;\n\tvar ForInStatement = (function () {\n\t    function ForInStatement(left, right, body) {\n\t        this.type = syntax_1.Syntax.ForInStatement;\n\t        this.left = left;\n\t        this.right = right;\n\t        this.body = body;\n\t        this.each = false;\n\t    }\n\t    return ForInStatement;\n\t}());\n\texports.ForInStatement = ForInStatement;\n\tvar ForOfStatement = (function () {\n\t    function ForOfStatement(left, right, body) {\n\t        this.type = syntax_1.Syntax.ForOfStatement;\n\t        this.left = left;\n\t        this.right = right;\n\t        this.body = body;\n\t    }\n\t    return ForOfStatement;\n\t}());\n\texports.ForOfStatement = ForOfStatement;\n\tvar ForStatement = (function () {\n\t    function ForStatement(init, test, update, body) {\n\t        this.type = syntax_1.Syntax.ForStatement;\n\t        this.init = init;\n\t        this.test = test;\n\t        this.update = update;\n\t        this.body = body;\n\t    }\n\t    return ForStatement;\n\t}());\n\texports.ForStatement = ForStatement;\n\tvar FunctionDeclaration = (function () {\n\t    function FunctionDeclaration(id, params, body, generator) {\n\t        this.type = syntax_1.Syntax.FunctionDeclaration;\n\t        this.id = id;\n\t        this.params = params;\n\t        this.body = body;\n\t        this.generator = generator;\n\t        this.expression = false;\n\t    }\n\t    return FunctionDeclaration;\n\t}());\n\texports.FunctionDeclaration = FunctionDeclaration;\n\tvar FunctionExpression = (function () {\n\t    function FunctionExpression(id, params, body, generator) {\n\t        this.type = syntax_1.Syntax.FunctionExpression;\n\t        this.id = id;\n\t        this.params = params;\n\t        this.body = body;\n\t        this.generator = generator;\n\t        this.expression = false;\n\t    }\n\t    return FunctionExpression;\n\t}());\n\texports.FunctionExpression = FunctionExpression;\n\tvar Identifier = (function () {\n\t    function Identifier(name) {\n\t        this.type = syntax_1.Syntax.Identifier;\n\t        this.name = name;\n\t    }\n\t    return Identifier;\n\t}());\n\texports.Identifier = Identifier;\n\tvar IfStatement = (function () {\n\t    function IfStatement(test, consequent, alternate) {\n\t        this.type = syntax_1.Syntax.IfStatement;\n\t        this.test = test;\n\t        this.consequent = consequent;\n\t        this.alternate = alternate;\n\t    }\n\t    return IfStatement;\n\t}());\n\texports.IfStatement = IfStatement;\n\tvar ImportDeclaration = (function () {\n\t    function ImportDeclaration(specifiers, source) {\n\t        this.type = syntax_1.Syntax.ImportDeclaration;\n\t        this.specifiers = specifiers;\n\t        this.source = source;\n\t    }\n\t    return ImportDeclaration;\n\t}());\n\texports.ImportDeclaration = ImportDeclaration;\n\tvar ImportDefaultSpecifier = (function () {\n\t    function ImportDefaultSpecifier(local) {\n\t        this.type = syntax_1.Syntax.ImportDefaultSpecifier;\n\t        this.local = local;\n\t    }\n\t    return ImportDefaultSpecifier;\n\t}());\n\texports.ImportDefaultSpecifier = ImportDefaultSpecifier;\n\tvar ImportNamespaceSpecifier = (function () {\n\t    function ImportNamespaceSpecifier(local) {\n\t        this.type = syntax_1.Syntax.ImportNamespaceSpecifier;\n\t        this.local = local;\n\t    }\n\t    return ImportNamespaceSpecifier;\n\t}());\n\texports.ImportNamespaceSpecifier = ImportNamespaceSpecifier;\n\tvar ImportSpecifier = (function () {\n\t    function ImportSpecifier(local, imported) {\n\t        this.type = syntax_1.Syntax.ImportSpecifier;\n\t        this.local = local;\n\t        this.imported = imported;\n\t    }\n\t    return ImportSpecifier;\n\t}());\n\texports.ImportSpecifier = ImportSpecifier;\n\tvar LabeledStatement = (function () {\n\t    function LabeledStatement(label, body) {\n\t        this.type = syntax_1.Syntax.LabeledStatement;\n\t        this.label = label;\n\t        this.body = body;\n\t    }\n\t    return LabeledStatement;\n\t}());\n\texports.LabeledStatement = LabeledStatement;\n\tvar Literal = (function () {\n\t    function Literal(value, raw) {\n\t        this.type = syntax_1.Syntax.Literal;\n\t        this.value = value;\n\t        this.raw = raw;\n\t    }\n\t    return Literal;\n\t}());\n\texports.Literal = Literal;\n\tvar MetaProperty = (function () {\n\t    function MetaProperty(meta, property) {\n\t        this.type = syntax_1.Syntax.MetaProperty;\n\t        this.meta = meta;\n\t        this.property = property;\n\t    }\n\t    return MetaProperty;\n\t}());\n\texports.MetaProperty = MetaProperty;\n\tvar MethodDefinition = (function () {\n\t    function MethodDefinition(key, computed, value, kind, isStatic) {\n\t        this.type = syntax_1.Syntax.MethodDefinition;\n\t        this.key = key;\n\t        this.computed = computed;\n\t        this.value = value;\n\t        this.kind = kind;\n\t        this.static = isStatic;\n\t    }\n\t    return MethodDefinition;\n\t}());\n\texports.MethodDefinition = MethodDefinition;\n\tvar NewExpression = (function () {\n\t    function NewExpression(callee, args) {\n\t        this.type = syntax_1.Syntax.NewExpression;\n\t        this.callee = callee;\n\t        this.arguments = args;\n\t    }\n\t    return NewExpression;\n\t}());\n\texports.NewExpression = NewExpression;\n\tvar ObjectExpression = (function () {\n\t    function ObjectExpression(properties) {\n\t        this.type = syntax_1.Syntax.ObjectExpression;\n\t        this.properties = properties;\n\t    }\n\t    return ObjectExpression;\n\t}());\n\texports.ObjectExpression = ObjectExpression;\n\tvar ObjectPattern = (function () {\n\t    function ObjectPattern(properties) {\n\t        this.type = syntax_1.Syntax.ObjectPattern;\n\t        this.properties = properties;\n\t    }\n\t    return ObjectPattern;\n\t}());\n\texports.ObjectPattern = ObjectPattern;\n\tvar Program = (function () {\n\t    function Program(body, sourceType) {\n\t        this.type = syntax_1.Syntax.Program;\n\t        this.body = body;\n\t        this.sourceType = sourceType;\n\t    }\n\t    return Program;\n\t}());\n\texports.Program = Program;\n\tvar Property = (function () {\n\t    function Property(kind, key, computed, value, method, shorthand) {\n\t        this.type = syntax_1.Syntax.Property;\n\t        this.key = key;\n\t        this.computed = computed;\n\t        this.value = value;\n\t        this.kind = kind;\n\t        this.method = method;\n\t        this.shorthand = shorthand;\n\t    }\n\t    return Property;\n\t}());\n\texports.Property = Property;\n\tvar RegexLiteral = (function () {\n\t    function RegexLiteral(value, raw, regex) {\n\t        this.type = syntax_1.Syntax.Literal;\n\t        this.value = value;\n\t        this.raw = raw;\n\t        this.regex = regex;\n\t    }\n\t    return RegexLiteral;\n\t}());\n\texports.RegexLiteral = RegexLiteral;\n\tvar RestElement = (function () {\n\t    function RestElement(argument) {\n\t        this.type = syntax_1.Syntax.RestElement;\n\t        this.argument = argument;\n\t    }\n\t    return RestElement;\n\t}());\n\texports.RestElement = RestElement;\n\tvar ReturnStatement = (function () {\n\t    function ReturnStatement(argument) {\n\t        this.type = syntax_1.Syntax.ReturnStatement;\n\t        this.argument = argument;\n\t    }\n\t    return ReturnStatement;\n\t}());\n\texports.ReturnStatement = ReturnStatement;\n\tvar SequenceExpression = (function () {\n\t    function SequenceExpression(expressions) {\n\t        this.type = syntax_1.Syntax.SequenceExpression;\n\t        this.expressions = expressions;\n\t    }\n\t    return SequenceExpression;\n\t}());\n\texports.SequenceExpression = SequenceExpression;\n\tvar SpreadElement = (function () {\n\t    function SpreadElement(argument) {\n\t        this.type = syntax_1.Syntax.SpreadElement;\n\t        this.argument = argument;\n\t    }\n\t    return SpreadElement;\n\t}());\n\texports.SpreadElement = SpreadElement;\n\tvar StaticMemberExpression = (function () {\n\t    function StaticMemberExpression(object, property) {\n\t        this.type = syntax_1.Syntax.MemberExpression;\n\t        this.computed = false;\n\t        this.object = object;\n\t        this.property = property;\n\t    }\n\t    return StaticMemberExpression;\n\t}());\n\texports.StaticMemberExpression = StaticMemberExpression;\n\tvar Super = (function () {\n\t    function Super() {\n\t        this.type = syntax_1.Syntax.Super;\n\t    }\n\t    return Super;\n\t}());\n\texports.Super = Super;\n\tvar SwitchCase = (function () {\n\t    function SwitchCase(test, consequent) {\n\t        this.type = syntax_1.Syntax.SwitchCase;\n\t        this.test = test;\n\t        this.consequent = consequent;\n\t    }\n\t    return SwitchCase;\n\t}());\n\texports.SwitchCase = SwitchCase;\n\tvar SwitchStatement = (function () {\n\t    function SwitchStatement(discriminant, cases) {\n\t        this.type = syntax_1.Syntax.SwitchStatement;\n\t        this.discriminant = discriminant;\n\t        this.cases = cases;\n\t    }\n\t    return SwitchStatement;\n\t}());\n\texports.SwitchStatement = SwitchStatement;\n\tvar TaggedTemplateExpression = (function () {\n\t    function TaggedTemplateExpression(tag, quasi) {\n\t        this.type = syntax_1.Syntax.TaggedTemplateExpression;\n\t        this.tag = tag;\n\t        this.quasi = quasi;\n\t    }\n\t    return TaggedTemplateExpression;\n\t}());\n\texports.TaggedTemplateExpression = TaggedTemplateExpression;\n\tvar TemplateElement = (function () {\n\t    function TemplateElement(value, tail) {\n\t        this.type = syntax_1.Syntax.TemplateElement;\n\t        this.value = value;\n\t        this.tail = tail;\n\t    }\n\t    return TemplateElement;\n\t}());\n\texports.TemplateElement = TemplateElement;\n\tvar TemplateLiteral = (function () {\n\t    function TemplateLiteral(quasis, expressions) {\n\t        this.type = syntax_1.Syntax.TemplateLiteral;\n\t        this.quasis = quasis;\n\t        this.expressions = expressions;\n\t    }\n\t    return TemplateLiteral;\n\t}());\n\texports.TemplateLiteral = TemplateLiteral;\n\tvar ThisExpression = (function () {\n\t    function ThisExpression() {\n\t        this.type = syntax_1.Syntax.ThisExpression;\n\t    }\n\t    return ThisExpression;\n\t}());\n\texports.ThisExpression = ThisExpression;\n\tvar ThrowStatement = (function () {\n\t    function ThrowStatement(argument) {\n\t        this.type = syntax_1.Syntax.ThrowStatement;\n\t        this.argument = argument;\n\t    }\n\t    return ThrowStatement;\n\t}());\n\texports.ThrowStatement = ThrowStatement;\n\tvar TryStatement = (function () {\n\t    function TryStatement(block, handler, finalizer) {\n\t        this.type = syntax_1.Syntax.TryStatement;\n\t        this.block = block;\n\t        this.handler = handler;\n\t        this.finalizer = finalizer;\n\t    }\n\t    return TryStatement;\n\t}());\n\texports.TryStatement = TryStatement;\n\tvar UnaryExpression = (function () {\n\t    function UnaryExpression(operator, argument) {\n\t        this.type = syntax_1.Syntax.UnaryExpression;\n\t        this.operator = operator;\n\t        this.argument = argument;\n\t        this.prefix = true;\n\t    }\n\t    return UnaryExpression;\n\t}());\n\texports.UnaryExpression = UnaryExpression;\n\tvar UpdateExpression = (function () {\n\t    function UpdateExpression(operator, argument, prefix) {\n\t        this.type = syntax_1.Syntax.UpdateExpression;\n\t        this.operator = operator;\n\t        this.argument = argument;\n\t        this.prefix = prefix;\n\t    }\n\t    return UpdateExpression;\n\t}());\n\texports.UpdateExpression = UpdateExpression;\n\tvar VariableDeclaration = (function () {\n\t    function VariableDeclaration(declarations, kind) {\n\t        this.type = syntax_1.Syntax.VariableDeclaration;\n\t        this.declarations = declarations;\n\t        this.kind = kind;\n\t    }\n\t    return VariableDeclaration;\n\t}());\n\texports.VariableDeclaration = VariableDeclaration;\n\tvar VariableDeclarator = (function () {\n\t    function VariableDeclarator(id, init) {\n\t        this.type = syntax_1.Syntax.VariableDeclarator;\n\t        this.id = id;\n\t        this.init = init;\n\t    }\n\t    return VariableDeclarator;\n\t}());\n\texports.VariableDeclarator = VariableDeclarator;\n\tvar WhileStatement = (function () {\n\t    function WhileStatement(test, body) {\n\t        this.type = syntax_1.Syntax.WhileStatement;\n\t        this.test = test;\n\t        this.body = body;\n\t    }\n\t    return WhileStatement;\n\t}());\n\texports.WhileStatement = WhileStatement;\n\tvar WithStatement = (function () {\n\t    function WithStatement(object, body) {\n\t        this.type = syntax_1.Syntax.WithStatement;\n\t        this.object = object;\n\t        this.body = body;\n\t    }\n\t    return WithStatement;\n\t}());\n\texports.WithStatement = WithStatement;\n\tvar YieldExpression = (function () {\n\t    function YieldExpression(argument, delegate) {\n\t        this.type = syntax_1.Syntax.YieldExpression;\n\t        this.argument = argument;\n\t        this.delegate = delegate;\n\t    }\n\t    return YieldExpression;\n\t}());\n\texports.YieldExpression = YieldExpression;\n\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n/* istanbul ignore next */\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar character_1 = __webpack_require__(9);\n\tvar token_1 = __webpack_require__(7);\n\tvar parser_1 = __webpack_require__(3);\n\tvar xhtml_entities_1 = __webpack_require__(12);\n\tvar jsx_syntax_1 = __webpack_require__(13);\n\tvar Node = __webpack_require__(10);\n\tvar JSXNode = __webpack_require__(14);\n\tvar JSXToken;\n\t(function (JSXToken) {\n\t    JSXToken[JSXToken[\"Identifier\"] = 100] = \"Identifier\";\n\t    JSXToken[JSXToken[\"Text\"] = 101] = \"Text\";\n\t})(JSXToken || (JSXToken = {}));\n\ttoken_1.TokenName[JSXToken.Identifier] = 'JSXIdentifier';\n\ttoken_1.TokenName[JSXToken.Text] = 'JSXText';\n\t// Fully qualified element name, e.g. <svg:path> returns \"svg:path\"\n\tfunction getQualifiedElementName(elementName) {\n\t    var qualifiedName;\n\t    switch (elementName.type) {\n\t        case jsx_syntax_1.JSXSyntax.JSXIdentifier:\n\t            var id = (elementName);\n\t            qualifiedName = id.name;\n\t            break;\n\t        case jsx_syntax_1.JSXSyntax.JSXNamespacedName:\n\t            var ns = (elementName);\n\t            qualifiedName = getQualifiedElementName(ns.namespace) + ':' +\n\t                getQualifiedElementName(ns.name);\n\t            break;\n\t        case jsx_syntax_1.JSXSyntax.JSXMemberExpression:\n\t            var expr = (elementName);\n\t            qualifiedName = getQualifiedElementName(expr.object) + '.' +\n\t                getQualifiedElementName(expr.property);\n\t            break;\n\t    }\n\t    return qualifiedName;\n\t}\n\tvar JSXParser = (function (_super) {\n\t    __extends(JSXParser, _super);\n\t    function JSXParser(code, options, delegate) {\n\t        _super.call(this, code, options, delegate);\n\t    }\n\t    JSXParser.prototype.parsePrimaryExpression = function () {\n\t        return this.match('<') ? this.parseJSXRoot() : _super.prototype.parsePrimaryExpression.call(this);\n\t    };\n\t    JSXParser.prototype.startJSX = function () {\n\t        // Unwind the scanner before the lookahead token.\n\t        this.scanner.index = this.startMarker.index;\n\t        this.scanner.lineNumber = this.startMarker.lineNumber;\n\t        this.scanner.lineStart = this.startMarker.lineStart;\n\t    };\n\t    JSXParser.prototype.finishJSX = function () {\n\t        // Prime the next lookahead.\n\t        this.nextToken();\n\t    };\n\t    JSXParser.prototype.reenterJSX = function () {\n\t        this.startJSX();\n\t        this.expectJSX('}');\n\t        // Pop the closing '}' added from the lookahead.\n\t        if (this.config.tokens) {\n\t            this.tokens.pop();\n\t        }\n\t    };\n\t    JSXParser.prototype.createJSXNode = function () {\n\t        this.collectComments();\n\t        return {\n\t            index: this.scanner.index,\n\t            line: this.scanner.lineNumber,\n\t            column: this.scanner.index - this.scanner.lineStart\n\t        };\n\t    };\n\t    JSXParser.prototype.createJSXChildNode = function () {\n\t        return {\n\t            index: this.scanner.index,\n\t            line: this.scanner.lineNumber,\n\t            column: this.scanner.index - this.scanner.lineStart\n\t        };\n\t    };\n\t    JSXParser.prototype.scanXHTMLEntity = function (quote) {\n\t        var result = '&';\n\t        var valid = true;\n\t        var terminated = false;\n\t        var numeric = false;\n\t        var hex = false;\n\t        while (!this.scanner.eof() && valid && !terminated) {\n\t            var ch = this.scanner.source[this.scanner.index];\n\t            if (ch === quote) {\n\t                break;\n\t            }\n\t            terminated = (ch === ';');\n\t            result += ch;\n\t            ++this.scanner.index;\n\t            if (!terminated) {\n\t                switch (result.length) {\n\t                    case 2:\n\t                        // e.g. '&#123;'\n\t                        numeric = (ch === '#');\n\t                        break;\n\t                    case 3:\n\t                        if (numeric) {\n\t                            // e.g. '&#x41;'\n\t                            hex = (ch === 'x');\n\t                            valid = hex || character_1.Character.isDecimalDigit(ch.charCodeAt(0));\n\t                            numeric = numeric && !hex;\n\t                        }\n\t                        break;\n\t                    default:\n\t                        valid = valid && !(numeric && !character_1.Character.isDecimalDigit(ch.charCodeAt(0)));\n\t                        valid = valid && !(hex && !character_1.Character.isHexDigit(ch.charCodeAt(0)));\n\t                        break;\n\t                }\n\t            }\n\t        }\n\t        if (valid && terminated && result.length > 2) {\n\t            // e.g. '&#x41;' becomes just '#x41'\n\t            var str = result.substr(1, result.length - 2);\n\t            if (numeric && str.length > 1) {\n\t                result = String.fromCharCode(parseInt(str.substr(1), 10));\n\t            }\n\t            else if (hex && str.length > 2) {\n\t                result = String.fromCharCode(parseInt('0' + str.substr(1), 16));\n\t            }\n\t            else if (!numeric && !hex && xhtml_entities_1.XHTMLEntities[str]) {\n\t                result = xhtml_entities_1.XHTMLEntities[str];\n\t            }\n\t        }\n\t        return result;\n\t    };\n\t    // Scan the next JSX token. This replaces Scanner#lex when in JSX mode.\n\t    JSXParser.prototype.lexJSX = function () {\n\t        var cp = this.scanner.source.charCodeAt(this.scanner.index);\n\t        // < > / : = { }\n\t        if (cp === 60 || cp === 62 || cp === 47 || cp === 58 || cp === 61 || cp === 123 || cp === 125) {\n\t            var value = this.scanner.source[this.scanner.index++];\n\t            return {\n\t                type: token_1.Token.Punctuator,\n\t                value: value,\n\t                lineNumber: this.scanner.lineNumber,\n\t                lineStart: this.scanner.lineStart,\n\t                start: this.scanner.index - 1,\n\t                end: this.scanner.index\n\t            };\n\t        }\n\t        // \" '\n\t        if (cp === 34 || cp === 39) {\n\t            var start = this.scanner.index;\n\t            var quote = this.scanner.source[this.scanner.index++];\n\t            var str = '';\n\t            while (!this.scanner.eof()) {\n\t                var ch = this.scanner.source[this.scanner.index++];\n\t                if (ch === quote) {\n\t                    break;\n\t                }\n\t                else if (ch === '&') {\n\t                    str += this.scanXHTMLEntity(quote);\n\t                }\n\t                else {\n\t                    str += ch;\n\t                }\n\t            }\n\t            return {\n\t                type: token_1.Token.StringLiteral,\n\t                value: str,\n\t                lineNumber: this.scanner.lineNumber,\n\t                lineStart: this.scanner.lineStart,\n\t                start: start,\n\t                end: this.scanner.index\n\t            };\n\t        }\n\t        // ... or .\n\t        if (cp === 46) {\n\t            var n1 = this.scanner.source.charCodeAt(this.scanner.index + 1);\n\t            var n2 = this.scanner.source.charCodeAt(this.scanner.index + 2);\n\t            var value = (n1 === 46 && n2 === 46) ? '...' : '.';\n\t            var start = this.scanner.index;\n\t            this.scanner.index += value.length;\n\t            return {\n\t                type: token_1.Token.Punctuator,\n\t                value: value,\n\t                lineNumber: this.scanner.lineNumber,\n\t                lineStart: this.scanner.lineStart,\n\t                start: start,\n\t                end: this.scanner.index\n\t            };\n\t        }\n\t        // `\n\t        if (cp === 96) {\n\t            // Only placeholder, since it will be rescanned as a real assignment expression.\n\t            return {\n\t                type: token_1.Token.Template,\n\t                lineNumber: this.scanner.lineNumber,\n\t                lineStart: this.scanner.lineStart,\n\t                start: this.scanner.index,\n\t                end: this.scanner.index\n\t            };\n\t        }\n\t        // Identifer can not contain backslash (char code 92).\n\t        if (character_1.Character.isIdentifierStart(cp) && (cp !== 92)) {\n\t            var start = this.scanner.index;\n\t            ++this.scanner.index;\n\t            while (!this.scanner.eof()) {\n\t                var ch = this.scanner.source.charCodeAt(this.scanner.index);\n\t                if (character_1.Character.isIdentifierPart(ch) && (ch !== 92)) {\n\t                    ++this.scanner.index;\n\t                }\n\t                else if (ch === 45) {\n\t                    // Hyphen (char code 45) can be part of an identifier.\n\t                    ++this.scanner.index;\n\t                }\n\t                else {\n\t                    break;\n\t                }\n\t            }\n\t            var id = this.scanner.source.slice(start, this.scanner.index);\n\t            return {\n\t                type: JSXToken.Identifier,\n\t                value: id,\n\t                lineNumber: this.scanner.lineNumber,\n\t                lineStart: this.scanner.lineStart,\n\t                start: start,\n\t                end: this.scanner.index\n\t            };\n\t        }\n\t        this.scanner.throwUnexpectedToken();\n\t    };\n\t    JSXParser.prototype.nextJSXToken = function () {\n\t        this.collectComments();\n\t        this.startMarker.index = this.scanner.index;\n\t        this.startMarker.lineNumber = this.scanner.lineNumber;\n\t        this.startMarker.lineStart = this.scanner.lineStart;\n\t        var token = this.lexJSX();\n\t        this.lastMarker.index = this.scanner.index;\n\t        this.lastMarker.lineNumber = this.scanner.lineNumber;\n\t        this.lastMarker.lineStart = this.scanner.lineStart;\n\t        if (this.config.tokens) {\n\t            this.tokens.push(this.convertToken(token));\n\t        }\n\t        return token;\n\t    };\n\t    JSXParser.prototype.nextJSXText = function () {\n\t        this.startMarker.index = this.scanner.index;\n\t        this.startMarker.lineNumber = this.scanner.lineNumber;\n\t        this.startMarker.lineStart = this.scanner.lineStart;\n\t        var start = this.scanner.index;\n\t        var text = '';\n\t        while (!this.scanner.eof()) {\n\t            var ch = this.scanner.source[this.scanner.index];\n\t            if (ch === '{' || ch === '<') {\n\t                break;\n\t            }\n\t            ++this.scanner.index;\n\t            text += ch;\n\t            if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n\t                ++this.scanner.lineNumber;\n\t                if (ch === '\\r' && this.scanner.source[this.scanner.index] === '\\n') {\n\t                    ++this.scanner.index;\n\t                }\n\t                this.scanner.lineStart = this.scanner.index;\n\t            }\n\t        }\n\t        this.lastMarker.index = this.scanner.index;\n\t        this.lastMarker.lineNumber = this.scanner.lineNumber;\n\t        this.lastMarker.lineStart = this.scanner.lineStart;\n\t        var token = {\n\t            type: JSXToken.Text,\n\t            value: text,\n\t            lineNumber: this.scanner.lineNumber,\n\t            lineStart: this.scanner.lineStart,\n\t            start: start,\n\t            end: this.scanner.index\n\t        };\n\t        if ((text.length > 0) && this.config.tokens) {\n\t            this.tokens.push(this.convertToken(token));\n\t        }\n\t        return token;\n\t    };\n\t    JSXParser.prototype.peekJSXToken = function () {\n\t        var previousIndex = this.scanner.index;\n\t        var previousLineNumber = this.scanner.lineNumber;\n\t        var previousLineStart = this.scanner.lineStart;\n\t        this.scanner.scanComments();\n\t        var next = this.lexJSX();\n\t        this.scanner.index = previousIndex;\n\t        this.scanner.lineNumber = previousLineNumber;\n\t        this.scanner.lineStart = previousLineStart;\n\t        return next;\n\t    };\n\t    // Expect the next JSX token to match the specified punctuator.\n\t    // If not, an exception will be thrown.\n\t    JSXParser.prototype.expectJSX = function (value) {\n\t        var token = this.nextJSXToken();\n\t        if (token.type !== token_1.Token.Punctuator || token.value !== value) {\n\t            this.throwUnexpectedToken(token);\n\t        }\n\t    };\n\t    // Return true if the next JSX token matches the specified punctuator.\n\t    JSXParser.prototype.matchJSX = function (value) {\n\t        var next = this.peekJSXToken();\n\t        return next.type === token_1.Token.Punctuator && next.value === value;\n\t    };\n\t    JSXParser.prototype.parseJSXIdentifier = function () {\n\t        var node = this.createJSXNode();\n\t        var token = this.nextJSXToken();\n\t        if (token.type !== JSXToken.Identifier) {\n\t            this.throwUnexpectedToken(token);\n\t        }\n\t        return this.finalize(node, new JSXNode.JSXIdentifier(token.value));\n\t    };\n\t    JSXParser.prototype.parseJSXElementName = function () {\n\t        var node = this.createJSXNode();\n\t        var elementName = this.parseJSXIdentifier();\n\t        if (this.matchJSX(':')) {\n\t            var namespace = elementName;\n\t            this.expectJSX(':');\n\t            var name_1 = this.parseJSXIdentifier();\n\t            elementName = this.finalize(node, new JSXNode.JSXNamespacedName(namespace, name_1));\n\t        }\n\t        else if (this.matchJSX('.')) {\n\t            while (this.matchJSX('.')) {\n\t                var object = elementName;\n\t                this.expectJSX('.');\n\t                var property = this.parseJSXIdentifier();\n\t                elementName = this.finalize(node, new JSXNode.JSXMemberExpression(object, property));\n\t            }\n\t        }\n\t        return elementName;\n\t    };\n\t    JSXParser.prototype.parseJSXAttributeName = function () {\n\t        var node = this.createJSXNode();\n\t        var attributeName;\n\t        var identifier = this.parseJSXIdentifier();\n\t        if (this.matchJSX(':')) {\n\t            var namespace = identifier;\n\t            this.expectJSX(':');\n\t            var name_2 = this.parseJSXIdentifier();\n\t            attributeName = this.finalize(node, new JSXNode.JSXNamespacedName(namespace, name_2));\n\t        }\n\t        else {\n\t            attributeName = identifier;\n\t        }\n\t        return attributeName;\n\t    };\n\t    JSXParser.prototype.parseJSXStringLiteralAttribute = function () {\n\t        var node = this.createJSXNode();\n\t        var token = this.nextJSXToken();\n\t        if (token.type !== token_1.Token.StringLiteral) {\n\t            this.throwUnexpectedToken(token);\n\t        }\n\t        var raw = this.getTokenRaw(token);\n\t        return this.finalize(node, new Node.Literal(token.value, raw));\n\t    };\n\t    JSXParser.prototype.parseJSXExpressionAttribute = function () {\n\t        var node = this.createJSXNode();\n\t        this.expectJSX('{');\n\t        this.finishJSX();\n\t        if (this.match('}')) {\n\t            this.tolerateError('JSX attributes must only be assigned a non-empty expression');\n\t        }\n\t        var expression = this.parseAssignmentExpression();\n\t        this.reenterJSX();\n\t        return this.finalize(node, new JSXNode.JSXExpressionContainer(expression));\n\t    };\n\t    JSXParser.prototype.parseJSXAttributeValue = function () {\n\t        return this.matchJSX('{') ? this.parseJSXExpressionAttribute() :\n\t            this.matchJSX('<') ? this.parseJSXElement() : this.parseJSXStringLiteralAttribute();\n\t    };\n\t    JSXParser.prototype.parseJSXNameValueAttribute = function () {\n\t        var node = this.createJSXNode();\n\t        var name = this.parseJSXAttributeName();\n\t        var value = null;\n\t        if (this.matchJSX('=')) {\n\t            this.expectJSX('=');\n\t            value = this.parseJSXAttributeValue();\n\t        }\n\t        return this.finalize(node, new JSXNode.JSXAttribute(name, value));\n\t    };\n\t    JSXParser.prototype.parseJSXSpreadAttribute = function () {\n\t        var node = this.createJSXNode();\n\t        this.expectJSX('{');\n\t        this.expectJSX('...');\n\t        this.finishJSX();\n\t        var argument = this.parseAssignmentExpression();\n\t        this.reenterJSX();\n\t        return this.finalize(node, new JSXNode.JSXSpreadAttribute(argument));\n\t    };\n\t    JSXParser.prototype.parseJSXAttributes = function () {\n\t        var attributes = [];\n\t        while (!this.matchJSX('/') && !this.matchJSX('>')) {\n\t            var attribute = this.matchJSX('{') ? this.parseJSXSpreadAttribute() :\n\t                this.parseJSXNameValueAttribute();\n\t            attributes.push(attribute);\n\t        }\n\t        return attributes;\n\t    };\n\t    JSXParser.prototype.parseJSXOpeningElement = function () {\n\t        var node = this.createJSXNode();\n\t        this.expectJSX('<');\n\t        var name = this.parseJSXElementName();\n\t        var attributes = this.parseJSXAttributes();\n\t        var selfClosing = this.matchJSX('/');\n\t        if (selfClosing) {\n\t            this.expectJSX('/');\n\t        }\n\t        this.expectJSX('>');\n\t        return this.finalize(node, new JSXNode.JSXOpeningElement(name, selfClosing, attributes));\n\t    };\n\t    JSXParser.prototype.parseJSXBoundaryElement = function () {\n\t        var node = this.createJSXNode();\n\t        this.expectJSX('<');\n\t        if (this.matchJSX('/')) {\n\t            this.expectJSX('/');\n\t            var name_3 = this.parseJSXElementName();\n\t            this.expectJSX('>');\n\t            return this.finalize(node, new JSXNode.JSXClosingElement(name_3));\n\t        }\n\t        var name = this.parseJSXElementName();\n\t        var attributes = this.parseJSXAttributes();\n\t        var selfClosing = this.matchJSX('/');\n\t        if (selfClosing) {\n\t            this.expectJSX('/');\n\t        }\n\t        this.expectJSX('>');\n\t        return this.finalize(node, new JSXNode.JSXOpeningElement(name, selfClosing, attributes));\n\t    };\n\t    JSXParser.prototype.parseJSXEmptyExpression = function () {\n\t        var node = this.createJSXChildNode();\n\t        this.collectComments();\n\t        this.lastMarker.index = this.scanner.index;\n\t        this.lastMarker.lineNumber = this.scanner.lineNumber;\n\t        this.lastMarker.lineStart = this.scanner.lineStart;\n\t        return this.finalize(node, new JSXNode.JSXEmptyExpression());\n\t    };\n\t    JSXParser.prototype.parseJSXExpressionContainer = function () {\n\t        var node = this.createJSXNode();\n\t        this.expectJSX('{');\n\t        var expression;\n\t        if (this.matchJSX('}')) {\n\t            expression = this.parseJSXEmptyExpression();\n\t            this.expectJSX('}');\n\t        }\n\t        else {\n\t            this.finishJSX();\n\t            expression = this.parseAssignmentExpression();\n\t            this.reenterJSX();\n\t        }\n\t        return this.finalize(node, new JSXNode.JSXExpressionContainer(expression));\n\t    };\n\t    JSXParser.prototype.parseJSXChildren = function () {\n\t        var children = [];\n\t        while (!this.scanner.eof()) {\n\t            var node = this.createJSXChildNode();\n\t            var token = this.nextJSXText();\n\t            if (token.start < token.end) {\n\t                var raw = this.getTokenRaw(token);\n\t                var child = this.finalize(node, new JSXNode.JSXText(token.value, raw));\n\t                children.push(child);\n\t            }\n\t            if (this.scanner.source[this.scanner.index] === '{') {\n\t                var container = this.parseJSXExpressionContainer();\n\t                children.push(container);\n\t            }\n\t            else {\n\t                break;\n\t            }\n\t        }\n\t        return children;\n\t    };\n\t    JSXParser.prototype.parseComplexJSXElement = function (el) {\n\t        var stack = [];\n\t        while (!this.scanner.eof()) {\n\t            el.children = el.children.concat(this.parseJSXChildren());\n\t            var node = this.createJSXChildNode();\n\t            var element = this.parseJSXBoundaryElement();\n\t            if (element.type === jsx_syntax_1.JSXSyntax.JSXOpeningElement) {\n\t                var opening = (element);\n\t                if (opening.selfClosing) {\n\t                    var child = this.finalize(node, new JSXNode.JSXElement(opening, [], null));\n\t                    el.children.push(child);\n\t                }\n\t                else {\n\t                    stack.push(el);\n\t                    el = { node: node, opening: opening, closing: null, children: [] };\n\t                }\n\t            }\n\t            if (element.type === jsx_syntax_1.JSXSyntax.JSXClosingElement) {\n\t                el.closing = (element);\n\t                var open_1 = getQualifiedElementName(el.opening.name);\n\t                var close_1 = getQualifiedElementName(el.closing.name);\n\t                if (open_1 !== close_1) {\n\t                    this.tolerateError('Expected corresponding JSX closing tag for %0', open_1);\n\t                }\n\t                if (stack.length > 0) {\n\t                    var child = this.finalize(el.node, new JSXNode.JSXElement(el.opening, el.children, el.closing));\n\t                    el = stack.pop();\n\t                    el.children.push(child);\n\t                }\n\t                else {\n\t                    break;\n\t                }\n\t            }\n\t        }\n\t        return el;\n\t    };\n\t    JSXParser.prototype.parseJSXElement = function () {\n\t        var node = this.createJSXNode();\n\t        var opening = this.parseJSXOpeningElement();\n\t        var children = [];\n\t        var closing = null;\n\t        if (!opening.selfClosing) {\n\t            var el = this.parseComplexJSXElement({ node: node, opening: opening, closing: closing, children: children });\n\t            children = el.children;\n\t            closing = el.closing;\n\t        }\n\t        return this.finalize(node, new JSXNode.JSXElement(opening, children, closing));\n\t    };\n\t    JSXParser.prototype.parseJSXRoot = function () {\n\t        // Pop the opening '<' added from the lookahead.\n\t        if (this.config.tokens) {\n\t            this.tokens.pop();\n\t        }\n\t        this.startJSX();\n\t        var element = this.parseJSXElement();\n\t        this.finishJSX();\n\t        return element;\n\t    };\n\t    return JSXParser;\n\t}(parser_1.Parser));\n\texports.JSXParser = JSXParser;\n\n\n/***/ },\n/* 12 */\n/***/ function(module, exports) {\n\n\t// Generated by generate-xhtml-entities.js. DO NOT MODIFY!\n\t\"use strict\";\n\texports.XHTMLEntities = {\n\t    quot: '\\u0022',\n\t    amp: '\\u0026',\n\t    apos: '\\u0027',\n\t    gt: '\\u003E',\n\t    nbsp: '\\u00A0',\n\t    iexcl: '\\u00A1',\n\t    cent: '\\u00A2',\n\t    pound: '\\u00A3',\n\t    curren: '\\u00A4',\n\t    yen: '\\u00A5',\n\t    brvbar: '\\u00A6',\n\t    sect: '\\u00A7',\n\t    uml: '\\u00A8',\n\t    copy: '\\u00A9',\n\t    ordf: '\\u00AA',\n\t    laquo: '\\u00AB',\n\t    not: '\\u00AC',\n\t    shy: '\\u00AD',\n\t    reg: '\\u00AE',\n\t    macr: '\\u00AF',\n\t    deg: '\\u00B0',\n\t    plusmn: '\\u00B1',\n\t    sup2: '\\u00B2',\n\t    sup3: '\\u00B3',\n\t    acute: '\\u00B4',\n\t    micro: '\\u00B5',\n\t    para: '\\u00B6',\n\t    middot: '\\u00B7',\n\t    cedil: '\\u00B8',\n\t    sup1: '\\u00B9',\n\t    ordm: '\\u00BA',\n\t    raquo: '\\u00BB',\n\t    frac14: '\\u00BC',\n\t    frac12: '\\u00BD',\n\t    frac34: '\\u00BE',\n\t    iquest: '\\u00BF',\n\t    Agrave: '\\u00C0',\n\t    Aacute: '\\u00C1',\n\t    Acirc: '\\u00C2',\n\t    Atilde: '\\u00C3',\n\t    Auml: '\\u00C4',\n\t    Aring: '\\u00C5',\n\t    AElig: '\\u00C6',\n\t    Ccedil: '\\u00C7',\n\t    Egrave: '\\u00C8',\n\t    Eacute: '\\u00C9',\n\t    Ecirc: '\\u00CA',\n\t    Euml: '\\u00CB',\n\t    Igrave: '\\u00CC',\n\t    Iacute: '\\u00CD',\n\t    Icirc: '\\u00CE',\n\t    Iuml: '\\u00CF',\n\t    ETH: '\\u00D0',\n\t    Ntilde: '\\u00D1',\n\t    Ograve: '\\u00D2',\n\t    Oacute: '\\u00D3',\n\t    Ocirc: '\\u00D4',\n\t    Otilde: '\\u00D5',\n\t    Ouml: '\\u00D6',\n\t    times: '\\u00D7',\n\t    Oslash: '\\u00D8',\n\t    Ugrave: '\\u00D9',\n\t    Uacute: '\\u00DA',\n\t    Ucirc: '\\u00DB',\n\t    Uuml: '\\u00DC',\n\t    Yacute: '\\u00DD',\n\t    THORN: '\\u00DE',\n\t    szlig: '\\u00DF',\n\t    agrave: '\\u00E0',\n\t    aacute: '\\u00E1',\n\t    acirc: '\\u00E2',\n\t    atilde: '\\u00E3',\n\t    auml: '\\u00E4',\n\t    aring: '\\u00E5',\n\t    aelig: '\\u00E6',\n\t    ccedil: '\\u00E7',\n\t    egrave: '\\u00E8',\n\t    eacute: '\\u00E9',\n\t    ecirc: '\\u00EA',\n\t    euml: '\\u00EB',\n\t    igrave: '\\u00EC',\n\t    iacute: '\\u00ED',\n\t    icirc: '\\u00EE',\n\t    iuml: '\\u00EF',\n\t    eth: '\\u00F0',\n\t    ntilde: '\\u00F1',\n\t    ograve: '\\u00F2',\n\t    oacute: '\\u00F3',\n\t    ocirc: '\\u00F4',\n\t    otilde: '\\u00F5',\n\t    ouml: '\\u00F6',\n\t    divide: '\\u00F7',\n\t    oslash: '\\u00F8',\n\t    ugrave: '\\u00F9',\n\t    uacute: '\\u00FA',\n\t    ucirc: '\\u00FB',\n\t    uuml: '\\u00FC',\n\t    yacute: '\\u00FD',\n\t    thorn: '\\u00FE',\n\t    yuml: '\\u00FF',\n\t    OElig: '\\u0152',\n\t    oelig: '\\u0153',\n\t    Scaron: '\\u0160',\n\t    scaron: '\\u0161',\n\t    Yuml: '\\u0178',\n\t    fnof: '\\u0192',\n\t    circ: '\\u02C6',\n\t    tilde: '\\u02DC',\n\t    Alpha: '\\u0391',\n\t    Beta: '\\u0392',\n\t    Gamma: '\\u0393',\n\t    Delta: '\\u0394',\n\t    Epsilon: '\\u0395',\n\t    Zeta: '\\u0396',\n\t    Eta: '\\u0397',\n\t    Theta: '\\u0398',\n\t    Iota: '\\u0399',\n\t    Kappa: '\\u039A',\n\t    Lambda: '\\u039B',\n\t    Mu: '\\u039C',\n\t    Nu: '\\u039D',\n\t    Xi: '\\u039E',\n\t    Omicron: '\\u039F',\n\t    Pi: '\\u03A0',\n\t    Rho: '\\u03A1',\n\t    Sigma: '\\u03A3',\n\t    Tau: '\\u03A4',\n\t    Upsilon: '\\u03A5',\n\t    Phi: '\\u03A6',\n\t    Chi: '\\u03A7',\n\t    Psi: '\\u03A8',\n\t    Omega: '\\u03A9',\n\t    alpha: '\\u03B1',\n\t    beta: '\\u03B2',\n\t    gamma: '\\u03B3',\n\t    delta: '\\u03B4',\n\t    epsilon: '\\u03B5',\n\t    zeta: '\\u03B6',\n\t    eta: '\\u03B7',\n\t    theta: '\\u03B8',\n\t    iota: '\\u03B9',\n\t    kappa: '\\u03BA',\n\t    lambda: '\\u03BB',\n\t    mu: '\\u03BC',\n\t    nu: '\\u03BD',\n\t    xi: '\\u03BE',\n\t    omicron: '\\u03BF',\n\t    pi: '\\u03C0',\n\t    rho: '\\u03C1',\n\t    sigmaf: '\\u03C2',\n\t    sigma: '\\u03C3',\n\t    tau: '\\u03C4',\n\t    upsilon: '\\u03C5',\n\t    phi: '\\u03C6',\n\t    chi: '\\u03C7',\n\t    psi: '\\u03C8',\n\t    omega: '\\u03C9',\n\t    thetasym: '\\u03D1',\n\t    upsih: '\\u03D2',\n\t    piv: '\\u03D6',\n\t    ensp: '\\u2002',\n\t    emsp: '\\u2003',\n\t    thinsp: '\\u2009',\n\t    zwnj: '\\u200C',\n\t    zwj: '\\u200D',\n\t    lrm: '\\u200E',\n\t    rlm: '\\u200F',\n\t    ndash: '\\u2013',\n\t    mdash: '\\u2014',\n\t    lsquo: '\\u2018',\n\t    rsquo: '\\u2019',\n\t    sbquo: '\\u201A',\n\t    ldquo: '\\u201C',\n\t    rdquo: '\\u201D',\n\t    bdquo: '\\u201E',\n\t    dagger: '\\u2020',\n\t    Dagger: '\\u2021',\n\t    bull: '\\u2022',\n\t    hellip: '\\u2026',\n\t    permil: '\\u2030',\n\t    prime: '\\u2032',\n\t    Prime: '\\u2033',\n\t    lsaquo: '\\u2039',\n\t    rsaquo: '\\u203A',\n\t    oline: '\\u203E',\n\t    frasl: '\\u2044',\n\t    euro: '\\u20AC',\n\t    image: '\\u2111',\n\t    weierp: '\\u2118',\n\t    real: '\\u211C',\n\t    trade: '\\u2122',\n\t    alefsym: '\\u2135',\n\t    larr: '\\u2190',\n\t    uarr: '\\u2191',\n\t    rarr: '\\u2192',\n\t    darr: '\\u2193',\n\t    harr: '\\u2194',\n\t    crarr: '\\u21B5',\n\t    lArr: '\\u21D0',\n\t    uArr: '\\u21D1',\n\t    rArr: '\\u21D2',\n\t    dArr: '\\u21D3',\n\t    hArr: '\\u21D4',\n\t    forall: '\\u2200',\n\t    part: '\\u2202',\n\t    exist: '\\u2203',\n\t    empty: '\\u2205',\n\t    nabla: '\\u2207',\n\t    isin: '\\u2208',\n\t    notin: '\\u2209',\n\t    ni: '\\u220B',\n\t    prod: '\\u220F',\n\t    sum: '\\u2211',\n\t    minus: '\\u2212',\n\t    lowast: '\\u2217',\n\t    radic: '\\u221A',\n\t    prop: '\\u221D',\n\t    infin: '\\u221E',\n\t    ang: '\\u2220',\n\t    and: '\\u2227',\n\t    or: '\\u2228',\n\t    cap: '\\u2229',\n\t    cup: '\\u222A',\n\t    int: '\\u222B',\n\t    there4: '\\u2234',\n\t    sim: '\\u223C',\n\t    cong: '\\u2245',\n\t    asymp: '\\u2248',\n\t    ne: '\\u2260',\n\t    equiv: '\\u2261',\n\t    le: '\\u2264',\n\t    ge: '\\u2265',\n\t    sub: '\\u2282',\n\t    sup: '\\u2283',\n\t    nsub: '\\u2284',\n\t    sube: '\\u2286',\n\t    supe: '\\u2287',\n\t    oplus: '\\u2295',\n\t    otimes: '\\u2297',\n\t    perp: '\\u22A5',\n\t    sdot: '\\u22C5',\n\t    lceil: '\\u2308',\n\t    rceil: '\\u2309',\n\t    lfloor: '\\u230A',\n\t    rfloor: '\\u230B',\n\t    loz: '\\u25CA',\n\t    spades: '\\u2660',\n\t    clubs: '\\u2663',\n\t    hearts: '\\u2665',\n\t    diams: '\\u2666',\n\t    lang: '\\u27E8',\n\t    rang: '\\u27E9'\n\t};\n\n\n/***/ },\n/* 13 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\texports.JSXSyntax = {\n\t    JSXAttribute: 'JSXAttribute',\n\t    JSXClosingElement: 'JSXClosingElement',\n\t    JSXElement: 'JSXElement',\n\t    JSXEmptyExpression: 'JSXEmptyExpression',\n\t    JSXExpressionContainer: 'JSXExpressionContainer',\n\t    JSXIdentifier: 'JSXIdentifier',\n\t    JSXMemberExpression: 'JSXMemberExpression',\n\t    JSXNamespacedName: 'JSXNamespacedName',\n\t    JSXOpeningElement: 'JSXOpeningElement',\n\t    JSXSpreadAttribute: 'JSXSpreadAttribute',\n\t    JSXText: 'JSXText'\n\t};\n\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar jsx_syntax_1 = __webpack_require__(13);\n\tvar JSXClosingElement = (function () {\n\t    function JSXClosingElement(name) {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXClosingElement;\n\t        this.name = name;\n\t    }\n\t    return JSXClosingElement;\n\t}());\n\texports.JSXClosingElement = JSXClosingElement;\n\tvar JSXElement = (function () {\n\t    function JSXElement(openingElement, children, closingElement) {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXElement;\n\t        this.openingElement = openingElement;\n\t        this.children = children;\n\t        this.closingElement = closingElement;\n\t    }\n\t    return JSXElement;\n\t}());\n\texports.JSXElement = JSXElement;\n\tvar JSXEmptyExpression = (function () {\n\t    function JSXEmptyExpression() {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXEmptyExpression;\n\t    }\n\t    return JSXEmptyExpression;\n\t}());\n\texports.JSXEmptyExpression = JSXEmptyExpression;\n\tvar JSXExpressionContainer = (function () {\n\t    function JSXExpressionContainer(expression) {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXExpressionContainer;\n\t        this.expression = expression;\n\t    }\n\t    return JSXExpressionContainer;\n\t}());\n\texports.JSXExpressionContainer = JSXExpressionContainer;\n\tvar JSXIdentifier = (function () {\n\t    function JSXIdentifier(name) {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXIdentifier;\n\t        this.name = name;\n\t    }\n\t    return JSXIdentifier;\n\t}());\n\texports.JSXIdentifier = JSXIdentifier;\n\tvar JSXMemberExpression = (function () {\n\t    function JSXMemberExpression(object, property) {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXMemberExpression;\n\t        this.object = object;\n\t        this.property = property;\n\t    }\n\t    return JSXMemberExpression;\n\t}());\n\texports.JSXMemberExpression = JSXMemberExpression;\n\tvar JSXAttribute = (function () {\n\t    function JSXAttribute(name, value) {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXAttribute;\n\t        this.name = name;\n\t        this.value = value;\n\t    }\n\t    return JSXAttribute;\n\t}());\n\texports.JSXAttribute = JSXAttribute;\n\tvar JSXNamespacedName = (function () {\n\t    function JSXNamespacedName(namespace, name) {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXNamespacedName;\n\t        this.namespace = namespace;\n\t        this.name = name;\n\t    }\n\t    return JSXNamespacedName;\n\t}());\n\texports.JSXNamespacedName = JSXNamespacedName;\n\tvar JSXOpeningElement = (function () {\n\t    function JSXOpeningElement(name, selfClosing, attributes) {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXOpeningElement;\n\t        this.name = name;\n\t        this.selfClosing = selfClosing;\n\t        this.attributes = attributes;\n\t    }\n\t    return JSXOpeningElement;\n\t}());\n\texports.JSXOpeningElement = JSXOpeningElement;\n\tvar JSXSpreadAttribute = (function () {\n\t    function JSXSpreadAttribute(argument) {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXSpreadAttribute;\n\t        this.argument = argument;\n\t    }\n\t    return JSXSpreadAttribute;\n\t}());\n\texports.JSXSpreadAttribute = JSXSpreadAttribute;\n\tvar JSXText = (function () {\n\t    function JSXText(value, raw) {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXText;\n\t        this.value = value;\n\t        this.raw = raw;\n\t    }\n\t    return JSXText;\n\t}());\n\texports.JSXText = JSXText;\n\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar scanner_1 = __webpack_require__(8);\n\tvar error_handler_1 = __webpack_require__(6);\n\tvar token_1 = __webpack_require__(7);\n\tvar Reader = (function () {\n\t    function Reader() {\n\t        this.values = [];\n\t        this.curly = this.paren = -1;\n\t    }\n\t    ;\n\t    // A function following one of those tokens is an expression.\n\t    Reader.prototype.beforeFunctionExpression = function (t) {\n\t        return ['(', '{', '[', 'in', 'typeof', 'instanceof', 'new',\n\t            'return', 'case', 'delete', 'throw', 'void',\n\t            // assignment operators\n\t            '=', '+=', '-=', '*=', '**=', '/=', '%=', '<<=', '>>=', '>>>=',\n\t            '&=', '|=', '^=', ',',\n\t            // binary/unary operators\n\t            '+', '-', '*', '**', '/', '%', '++', '--', '<<', '>>', '>>>', '&',\n\t            '|', '^', '!', '~', '&&', '||', '?', ':', '===', '==', '>=',\n\t            '<=', '<', '>', '!=', '!=='].indexOf(t) >= 0;\n\t    };\n\t    ;\n\t    // Determine if forward slash (/) is an operator or part of a regular expression\n\t    // https://github.com/mozilla/sweet.js/wiki/design\n\t    Reader.prototype.isRegexStart = function () {\n\t        var previous = this.values[this.values.length - 1];\n\t        var regex = (previous !== null);\n\t        switch (previous) {\n\t            case 'this':\n\t            case ']':\n\t                regex = false;\n\t                break;\n\t            case ')':\n\t                var check = this.values[this.paren - 1];\n\t                regex = (check === 'if' || check === 'while' || check === 'for' || check === 'with');\n\t                break;\n\t            case '}':\n\t                // Dividing a function by anything makes little sense,\n\t                // but we have to check for that.\n\t                regex = false;\n\t                if (this.values[this.curly - 3] === 'function') {\n\t                    // Anonymous function, e.g. function(){} /42\n\t                    var check_1 = this.values[this.curly - 4];\n\t                    regex = check_1 ? !this.beforeFunctionExpression(check_1) : false;\n\t                }\n\t                else if (this.values[this.curly - 4] === 'function') {\n\t                    // Named function, e.g. function f(){} /42/\n\t                    var check_2 = this.values[this.curly - 5];\n\t                    regex = check_2 ? !this.beforeFunctionExpression(check_2) : true;\n\t                }\n\t        }\n\t        return regex;\n\t    };\n\t    ;\n\t    Reader.prototype.push = function (token) {\n\t        if (token.type === token_1.Token.Punctuator || token.type === token_1.Token.Keyword) {\n\t            if (token.value === '{') {\n\t                this.curly = this.values.length;\n\t            }\n\t            else if (token.value === '(') {\n\t                this.paren = this.values.length;\n\t            }\n\t            this.values.push(token.value);\n\t        }\n\t        else {\n\t            this.values.push(null);\n\t        }\n\t    };\n\t    ;\n\t    return Reader;\n\t}());\n\tvar Tokenizer = (function () {\n\t    function Tokenizer(code, config) {\n\t        this.errorHandler = new error_handler_1.ErrorHandler();\n\t        this.errorHandler.tolerant = config ? (typeof config.tolerant === 'boolean' && config.tolerant) : false;\n\t        this.scanner = new scanner_1.Scanner(code, this.errorHandler);\n\t        this.scanner.trackComment = config ? (typeof config.comment === 'boolean' && config.comment) : false;\n\t        this.trackRange = config ? (typeof config.range === 'boolean' && config.range) : false;\n\t        this.trackLoc = config ? (typeof config.loc === 'boolean' && config.loc) : false;\n\t        this.buffer = [];\n\t        this.reader = new Reader();\n\t    }\n\t    ;\n\t    Tokenizer.prototype.errors = function () {\n\t        return this.errorHandler.errors;\n\t    };\n\t    ;\n\t    Tokenizer.prototype.getNextToken = function () {\n\t        if (this.buffer.length === 0) {\n\t            var comments = this.scanner.scanComments();\n\t            if (this.scanner.trackComment) {\n\t                for (var i = 0; i < comments.length; ++i) {\n\t                    var e = comments[i];\n\t                    var comment = void 0;\n\t                    var value = this.scanner.source.slice(e.slice[0], e.slice[1]);\n\t                    comment = {\n\t                        type: e.multiLine ? 'BlockComment' : 'LineComment',\n\t                        value: value\n\t                    };\n\t                    if (this.trackRange) {\n\t                        comment.range = e.range;\n\t                    }\n\t                    if (this.trackLoc) {\n\t                        comment.loc = e.loc;\n\t                    }\n\t                    this.buffer.push(comment);\n\t                }\n\t            }\n\t            if (!this.scanner.eof()) {\n\t                var loc = void 0;\n\t                if (this.trackLoc) {\n\t                    loc = {\n\t                        start: {\n\t                            line: this.scanner.lineNumber,\n\t                            column: this.scanner.index - this.scanner.lineStart\n\t                        },\n\t                        end: {}\n\t                    };\n\t                }\n\t                var token = void 0;\n\t                if (this.scanner.source[this.scanner.index] === '/') {\n\t                    token = this.reader.isRegexStart() ? this.scanner.scanRegExp() : this.scanner.scanPunctuator();\n\t                }\n\t                else {\n\t                    token = this.scanner.lex();\n\t                }\n\t                this.reader.push(token);\n\t                var entry = void 0;\n\t                entry = {\n\t                    type: token_1.TokenName[token.type],\n\t                    value: this.scanner.source.slice(token.start, token.end)\n\t                };\n\t                if (this.trackRange) {\n\t                    entry.range = [token.start, token.end];\n\t                }\n\t                if (this.trackLoc) {\n\t                    loc.end = {\n\t                        line: this.scanner.lineNumber,\n\t                        column: this.scanner.index - this.scanner.lineStart\n\t                    };\n\t                    entry.loc = loc;\n\t                }\n\t                if (token.regex) {\n\t                    entry.regex = token.regex;\n\t                }\n\t                this.buffer.push(entry);\n\t            }\n\t        }\n\t        return this.buffer.shift();\n\t    };\n\t    ;\n\t    return Tokenizer;\n\t}());\n\texports.Tokenizer = Tokenizer;\n\n\n/***/ }\n/******/ ])\n});\n;"},"lineCount":6401}},"hash":"00e8da55d6b79c5aa0a5f9e084fa9ff2","cacheData":{"env":{}}}