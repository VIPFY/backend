{"dependencies":[{"name":"events","loc":{"line":10,"column":27}},{"name":"util","loc":{"line":11,"column":19}},{"name":"../utils","loc":{"line":12,"column":20}},{"name":"process"}],"generated":{"js":"var process = require(\"process\");\n'use strict'\n/**\n * Copyright (c) 2010-2017 Brian Carlson (brian.m.carlson@gmail.com)\n * All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * README.md file in the root directory of this source tree.\n */\n\nvar EventEmitter = require('events').EventEmitter\nvar util = require('util')\nvar utils = require('../utils')\n\nvar NativeQuery = module.exports = function (config, values, callback) {\n  EventEmitter.call(this)\n  config = utils.normalizeQueryConfig(config, values, callback)\n  this.text = config.text\n  this.values = config.values\n  this.name = config.name\n  this.callback = config.callback\n  this.state = 'new'\n  this._arrayMode = config.rowMode === 'array'\n\n  // if the 'row' event is listened for\n  // then emit them as they come in\n  // without setting singleRowMode to true\n  // this has almost no meaning because libpq\n  // reads all rows into memory befor returning any\n  this._emitRowEvents = false\n  this.on('newListener', function (event) {\n    if (event === 'row') this._emitRowEvents = true\n  }.bind(this))\n}\n\nutil.inherits(NativeQuery, EventEmitter)\n\nvar errorFieldMap = {\n  'sqlState': 'code',\n  'statementPosition': 'position',\n  'messagePrimary': 'message',\n  'context': 'where',\n  'schemaName': 'schema',\n  'tableName': 'table',\n  'columnName': 'column',\n  'dataTypeName': 'dataType',\n  'constraintName': 'constraint',\n  'sourceFile': 'file',\n  'sourceLine': 'line',\n  'sourceFunction': 'routine'\n}\n\nNativeQuery.prototype.handleError = function (err) {\n  // copy pq error fields into the error object\n  var fields = this.native.pq.resultErrorFields()\n  if (fields) {\n    for (var key in fields) {\n      var normalizedFieldName = errorFieldMap[key] || key\n      err[normalizedFieldName] = fields[key]\n    }\n  }\n  if (this.callback) {\n    this.callback(err)\n  } else {\n    this.emit('error', err)\n  }\n  this.state = 'error'\n}\n\nNativeQuery.prototype.then = function (onSuccess, onFailure) {\n  return this._getPromise().then(onSuccess, onFailure)\n}\n\nNativeQuery.prototype.catch = function (callback) {\n  return this._getPromise().catch(callback)\n}\n\nNativeQuery.prototype._getPromise = function () {\n  if (this._promise) return this._promise\n  this._promise = new Promise(function (resolve, reject) {\n    this._once('end', resolve)\n    this._once('error', reject)\n  }.bind(this))\n  return this._promise\n}\n\nNativeQuery.prototype.submit = function (client) {\n  this.state = 'running'\n  var self = this\n  this.native = client.native\n  client.native.arrayMode = this._arrayMode\n\n  var after = function (err, rows, results) {\n    client.native.arrayMode = false\n    setImmediate(function () {\n      self.emit('_done')\n    })\n\n    // handle possible query error\n    if (err) {\n      return self.handleError(err)\n    }\n\n    // emit row events for each row in the result\n    if (self._emitRowEvents) {\n      if (results.length > 1) {\n        rows.forEach((rowOfRows, i) => {\n          rowOfRows.forEach(row => {\n            self.emit('row', row, results[i])\n          })\n        })\n      } else {\n        rows.forEach(function (row) {\n          self.emit('row', row, results)\n        })\n      }\n    }\n\n    // handle successful result\n    self.state = 'end'\n    self.emit('end', results)\n    if (self.callback) {\n      self.callback(null, results)\n    }\n  }\n\n  if (process.domain) {\n    after = process.domain.bind(after)\n  }\n\n  // named query\n  if (this.name) {\n    if (this.name.length > 63) {\n      console.error('Warning! Postgres only supports 63 characters for query names.')\n      console.error('You supplied', this.name, '(', this.name.length, ')')\n      console.error('This can cause conflicts and silent errors executing queries')\n    }\n    var values = (this.values || []).map(utils.prepareValue)\n\n    // check if the client has already executed this named query\n    // if so...just execute it again - skip the planning phase\n    if (client.namedQueries[this.name]) {\n      return client.native.execute(this.name, values, after)\n    }\n    // plan the named query the first time, then execute it\n    return client.native.prepare(this.name, this.text, values.length, function (err) {\n      if (err) return after(err)\n      client.namedQueries[self.name] = true\n      return self.native.execute(self.name, values, after)\n    })\n  } else if (this.values) {\n    if (!Array.isArray(this.values)) {\n      const err = new Error('Query values must be an array')\n      return after(err)\n    }\n    var vals = this.values.map(utils.prepareValue)\n    client.native.query(this.text, vals, after)\n  } else {\n    client.native.query(this.text, after)\n  }\n}\n","map":{"mappings":[{"source":"../node_modules/pg/lib/native/query.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":68,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":69,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":70,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":71,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":72,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":73,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":74,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":75,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":76,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":77,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":78,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":79,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":80,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":81,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":82,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":83,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":84,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":85,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":86,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":87,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":88,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":89,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":90,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":91,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":92,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":93,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":94,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":95,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":96,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":97,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":98,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":99,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":100,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":101,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":102,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":103,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":104,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":105,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":106,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":107,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":108,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":109,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":110,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":111,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":112,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":113,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":114,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":115,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":116,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":117,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":118,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":119,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":120,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":121,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":122,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":123,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":124,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":125,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":126,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":127,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":128,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":129,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":130,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":131,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":132,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":133,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":134,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":135,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":136,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":137,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":138,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":139,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":140,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":141,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":142,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":143,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":144,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":145,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":146,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":147,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":148,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":149,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":150,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":151,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":152,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":153,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":154,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":155,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":156,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":157,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":158,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":159,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":160,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/pg/lib/native/query.js","original":{"line":161,"column":0},"generated":{"line":162,"column":0}}],"sources":{"../node_modules/pg/lib/native/query.js":"'use strict'\n/**\n * Copyright (c) 2010-2017 Brian Carlson (brian.m.carlson@gmail.com)\n * All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * README.md file in the root directory of this source tree.\n */\n\nvar EventEmitter = require('events').EventEmitter\nvar util = require('util')\nvar utils = require('../utils')\n\nvar NativeQuery = module.exports = function (config, values, callback) {\n  EventEmitter.call(this)\n  config = utils.normalizeQueryConfig(config, values, callback)\n  this.text = config.text\n  this.values = config.values\n  this.name = config.name\n  this.callback = config.callback\n  this.state = 'new'\n  this._arrayMode = config.rowMode === 'array'\n\n  // if the 'row' event is listened for\n  // then emit them as they come in\n  // without setting singleRowMode to true\n  // this has almost no meaning because libpq\n  // reads all rows into memory befor returning any\n  this._emitRowEvents = false\n  this.on('newListener', function (event) {\n    if (event === 'row') this._emitRowEvents = true\n  }.bind(this))\n}\n\nutil.inherits(NativeQuery, EventEmitter)\n\nvar errorFieldMap = {\n  'sqlState': 'code',\n  'statementPosition': 'position',\n  'messagePrimary': 'message',\n  'context': 'where',\n  'schemaName': 'schema',\n  'tableName': 'table',\n  'columnName': 'column',\n  'dataTypeName': 'dataType',\n  'constraintName': 'constraint',\n  'sourceFile': 'file',\n  'sourceLine': 'line',\n  'sourceFunction': 'routine'\n}\n\nNativeQuery.prototype.handleError = function (err) {\n  // copy pq error fields into the error object\n  var fields = this.native.pq.resultErrorFields()\n  if (fields) {\n    for (var key in fields) {\n      var normalizedFieldName = errorFieldMap[key] || key\n      err[normalizedFieldName] = fields[key]\n    }\n  }\n  if (this.callback) {\n    this.callback(err)\n  } else {\n    this.emit('error', err)\n  }\n  this.state = 'error'\n}\n\nNativeQuery.prototype.then = function (onSuccess, onFailure) {\n  return this._getPromise().then(onSuccess, onFailure)\n}\n\nNativeQuery.prototype.catch = function (callback) {\n  return this._getPromise().catch(callback)\n}\n\nNativeQuery.prototype._getPromise = function () {\n  if (this._promise) return this._promise\n  this._promise = new Promise(function (resolve, reject) {\n    this._once('end', resolve)\n    this._once('error', reject)\n  }.bind(this))\n  return this._promise\n}\n\nNativeQuery.prototype.submit = function (client) {\n  this.state = 'running'\n  var self = this\n  this.native = client.native\n  client.native.arrayMode = this._arrayMode\n\n  var after = function (err, rows, results) {\n    client.native.arrayMode = false\n    setImmediate(function () {\n      self.emit('_done')\n    })\n\n    // handle possible query error\n    if (err) {\n      return self.handleError(err)\n    }\n\n    // emit row events for each row in the result\n    if (self._emitRowEvents) {\n      if (results.length > 1) {\n        rows.forEach((rowOfRows, i) => {\n          rowOfRows.forEach(row => {\n            self.emit('row', row, results[i])\n          })\n        })\n      } else {\n        rows.forEach(function (row) {\n          self.emit('row', row, results)\n        })\n      }\n    }\n\n    // handle successful result\n    self.state = 'end'\n    self.emit('end', results)\n    if (self.callback) {\n      self.callback(null, results)\n    }\n  }\n\n  if (process.domain) {\n    after = process.domain.bind(after)\n  }\n\n  // named query\n  if (this.name) {\n    if (this.name.length > 63) {\n      console.error('Warning! Postgres only supports 63 characters for query names.')\n      console.error('You supplied', this.name, '(', this.name.length, ')')\n      console.error('This can cause conflicts and silent errors executing queries')\n    }\n    var values = (this.values || []).map(utils.prepareValue)\n\n    // check if the client has already executed this named query\n    // if so...just execute it again - skip the planning phase\n    if (client.namedQueries[this.name]) {\n      return client.native.execute(this.name, values, after)\n    }\n    // plan the named query the first time, then execute it\n    return client.native.prepare(this.name, this.text, values.length, function (err) {\n      if (err) return after(err)\n      client.namedQueries[self.name] = true\n      return self.native.execute(self.name, values, after)\n    })\n  } else if (this.values) {\n    if (!Array.isArray(this.values)) {\n      const err = new Error('Query values must be an array')\n      return after(err)\n    }\n    var vals = this.values.map(utils.prepareValue)\n    client.native.query(this.text, vals, after)\n  } else {\n    client.native.query(this.text, after)\n  }\n}\n"},"lineCount":162}},"hash":"aa5de5d418a02ef3f6eebd7219e117ee","cacheData":{"env":{}}}