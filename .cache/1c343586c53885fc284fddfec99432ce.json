{"dependencies":[{"name":"./types","loc":{"line":8,"column":33}}],"generated":{"js":"var Ap = Array.prototype;\nvar slice = Ap.slice;\nvar map = Ap.map;\nvar Op = Object.prototype;\nvar hasOwn = Op.hasOwnProperty;\n\nmodule.exports = function (fork) {\n    var types = fork.use(require(\"./types\"));\n    var isArray = types.builtInTypes.array;\n    var isNumber = types.builtInTypes.number;\n\n    function Path(value, parentPath, name) {\n        if (!(this instanceof Path)) {\n            throw new Error(\"Path constructor cannot be invoked without 'new'\");\n        }\n\n        if (parentPath) {\n            if (!(parentPath instanceof Path)) {\n                throw new Error(\"\");\n            }\n        } else {\n            parentPath = null;\n            name = null;\n        }\n\n        // The value encapsulated by this Path, generally equal to\n        // parentPath.value[name] if we have a parentPath.\n        this.value = value;\n\n        // The immediate parent Path of this Path.\n        this.parentPath = parentPath;\n\n        // The name of the property of parentPath.value through which this\n        // Path's value was reached.\n        this.name = name;\n\n        // Calling path.get(\"child\") multiple times always returns the same\n        // child Path object, for both performance and consistency reasons.\n        this.__childCache = null;\n    }\n\n    var Pp = Path.prototype;\n\n    function getChildCache(path) {\n        // Lazily create the child cache. This also cheapens cache\n        // invalidation, since you can just reset path.__childCache to null.\n        return path.__childCache || (path.__childCache = Object.create(null));\n    }\n\n    function getChildPath(path, name) {\n        var cache = getChildCache(path);\n        var actualChildValue = path.getValueProperty(name);\n        var childPath = cache[name];\n        if (!hasOwn.call(cache, name) ||\n          // Ensure consistency between cache and reality.\n          childPath.value !== actualChildValue) {\n            childPath = cache[name] = new path.constructor(\n              actualChildValue, path, name\n            );\n        }\n        return childPath;\n    }\n\n// This method is designed to be overridden by subclasses that need to\n// handle missing properties, etc.\n    Pp.getValueProperty = function getValueProperty(name) {\n        return this.value[name];\n    };\n\n    Pp.get = function get(name) {\n        var path = this;\n        var names = arguments;\n        var count = names.length;\n\n        for (var i = 0; i < count; ++i) {\n            path = getChildPath(path, names[i]);\n        }\n\n        return path;\n    };\n\n    Pp.each = function each(callback, context) {\n        var childPaths = [];\n        var len = this.value.length;\n        var i = 0;\n\n        // Collect all the original child paths before invoking the callback.\n        for (var i = 0; i < len; ++i) {\n            if (hasOwn.call(this.value, i)) {\n                childPaths[i] = this.get(i);\n            }\n        }\n\n        // Invoke the callback on just the original child paths, regardless of\n        // any modifications made to the array by the callback. I chose these\n        // semantics over cleverly invoking the callback on new elements because\n        // this way is much easier to reason about.\n        context = context || this;\n        for (i = 0; i < len; ++i) {\n            if (hasOwn.call(childPaths, i)) {\n                callback.call(context, childPaths[i]);\n            }\n        }\n    };\n\n    Pp.map = function map(callback, context) {\n        var result = [];\n\n        this.each(function (childPath) {\n            result.push(callback.call(this, childPath));\n        }, context);\n\n        return result;\n    };\n\n    Pp.filter = function filter(callback, context) {\n        var result = [];\n\n        this.each(function (childPath) {\n            if (callback.call(this, childPath)) {\n                result.push(childPath);\n            }\n        }, context);\n\n        return result;\n    };\n\n    function emptyMoves() {}\n    function getMoves(path, offset, start, end) {\n        isArray.assert(path.value);\n\n        if (offset === 0) {\n            return emptyMoves;\n        }\n\n        var length = path.value.length;\n        if (length < 1) {\n            return emptyMoves;\n        }\n\n        var argc = arguments.length;\n        if (argc === 2) {\n            start = 0;\n            end = length;\n        } else if (argc === 3) {\n            start = Math.max(start, 0);\n            end = length;\n        } else {\n            start = Math.max(start, 0);\n            end = Math.min(end, length);\n        }\n\n        isNumber.assert(start);\n        isNumber.assert(end);\n\n        var moves = Object.create(null);\n        var cache = getChildCache(path);\n\n        for (var i = start; i < end; ++i) {\n            if (hasOwn.call(path.value, i)) {\n                var childPath = path.get(i);\n                if (childPath.name !== i) {\n                    throw new Error(\"\");\n                }\n                var newIndex = i + offset;\n                childPath.name = newIndex;\n                moves[newIndex] = childPath;\n                delete cache[i];\n            }\n        }\n\n        delete cache.length;\n\n        return function () {\n            for (var newIndex in moves) {\n                var childPath = moves[newIndex];\n                if (childPath.name !== +newIndex) {\n                    throw new Error(\"\");\n                }\n                cache[newIndex] = childPath;\n                path.value[newIndex] = childPath.value;\n            }\n        };\n    }\n\n    Pp.shift = function shift() {\n        var move = getMoves(this, -1);\n        var result = this.value.shift();\n        move();\n        return result;\n    };\n\n    Pp.unshift = function unshift(node) {\n        var move = getMoves(this, arguments.length);\n        var result = this.value.unshift.apply(this.value, arguments);\n        move();\n        return result;\n    };\n\n    Pp.push = function push(node) {\n        isArray.assert(this.value);\n        delete getChildCache(this).length\n        return this.value.push.apply(this.value, arguments);\n    };\n\n    Pp.pop = function pop() {\n        isArray.assert(this.value);\n        var cache = getChildCache(this);\n        delete cache[this.value.length - 1];\n        delete cache.length;\n        return this.value.pop();\n    };\n\n    Pp.insertAt = function insertAt(index, node) {\n        var argc = arguments.length;\n        var move = getMoves(this, argc - 1, index);\n        if (move === emptyMoves) {\n            return this;\n        }\n\n        index = Math.max(index, 0);\n\n        for (var i = 1; i < argc; ++i) {\n            this.value[index + i - 1] = arguments[i];\n        }\n\n        move();\n\n        return this;\n    };\n\n    Pp.insertBefore = function insertBefore(node) {\n        var pp = this.parentPath;\n        var argc = arguments.length;\n        var insertAtArgs = [this.name];\n        for (var i = 0; i < argc; ++i) {\n            insertAtArgs.push(arguments[i]);\n        }\n        return pp.insertAt.apply(pp, insertAtArgs);\n    };\n\n    Pp.insertAfter = function insertAfter(node) {\n        var pp = this.parentPath;\n        var argc = arguments.length;\n        var insertAtArgs = [this.name + 1];\n        for (var i = 0; i < argc; ++i) {\n            insertAtArgs.push(arguments[i]);\n        }\n        return pp.insertAt.apply(pp, insertAtArgs);\n    };\n\n    function repairRelationshipWithParent(path) {\n        if (!(path instanceof Path)) {\n            throw new Error(\"\");\n        }\n\n        var pp = path.parentPath;\n        if (!pp) {\n            // Orphan paths have no relationship to repair.\n            return path;\n        }\n\n        var parentValue = pp.value;\n        var parentCache = getChildCache(pp);\n\n        // Make sure parentCache[path.name] is populated.\n        if (parentValue[path.name] === path.value) {\n            parentCache[path.name] = path;\n        } else if (isArray.check(parentValue)) {\n            // Something caused path.name to become out of date, so attempt to\n            // recover by searching for path.value in parentValue.\n            var i = parentValue.indexOf(path.value);\n            if (i >= 0) {\n                parentCache[path.name = i] = path;\n            }\n        } else {\n            // If path.value disagrees with parentValue[path.name], and\n            // path.name is not an array index, let path.value become the new\n            // parentValue[path.name] and update parentCache accordingly.\n            parentValue[path.name] = path.value;\n            parentCache[path.name] = path;\n        }\n\n        if (parentValue[path.name] !== path.value) {\n            throw new Error(\"\");\n        }\n        if (path.parentPath.get(path.name) !== path) {\n            throw new Error(\"\");\n        }\n\n        return path;\n    }\n\n    Pp.replace = function replace(replacement) {\n        var results = [];\n        var parentValue = this.parentPath.value;\n        var parentCache = getChildCache(this.parentPath);\n        var count = arguments.length;\n\n        repairRelationshipWithParent(this);\n\n        if (isArray.check(parentValue)) {\n            var originalLength = parentValue.length;\n            var move = getMoves(this.parentPath, count - 1, this.name + 1);\n\n            var spliceArgs = [this.name, 1];\n            for (var i = 0; i < count; ++i) {\n                spliceArgs.push(arguments[i]);\n            }\n\n            var splicedOut = parentValue.splice.apply(parentValue, spliceArgs);\n\n            if (splicedOut[0] !== this.value) {\n                throw new Error(\"\");\n            }\n            if (parentValue.length !== (originalLength - 1 + count)) {\n                throw new Error(\"\");\n            }\n\n            move();\n\n            if (count === 0) {\n                delete this.value;\n                delete parentCache[this.name];\n                this.__childCache = null;\n\n            } else {\n                if (parentValue[this.name] !== replacement) {\n                    throw new Error(\"\");\n                }\n\n                if (this.value !== replacement) {\n                    this.value = replacement;\n                    this.__childCache = null;\n                }\n\n                for (i = 0; i < count; ++i) {\n                    results.push(this.parentPath.get(this.name + i));\n                }\n\n                if (results[0] !== this) {\n                    throw new Error(\"\");\n                }\n            }\n\n        } else if (count === 1) {\n            if (this.value !== replacement) {\n                this.__childCache = null;\n            }\n            this.value = parentValue[this.name] = replacement;\n            results.push(this);\n\n        } else if (count === 0) {\n            delete parentValue[this.name];\n            delete this.value;\n            this.__childCache = null;\n\n            // Leave this path cached as parentCache[this.name], even though\n            // it no longer has a value defined.\n\n        } else {\n            throw new Error(\"Could not replace path\");\n        }\n\n        return results;\n    };\n\n    return Path;\n};\n","map":{"mappings":[{"source":"../node_modules/ast-types/lib/path.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"../node_modules/ast-types/lib/path.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}}],"sources":{"../node_modules/ast-types/lib/path.js":"var Ap = Array.prototype;\nvar slice = Ap.slice;\nvar map = Ap.map;\nvar Op = Object.prototype;\nvar hasOwn = Op.hasOwnProperty;\n\nmodule.exports = function (fork) {\n    var types = fork.use(require(\"./types\"));\n    var isArray = types.builtInTypes.array;\n    var isNumber = types.builtInTypes.number;\n\n    function Path(value, parentPath, name) {\n        if (!(this instanceof Path)) {\n            throw new Error(\"Path constructor cannot be invoked without 'new'\");\n        }\n\n        if (parentPath) {\n            if (!(parentPath instanceof Path)) {\n                throw new Error(\"\");\n            }\n        } else {\n            parentPath = null;\n            name = null;\n        }\n\n        // The value encapsulated by this Path, generally equal to\n        // parentPath.value[name] if we have a parentPath.\n        this.value = value;\n\n        // The immediate parent Path of this Path.\n        this.parentPath = parentPath;\n\n        // The name of the property of parentPath.value through which this\n        // Path's value was reached.\n        this.name = name;\n\n        // Calling path.get(\"child\") multiple times always returns the same\n        // child Path object, for both performance and consistency reasons.\n        this.__childCache = null;\n    }\n\n    var Pp = Path.prototype;\n\n    function getChildCache(path) {\n        // Lazily create the child cache. This also cheapens cache\n        // invalidation, since you can just reset path.__childCache to null.\n        return path.__childCache || (path.__childCache = Object.create(null));\n    }\n\n    function getChildPath(path, name) {\n        var cache = getChildCache(path);\n        var actualChildValue = path.getValueProperty(name);\n        var childPath = cache[name];\n        if (!hasOwn.call(cache, name) ||\n          // Ensure consistency between cache and reality.\n          childPath.value !== actualChildValue) {\n            childPath = cache[name] = new path.constructor(\n              actualChildValue, path, name\n            );\n        }\n        return childPath;\n    }\n\n// This method is designed to be overridden by subclasses that need to\n// handle missing properties, etc.\n    Pp.getValueProperty = function getValueProperty(name) {\n        return this.value[name];\n    };\n\n    Pp.get = function get(name) {\n        var path = this;\n        var names = arguments;\n        var count = names.length;\n\n        for (var i = 0; i < count; ++i) {\n            path = getChildPath(path, names[i]);\n        }\n\n        return path;\n    };\n\n    Pp.each = function each(callback, context) {\n        var childPaths = [];\n        var len = this.value.length;\n        var i = 0;\n\n        // Collect all the original child paths before invoking the callback.\n        for (var i = 0; i < len; ++i) {\n            if (hasOwn.call(this.value, i)) {\n                childPaths[i] = this.get(i);\n            }\n        }\n\n        // Invoke the callback on just the original child paths, regardless of\n        // any modifications made to the array by the callback. I chose these\n        // semantics over cleverly invoking the callback on new elements because\n        // this way is much easier to reason about.\n        context = context || this;\n        for (i = 0; i < len; ++i) {\n            if (hasOwn.call(childPaths, i)) {\n                callback.call(context, childPaths[i]);\n            }\n        }\n    };\n\n    Pp.map = function map(callback, context) {\n        var result = [];\n\n        this.each(function (childPath) {\n            result.push(callback.call(this, childPath));\n        }, context);\n\n        return result;\n    };\n\n    Pp.filter = function filter(callback, context) {\n        var result = [];\n\n        this.each(function (childPath) {\n            if (callback.call(this, childPath)) {\n                result.push(childPath);\n            }\n        }, context);\n\n        return result;\n    };\n\n    function emptyMoves() {}\n    function getMoves(path, offset, start, end) {\n        isArray.assert(path.value);\n\n        if (offset === 0) {\n            return emptyMoves;\n        }\n\n        var length = path.value.length;\n        if (length < 1) {\n            return emptyMoves;\n        }\n\n        var argc = arguments.length;\n        if (argc === 2) {\n            start = 0;\n            end = length;\n        } else if (argc === 3) {\n            start = Math.max(start, 0);\n            end = length;\n        } else {\n            start = Math.max(start, 0);\n            end = Math.min(end, length);\n        }\n\n        isNumber.assert(start);\n        isNumber.assert(end);\n\n        var moves = Object.create(null);\n        var cache = getChildCache(path);\n\n        for (var i = start; i < end; ++i) {\n            if (hasOwn.call(path.value, i)) {\n                var childPath = path.get(i);\n                if (childPath.name !== i) {\n                    throw new Error(\"\");\n                }\n                var newIndex = i + offset;\n                childPath.name = newIndex;\n                moves[newIndex] = childPath;\n                delete cache[i];\n            }\n        }\n\n        delete cache.length;\n\n        return function () {\n            for (var newIndex in moves) {\n                var childPath = moves[newIndex];\n                if (childPath.name !== +newIndex) {\n                    throw new Error(\"\");\n                }\n                cache[newIndex] = childPath;\n                path.value[newIndex] = childPath.value;\n            }\n        };\n    }\n\n    Pp.shift = function shift() {\n        var move = getMoves(this, -1);\n        var result = this.value.shift();\n        move();\n        return result;\n    };\n\n    Pp.unshift = function unshift(node) {\n        var move = getMoves(this, arguments.length);\n        var result = this.value.unshift.apply(this.value, arguments);\n        move();\n        return result;\n    };\n\n    Pp.push = function push(node) {\n        isArray.assert(this.value);\n        delete getChildCache(this).length\n        return this.value.push.apply(this.value, arguments);\n    };\n\n    Pp.pop = function pop() {\n        isArray.assert(this.value);\n        var cache = getChildCache(this);\n        delete cache[this.value.length - 1];\n        delete cache.length;\n        return this.value.pop();\n    };\n\n    Pp.insertAt = function insertAt(index, node) {\n        var argc = arguments.length;\n        var move = getMoves(this, argc - 1, index);\n        if (move === emptyMoves) {\n            return this;\n        }\n\n        index = Math.max(index, 0);\n\n        for (var i = 1; i < argc; ++i) {\n            this.value[index + i - 1] = arguments[i];\n        }\n\n        move();\n\n        return this;\n    };\n\n    Pp.insertBefore = function insertBefore(node) {\n        var pp = this.parentPath;\n        var argc = arguments.length;\n        var insertAtArgs = [this.name];\n        for (var i = 0; i < argc; ++i) {\n            insertAtArgs.push(arguments[i]);\n        }\n        return pp.insertAt.apply(pp, insertAtArgs);\n    };\n\n    Pp.insertAfter = function insertAfter(node) {\n        var pp = this.parentPath;\n        var argc = arguments.length;\n        var insertAtArgs = [this.name + 1];\n        for (var i = 0; i < argc; ++i) {\n            insertAtArgs.push(arguments[i]);\n        }\n        return pp.insertAt.apply(pp, insertAtArgs);\n    };\n\n    function repairRelationshipWithParent(path) {\n        if (!(path instanceof Path)) {\n            throw new Error(\"\");\n        }\n\n        var pp = path.parentPath;\n        if (!pp) {\n            // Orphan paths have no relationship to repair.\n            return path;\n        }\n\n        var parentValue = pp.value;\n        var parentCache = getChildCache(pp);\n\n        // Make sure parentCache[path.name] is populated.\n        if (parentValue[path.name] === path.value) {\n            parentCache[path.name] = path;\n        } else if (isArray.check(parentValue)) {\n            // Something caused path.name to become out of date, so attempt to\n            // recover by searching for path.value in parentValue.\n            var i = parentValue.indexOf(path.value);\n            if (i >= 0) {\n                parentCache[path.name = i] = path;\n            }\n        } else {\n            // If path.value disagrees with parentValue[path.name], and\n            // path.name is not an array index, let path.value become the new\n            // parentValue[path.name] and update parentCache accordingly.\n            parentValue[path.name] = path.value;\n            parentCache[path.name] = path;\n        }\n\n        if (parentValue[path.name] !== path.value) {\n            throw new Error(\"\");\n        }\n        if (path.parentPath.get(path.name) !== path) {\n            throw new Error(\"\");\n        }\n\n        return path;\n    }\n\n    Pp.replace = function replace(replacement) {\n        var results = [];\n        var parentValue = this.parentPath.value;\n        var parentCache = getChildCache(this.parentPath);\n        var count = arguments.length;\n\n        repairRelationshipWithParent(this);\n\n        if (isArray.check(parentValue)) {\n            var originalLength = parentValue.length;\n            var move = getMoves(this.parentPath, count - 1, this.name + 1);\n\n            var spliceArgs = [this.name, 1];\n            for (var i = 0; i < count; ++i) {\n                spliceArgs.push(arguments[i]);\n            }\n\n            var splicedOut = parentValue.splice.apply(parentValue, spliceArgs);\n\n            if (splicedOut[0] !== this.value) {\n                throw new Error(\"\");\n            }\n            if (parentValue.length !== (originalLength - 1 + count)) {\n                throw new Error(\"\");\n            }\n\n            move();\n\n            if (count === 0) {\n                delete this.value;\n                delete parentCache[this.name];\n                this.__childCache = null;\n\n            } else {\n                if (parentValue[this.name] !== replacement) {\n                    throw new Error(\"\");\n                }\n\n                if (this.value !== replacement) {\n                    this.value = replacement;\n                    this.__childCache = null;\n                }\n\n                for (i = 0; i < count; ++i) {\n                    results.push(this.parentPath.get(this.name + i));\n                }\n\n                if (results[0] !== this) {\n                    throw new Error(\"\");\n                }\n            }\n\n        } else if (count === 1) {\n            if (this.value !== replacement) {\n                this.__childCache = null;\n            }\n            this.value = parentValue[this.name] = replacement;\n            results.push(this);\n\n        } else if (count === 0) {\n            delete parentValue[this.name];\n            delete this.value;\n            this.__childCache = null;\n\n            // Leave this path cached as parentCache[this.name], even though\n            // it no longer has a value defined.\n\n        } else {\n            throw new Error(\"Could not replace path\");\n        }\n\n        return results;\n    };\n\n    return Path;\n};\n"},"lineCount":370}},"hash":"66e4d9624e76ff879b7bc48fc2d74a32","cacheData":{"env":{}}}