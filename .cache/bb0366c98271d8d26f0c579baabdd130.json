{"dependencies":[],"generated":{"js":"/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nexports.GREATEST_LOWER_BOUND = 1;\nexports.LEAST_UPPER_BOUND = 2;\n\n/**\n * Recursive implementation of binary search.\n *\n * @param aLow Indices here and lower do not contain the needle.\n * @param aHigh Indices here and higher do not contain the needle.\n * @param aNeedle The element being searched for.\n * @param aHaystack The non-empty array being searched.\n * @param aCompare Function which takes two elements and returns -1, 0, or 1.\n * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or\n *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n */\nfunction recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {\n  // This function terminates when one of the following is true:\n  //\n  //   1. We find the exact element we are looking for.\n  //\n  //   2. We did not find the exact element, but we can return the index of\n  //      the next-closest element.\n  //\n  //   3. We did not find the exact element, and there is no next-closest\n  //      element than the one we are searching for, so we return -1.\n  var mid = Math.floor((aHigh - aLow) / 2) + aLow;\n  var cmp = aCompare(aNeedle, aHaystack[mid], true);\n  if (cmp === 0) {\n    // Found the element we are looking for.\n    return mid;\n  }\n  else if (cmp > 0) {\n    // Our needle is greater than aHaystack[mid].\n    if (aHigh - mid > 1) {\n      // The element is in the upper half.\n      return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);\n    }\n\n    // The exact needle element was not found in this haystack. Determine if\n    // we are in termination case (3) or (2) and return the appropriate thing.\n    if (aBias == exports.LEAST_UPPER_BOUND) {\n      return aHigh < aHaystack.length ? aHigh : -1;\n    } else {\n      return mid;\n    }\n  }\n  else {\n    // Our needle is less than aHaystack[mid].\n    if (mid - aLow > 1) {\n      // The element is in the lower half.\n      return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);\n    }\n\n    // we are in termination case (3) or (2) and return the appropriate thing.\n    if (aBias == exports.LEAST_UPPER_BOUND) {\n      return mid;\n    } else {\n      return aLow < 0 ? -1 : aLow;\n    }\n  }\n}\n\n/**\n * This is an implementation of binary search which will always try and return\n * the index of the closest element if there is no exact hit. This is because\n * mappings between original and generated line/col pairs are single points,\n * and there is an implicit region between each of them, so a miss just means\n * that you aren't on the very start of a region.\n *\n * @param aNeedle The element you are looking for.\n * @param aHaystack The array that is being searched.\n * @param aCompare A function which takes the needle and an element in the\n *     array and returns -1, 0, or 1 depending on whether the needle is less\n *     than, equal to, or greater than the element, respectively.\n * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or\n *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n *     Defaults to 'binarySearch.GREATEST_LOWER_BOUND'.\n */\nexports.search = function search(aNeedle, aHaystack, aCompare, aBias) {\n  if (aHaystack.length === 0) {\n    return -1;\n  }\n\n  var index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack,\n                              aCompare, aBias || exports.GREATEST_LOWER_BOUND);\n  if (index < 0) {\n    return -1;\n  }\n\n  // We have found either the exact element, or the next-closest element than\n  // the one we are searching for. However, there may be more than one such\n  // element. Make sure we always return the smallest of these.\n  while (index - 1 >= 0) {\n    if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {\n      break;\n    }\n    --index;\n  }\n\n  return index;\n};\n","map":{"mappings":[{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/source-map/lib/binary-search.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}}],"sources":{"../node_modules/source-map/lib/binary-search.js":"/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nexports.GREATEST_LOWER_BOUND = 1;\nexports.LEAST_UPPER_BOUND = 2;\n\n/**\n * Recursive implementation of binary search.\n *\n * @param aLow Indices here and lower do not contain the needle.\n * @param aHigh Indices here and higher do not contain the needle.\n * @param aNeedle The element being searched for.\n * @param aHaystack The non-empty array being searched.\n * @param aCompare Function which takes two elements and returns -1, 0, or 1.\n * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or\n *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n */\nfunction recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {\n  // This function terminates when one of the following is true:\n  //\n  //   1. We find the exact element we are looking for.\n  //\n  //   2. We did not find the exact element, but we can return the index of\n  //      the next-closest element.\n  //\n  //   3. We did not find the exact element, and there is no next-closest\n  //      element than the one we are searching for, so we return -1.\n  var mid = Math.floor((aHigh - aLow) / 2) + aLow;\n  var cmp = aCompare(aNeedle, aHaystack[mid], true);\n  if (cmp === 0) {\n    // Found the element we are looking for.\n    return mid;\n  }\n  else if (cmp > 0) {\n    // Our needle is greater than aHaystack[mid].\n    if (aHigh - mid > 1) {\n      // The element is in the upper half.\n      return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);\n    }\n\n    // The exact needle element was not found in this haystack. Determine if\n    // we are in termination case (3) or (2) and return the appropriate thing.\n    if (aBias == exports.LEAST_UPPER_BOUND) {\n      return aHigh < aHaystack.length ? aHigh : -1;\n    } else {\n      return mid;\n    }\n  }\n  else {\n    // Our needle is less than aHaystack[mid].\n    if (mid - aLow > 1) {\n      // The element is in the lower half.\n      return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);\n    }\n\n    // we are in termination case (3) or (2) and return the appropriate thing.\n    if (aBias == exports.LEAST_UPPER_BOUND) {\n      return mid;\n    } else {\n      return aLow < 0 ? -1 : aLow;\n    }\n  }\n}\n\n/**\n * This is an implementation of binary search which will always try and return\n * the index of the closest element if there is no exact hit. This is because\n * mappings between original and generated line/col pairs are single points,\n * and there is an implicit region between each of them, so a miss just means\n * that you aren't on the very start of a region.\n *\n * @param aNeedle The element you are looking for.\n * @param aHaystack The array that is being searched.\n * @param aCompare A function which takes the needle and an element in the\n *     array and returns -1, 0, or 1 depending on whether the needle is less\n *     than, equal to, or greater than the element, respectively.\n * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or\n *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n *     Defaults to 'binarySearch.GREATEST_LOWER_BOUND'.\n */\nexports.search = function search(aNeedle, aHaystack, aCompare, aBias) {\n  if (aHaystack.length === 0) {\n    return -1;\n  }\n\n  var index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack,\n                              aCompare, aBias || exports.GREATEST_LOWER_BOUND);\n  if (index < 0) {\n    return -1;\n  }\n\n  // We have found either the exact element, or the next-closest element than\n  // the one we are searching for. However, there may be more than one such\n  // element. Make sure we always return the smallest of these.\n  while (index - 1 >= 0) {\n    if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {\n      break;\n    }\n    --index;\n  }\n\n  return index;\n};\n"},"lineCount":112}},"hash":"b488f7fb84a058aef45c837c7fa4ed02","cacheData":{"env":{}}}