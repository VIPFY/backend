{"dependencies":[{"name":"buffer","loc":{"line":5,"column":21}},{"name":"./bom-handling","loc":{"line":7,"column":26}},{"name":"../encodings","loc":{"line":65,"column":34}},{"name":"./streams","loc":{"line":139,"column":16}},{"name":"./extend-node","loc":{"line":143,"column":12}},{"name":"process"}],"generated":{"js":"\nvar process = require(\"process\");\n\"use strict\";\n\n// Some environments don't have global Buffer (e.g. React Native).\n// Solution would be installing npm modules \"buffer\" and \"stream\" explicitly.\nvar Buffer = require(\"buffer\").Buffer;\n\nvar bomHandling = require(\"./bom-handling\"),\n    iconv = module.exports;\n\n// All codecs and aliases are kept here, keyed by encoding name/alias.\n// They are lazy loaded in `iconv.getCodec` from `encodings/index.js`.\niconv.encodings = null;\n\n// Characters emitted in case of error.\niconv.defaultCharUnicode = '�';\niconv.defaultCharSingleByte = '?';\n\n// Public API.\niconv.encode = function encode(str, encoding, options) {\n    str = \"\" + (str || \"\"); // Ensure string.\n\n    var encoder = iconv.getEncoder(encoding, options);\n\n    var res = encoder.write(str);\n    var trail = encoder.end();\n    \n    return (trail && trail.length > 0) ? Buffer.concat([res, trail]) : res;\n}\n\niconv.decode = function decode(buf, encoding, options) {\n    if (typeof buf === 'string') {\n        if (!iconv.skipDecodeWarning) {\n            console.error('Iconv-lite warning: decode()-ing strings is deprecated. Refer to https://github.com/ashtuchkin/iconv-lite/wiki/Use-Buffers-when-decoding');\n            iconv.skipDecodeWarning = true;\n        }\n\n        buf = new Buffer(\"\" + (buf || \"\"), \"binary\"); // Ensure buffer.\n    }\n\n    var decoder = iconv.getDecoder(encoding, options);\n\n    var res = decoder.write(buf);\n    var trail = decoder.end();\n\n    return trail ? (res + trail) : res;\n}\n\niconv.encodingExists = function encodingExists(enc) {\n    try {\n        iconv.getCodec(enc);\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\n\n// Legacy aliases to convert functions\niconv.toEncoding = iconv.encode;\niconv.fromEncoding = iconv.decode;\n\n// Search for a codec in iconv.encodings. Cache codec data in iconv._codecDataCache.\niconv._codecDataCache = {};\niconv.getCodec = function getCodec(encoding) {\n    if (!iconv.encodings)\n        iconv.encodings = require(\"../encodings\"); // Lazy load all encoding definitions.\n    \n    // Canonicalize encoding name: strip all non-alphanumeric chars and appended year.\n    var enc = (''+encoding).toLowerCase().replace(/[^0-9a-z]|:\\d{4}$/g, \"\");\n\n    // Traverse iconv.encodings to find actual codec.\n    var codecOptions = {};\n    while (true) {\n        var codec = iconv._codecDataCache[enc];\n        if (codec)\n            return codec;\n\n        var codecDef = iconv.encodings[enc];\n\n        switch (typeof codecDef) {\n            case \"string\": // Direct alias to other encoding.\n                enc = codecDef;\n                break;\n\n            case \"object\": // Alias with options. Can be layered.\n                for (var key in codecDef)\n                    codecOptions[key] = codecDef[key];\n\n                if (!codecOptions.encodingName)\n                    codecOptions.encodingName = enc;\n                \n                enc = codecDef.type;\n                break;\n\n            case \"function\": // Codec itself.\n                if (!codecOptions.encodingName)\n                    codecOptions.encodingName = enc;\n\n                // The codec function must load all tables and return object with .encoder and .decoder methods.\n                // It'll be called only once (for each different options object).\n                codec = new codecDef(codecOptions, iconv);\n\n                iconv._codecDataCache[codecOptions.encodingName] = codec; // Save it to be reused later.\n                return codec;\n\n            default:\n                throw new Error(\"Encoding not recognized: '\" + encoding + \"' (searched as: '\"+enc+\"')\");\n        }\n    }\n}\n\niconv.getEncoder = function getEncoder(encoding, options) {\n    var codec = iconv.getCodec(encoding),\n        encoder = new codec.encoder(options, codec);\n\n    if (codec.bomAware && options && options.addBOM)\n        encoder = new bomHandling.PrependBOM(encoder, options);\n\n    return encoder;\n}\n\niconv.getDecoder = function getDecoder(encoding, options) {\n    var codec = iconv.getCodec(encoding),\n        decoder = new codec.decoder(options, codec);\n\n    if (codec.bomAware && !(options && options.stripBOM === false))\n        decoder = new bomHandling.StripBOM(decoder, options);\n\n    return decoder;\n}\n\n\n// Load extensions in Node. All of them are omitted in Browserify build via 'browser' field in package.json.\nvar nodeVer = typeof process !== 'undefined' && process.versions && process.versions.node;\nif (nodeVer) {\n\n    // Load streaming support in Node v0.10+\n    var nodeVerArr = nodeVer.split(\".\").map(Number);\n    if (nodeVerArr[0] > 0 || nodeVerArr[1] >= 10) {\n        require(\"./streams\")(iconv);\n    }\n\n    // Load Node primitive extensions.\n    require(\"./extend-node\")(iconv);\n}\n\nif (\"Ā\" != \"\\u0100\") {\n    console.error(\"iconv-lite warning: javascript files use encoding different from utf-8. See https://github.com/ashtuchkin/iconv-lite/wiki/Javascript-source-file-encodings for more info.\");\n}\n","map":{"mappings":[{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":1,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":2,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":3,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":4,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":5,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":6,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":7,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":8,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":9,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":10,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":11,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":12,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":13,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":14,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":15,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":16,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":17,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":18,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":19,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":20,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":21,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":22,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":23,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":24,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":25,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":26,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":27,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":28,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":29,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":30,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":31,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":32,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":33,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":34,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":35,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":36,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":37,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":38,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":39,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":40,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":41,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":42,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":43,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":44,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":45,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":46,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":47,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":48,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":49,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":50,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":51,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":52,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":53,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":54,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":55,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":56,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":57,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":58,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":59,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":60,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":61,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":62,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":63,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":64,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":65,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":66,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":67,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":68,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":69,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":70,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":71,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":72,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":73,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":74,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":75,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":76,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":77,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":78,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":79,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":80,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":81,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":82,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":83,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":84,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":85,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":86,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":87,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":88,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":89,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":90,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":91,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":92,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":93,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":94,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":95,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":96,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":97,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":98,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":99,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":100,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":101,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":102,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":103,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":104,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":105,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":106,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":107,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":108,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":109,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":110,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":111,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":112,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":113,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":114,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":115,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":116,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":117,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":118,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":119,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":120,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":121,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":122,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":123,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":124,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":125,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":126,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":127,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":128,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":129,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":130,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":131,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":132,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":133,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":134,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":135,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":136,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":137,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":138,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":139,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":140,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":141,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":142,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":143,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":144,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":145,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":146,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":147,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":148,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/iconv-lite/lib/index.js","original":{"line":149,"column":0},"generated":{"line":151,"column":0}}],"sources":{"../node_modules/iconv-lite/lib/index.js":"\"use strict\";\n\n// Some environments don't have global Buffer (e.g. React Native).\n// Solution would be installing npm modules \"buffer\" and \"stream\" explicitly.\nvar Buffer = require(\"buffer\").Buffer;\n\nvar bomHandling = require(\"./bom-handling\"),\n    iconv = module.exports;\n\n// All codecs and aliases are kept here, keyed by encoding name/alias.\n// They are lazy loaded in `iconv.getCodec` from `encodings/index.js`.\niconv.encodings = null;\n\n// Characters emitted in case of error.\niconv.defaultCharUnicode = '�';\niconv.defaultCharSingleByte = '?';\n\n// Public API.\niconv.encode = function encode(str, encoding, options) {\n    str = \"\" + (str || \"\"); // Ensure string.\n\n    var encoder = iconv.getEncoder(encoding, options);\n\n    var res = encoder.write(str);\n    var trail = encoder.end();\n    \n    return (trail && trail.length > 0) ? Buffer.concat([res, trail]) : res;\n}\n\niconv.decode = function decode(buf, encoding, options) {\n    if (typeof buf === 'string') {\n        if (!iconv.skipDecodeWarning) {\n            console.error('Iconv-lite warning: decode()-ing strings is deprecated. Refer to https://github.com/ashtuchkin/iconv-lite/wiki/Use-Buffers-when-decoding');\n            iconv.skipDecodeWarning = true;\n        }\n\n        buf = new Buffer(\"\" + (buf || \"\"), \"binary\"); // Ensure buffer.\n    }\n\n    var decoder = iconv.getDecoder(encoding, options);\n\n    var res = decoder.write(buf);\n    var trail = decoder.end();\n\n    return trail ? (res + trail) : res;\n}\n\niconv.encodingExists = function encodingExists(enc) {\n    try {\n        iconv.getCodec(enc);\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\n\n// Legacy aliases to convert functions\niconv.toEncoding = iconv.encode;\niconv.fromEncoding = iconv.decode;\n\n// Search for a codec in iconv.encodings. Cache codec data in iconv._codecDataCache.\niconv._codecDataCache = {};\niconv.getCodec = function getCodec(encoding) {\n    if (!iconv.encodings)\n        iconv.encodings = require(\"../encodings\"); // Lazy load all encoding definitions.\n    \n    // Canonicalize encoding name: strip all non-alphanumeric chars and appended year.\n    var enc = (''+encoding).toLowerCase().replace(/[^0-9a-z]|:\\d{4}$/g, \"\");\n\n    // Traverse iconv.encodings to find actual codec.\n    var codecOptions = {};\n    while (true) {\n        var codec = iconv._codecDataCache[enc];\n        if (codec)\n            return codec;\n\n        var codecDef = iconv.encodings[enc];\n\n        switch (typeof codecDef) {\n            case \"string\": // Direct alias to other encoding.\n                enc = codecDef;\n                break;\n\n            case \"object\": // Alias with options. Can be layered.\n                for (var key in codecDef)\n                    codecOptions[key] = codecDef[key];\n\n                if (!codecOptions.encodingName)\n                    codecOptions.encodingName = enc;\n                \n                enc = codecDef.type;\n                break;\n\n            case \"function\": // Codec itself.\n                if (!codecOptions.encodingName)\n                    codecOptions.encodingName = enc;\n\n                // The codec function must load all tables and return object with .encoder and .decoder methods.\n                // It'll be called only once (for each different options object).\n                codec = new codecDef(codecOptions, iconv);\n\n                iconv._codecDataCache[codecOptions.encodingName] = codec; // Save it to be reused later.\n                return codec;\n\n            default:\n                throw new Error(\"Encoding not recognized: '\" + encoding + \"' (searched as: '\"+enc+\"')\");\n        }\n    }\n}\n\niconv.getEncoder = function getEncoder(encoding, options) {\n    var codec = iconv.getCodec(encoding),\n        encoder = new codec.encoder(options, codec);\n\n    if (codec.bomAware && options && options.addBOM)\n        encoder = new bomHandling.PrependBOM(encoder, options);\n\n    return encoder;\n}\n\niconv.getDecoder = function getDecoder(encoding, options) {\n    var codec = iconv.getCodec(encoding),\n        decoder = new codec.decoder(options, codec);\n\n    if (codec.bomAware && !(options && options.stripBOM === false))\n        decoder = new bomHandling.StripBOM(decoder, options);\n\n    return decoder;\n}\n\n\n// Load extensions in Node. All of them are omitted in Browserify build via 'browser' field in package.json.\nvar nodeVer = typeof process !== 'undefined' && process.versions && process.versions.node;\nif (nodeVer) {\n\n    // Load streaming support in Node v0.10+\n    var nodeVerArr = nodeVer.split(\".\").map(Number);\n    if (nodeVerArr[0] > 0 || nodeVerArr[1] >= 10) {\n        require(\"./streams\")(iconv);\n    }\n\n    // Load Node primitive extensions.\n    require(\"./extend-node\")(iconv);\n}\n\nif (\"Ā\" != \"\\u0100\") {\n    console.error(\"iconv-lite warning: javascript files use encoding different from utf-8. See https://github.com/ashtuchkin/iconv-lite/wiki/Javascript-source-file-encodings for more info.\");\n}\n"},"lineCount":151}},"hash":"2c6c7a4b5c0f1ed9af39b459e5bea0c2","cacheData":{"env":{}}}