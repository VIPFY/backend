{"dependencies":[{"name":"../../utils","loc":{"line":3,"column":22}},{"name":"../../sql-string","loc":{"line":4,"column":26}},{"name":"../../model","loc":{"line":5,"column":22}},{"name":"../../data-types","loc":{"line":6,"column":26}},{"name":"util","loc":{"line":7,"column":21}},{"name":"lodash","loc":{"line":19,"column":29}},{"name":"dottie","loc":{"line":9,"column":23}},{"name":"../../associations/base","loc":{"line":10,"column":28}},{"name":"../../associations/belongs-to","loc":{"line":11,"column":26}},{"name":"../../associations/belongs-to-many","loc":{"line":12,"column":30}},{"name":"../../associations/has-many","loc":{"line":13,"column":24}},{"name":"../../operators","loc":{"line":14,"column":19}},{"name":"uuid","loc":{"line":15,"column":21}},{"name":"semver","loc":{"line":16,"column":23}},{"name":"buffer"}],"generated":{"js":"var Buffer = require(\"buffer\").Buffer;\n'use strict';\n\nconst Utils = require('../../utils');\nconst SqlString = require('../../sql-string');\nconst Model = require('../../model');\nconst DataTypes = require('../../data-types');\nconst util = require('util');\nconst _ = require('lodash');\nconst Dottie = require('dottie');\nconst Association = require('../../associations/base');\nconst BelongsTo = require('../../associations/belongs-to');\nconst BelongsToMany = require('../../associations/belongs-to-many');\nconst HasMany = require('../../associations/has-many');\nconst Op = require('../../operators');\nconst uuid = require('uuid');\nconst semver = require('semver');\n\nconst QueryGenerator = {\n  _templateSettings: require('lodash').runInContext().templateSettings,\n  options: {},\n\n  extractTableDetails(tableName, options) {\n    options = options || {};\n    tableName = tableName || {};\n    return {\n      schema: tableName.schema || options.schema || 'public',\n      tableName: _.isPlainObject(tableName) ? tableName.tableName : tableName,\n      delimiter: tableName.delimiter || options.delimiter || '.'\n    };\n  },\n\n  addSchema(param) {\n    const self = this;\n\n    if (!param._schema) return param.tableName || param;\n\n    return {\n      tableName: param.tableName || param,\n      table: param.tableName || param,\n      name: param.name || param,\n      schema: param._schema,\n      delimiter: param._schemaDelimiter || '.',\n      toString() {\n        return self.quoteTable(this);\n      }\n    };\n  },\n\n  dropSchema(tableName, options) {\n    return this.dropTableQuery(tableName, options);\n  },\n\n  describeTableQuery(tableName, schema, schemaDelimiter) {\n    const table = this.quoteTable(\n      this.addSchema({\n        tableName,\n        _schema: schema,\n        _schemaDelimiter: schemaDelimiter\n      })\n    );\n\n    return 'DESCRIBE ' + table + ';';\n  },\n\n  dropTableQuery(tableName) {\n    return `DROP TABLE IF EXISTS ${this.quoteTable(tableName)};`;\n  },\n\n  renameTableQuery(before, after) {\n    return `ALTER TABLE ${this.quoteTable(before)} RENAME TO ${this.quoteTable(after)};`;\n  },\n\n  /*\n    Returns an insert into command. Parameters: table name + hash of attribute-value-pairs.\n   @private\n  */\n  insertQuery(table, valueHash, modelAttributes, options) {\n    options = options || {};\n    _.defaults(options, this.options);\n\n    const modelAttributeMap = {};\n    const fields = [];\n    const values = [];\n    let query;\n    let valueQuery = '<%= tmpTable %>INSERT<%= ignoreDuplicates %> INTO <%= table %> (<%= attributes %>)<%= output %> VALUES (<%= values %>)';\n    let emptyQuery = '<%= tmpTable %>INSERT<%= ignoreDuplicates %> INTO <%= table %><%= output %>';\n    let outputFragment;\n    let identityWrapperRequired = false;\n    let tmpTable = '';         //tmpTable declaration for trigger\n\n    if (modelAttributes) {\n      _.each(modelAttributes, (attribute, key) => {\n        modelAttributeMap[key] = attribute;\n        if (attribute.field) {\n          modelAttributeMap[attribute.field] = attribute;\n        }\n      });\n    }\n\n    if (this._dialect.supports['DEFAULT VALUES']) {\n      emptyQuery += ' DEFAULT VALUES';\n    } else if (this._dialect.supports['VALUES ()']) {\n      emptyQuery += ' VALUES ()';\n    }\n\n    if (this._dialect.supports.returnValues && options.returning) {\n      if (this._dialect.supports.returnValues.returning) {\n        valueQuery += ' RETURNING *';\n        emptyQuery += ' RETURNING *';\n      } else if (this._dialect.supports.returnValues.output) {\n        outputFragment = ' OUTPUT INSERTED.*';\n\n        //To capture output rows when there is a trigger on MSSQL DB\n        if (modelAttributes && options.hasTrigger && this._dialect.supports.tmpTableTrigger) {\n\n          let tmpColumns = '';\n          let outputColumns = '';\n          tmpTable = 'declare @tmp table (<%= columns %>); ';\n\n          for (const modelKey in modelAttributes) {\n            const attribute = modelAttributes[modelKey];\n            if (!(attribute.type instanceof DataTypes.VIRTUAL)) {\n              if (tmpColumns.length > 0) {\n                tmpColumns += ',';\n                outputColumns += ',';\n              }\n\n              tmpColumns += this.quoteIdentifier(attribute.field) + ' ' + attribute.type.toSql();\n              outputColumns += 'INSERTED.' + this.quoteIdentifier(attribute.field);\n            }\n          }\n\n          const replacement = {\n            columns: tmpColumns\n          };\n\n          tmpTable = _.template(tmpTable, this._templateSettings)(replacement).trim();\n          outputFragment = ' OUTPUT ' + outputColumns + ' into @tmp';\n          const selectFromTmp = ';select * from @tmp';\n\n          valueQuery += selectFromTmp;\n          emptyQuery += selectFromTmp;\n        }\n      }\n    }\n\n    if (this._dialect.supports.EXCEPTION && options.exception) {\n      // Mostly for internal use, so we expect the user to know what he's doing!\n      // pg_temp functions are private per connection, so we never risk this function interfering with another one.\n      if (semver.gte(this.sequelize.options.databaseVersion, '9.2.0')) {\n        // >= 9.2 - Use a UUID but prefix with 'func_' (numbers first not allowed)\n        const delimiter = '$func_' + uuid.v4().replace(/-/g, '') + '$';\n\n        options.exception = 'WHEN unique_violation THEN GET STACKED DIAGNOSTICS sequelize_caught_exception = PG_EXCEPTION_DETAIL;';\n        valueQuery = 'CREATE OR REPLACE FUNCTION pg_temp.testfunc(OUT response <%= table %>, OUT sequelize_caught_exception text) RETURNS RECORD AS ' + delimiter +\n          ' BEGIN ' + valueQuery + ' INTO response; EXCEPTION ' + options.exception + ' END ' + delimiter +\n          ' LANGUAGE plpgsql; SELECT (testfunc.response).*, testfunc.sequelize_caught_exception FROM pg_temp.testfunc(); DROP FUNCTION IF EXISTS pg_temp.testfunc()';\n      } else {\n        options.exception = 'WHEN unique_violation THEN NULL;';\n        valueQuery = 'CREATE OR REPLACE FUNCTION pg_temp.testfunc() RETURNS SETOF <%= table %> AS $body$ BEGIN RETURN QUERY ' + valueQuery + '; EXCEPTION ' + options.exception + ' END; $body$ LANGUAGE plpgsql; SELECT * FROM pg_temp.testfunc(); DROP FUNCTION IF EXISTS pg_temp.testfunc();';\n      }\n    }\n\n    if (this._dialect.supports['ON DUPLICATE KEY'] && options.onDuplicate) {\n      valueQuery += ' ON DUPLICATE KEY ' + options.onDuplicate;\n      emptyQuery += ' ON DUPLICATE KEY ' + options.onDuplicate;\n    }\n\n    valueHash = Utils.removeNullValuesFromHash(valueHash, this.options.omitNull);\n    for (const key in valueHash) {\n      if (valueHash.hasOwnProperty(key)) {\n        const value = valueHash[key];\n        fields.push(this.quoteIdentifier(key));\n\n        // SERIALS' can't be NULL in postgresql, use DEFAULT where supported\n        if (modelAttributeMap && modelAttributeMap[key] && modelAttributeMap[key].autoIncrement === true && !value) {\n          if (!this._dialect.supports.autoIncrement.defaultValue) {\n            fields.splice(-1, 1);\n          } else if (this._dialect.supports.DEFAULT) {\n            values.push('DEFAULT');\n          } else {\n            values.push(this.escape(null));\n          }\n        } else {\n          if (modelAttributeMap && modelAttributeMap[key] && modelAttributeMap[key].autoIncrement === true) {\n            identityWrapperRequired = true;\n          }\n\n          values.push(this.escape(value, modelAttributeMap && modelAttributeMap[key] || undefined, { context: 'INSERT' }));\n        }\n      }\n    }\n\n    const replacements = {\n      ignoreDuplicates: options.ignoreDuplicates ? this._dialect.supports.IGNORE : '',\n      table: this.quoteTable(table),\n      attributes: fields.join(','),\n      output: outputFragment,\n      values: values.join(','),\n      tmpTable\n    };\n\n    query = (replacements.attributes.length ? valueQuery : emptyQuery) + ';';\n    if (identityWrapperRequired && this._dialect.supports.autoIncrement.identityInsert) {\n      query = [\n        'SET IDENTITY_INSERT', this.quoteTable(table), 'ON;',\n        query,\n        'SET IDENTITY_INSERT', this.quoteTable(table), 'OFF;'\n      ].join(' ');\n    }\n\n    return _.template(query, this._templateSettings)(replacements);\n  },\n\n  /*\n    Returns an insert into command for multiple values.\n    Parameters: table name + list of hashes of attribute-value-pairs.\n   @private\n  */\n  bulkInsertQuery(tableName, attrValueHashes, options, rawAttributes) {\n    options = options || {};\n    rawAttributes = rawAttributes || {};\n\n    const query = 'INSERT<%= ignoreDuplicates %> INTO <%= table %> (<%= attributes %>) VALUES <%= tuples %><%= onDuplicateKeyUpdate %><%= returning %>;';\n    const tuples = [];\n    const serials = {};\n    const allAttributes = [];\n    let onDuplicateKeyUpdate = '';\n\n    for (const attrValueHash of attrValueHashes) {\n      _.forOwn(attrValueHash, (value, key) => {\n        if (allAttributes.indexOf(key) === -1) {\n          allAttributes.push(key);\n        }\n\n        if (rawAttributes[key] && rawAttributes[key].autoIncrement === true) {\n          serials[key] = true;\n        }\n      });\n    }\n\n    for (const attrValueHash of attrValueHashes) {\n      tuples.push('(' + allAttributes.map(key => {\n        if (this._dialect.supports.bulkDefault && serials[key] === true) {\n          return attrValueHash[key] || 'DEFAULT';\n        }\n        return this.escape(attrValueHash[key], rawAttributes[key], { context: 'INSERT' });\n      }).join(',') + ')');\n    }\n\n    if (this._dialect.supports.updateOnDuplicate && options.updateOnDuplicate) {\n      onDuplicateKeyUpdate += ' ON DUPLICATE KEY UPDATE ' + options.updateOnDuplicate.map(attr => {\n        const field = rawAttributes && rawAttributes[attr] && rawAttributes[attr].field || attr;\n        const key = this.quoteIdentifier(field);\n        return key + '=VALUES(' + key + ')';\n      }).join(',');\n    }\n\n    const replacements = {\n      ignoreDuplicates: options.ignoreDuplicates ? this._dialect.supports.ignoreDuplicates : '',\n      table: this.quoteTable(tableName),\n      attributes: allAttributes.map(attr => this.quoteIdentifier(attr)).join(','),\n      tuples: tuples.join(','),\n      onDuplicateKeyUpdate,\n      returning: this._dialect.supports.returnValues && options.returning ? ' RETURNING *' : ''\n    };\n\n    return _.template(query, this._templateSettings)(replacements);\n  },\n\n  /*\n    Returns an update query.\n    Parameters:\n      - tableName -> Name of the table\n      - values -> A hash with attribute-value-pairs\n      - where -> A hash with conditions (e.g. {name: 'foo'})\n                 OR an ID as integer\n                 OR a string with conditions (e.g. 'name=\"foo\"').\n                 If you use a string, you have to escape it on your own.\n   @private\n  */\n  updateQuery(tableName, attrValueHash, where, options, attributes) {\n    options = options || {};\n    _.defaults(options, this.options);\n\n    attrValueHash = Utils.removeNullValuesFromHash(attrValueHash, options.omitNull, options);\n\n    const values = [];\n    const modelAttributeMap = {};\n    let query = '<%= tmpTable %>UPDATE <%= table %> SET <%= values %><%= output %> <%= where %>';\n    let outputFragment;\n    let tmpTable = '';        // tmpTable declaration for trigger\n    let selectFromTmp = '';   // Select statement for trigger\n\n    if (this._dialect.supports['LIMIT ON UPDATE'] && options.limit) {\n      if (this.dialect !== 'mssql') {\n        query += ' LIMIT ' + this.escape(options.limit) + ' ';\n      }\n    }\n\n    if (this._dialect.supports.returnValues) {\n      if (this._dialect.supports.returnValues.output) {\n        // we always need this for mssql\n        outputFragment = ' OUTPUT INSERTED.*';\n\n        //To capture output rows when there is a trigger on MSSQL DB\n        if (attributes && options.hasTrigger && this._dialect.supports.tmpTableTrigger) {\n          tmpTable = 'declare @tmp table (<%= columns %>); ';\n          let tmpColumns = '';\n          let outputColumns = '';\n\n          for (const modelKey in attributes) {\n            const attribute = attributes[modelKey];\n            if (!(attribute.type instanceof DataTypes.VIRTUAL)) {\n              if (tmpColumns.length > 0) {\n                tmpColumns += ',';\n                outputColumns += ',';\n              }\n\n              tmpColumns += this.quoteIdentifier(attribute.field) + ' ' + attribute.type.toSql();\n              outputColumns += 'INSERTED.' + this.quoteIdentifier(attribute.field);\n            }\n          }\n\n          const replacement ={\n            columns: tmpColumns\n          };\n\n          tmpTable = _.template(tmpTable, this._templateSettings)(replacement).trim();\n          outputFragment = ' OUTPUT ' + outputColumns + ' into @tmp';\n          selectFromTmp = ';select * from @tmp';\n\n          query += selectFromTmp;\n        }\n      } else if (this._dialect.supports.returnValues && options.returning) {\n        // ensure that the return output is properly mapped to model fields.\n        options.mapToModel = true;\n        query += ' RETURNING *';\n      }\n    }\n\n    if (attributes) {\n      _.each(attributes, (attribute, key) => {\n        modelAttributeMap[key] = attribute;\n        if (attribute.field) {\n          modelAttributeMap[attribute.field] = attribute;\n        }\n      });\n    }\n\n    for (const key in attrValueHash) {\n      if (modelAttributeMap && modelAttributeMap[key] &&\n          modelAttributeMap[key].autoIncrement === true &&\n          !this._dialect.supports.autoIncrement.update) {\n        // not allowed to update identity column\n        continue;\n      }\n\n      const value = attrValueHash[key];\n      values.push(this.quoteIdentifier(key) + '=' + this.escape(value, modelAttributeMap && modelAttributeMap[key] || undefined, { context: 'UPDATE' }));\n    }\n\n    const replacements = {\n      table: this.quoteTable(tableName),\n      values: values.join(','),\n      output: outputFragment,\n      where: this.whereQuery(where, options),\n      tmpTable\n    };\n\n    if (values.length === 0) {\n      return '';\n    }\n\n    return _.template(query, this._templateSettings)(replacements).trim();\n  },\n\n  /*\n    Returns an update query.\n    Parameters:\n      - operator -> String with the arithmetic operator (e.g. '+' or '-')\n      - tableName -> Name of the table\n      - values -> A hash with attribute-value-pairs\n      - where -> A hash with conditions (e.g. {name: 'foo'})\n                 OR an ID as integer\n                 OR a string with conditions (e.g. 'name=\"foo\"').\n                 If you use a string, you have to escape it on your own.\n   @private\n  */\n  arithmeticQuery(operator, tableName, attrValueHash, where, options, attributes) {\n    options = options || {};\n    _.defaults(options, { returning: true });\n\n    attrValueHash = Utils.removeNullValuesFromHash(attrValueHash, this.options.omitNull);\n\n    const values = [];\n    let query = 'UPDATE <%= table %> SET <%= values %><%= output %> <%= where %>';\n    let outputFragment;\n\n    if (this._dialect.supports.returnValues && options.returning) {\n      if (this._dialect.supports.returnValues.returning) {\n        options.mapToModel = true;\n        query += ' RETURNING *';\n      } else if (this._dialect.supports.returnValues.output) {\n        outputFragment = ' OUTPUT INSERTED.*';\n      }\n    }\n\n    for (const key in attrValueHash) {\n      const value = attrValueHash[key];\n      values.push(this.quoteIdentifier(key) + '=' + this.quoteIdentifier(key) + operator + ' ' + this.escape(value));\n    }\n\n    attributes = attributes || {};\n    for (const key in attributes) {\n      const value = attributes[key];\n      values.push(this.quoteIdentifier(key) + '=' + this.escape(value));\n    }\n\n    const replacements = {\n      table: this.quoteTable(tableName),\n      values: values.join(','),\n      output: outputFragment,\n      where: this.whereQuery(where)\n    };\n\n    return _.template(query, this._templateSettings)(replacements);\n  },\n\n  nameIndexes(indexes, rawTablename) {\n    if (typeof rawTablename === 'object') {\n      // don't include schema in the index name\n      rawTablename = rawTablename.tableName;\n    }\n\n    return _.map(indexes, index => {\n      if (!index.hasOwnProperty('name')) {\n        const onlyAttributeNames = index.fields.map(field => typeof field === 'string' ? field : field.name || field.attribute);\n        index.name = Utils.underscore(rawTablename + '_' + onlyAttributeNames.join('_'));\n      }\n\n      return index;\n    });\n  },\n\n  /*\n    Returns an add index query.\n    Parameters:\n      - tableName -> Name of an existing table, possibly with schema.\n      - options:\n        - type: UNIQUE|FULLTEXT|SPATIAL\n        - name: The name of the index. Default is <table>_<attr1>_<attr2>\n        - fields: An array of attributes as string or as hash.\n                  If the attribute is a hash, it must have the following content:\n                  - name: The name of the attribute/column\n                  - length: An integer. Optional\n                  - order: 'ASC' or 'DESC'. Optional\n        - parser\n      - rawTablename, the name of the table, without schema. Used to create the name of the index\n   @private\n  */\n  addIndexQuery(tableName, attributes, options, rawTablename) {\n    options = options || {};\n\n    if (!Array.isArray(attributes)) {\n      options = attributes;\n      attributes = undefined;\n    } else {\n      options.fields = attributes;\n    }\n\n    // Backwards compatability\n    if (options.indexName) {\n      options.name = options.indexName;\n    }\n    if (options.indicesType) {\n      options.type = options.indicesType;\n    }\n    if (options.indexType || options.method) {\n      options.using = options.indexType || options.method;\n    }\n\n    options.prefix = options.prefix || rawTablename || tableName;\n    if (options.prefix && _.isString(options.prefix)) {\n      options.prefix = options.prefix.replace(/\\./g, '_');\n      options.prefix = options.prefix.replace(/(\\\"|\\')/g, '');\n    }\n\n    const fieldsSql = options.fields.map(field => {\n      if (typeof field === 'string') {\n        return this.quoteIdentifier(field);\n      } else if (field instanceof Utils.SequelizeMethod) {\n        return this.handleSequelizeMethod(field);\n      } else {\n        let result = '';\n\n        if (field.attribute) {\n          field.name = field.attribute;\n        }\n\n        if (!field.name) {\n          throw new Error('The following index field has no name: ' + util.inspect(field));\n        }\n\n        result += this.quoteIdentifier(field.name);\n\n        if (this._dialect.supports.index.collate && field.collate) {\n          result += ' COLLATE ' + this.quoteIdentifier(field.collate);\n        }\n\n        if (this._dialect.supports.index.length && field.length) {\n          result += '(' + field.length + ')';\n        }\n\n        if (field.order) {\n          result += ' ' + field.order;\n        }\n\n        return result;\n      }\n    });\n\n    if (!options.name) {\n      // Mostly for cases where addIndex is called directly by the user without an options object (for example in migrations)\n      // All calls that go through sequelize should already have a name\n      options = this.nameIndexes([options], options.prefix)[0];\n    }\n\n    options = Model._conformIndex(options);\n\n    if (!this._dialect.supports.index.type) {\n      delete options.type;\n    }\n\n    if (options.where) {\n      options.where = this.whereQuery(options.where);\n    }\n\n    if (_.isString(tableName)) {\n      tableName = this.quoteIdentifiers(tableName);\n    } else {\n      tableName = this.quoteTable(tableName);\n    }\n\n    const concurrently = this._dialect.supports.index.concurrently && options.concurrently ? 'CONCURRENTLY' : undefined;\n    let ind;\n    if (this._dialect.supports.indexViaAlter) {\n      ind = [\n        'ALTER TABLE',\n        tableName,\n        concurrently,\n        'ADD'\n      ];\n    } else {\n      ind = ['CREATE'];\n    }\n\n    ind = ind.concat(\n      options.unique ? 'UNIQUE' : '',\n      options.type, 'INDEX',\n      !this._dialect.supports.indexViaAlter ? concurrently : undefined,\n      this.quoteIdentifiers(options.name),\n      this._dialect.supports.index.using === 1 && options.using ? 'USING ' + options.using : '',\n      !this._dialect.supports.indexViaAlter ? 'ON ' + tableName : undefined,\n      this._dialect.supports.index.using === 2 && options.using ? 'USING ' + options.using : '',\n      '(' + fieldsSql.join(', ') + (options.operator ? ' '+options.operator : '') + ')',\n      this._dialect.supports.index.parser && options.parser ? 'WITH PARSER ' + options.parser : undefined,\n      this._dialect.supports.index.where && options.where ? options.where : undefined\n    );\n\n    return _.compact(ind).join(' ');\n  },\n\n  addConstraintQuery(tableName, options) {\n    options = options || {};\n    const constraintSnippet = this.getConstraintSnippet(tableName, options);\n\n    if (typeof tableName === 'string') {\n      tableName = this.quoteIdentifiers(tableName);\n    } else {\n      tableName = this.quoteTable(tableName);\n    }\n\n    return `ALTER TABLE ${tableName} ADD ${constraintSnippet};`;\n  },\n\n  getConstraintSnippet(tableName, options) {\n    let constraintSnippet, constraintName;\n\n    const fieldsSql = options.fields.map(field => {\n      if (typeof field === 'string') {\n        return this.quoteIdentifier(field);\n      } else if (field._isSequelizeMethod) {\n        return this.handleSequelizeMethod(field);\n      } else {\n        let result = '';\n\n        if (field.attribute) {\n          field.name = field.attribute;\n        }\n\n        if (!field.name) {\n          throw new Error('The following index field has no name: ' + field);\n        }\n\n        result += this.quoteIdentifier(field.name);\n        return result;\n      }\n    });\n\n    const fieldsSqlQuotedString = fieldsSql.join(', ');\n    const fieldsSqlString = fieldsSql.join('_');\n\n    switch (options.type.toUpperCase()) {\n      case 'UNIQUE':\n        constraintName = this.quoteIdentifier(options.name || `${tableName}_${fieldsSqlString}_uk`);\n        constraintSnippet = `CONSTRAINT ${constraintName} UNIQUE (${fieldsSqlQuotedString})`;\n        break;\n      case 'CHECK':\n        options.where = this.whereItemsQuery(options.where);\n        constraintName = this.quoteIdentifier(options.name || `${tableName}_${fieldsSqlString}_ck`);\n        constraintSnippet = `CONSTRAINT ${constraintName} CHECK (${options.where})`;\n        break;\n      case 'DEFAULT':\n        if (options.defaultValue === undefined) {\n          throw new Error('Default value must be specifed for DEFAULT CONSTRAINT');\n        }\n\n        if (this._dialect.name !== 'mssql') {\n          throw new Error('Default constraints are supported only for MSSQL dialect.');\n        }\n\n        constraintName = this.quoteIdentifier(options.name || `${tableName}_${fieldsSqlString}_df`);\n        constraintSnippet = `CONSTRAINT ${constraintName} DEFAULT (${this.escape(options.defaultValue)}) FOR ${fieldsSql[0]}`;\n        break;\n      case 'PRIMARY KEY':\n        constraintName = this.quoteIdentifier(options.name || `${tableName}_${fieldsSqlString}_pk`);\n        constraintSnippet = `CONSTRAINT ${constraintName} PRIMARY KEY (${fieldsSqlQuotedString})`;\n        break;\n      case 'FOREIGN KEY':\n        const references = options.references;\n        if (!references || !references.table || !references.field) {\n          throw new Error('references object with table and field must be specified');\n        }\n        constraintName = this.quoteIdentifier(options.name || `${tableName}_${fieldsSqlString}_${references.table}_fk`);\n        const referencesSnippet = `${this.quoteTable(references.table)} (${this.quoteIdentifier(references.field)})`;\n        constraintSnippet = `CONSTRAINT ${constraintName} `;\n        constraintSnippet += `FOREIGN KEY (${fieldsSqlQuotedString}) REFERENCES ${referencesSnippet}`;\n        if (options.onUpdate) {\n          constraintSnippet += ` ON UPDATE ${options.onUpdate.toUpperCase()}`;\n        }\n        if (options.onDelete) {\n          constraintSnippet += ` ON DELETE ${options.onDelete.toUpperCase()}`;\n        }\n        break;\n      default: throw new Error(`${options.type} is invalid.`);\n    }\n    return constraintSnippet;\n  },\n\n  removeConstraintQuery(tableName, constraintName) {\n    return `ALTER TABLE ${this.quoteIdentifiers(tableName)} DROP CONSTRAINT ${this.quoteIdentifiers(constraintName)}`;\n  },\n\n  quoteTable(param, as) {\n    let table = '';\n\n    if (as === true) {\n      as = param.as || param.name || param;\n    }\n\n    if (_.isObject(param)) {\n      if (this._dialect.supports.schemas) {\n        if (param.schema) {\n          table += this.quoteIdentifier(param.schema) + '.';\n        }\n\n        table += this.quoteIdentifier(param.tableName);\n      } else {\n        if (param.schema) {\n          table += param.schema + (param.delimiter || '.');\n        }\n\n        table += param.tableName;\n        table = this.quoteIdentifier(table);\n      }\n\n\n    } else {\n      table = this.quoteIdentifier(param);\n    }\n\n    if (as) {\n      table += ' AS ' + this.quoteIdentifier(as);\n    }\n    return table;\n  },\n\n  /*\n    Quote an object based on its type. This is a more general version of quoteIdentifiers\n    Strings: should proxy to quoteIdentifiers\n    Arrays:\n      * Expects array in the form: [<model> (optional), <model> (optional),... String, String (optional)]\n        Each <model> can be a model, or an object {model: Model, as: String}, matching include, or an\n        association object, or the name of an association.\n      * Zero or more models can be included in the array and are used to trace a path through the tree of\n        included nested associations. This produces the correct table name for the ORDER BY/GROUP BY SQL\n        and quotes it.\n      * If a single string is appended to end of array, it is quoted.\n        If two strings appended, the 1st string is quoted, the 2nd string unquoted.\n    Objects:\n      * If raw is set, that value should be returned verbatim, without quoting\n      * If fn is set, the string should start with the value of fn, starting paren, followed by\n        the values of cols (which is assumed to be an array), quoted and joined with ', ',\n        unless they are themselves objects\n      * If direction is set, should be prepended\n\n    Currently this function is only used for ordering / grouping columns and Sequelize.col(), but it could\n    potentially also be used for other places where we want to be able to call SQL functions (e.g. as default values)\n   @private\n  */\n  quote(collection, parent, connector) {\n    // init\n    const validOrderOptions = [\n      'ASC',\n      'DESC',\n      'ASC NULLS LAST',\n      'DESC NULLS LAST',\n      'ASC NULLS FIRST',\n      'DESC NULLS FIRST',\n      'NULLS FIRST',\n      'NULLS LAST'\n    ];\n\n    // default\n    connector = connector || '.';\n\n    // just quote as identifiers if string\n    if (typeof collection === 'string') {\n      return this.quoteIdentifiers(collection);\n    } else if (Array.isArray(collection)) {\n      // iterate through the collection and mutate objects into associations\n      collection.forEach((item, index) => {\n        const previous = collection[index - 1];\n        let previousAssociation;\n        let previousModel;\n\n        // set the previous as the parent when previous is undefined or the target of the association\n        if (!previous && parent !== undefined) {\n          previousModel = parent;\n        } else if (previous && previous instanceof Association) {\n          previousAssociation = previous;\n          previousModel = previous.target;\n        }\n\n        // if the previous item is a model, then attempt getting an association\n        if (previousModel && previousModel.prototype instanceof Model) {\n          let model;\n          let as;\n\n          if (typeof item === 'function' && item.prototype instanceof Model) {\n            // set\n            model = item;\n          } else if (_.isPlainObject(item) && item.model && item.model.prototype instanceof Model) {\n            // set\n            model = item.model;\n            as = item.as;\n          }\n\n          if (model) {\n            // set the as to either the through name or the model name\n            if (!as && previousAssociation && previousAssociation instanceof Association && previousAssociation.through && previousAssociation.through.model === model) {\n              // get from previous association\n              item = new Association(previousModel, model, {\n                as: model.name\n              });\n            } else {\n              // get association from previous model\n              item = previousModel.getAssociationForAlias(model, as);\n\n              // attempt to use the model name if the item is still null\n              if (!item) {\n                item = previousModel.getAssociationForAlias(model, model.name);\n              }\n            }\n\n            // make sure we have an association\n            if (!(item instanceof Association)) {\n              throw new Error(util.format('Unable to find a valid association for model, \\'%s\\'', model.name));\n            }\n          }\n        }\n\n        if (typeof item === 'string') {\n          // get order index\n          const orderIndex = validOrderOptions.indexOf(item.toUpperCase());\n\n          // see if this is an order\n          if (index > 0 && orderIndex !== -1) {\n            item = this.sequelize.literal(' ' + validOrderOptions[orderIndex]);\n          } else if (previousModel && previousModel.prototype instanceof Model) {\n            // only go down this path if we have preivous model and check only once\n            if (previousModel.associations !== undefined && previousModel.associations[item]) {\n              // convert the item to an association\n              item = previousModel.associations[item];\n            } else if (previousModel.rawAttributes !== undefined && previousModel.rawAttributes[item] && item !== previousModel.rawAttributes[item].field) {\n              // convert the item attribute from its alias\n              item = previousModel.rawAttributes[item].field;\n            } else if (\n              item.indexOf('.') !== -1\n              && previousModel.rawAttributes !== undefined\n            ) {\n              const itemSplit = item.split('.');\n\n              if (previousModel.rawAttributes[itemSplit[0]].type instanceof DataTypes.JSON) {\n                // just quote identifiers for now\n                const identifier = this.quoteIdentifiers(previousModel.name  + '.' + previousModel.rawAttributes[itemSplit[0]].field);\n\n                // get path\n                const path = itemSplit.slice(1);\n\n                // extract path\n                item = this.jsonPathExtractionQuery(identifier, path);\n\n                // literal because we don't want to append the model name when string\n                item = this.sequelize.literal(item);\n              }\n            }\n          }\n        }\n\n        collection[index] = item;\n      }, this);\n\n      // loop through array, adding table names of models to quoted\n      const collectionLength = collection.length;\n      const tableNames = [];\n      let item;\n      let i = 0;\n\n      for (i = 0; i < collectionLength - 1; i++) {\n        item = collection[i];\n        if (typeof item === 'string' || item._modelAttribute || item instanceof Utils.SequelizeMethod) {\n          break;\n        } else if (item instanceof Association) {\n          tableNames[i] = item.as;\n        }\n      }\n\n      // start building sql\n      let sql = '';\n\n      if (i > 0) {\n        sql += this.quoteIdentifier(tableNames.join(connector)) + '.';\n      } else if (typeof collection[0] === 'string' && parent) {\n        sql += this.quoteIdentifier(parent.name) + '.';\n      }\n\n      // loop through everything past i and append to the sql\n      collection.slice(i).forEach(collectionItem => {\n        sql += this.quote(collectionItem, parent, connector);\n      }, this);\n\n      return sql;\n    } else if (collection._modelAttribute) {\n      return this.quoteTable(collection.Model.name) + '.' + this.quoteIdentifier(collection.fieldName);\n    } else if (collection instanceof Utils.SequelizeMethod) {\n      return this.handleSequelizeMethod(collection);\n    } else if (_.isPlainObject(collection) && collection.raw) {\n      // simple objects with raw is no longer supported\n      throw new Error('The `{raw: \"...\"}` syntax is no longer supported.  Use `sequelize.literal` instead.');\n    } else {\n      throw new Error('Unknown structure passed to order / group: ' + util.inspect(collection));\n    }\n  },\n\n  /*\n    Split an identifier into .-separated tokens and quote each part\n   @private\n  */\n  quoteIdentifiers(identifiers) {\n    if (identifiers.indexOf('.') !== -1) {\n      identifiers = identifiers.split('.');\n      return this.quoteIdentifier(identifiers.slice(0, identifiers.length - 1).join('.')) + '.' + this.quoteIdentifier(identifiers[identifiers.length - 1]);\n    } else {\n      return this.quoteIdentifier(identifiers);\n    }\n  },\n\n  /*\n    Escape a value (e.g. a string, number or date)\n   @private\n  */\n  escape(value, field, options) {\n    options = options || {};\n\n    if (value !== null && value !== undefined) {\n      if (value instanceof Utils.SequelizeMethod) {\n        return this.handleSequelizeMethod(value);\n      } else {\n        if (field && field.type) {\n          if (this.typeValidation && field.type.validate && value) {\n            if (options.isList && Array.isArray(value)) {\n              for (const item of value) {\n                field.type.validate(item, options);\n              }\n            } else {\n              field.type.validate(value, options);\n            }\n          }\n\n          if (field.type.stringify) {\n            // Users shouldn't have to worry about these args - just give them a function that takes a single arg\n            const simpleEscape = _.partialRight(SqlString.escape, this.options.timezone, this.dialect);\n\n            value = field.type.stringify(value, { escape: simpleEscape, field, timezone: this.options.timezone, operation: options.operation });\n\n            if (field.type.escape === false) {\n              // The data-type already did the required escaping\n              return value;\n            }\n          }\n        }\n      }\n    }\n\n    return SqlString.escape(value, this.options.timezone, this.dialect);\n  },\n\n  /*\n    Returns a query for selecting elements in the table <tableName>.\n    Options:\n      - attributes -> An array of attributes (e.g. ['name', 'birthday']). Default: *\n      - where -> A hash with conditions (e.g. {name: 'foo'})\n                 OR an ID as integer\n                 OR a string with conditions (e.g. 'name=\"foo\"').\n                 If you use a string, you have to escape it on your own.\n      - order -> e.g. 'id DESC'\n      - group\n      - limit -> The maximum count you want to get.\n      - offset -> An offset value to start from. Only useable with limit!\n   @private\n  */\n  selectQuery(tableName, options, model) {\n    options = options || {};\n    const limit = options.limit;\n    const mainQueryItems = [];\n    const subQueryItems = [];\n    const subQuery = options.subQuery === undefined ? limit && options.hasMultiAssociation : options.subQuery;\n    const attributes = {\n      main: options.attributes && options.attributes.slice(),\n      subQuery: null\n    };\n    const mainTable = {\n      name: tableName,\n      quotedName: null,\n      as: null,\n      model\n    };\n    const topLevelInfo = {\n      names: mainTable,\n      options,\n      subQuery\n    };\n    let mainJoinQueries = [];\n    let subJoinQueries = [];\n    let query;\n\n    // resolve table name options\n    if (options.tableAs) {\n      mainTable.as = this.quoteIdentifier(options.tableAs);\n    } else if (!Array.isArray(mainTable.name) && mainTable.model) {\n      mainTable.as = this.quoteIdentifier(mainTable.model.name);\n    }\n\n    mainTable.quotedName = !Array.isArray(mainTable.name) ? this.quoteTable(mainTable.name) : tableName.map(t => {\n      return Array.isArray(t) ? this.quoteTable(t[0], t[1]) : this.quoteTable(t, true);\n    }).join(', ');\n\n    if (subQuery && attributes.main) {\n      for (const keyAtt of mainTable.model.primaryKeyAttributes) {\n        // Check if mainAttributes contain the primary key of the model either as a field or an aliased field\n        if (!_.find(attributes.main, attr => keyAtt === attr || keyAtt === attr[0] || keyAtt === attr[1])) {\n          attributes.main.push(mainTable.model.rawAttributes[keyAtt].field ? [keyAtt, mainTable.model.rawAttributes[keyAtt].field] : keyAtt);\n        }\n      }\n    }\n\n    attributes.main = this.escapeAttributes(attributes.main, options, mainTable.as);\n    attributes.main = attributes.main || (options.include ? [`${mainTable.as}.*`] : ['*']);\n\n    // If subquery, we ad the mainAttributes to the subQuery and set the mainAttributes to select * from subquery\n    if (subQuery || options.groupedLimit) {\n      // We need primary keys\n      attributes.subQuery = attributes.main;\n      attributes.main = [(mainTable.as || mainTable.quotedName) + '.*'];\n    }\n\n    if (options.include) {\n      for (const include of options.include) {\n        if (include.separate) {\n          continue;\n        }\n        const joinQueries = this.generateInclude(include, { externalAs: mainTable.as, internalAs: mainTable.as }, topLevelInfo);\n\n        subJoinQueries = subJoinQueries.concat(joinQueries.subQuery);\n        mainJoinQueries = mainJoinQueries.concat(joinQueries.mainQuery);\n\n        if (joinQueries.attributes.main.length > 0) {\n          attributes.main = attributes.main.concat(joinQueries.attributes.main);\n        }\n        if (joinQueries.attributes.subQuery.length > 0) {\n          attributes.subQuery = attributes.subQuery.concat(joinQueries.attributes.subQuery);\n        }\n      }\n    }\n\n    if (subQuery) {\n      subQueryItems.push(this.selectFromTableFragment(options, mainTable.model, attributes.subQuery, mainTable.quotedName, mainTable.as));\n      subQueryItems.push(subJoinQueries.join(''));\n    } else {\n      if (options.groupedLimit) {\n        if (!mainTable.as) {\n          mainTable.as = mainTable.quotedName;\n        }\n        const where = Object.assign({}, options.where);\n        let groupedLimitOrder,\n          whereKey,\n          include,\n          groupedTableName = mainTable.as;\n\n        if (typeof options.groupedLimit.on === 'string') {\n          whereKey = options.groupedLimit.on;\n        } else if (options.groupedLimit.on instanceof HasMany) {\n          whereKey = options.groupedLimit.on.foreignKeyField;\n        }\n\n        if (options.groupedLimit.on instanceof BelongsToMany) {\n          // BTM includes needs to join the through table on to check ID\n          groupedTableName = options.groupedLimit.on.manyFromSource.as;\n          const groupedLimitOptions = Model._validateIncludedElements({\n            include: [{\n              association: options.groupedLimit.on.manyFromSource,\n              duplicating: false, // The UNION'ed query may contain duplicates, but each sub-query cannot\n              required: true,\n              where: Object.assign({\n                [Op.placeholder]: true\n              }, options.groupedLimit.through && options.groupedLimit.through.where)\n            }],\n            model\n          });\n\n          // Make sure attributes from the join table are mapped back to models\n          options.hasJoin = true;\n          options.hasMultiAssociation = true;\n          options.includeMap = Object.assign(groupedLimitOptions.includeMap, options.includeMap);\n          options.includeNames = groupedLimitOptions.includeNames.concat(options.includeNames || []);\n          include = groupedLimitOptions.include;\n\n          if (Array.isArray(options.order)) {\n            // We need to make sure the order by attributes are available to the parent query\n            options.order.forEach((order, i) => {\n              if (Array.isArray(order)) {\n                order = order[0];\n              }\n\n              let alias = `subquery_order_${i}`;\n              options.attributes.push([order, alias]);\n\n              // We don't want to prepend model name when we alias the attributes, so quote them here\n              alias = this.sequelize.literal(this.quote(alias));\n\n              if (Array.isArray(options.order[i])) {\n                options.order[i][0] = alias;\n              } else {\n                options.order[i] = alias;\n              }\n            });\n            groupedLimitOrder = options.order;\n          }\n        } else {\n          // Ordering is handled by the subqueries, so ordering the UNION'ed result is not needed\n          groupedLimitOrder = options.order;\n          delete options.order;\n          where[Op.placeholder] = true;\n        }\n\n        // Caching the base query and splicing the where part into it is consistently > twice\n        // as fast than generating from scratch each time for values.length >= 5\n        const baseQuery = '(' + this.selectQuery(\n          tableName,\n          {\n            attributes: options.attributes,\n            limit: options.groupedLimit.limit,\n            order: groupedLimitOrder,\n            where,\n            include,\n            model\n          },\n          model\n        ).replace(/;$/, '') + ')';\n        const placeHolder = this.whereItemQuery(Op.placeholder, true, { model });\n        const splicePos = baseQuery.indexOf(placeHolder);\n\n        mainQueryItems.push(this.selectFromTableFragment(options, mainTable.model, attributes.main, '(' +\n          options.groupedLimit.values.map(value => {\n            let groupWhere;\n            if (whereKey) {\n              groupWhere = {\n                [whereKey]: value\n              };\n            }\n            if (include) {\n              groupWhere = {\n                [options.groupedLimit.on.foreignIdentifierField]: value\n              };\n            }\n\n            return Utils.spliceStr(baseQuery, splicePos, placeHolder.length, this.getWhereConditions(groupWhere, groupedTableName));\n          }).join(\n            this._dialect.supports['UNION ALL'] ? ' UNION ALL ' : ' UNION '\n          )\n          + ')', mainTable.as));\n      } else {\n        mainQueryItems.push(this.selectFromTableFragment(options, mainTable.model, attributes.main, mainTable.quotedName, mainTable.as));\n      }\n\n      mainQueryItems.push(mainJoinQueries.join(''));\n    }\n\n    // Add WHERE to sub or main query\n    if (options.hasOwnProperty('where') && !options.groupedLimit) {\n      options.where = this.getWhereConditions(options.where, mainTable.as || tableName, model, options);\n      if (options.where) {\n        if (subQuery) {\n          subQueryItems.push(' WHERE ' + options.where);\n        } else {\n          mainQueryItems.push(' WHERE ' + options.where);\n          // Walk the main query to update all selects\n          _.each(mainQueryItems, (value, key) => {\n            if (value.match(/^SELECT/)) {\n              mainQueryItems[key] = this.selectFromTableFragment(options, model, attributes.main, mainTable.quotedName, mainTable.as, options.where);\n            }\n          });\n        }\n      }\n    }\n\n    // Add GROUP BY to sub or main query\n    if (options.group) {\n      options.group = Array.isArray(options.group) ? options.group.map(t => this.quote(t, model)).join(', ') : this.quote(options.group, model);\n      if (subQuery) {\n        subQueryItems.push(' GROUP BY ' + options.group);\n      } else {\n        mainQueryItems.push(' GROUP BY ' + options.group);\n      }\n    }\n\n    // Add HAVING to sub or main query\n    if (options.hasOwnProperty('having')) {\n      options.having = this.getWhereConditions(options.having, tableName, model, options, false);\n      if (subQuery) {\n        subQueryItems.push(' HAVING ' + options.having);\n      } else {\n        mainQueryItems.push(' HAVING ' + options.having);\n      }\n    }\n\n    // Add ORDER to sub or main query\n    if (options.order) {\n      const orders = this.getQueryOrders(options, model, subQuery);\n      if (orders.mainQueryOrder.length) {\n        mainQueryItems.push(' ORDER BY ' + orders.mainQueryOrder.join(', '));\n      }\n      if (orders.subQueryOrder.length) {\n        subQueryItems.push(' ORDER BY ' + orders.subQueryOrder.join(', '));\n      }\n    }\n\n    // Add LIMIT, OFFSET to sub or main query\n    const limitOrder = this.addLimitAndOffset(options, mainTable.model);\n    if (limitOrder && !options.groupedLimit) {\n      if (subQuery) {\n        subQueryItems.push(limitOrder);\n      } else {\n        mainQueryItems.push(limitOrder);\n      }\n    }\n\n    if (subQuery) {\n      query = `SELECT ${attributes.main.join(', ')} FROM (${subQueryItems.join('')}) AS ${mainTable.as}${mainJoinQueries.join('')}${mainQueryItems.join('')}`;\n    } else {\n      query = mainQueryItems.join('');\n    }\n\n    if (options.lock && this._dialect.supports.lock) {\n      let lock = options.lock;\n      if (typeof options.lock === 'object') {\n        lock = options.lock.level;\n      }\n      if (this._dialect.supports.lockKey && (lock === 'KEY SHARE' || lock === 'NO KEY UPDATE')) {\n        query += ' FOR ' + lock;\n      } else if (lock === 'SHARE') {\n        query += ' ' + this._dialect.supports.forShare;\n      } else {\n        query += ' FOR UPDATE';\n      }\n      if (this._dialect.supports.lockOf && options.lock.of && options.lock.of.prototype instanceof Model) {\n        query += ' OF ' + this.quoteTable(options.lock.of.name);\n      }\n    }\n\n    return `${query};`;\n  },\n\n  escapeAttributes(attributes, options, mainTableAs) {\n    return attributes && attributes.map(attr => {\n      let addTable = true;\n\n      if (attr instanceof Utils.SequelizeMethod) {\n        return this.handleSequelizeMethod(attr);\n      }\n      if (Array.isArray(attr)) {\n        if (attr.length !== 2) {\n          throw new Error(JSON.stringify(attr) + ' is not a valid attribute definition. Please use the following format: [\\'attribute definition\\', \\'alias\\']');\n        }\n        attr = attr.slice();\n\n        if (attr[0] instanceof Utils.SequelizeMethod) {\n          attr[0] = this.handleSequelizeMethod(attr[0]);\n          addTable = false;\n        } else if (attr[0].indexOf('(') === -1 && attr[0].indexOf(')') === -1) {\n          attr[0] = this.quoteIdentifier(attr[0]);\n        }\n        attr = [attr[0], this.quoteIdentifier(attr[1])].join(' AS ');\n      } else {\n        attr = attr.indexOf(Utils.TICK_CHAR) < 0 && attr.indexOf('\"') < 0 ? this.quoteIdentifiers(attr) : attr;\n      }\n      if (options.include && attr.indexOf('.') === -1 && addTable) {\n        attr = mainTableAs + '.' + attr;\n      }\n\n      return attr;\n    });\n  },\n\n  generateInclude(include, parentTableName, topLevelInfo) {\n    const association = include.association;\n    const joinQueries = {\n      mainQuery: [],\n      subQuery: []\n    };\n    const mainChildIncludes = [];\n    const subChildIncludes = [];\n    let requiredMismatch = false;\n    const includeAs = {\n      internalAs: include.as,\n      externalAs: include.as\n    };\n    const attributes = {\n      main: [],\n      subQuery: []\n    };\n    let joinQuery;\n\n    topLevelInfo.options.keysEscaped = true;\n\n    if (topLevelInfo.names.name !== parentTableName.externalAs && topLevelInfo.names.as !== parentTableName.externalAs) {\n      includeAs.internalAs = `${parentTableName.internalAs}->${include.as}`;\n      includeAs.externalAs = `${parentTableName.externalAs}.${include.as}`;\n    }\n\n    // includeIgnoreAttributes is used by aggregate functions\n    if (topLevelInfo.options.includeIgnoreAttributes !== false) {\n      const includeAttributes = include.attributes.map(attr => {\n        let attrAs = attr;\n        let verbatim = false;\n\n        if (Array.isArray(attr) && attr.length === 2) {\n          if (attr[0] instanceof Utils.SequelizeMethod && (\n            attr[0] instanceof Utils.Literal ||\n            attr[0] instanceof Utils.Cast ||\n            attr[0] instanceof Utils.Fn\n          )) {\n            verbatim = true;\n          }\n\n          attr = attr.map(attr => attr instanceof Utils.SequelizeMethod ? this.handleSequelizeMethod(attr) : attr);\n\n          attrAs = attr[1];\n          attr = attr[0];\n        } else if (attr instanceof Utils.Literal) {\n          return attr.val; // We trust the user to rename the field correctly\n        } else if (attr instanceof Utils.Cast || attr instanceof Utils.Fn) {\n          throw new Error(\n            'Tried to select attributes using Sequelize.cast or Sequelize.fn without specifying an alias for the result, during eager loading. ' +\n            'This means the attribute will not be added to the returned instance'\n          );\n        }\n\n        let prefix;\n        if (verbatim === true) {\n          prefix = attr;\n        } else {\n          prefix = `${this.quoteIdentifier(includeAs.internalAs)}.${this.quoteIdentifier(attr)}`;\n        }\n        return `${prefix} AS ${this.quoteIdentifier(`${includeAs.externalAs}.${attrAs}`, true)}`;\n      });\n      if (include.subQuery && topLevelInfo.subQuery) {\n        for (const attr of includeAttributes) {\n          attributes.subQuery.push(attr);\n        }\n      } else {\n        for (const attr of includeAttributes) {\n          attributes.main.push(attr);\n        }\n      }\n    }\n\n    //through\n    if (include.through) {\n      joinQuery = this.generateThroughJoin(include, includeAs, parentTableName.internalAs, topLevelInfo);\n    } else {\n      if (topLevelInfo.subQuery && include.subQueryFilter) {\n        const associationWhere = {};\n\n        associationWhere[association.identifierField] = {\n          [Op.eq]: this.sequelize.literal(`${this.quoteTable(parentTableName.internalAs)}.${this.quoteIdentifier(association.sourceKeyField || association.source.primaryKeyField)}`)\n        };\n\n        if (!topLevelInfo.options.where) {\n          topLevelInfo.options.where = {};\n        }\n\n        // Creating the as-is where for the subQuery, checks that the required association exists\n        const $query = this.selectQuery(include.model.getTableName(), {\n          attributes: [association.identifierField],\n          where: {\n            [Op.and]: [\n              associationWhere,\n              include.where || {}\n            ]\n          },\n          limit: 1,\n          tableAs: include.as\n        }, include.model);\n\n        const subQueryWhere = this.sequelize.asIs([\n          '(',\n          $query.replace(/\\;$/, ''),\n          ')',\n          'IS NOT NULL'\n        ].join(' '));\n\n        if (_.isPlainObject(topLevelInfo.options.where)) {\n          topLevelInfo.options.where['__' + includeAs.internalAs] = subQueryWhere;\n        } else {\n          topLevelInfo.options.where = { [Op.and]: [topLevelInfo.options.where, subQueryWhere] };\n        }\n      }\n      joinQuery = this.generateJoin(include, topLevelInfo);\n    }\n\n    // handle possible new attributes created in join\n    if (joinQuery.attributes.main.length > 0) {\n      attributes.main = attributes.main.concat(joinQuery.attributes.main);\n    }\n\n    if (joinQuery.attributes.subQuery.length > 0) {\n      attributes.subQuery = attributes.subQuery.concat(joinQuery.attributes.subQuery);\n    }\n\n    if (include.include) {\n      for (const childInclude of include.include) {\n        if (childInclude.separate || childInclude._pseudo) {\n          continue;\n        }\n\n        const childJoinQueries = this.generateInclude(childInclude, includeAs, topLevelInfo);\n\n        if (include.required === false && childInclude.required === true) {\n          requiredMismatch = true;\n        }\n        // if the child is a sub query we just give it to the\n        if (childInclude.subQuery && topLevelInfo.subQuery) {\n          subChildIncludes.push(childJoinQueries.subQuery);\n        }\n        if (childJoinQueries.mainQuery) {\n          mainChildIncludes.push(childJoinQueries.mainQuery);\n        }\n        if (childJoinQueries.attributes.main.length > 0) {\n          attributes.main = attributes.main.concat(childJoinQueries.attributes.main);\n        }\n        if (childJoinQueries.attributes.subQuery.length > 0) {\n          attributes.subQuery = attributes.subQuery.concat(childJoinQueries.attributes.subQuery);\n        }\n      }\n    }\n\n    if (include.subQuery && topLevelInfo.subQuery) {\n      if (requiredMismatch && subChildIncludes.length > 0) {\n        joinQueries.subQuery.push(` ${joinQuery.join} ( ${joinQuery.body}${subChildIncludes.join('')} ) ON ${joinQuery.condition}`);\n      } else {\n        joinQueries.subQuery.push(` ${joinQuery.join} ${joinQuery.body} ON ${joinQuery.condition}`);\n        if (subChildIncludes.length > 0) {\n          joinQueries.subQuery.push(subChildIncludes.join(''));\n        }\n      }\n      joinQueries.mainQuery.push(mainChildIncludes.join(''));\n    } else {\n      if (requiredMismatch && mainChildIncludes.length > 0) {\n        joinQueries.mainQuery.push(` ${joinQuery.join} ( ${joinQuery.body}${mainChildIncludes.join('')} ) ON ${joinQuery.condition}`);\n      } else {\n        joinQueries.mainQuery.push(` ${joinQuery.join} ${joinQuery.body} ON ${joinQuery.condition}`);\n        if (mainChildIncludes.length > 0) {\n          joinQueries.mainQuery.push(mainChildIncludes.join(''));\n        }\n      }\n      joinQueries.subQuery.push(subChildIncludes.join(''));\n    }\n\n    return {\n      mainQuery: joinQueries.mainQuery.join(''),\n      subQuery: joinQueries.subQuery.join(''),\n      attributes\n    };\n  },\n\n  generateJoin(include, topLevelInfo) {\n    const association = include.association;\n    const parent = include.parent;\n    const parentIsTop = !!parent && !include.parent.association && include.parent.model.name === topLevelInfo.options.model.name;\n    let $parent;\n    let joinWhere;\n    /* Attributes for the left side */\n    const left = association.source;\n    const attrLeft = association instanceof BelongsTo ?\n      association.identifier :\n      association.sourceKeyAttribute || left.primaryKeyAttribute;\n    const fieldLeft = association instanceof BelongsTo ?\n      association.identifierField :\n      left.rawAttributes[association.sourceKeyAttribute || left.primaryKeyAttribute].field;\n    let asLeft;\n    /* Attributes for the right side */\n    const right = include.model;\n    const tableRight = right.getTableName();\n    const fieldRight = association instanceof BelongsTo ?\n      right.rawAttributes[association.targetIdentifier || right.primaryKeyAttribute].field :\n      association.identifierField;\n    let asRight = include.as;\n\n    while (($parent = $parent && $parent.parent || include.parent) && $parent.association) {\n      if (asLeft) {\n        asLeft = `${$parent.as}->${asLeft}`;\n      } else {\n        asLeft = $parent.as;\n      }\n    }\n\n    if (!asLeft) asLeft = parent.as || parent.model.name;\n    else asRight = `${asLeft}->${asRight}`;\n\n    let joinOn = `${this.quoteTable(asLeft)}.${this.quoteIdentifier(fieldLeft)}`;\n\n    if (topLevelInfo.options.groupedLimit && parentIsTop || topLevelInfo.subQuery && include.parent.subQuery && !include.subQuery) {\n      if (parentIsTop) {\n        // The main model attributes is not aliased to a prefix\n        joinOn = `${this.quoteTable(parent.as || parent.model.name)}.${this.quoteIdentifier(attrLeft)}`;\n      } else {\n        joinOn = this.quoteIdentifier(`${asLeft.replace(/->/g, '.')}.${attrLeft}`);\n      }\n    }\n\n    joinOn += ` = ${this.quoteIdentifier(asRight)}.${this.quoteIdentifier(fieldRight)}`;\n\n    if (include.on) {\n      joinOn = this.whereItemsQuery(include.on, {\n        prefix: this.sequelize.literal(this.quoteIdentifier(asRight)),\n        model: include.model\n      });\n    }\n\n    if (include.where) {\n      joinWhere = this.whereItemsQuery(include.where, {\n        prefix: this.sequelize.literal(this.quoteIdentifier(asRight)),\n        model: include.model\n      });\n      if (joinWhere) {\n        if (include.or) {\n          joinOn += ` OR ${joinWhere}`;\n        } else {\n          joinOn += ` AND ${joinWhere}`;\n        }\n      }\n    }\n\n    return {\n      join: include.required ? 'INNER JOIN' : 'LEFT OUTER JOIN',\n      body: this.quoteTable(tableRight, asRight),\n      condition: joinOn,\n      attributes: {\n        main: [],\n        subQuery: []\n      }\n    };\n  },\n\n  generateThroughJoin(include, includeAs, parentTableName, topLevelInfo) {\n    const through = include.through;\n    const throughTable = through.model.getTableName();\n    const throughAs = `${includeAs.internalAs}->${through.as}`;\n    const externalThroughAs = `${includeAs.externalAs}.${through.as}`;\n    const throughAttributes = through.attributes.map(attr =>\n      this.quoteIdentifier(throughAs) + '.' + this.quoteIdentifier(Array.isArray(attr) ? attr[0] : attr)\n      + ' AS '\n      + this.quoteIdentifier(externalThroughAs + '.' + (Array.isArray(attr) ? attr[1] : attr))\n    );\n    const association = include.association;\n    const parentIsTop = !include.parent.association && include.parent.model.name === topLevelInfo.options.model.name;\n    const primaryKeysSource = association.source.primaryKeyAttributes;\n    const tableSource = parentTableName;\n    const identSource = association.identifierField;\n    const primaryKeysTarget = association.target.primaryKeyAttributes;\n    const tableTarget = includeAs.internalAs;\n    const identTarget = association.foreignIdentifierField;\n    const attrTarget = association.target.rawAttributes[primaryKeysTarget[0]].field || primaryKeysTarget[0];\n\n    const joinType = include.required ? 'INNER JOIN' : 'LEFT OUTER JOIN';\n    let joinBody;\n    let joinCondition;\n    const attributes = {\n      main: [],\n      subQuery: []\n    };\n    let attrSource = primaryKeysSource[0];\n    let sourceJoinOn;\n    let targetJoinOn;\n    let throughWhere;\n    let targetWhere;\n\n    if (topLevelInfo.options.includeIgnoreAttributes !== false) {\n      // Through includes are always hasMany, so we need to add the attributes to the mainAttributes no matter what (Real join will never be executed in subquery)\n      for (const attr of throughAttributes) {\n        attributes.main.push(attr);\n      }\n    }\n\n    // Figure out if we need to use field or attribute\n    if (!topLevelInfo.subQuery) {\n      attrSource = association.source.rawAttributes[primaryKeysSource[0]].field;\n    }\n    if (topLevelInfo.subQuery && !include.subQuery && !include.parent.subQuery && include.parent.model !== topLevelInfo.options.mainModel) {\n      attrSource = association.source.rawAttributes[primaryKeysSource[0]].field;\n    }\n\n    // Filter statement for left side of through\n    // Used by both join and subquery where\n    // If parent include was in a subquery need to join on the aliased attribute\n    if (topLevelInfo.subQuery && !include.subQuery && include.parent.subQuery && !parentIsTop) {\n      sourceJoinOn = `${this.quoteIdentifier(`${tableSource}.${attrSource}`)} = `;\n    } else {\n      sourceJoinOn = `${this.quoteTable(tableSource)}.${this.quoteIdentifier(attrSource)} = `;\n    }\n    sourceJoinOn += `${this.quoteIdentifier(throughAs)}.${this.quoteIdentifier(identSource)}`;\n\n    // Filter statement for right side of through\n    // Used by both join and subquery where\n    targetJoinOn = `${this.quoteIdentifier(tableTarget)}.${this.quoteIdentifier(attrTarget)} = `;\n    targetJoinOn += `${this.quoteIdentifier(throughAs)}.${this.quoteIdentifier(identTarget)}`;\n\n    if (through.where) {\n      throughWhere = this.getWhereConditions(through.where, this.sequelize.literal(this.quoteIdentifier(throughAs)), through.model);\n    }\n\n    if (this._dialect.supports.joinTableDependent) {\n      // Generate a wrapped join so that the through table join can be dependent on the target join\n      joinBody = `( ${this.quoteTable(throughTable, throughAs)} INNER JOIN ${this.quoteTable(include.model.getTableName(), includeAs.internalAs)} ON ${targetJoinOn}`;\n      if (throughWhere) {\n        joinBody += ` AND ${throughWhere}`;\n      }\n      joinBody += ')';\n      joinCondition = sourceJoinOn;\n    } else {\n      // Generate join SQL for left side of through\n      joinBody = `${this.quoteTable(throughTable, throughAs)} ON ${sourceJoinOn} ${joinType} ${this.quoteTable(include.model.getTableName(), includeAs.internalAs)}`;\n      joinCondition = targetJoinOn;\n      if (throughWhere) {\n        joinCondition += ` AND ${throughWhere}`;\n      }\n    }\n\n    if (include.where || include.through.where) {\n      if (include.where) {\n        targetWhere = this.getWhereConditions(include.where, this.sequelize.literal(this.quoteIdentifier(includeAs.internalAs)), include.model, topLevelInfo.options);\n        if (targetWhere) {\n          joinCondition += ` AND ${targetWhere}`;\n        }\n      }\n      if (topLevelInfo.subQuery && include.required) {\n        if (!topLevelInfo.options.where) {\n          topLevelInfo.options.where = {};\n        }\n        let parent = include;\n        let child = include;\n        let nestedIncludes = [];\n        let query;\n\n        while ((parent = parent.parent)) { // eslint-disable-line\n          nestedIncludes = [_.extend({}, child, { include: nestedIncludes })];\n          child = parent;\n        }\n\n        const topInclude = nestedIncludes[0];\n        const topParent = topInclude.parent;\n\n        if (topInclude.through && Object(topInclude.through.model) === topInclude.through.model) {\n          query = this.selectQuery(topInclude.through.model.getTableName(), {\n            attributes: [topInclude.through.model.primaryKeyField],\n            include: Model._validateIncludedElements({\n              model: topInclude.through.model,\n              include: [{\n                association: topInclude.association.toTarget,\n                required: true\n              }]\n            }).include,\n            model: topInclude.through.model,\n            where: {\n              [Op.and]: [\n                this.sequelize.asIs([\n                  this.quoteTable(topParent.model.name) + '.' + this.quoteIdentifier(topParent.model.primaryKeyField),\n                  this.quoteIdentifier(topInclude.through.model.name) + '.' + this.quoteIdentifier(topInclude.association.identifierField)\n                ].join(' = ')),\n                topInclude.through.where\n              ]\n            },\n            limit: 1,\n            includeIgnoreAttributes: false\n          }, topInclude.through.model);\n        } else {\n          const isBelongsTo = topInclude.association.associationType === 'BelongsTo';\n          const join = [\n            this.quoteTable(topParent.model.name) + '.' + this.quoteIdentifier(isBelongsTo ? topInclude.association.identifierField : topParent.model.primaryKeyAttributes[0]),\n            this.quoteIdentifier(topInclude.model.name) + '.' + this.quoteIdentifier(isBelongsTo ? topInclude.model.primaryKeyAttributes[0] : topInclude.association.identifierField)\n          ].join(' = ');\n          query = this.selectQuery(topInclude.model.tableName, {\n            attributes: [topInclude.model.primaryKeyAttributes[0]],\n            include: topInclude.include,\n            where: {\n              [Op.join]: this.sequelize.asIs(join)\n            },\n            limit: 1,\n            includeIgnoreAttributes: false\n          }, topInclude.model);\n        }\n        topLevelInfo.options.where['__' + throughAs] = this.sequelize.asIs([\n          '(',\n          query.replace(/\\;$/, ''),\n          ')',\n          'IS NOT NULL'\n        ].join(' '));\n      }\n    }\n\n    return {\n      join: joinType,\n      body: joinBody,\n      condition: joinCondition,\n      attributes\n    };\n  },\n\n  getQueryOrders(options, model, subQuery) {\n    const mainQueryOrder = [];\n    const subQueryOrder = [];\n\n    if (Array.isArray(options.order)) {\n      for (let order of options.order) {\n        // wrap if not array\n        if (!Array.isArray(order)) {\n          order = [order];\n        }\n\n        if (\n          subQuery\n          && Array.isArray(order)\n          && order[0]\n          && !(order[0] instanceof Association)\n          && !(typeof order[0] === 'function' && order[0].prototype instanceof Model)\n          && !(typeof order[0].model === 'function' && order[0].model.prototype instanceof Model)\n          && !(typeof order[0] === 'string' && model && model.associations !== undefined && model.associations[order[0]])\n        ) {\n          subQueryOrder.push(this.quote(order, model, '->'));\n        }\n\n        if (subQuery) {\n          // Handle case where sub-query renames attribute we want to order by,\n          // see https://github.com/sequelize/sequelize/issues/8739\n          const subQueryAttribute = options.attributes.find(a => Array.isArray(a) && a[0] === order[0] && a[1]);\n          if (subQueryAttribute) {\n            order[0] = new Utils.Col(subQueryAttribute[1]);\n          }\n        }\n\n        mainQueryOrder.push(this.quote(order, model, '->'));\n      }\n    } else if (options.order instanceof Utils.SequelizeMethod) {\n      const sql = this.quote(options.order, model, '->');\n      if (subQuery) {\n        subQueryOrder.push(sql);\n      }\n      mainQueryOrder.push(sql);\n    } else {\n      throw new Error('Order must be type of array or instance of a valid sequelize method.');\n    }\n\n    return {mainQueryOrder, subQueryOrder};\n  },\n\n  selectFromTableFragment(options, model, attributes, tables, mainTableAs) {\n    let fragment = 'SELECT ' + attributes.join(', ') + ' FROM ' + tables;\n\n    if (mainTableAs) {\n      fragment += ' AS ' + mainTableAs;\n    }\n\n    return fragment;\n  },\n\n  /**\n   * Returns a query that starts a transaction.\n   *\n   * @param  {Boolean} value   A boolean that states whether autocommit shall be done or not.\n   * @param  {Object}  options An object with options.\n   * @return {String}          The generated sql query.\n   * @private\n   */\n  setAutocommitQuery(value, options) {\n    if (options.parent) {\n      return;\n    }\n\n    // no query when value is not explicitly set\n    if (typeof value === 'undefined' || value === null) {\n      return;\n    }\n\n    return 'SET autocommit = ' + (value ? 1 : 0) + ';';\n  },\n\n  /**\n   * Returns a query that sets the transaction isolation level.\n   *\n   * @param  {String} value   The isolation level.\n   * @param  {Object} options An object with options.\n   * @return {String}         The generated sql query.\n   * @private\n   */\n  setIsolationLevelQuery(value, options) {\n    if (options.parent) {\n      return;\n    }\n\n    return 'SET SESSION TRANSACTION ISOLATION LEVEL ' + value + ';';\n  },\n\n  generateTransactionId() {\n    return uuid.v4();\n  },\n\n  /**\n   * Returns a query that starts a transaction.\n   *\n   * @param  {Transaction} transaction\n   * @param  {Object} options An object with options.\n   * @return {String}         The generated sql query.\n   * @private\n   */\n  startTransactionQuery(transaction) {\n    if (transaction.parent) {\n      // force quoting of savepoint identifiers for postgres\n      return 'SAVEPOINT ' + this.quoteIdentifier(transaction.name, true) + ';';\n    }\n\n    return 'START TRANSACTION;';\n  },\n\n  /**\n   * Returns a query that defers the constraints. Only works for postgres.\n   *\n   * @param  {Transaction} transaction\n   * @param  {Object} options An object with options.\n   * @return {String}         The generated sql query.\n   * @private\n   */\n  deferConstraintsQuery() {},\n\n  setConstraintQuery() {},\n  setDeferredQuery() {},\n  setImmediateQuery() {},\n\n  /**\n   * Returns a query that commits a transaction.\n   *\n   * @param  {Object} options An object with options.\n   * @return {String}         The generated sql query.\n   * @private\n   */\n  commitTransactionQuery(transaction) {\n    if (transaction.parent) {\n      return;\n    }\n\n    return 'COMMIT;';\n  },\n\n  /**\n   * Returns a query that rollbacks a transaction.\n   *\n   * @param  {Transaction} transaction\n   * @param  {Object} options An object with options.\n   * @return {String}         The generated sql query.\n   * @private\n   */\n  rollbackTransactionQuery(transaction) {\n    if (transaction.parent) {\n      // force quoting of savepoint identifiers for postgres\n      return 'ROLLBACK TO SAVEPOINT ' + this.quoteIdentifier(transaction.name, true) + ';';\n    }\n\n    return 'ROLLBACK;';\n  },\n\n  /**\n   * Returns an SQL fragment for adding result constraints\n   *\n   * @param  {Object} options An object with selectQuery options.\n   * @param  {Object} options The model passed to the selectQuery.\n   * @return {String}         The generated sql query.\n   * @private\n   */\n  addLimitAndOffset(options) {\n    let fragment = '';\n\n    /* eslint-disable */\n    if (options.offset != null && options.limit == null) {\n      fragment += ' LIMIT ' + this.escape(options.offset) + ', ' + 10000000000000;\n    } else if (options.limit != null) {\n      if (options.offset != null) {\n        fragment += ' LIMIT ' + this.escape(options.offset) + ', ' + this.escape(options.limit);\n      } else {\n        fragment += ' LIMIT ' + this.escape(options.limit);\n      }\n    }\n    /* eslint-enable */\n\n    return fragment;\n  },\n\n  handleSequelizeMethod(smth, tableName, factory, options, prepend) {\n    let result;\n\n    if (smth instanceof Utils.Where) {\n      let value = smth.logic;\n      let key;\n\n      if (smth.attribute instanceof Utils.SequelizeMethod) {\n        key = this.getWhereConditions(smth.attribute, tableName, factory, options, prepend);\n      } else {\n        key = this.quoteTable(smth.attribute.Model.name) + '.' + this.quoteIdentifier(smth.attribute.field || smth.attribute.fieldName);\n      }\n\n      if (value && value instanceof Utils.SequelizeMethod) {\n        value = this.getWhereConditions(value, tableName, factory, options, prepend);\n\n        result = value === 'NULL' ? key + ' IS NULL' : [key, value].join(smth.comparator);\n      } else if (_.isPlainObject(value)) {\n        result = this.whereItemQuery(smth.attribute, value, {\n          model: factory\n        });\n      } else {\n        if (typeof value === 'boolean') {\n          value = this.booleanValue(value);\n        } else {\n          value = this.escape(value);\n        }\n\n        result = value === 'NULL' ? key + ' IS NULL' : [key, value].join(' ' + smth.comparator + ' ');\n      }\n    } else if (smth instanceof Utils.Literal) {\n      result = smth.val;\n    } else if (smth instanceof Utils.Cast) {\n      if (smth.val instanceof Utils.SequelizeMethod) {\n        result = this.handleSequelizeMethod(smth.val, tableName, factory, options, prepend);\n      } else if (_.isPlainObject(smth.val)) {\n        result = this.whereItemsQuery(smth.val);\n      } else {\n        result = this.escape(smth.val);\n      }\n\n      result = 'CAST(' + result + ' AS ' + smth.type.toUpperCase() + ')';\n    } else if (smth instanceof Utils.Fn) {\n      result = smth.fn + '(' + smth.args.map(arg => {\n        if (arg instanceof Utils.SequelizeMethod) {\n          return this.handleSequelizeMethod(arg, tableName, factory, options, prepend);\n        } else if (_.isPlainObject(arg)) {\n          return this.whereItemsQuery(arg);\n        } else {\n          return this.escape(arg);\n        }\n      }).join(', ') + ')';\n    } else if (smth instanceof Utils.Col) {\n      if (Array.isArray(smth.col)) {\n        if (!factory) {\n          throw new Error('Cannot call Sequelize.col() with array outside of order / group clause');\n        }\n      } else if (smth.col.indexOf('*') === 0) {\n        return '*';\n      }\n      return this.quote(smth.col, factory);\n    } else {\n      result = smth.toString(this, factory);\n    }\n\n    return result;\n  },\n\n  whereQuery(where, options) {\n    const query = this.whereItemsQuery(where, options);\n    if (query && query.length) {\n      return 'WHERE '+query;\n    }\n    return '';\n  },\n\n  whereItemsQuery(where, options, binding) {\n    if (\n      where === null ||\n      where === undefined ||\n      Utils.getComplexSize(where) === 0\n    ) {\n      // NO OP\n      return '';\n    }\n\n    if (_.isString(where)) {\n      throw new Error('Support for `{where: \\'raw query\\'}` has been removed.');\n    }\n\n    const items = [];\n\n    binding = binding || 'AND';\n    if (binding.substr(0, 1) !== ' ') binding = ' '+binding+' ';\n\n    if (_.isPlainObject(where)) {\n      Utils.getComplexKeys(where).forEach(prop => {\n        const item = where[prop];\n        items.push(this.whereItemQuery(prop, item, options));\n      });\n    } else {\n      items.push(this.whereItemQuery(undefined, where, options));\n    }\n\n    return items.length && items.filter(item => item && item.length).join(binding) || '';\n  },\n\n  OperatorMap: {\n    [Op.eq]: '=',\n    [Op.ne]: '!=',\n    [Op.gte]: '>=',\n    [Op.gt]: '>',\n    [Op.lte]: '<=',\n    [Op.lt]: '<',\n    [Op.not]: 'IS NOT',\n    [Op.is]: 'IS',\n    [Op.in]: 'IN',\n    [Op.notIn]: 'NOT IN',\n    [Op.like]: 'LIKE',\n    [Op.notLike]: 'NOT LIKE',\n    [Op.iLike]: 'ILIKE',\n    [Op.notILike]: 'NOT ILIKE',\n    [Op.regexp]: '~',\n    [Op.notRegexp]: '!~',\n    [Op.iRegexp]: '~*',\n    [Op.notIRegexp]: '!~*',\n    [Op.between]: 'BETWEEN',\n    [Op.notBetween]: 'NOT BETWEEN',\n    [Op.overlap]: '&&',\n    [Op.contains]: '@>',\n    [Op.contained]: '<@',\n    [Op.adjacent]: '-|-',\n    [Op.strictLeft]: '<<',\n    [Op.strictRight]: '>>',\n    [Op.noExtendRight]: '&<',\n    [Op.noExtendLeft]: '&>',\n    [Op.any]: 'ANY',\n    [Op.all]: 'ALL',\n    [Op.and]: ' AND ',\n    [Op.or]: ' OR ',\n    [Op.col]: 'COL',\n    [Op.placeholder]: '$$PLACEHOLDER$$',\n    [Op.raw]: 'DEPRECATED' //kept here since we still throw an explicit error if operator being used remove by v5,\n  },\n\n  OperatorsAliasMap: {},\n\n  setOperatorsAliases(aliases) {\n    if (!aliases || _.isEmpty(aliases)) {\n      this.OperatorsAliasMap = false;\n    } else {\n      this.OperatorsAliasMap = _.assign({}, aliases);\n    }\n  },\n\n  whereItemQuery(key, value, options) {\n    options = options || {};\n    if (key && typeof key === 'string' && key.indexOf('.') !== -1 && options.model) {\n      const keyParts = key.split('.');\n      if (options.model.rawAttributes[keyParts[0]] && options.model.rawAttributes[keyParts[0]].type instanceof DataTypes.JSON) {\n        const tmp = {};\n        const field = options.model.rawAttributes[keyParts[0]];\n        Dottie.set(tmp, keyParts.slice(1), value);\n        return this.whereItemQuery(field.field || keyParts[0], tmp, Object.assign({field}, options));\n      }\n    }\n\n    const field = this._findField(key, options);\n    const fieldType = field && field.type || options.type;\n\n    const isPlainObject = _.isPlainObject(value);\n    const isArray = !isPlainObject && Array.isArray(value);\n    key = this.OperatorsAliasMap && this.OperatorsAliasMap[key] || key;\n    if (isPlainObject) {\n      value = this._replaceAliases(value);\n    }\n    const valueKeys = isPlainObject && Utils.getComplexKeys(value);\n\n    if (key === undefined) {\n      if (typeof value === 'string') {\n        return value;\n      }\n\n      if (isPlainObject && valueKeys.length === 1) {\n        return this.whereItemQuery(valueKeys[0], value[valueKeys[0]], options);\n      }\n    }\n\n    if (!value) {\n      return this._joinKeyValue(key, this.escape(value, field), value === null ? this.OperatorMap[Op.is] : this.OperatorMap[Op.eq], options.prefix);\n    }\n\n    if (value instanceof Utils.SequelizeMethod && !(key !== undefined && value instanceof Utils.Fn)) {\n      return this.handleSequelizeMethod(value);\n    }\n\n    // Convert where: [] to Op.and if possible, else treat as literal/replacements\n    if (key === undefined && isArray) {\n      if (Utils.canTreatArrayAsAnd(value)) {\n        key = Op.and;\n      } else {\n        throw new Error('Support for literal replacements in the `where` object has been removed.');\n      }\n    }\n\n    if (key === Op.or || key === Op.and || key === Op.not) {\n      return this._whereGroupBind(key, value, options);\n    }\n\n\n    if (value[Op.or]) {\n      return this._whereBind(this.OperatorMap[Op.or], key, value[Op.or], options);\n    }\n\n    if (value[Op.and]) {\n      return this._whereBind(this.OperatorMap[Op.and], key, value[Op.and], options);\n    }\n\n    if (isArray && fieldType instanceof DataTypes.ARRAY) {\n      return this._joinKeyValue(key, this.escape(value, field), this.OperatorMap[Op.eq], options.prefix);\n    }\n\n    if (isPlainObject && fieldType instanceof DataTypes.JSON && options.json !== false) {\n      return this._whereJSON(key, value, options);\n    }\n    // If multiple keys we combine the different logic conditions\n    if (isPlainObject && valueKeys.length > 1) {\n      return this._whereBind(this.OperatorMap[Op.and], key, value, options);\n    }\n\n    if (isArray) {\n      return this._whereParseSingleValueObject(key, field, Op.in, value, options);\n    }\n    if (isPlainObject) {\n      if (this.OperatorMap[valueKeys[0]]) {\n        return this._whereParseSingleValueObject(key, field, valueKeys[0], value[valueKeys[0]], options);\n      } else {\n        return this._whereParseSingleValueObject(key, field, this.OperatorMap[Op.eq], value, options);\n      }\n    }\n\n    if (key === Op.placeholder) {\n      return this._joinKeyValue(this.OperatorMap[key], this.escape(value, field), this.OperatorMap[Op.eq], options.prefix);\n    }\n\n    return this._joinKeyValue(key, this.escape(value, field), this.OperatorMap[Op.eq], options.prefix);\n  },\n\n  _findField(key, options) {\n    if (options.field) {\n      return options.field;\n    }\n\n    if (options.model && options.model.rawAttributes && options.model.rawAttributes[key]) {\n      return options.model.rawAttributes[key];\n    }\n\n    if (options.model && options.model.fieldRawAttributesMap && options.model.fieldRawAttributesMap[key]) {\n      return options.model.fieldRawAttributesMap[key];\n    }\n  },\n\n  _replaceAliases(orig) {\n    const obj = {};\n    if (!this.OperatorsAliasMap) {\n      return orig;\n    }\n\n    Utils.getOperators(orig).forEach(op => {\n      const item = orig[op];\n      if (_.isPlainObject(item)) {\n        obj[op] = this._replaceAliases(item);\n      } else {\n        obj[op] = item;\n      }\n    });\n\n    _.forOwn(orig, (item, prop) => {\n      prop = this.OperatorsAliasMap[prop] || prop;\n      if (_.isPlainObject(item)) {\n        item = this._replaceAliases(item);\n      }\n      obj[prop] = item;\n    });\n    return obj;\n  },\n\n  // OR/AND/NOT grouping logic\n  _whereGroupBind(key, value, options) {\n    const binding = key === Op.or ? this.OperatorMap[Op.or] : this.OperatorMap[Op.and];\n    const outerBinding = key === Op.not ? 'NOT ': '';\n\n    if (Array.isArray(value)) {\n      value = value.map(item => {\n        let itemQuery = this.whereItemsQuery(item, options, this.OperatorMap[Op.and]);\n        if (itemQuery && itemQuery.length && (Array.isArray(item) || _.isPlainObject(item)) && Utils.getComplexSize(item) > 1) {\n          itemQuery = '('+itemQuery+')';\n        }\n        return itemQuery;\n      }).filter(item => item && item.length);\n\n      value = value.length && value.join(binding);\n    } else {\n      value = this.whereItemsQuery(value, options, binding);\n    }\n    // Op.or: [] should return no data.\n    // Op.not of no restriction should also return no data\n    if ((key === Op.or || key === Op.not) && !value) {\n      return '0 = 1';\n    }\n\n    return value ? outerBinding + '('+value+')' : undefined;\n  },\n\n  _whereBind(binding, key, value, options) {\n    if (_.isPlainObject(value)) {\n      value = Utils.getComplexKeys(value).map(prop => {\n        const item = value[prop];\n        return this.whereItemQuery(key, {[prop]: item}, options);\n      });\n    } else {\n      value = value.map(item => this.whereItemQuery(key, item, options));\n    }\n\n    value = value.filter(item => item && item.length);\n\n    return value.length ? '('+value.join(binding)+')' : undefined;\n  },\n\n  _whereJSON(key, value, options) {\n    const items = [];\n    let baseKey = this.quoteIdentifier(key);\n    if (options.prefix) {\n      if (options.prefix instanceof Utils.Literal) {\n        baseKey = `${this.handleSequelizeMethod(options.prefix)}.${baseKey}`;\n      } else {\n        baseKey = `${this.quoteTable(options.prefix)}.${baseKey}`;\n      }\n    }\n\n    Utils.getOperators(value).forEach(op => {\n      const where = {};\n      where[op] = value[op];\n      items.push(this.whereItemQuery(key, where, _.assign({}, options, {json: false})));\n    });\n\n    _.forOwn(value, (item, prop) => {\n      this._traverseJSON(items, baseKey, prop, item, [prop]);\n    });\n\n    const result = items.join(this.OperatorMap[Op.and]);\n    return items.length > 1 ? '('+result+')' : result;\n  },\n\n\n  _traverseJSON(items, baseKey, prop, item, path) {\n    let cast;\n\n    if (path[path.length - 1].indexOf('::') > -1) {\n      const tmp = path[path.length - 1].split('::');\n      cast = tmp[1];\n      path[path.length - 1] = tmp[0];\n    }\n\n    const pathKey = this.jsonPathExtractionQuery(baseKey, path);\n\n    if (_.isPlainObject(item)) {\n      Utils.getOperators(item).forEach(op => {\n        const value = this._toJSONValue(item[op]);\n        items.push(this.whereItemQuery(this._castKey(pathKey, value, cast), {[op]: value}));\n      });\n      _.forOwn(item, (value, itemProp) => {\n        this._traverseJSON(items, baseKey, itemProp, value, path.concat([itemProp]));\n      });\n\n      return;\n    }\n\n    item = this._toJSONValue(item);\n    items.push(this.whereItemQuery(this._castKey(pathKey, item, cast), {[Op.eq]: item}));\n  },\n\n  _toJSONValue(value) {\n    return value;\n  },\n\n  _castKey(key, value, cast, json) {\n    cast = cast || this._getJsonCast(Array.isArray(value) ? value[0] : value);\n    if (cast) {\n      return new Utils.Literal(this.handleSequelizeMethod(new Utils.Cast(new Utils.Literal(key), cast, json)));\n    }\n\n    return new Utils.Literal(key);\n  },\n\n  _getJsonCast(value) {\n    if (typeof value === 'number') {\n      return 'double precision';\n    }\n    if (value instanceof Date) {\n      return 'timestamptz';\n    }\n    if (typeof value === 'boolean') {\n      return 'boolean';\n    }\n    return;\n  },\n\n  _joinKeyValue(key, value, comparator, prefix) {\n    if (!key) {\n      return value;\n    }\n    if (comparator === undefined) {\n      throw new Error(`${key} and ${value} has no comperator`);\n    }\n    key = this._getSafeKey(key, prefix);\n    return [key, value].join(' '+comparator+' ');\n  },\n\n  _getSafeKey(key, prefix) {\n    if (key instanceof Utils.SequelizeMethod) {\n      key = this.handleSequelizeMethod(key);\n      return this._prefixKey(this.handleSequelizeMethod(key), prefix);\n    }\n\n    if (Utils.isColString(key)) {\n      key = key.substr(1, key.length - 2).split('.');\n\n      if (key.length > 2) {\n        key = [\n          // join the tables by -> to match out internal namings\n          key.slice(0, -1).join('->'),\n          key[key.length - 1]\n        ];\n      }\n\n      return key.map(identifier => this.quoteIdentifier(identifier)).join('.');\n    }\n\n    return this._prefixKey(this.quoteIdentifier(key), prefix);\n  },\n\n  _prefixKey(key, prefix) {\n    if (prefix) {\n      if (prefix instanceof Utils.Literal) {\n        return [this.handleSequelizeMethod(prefix), key].join('.');\n      }\n\n      return [this.quoteTable(prefix), key].join('.');\n    }\n\n    return key;\n  },\n\n  _whereParseSingleValueObject(key, field, prop, value, options) {\n    if (prop === Op.not) {\n      if (Array.isArray(value)) {\n        prop = Op.notIn;\n      } else if ([null, true, false].indexOf(value) < 0) {\n        prop = Op.ne;\n      }\n    }\n\n    let comparator = this.OperatorMap[prop] || this.OperatorMap[Op.eq];\n\n    switch (prop) {\n      case Op.in:\n      case Op.notIn:\n        if (value instanceof Utils.Literal) {\n          return this._joinKeyValue(key, value.val, comparator, options.prefix);\n        }\n\n        if (value.length) {\n          return this._joinKeyValue(key, `(${value.map(item => this.escape(item, field)).join(', ')})`, comparator, options.prefix);\n        }\n\n        if (comparator === this.OperatorMap[Op.in]) {\n          return this._joinKeyValue(key, '(NULL)', comparator, options.prefix);\n        }\n\n        return '';\n      case Op.any:\n      case Op.all:\n        comparator = `${this.OperatorMap[Op.eq]} ${comparator}`;\n        if (value[Op.values]) {\n          return this._joinKeyValue(key, `(VALUES ${value[Op.values].map(item => `(${this.escape(item)})`).join(', ')})`, comparator, options.prefix);\n        }\n\n        return this._joinKeyValue(key, `(${this.escape(value, field)})`, comparator, options.prefix);\n      case Op.between:\n      case Op.notBetween:\n        return this._joinKeyValue(key, `${this.escape(value[0])} AND ${this.escape(value[1])}`, comparator, options.prefix);\n      case Op.raw:\n        throw new Error('The `$raw` where property is no longer supported.  Use `sequelize.literal` instead.');\n      case Op.col:\n        comparator = this.OperatorMap[Op.eq];\n        value = value.split('.');\n\n        if (value.length > 2) {\n          value = [\n            // join the tables by -> to match out internal namings\n            value.slice(0, -1).join('->'),\n            value[value.length - 1]\n          ];\n        }\n\n        return this._joinKeyValue(key, value.map(identifier => this.quoteIdentifier(identifier)).join('.'), comparator, options.prefix);\n    }\n\n    const escapeOptions = {\n      acceptStrings: comparator.indexOf(this.OperatorMap[Op.like]) !== -1\n    };\n\n    if (_.isPlainObject(value)) {\n      if (value[Op.col]) {\n        return this._joinKeyValue(key, this.whereItemQuery(null, value), comparator, options.prefix);\n      }\n      if (value[Op.any]) {\n        escapeOptions.isList = true;\n        return this._joinKeyValue(key, `(${this.escape(value[Op.any], field, escapeOptions)})`, `${comparator} ${this.OperatorMap[Op.any]}`, options.prefix);\n      }\n      if (value[Op.all]) {\n        escapeOptions.isList = true;\n        return this._joinKeyValue(key, `(${this.escape(value[Op.all], field, escapeOptions)})`, `${comparator} ${this.OperatorMap[Op.all]}`, options.prefix);\n      }\n    }\n\n    if (comparator.indexOf(this.OperatorMap[Op.regexp]) !== -1) {\n      return this._joinKeyValue(key, `'${value}'`, comparator, options.prefix);\n    }\n\n    if (value === null && comparator === this.OperatorMap[Op.eq]) {\n      return this._joinKeyValue(key, this.escape(value, field, escapeOptions), this.OperatorMap[Op.is], options.prefix);\n    } else if (value === null && this.OperatorMap[Op.ne]) {\n      return this._joinKeyValue(key, this.escape(value, field, escapeOptions), this.OperatorMap[Op.not], options.prefix);\n    }\n\n    return this._joinKeyValue(key, this.escape(value, field, escapeOptions), comparator, options.prefix);\n  },\n\n  /*\n    Takes something and transforms it into values of a where condition.\n   @private\n  */\n  getWhereConditions(smth, tableName, factory, options, prepend) {\n    let result = null;\n    const where = {};\n\n    if (Array.isArray(tableName)) {\n      tableName = tableName[0];\n      if (Array.isArray(tableName)) {\n        tableName = tableName[1];\n      }\n    }\n\n    options = options || {};\n\n    if (typeof prepend === 'undefined') {\n      prepend = true;\n    }\n\n    if (smth && smth instanceof Utils.SequelizeMethod) { // Checking a property is cheaper than a lot of instanceof calls\n      result = this.handleSequelizeMethod(smth, tableName, factory, options, prepend);\n    } else if (_.isPlainObject(smth)) {\n      return this.whereItemsQuery(smth, {\n        model: factory,\n        prefix: prepend && tableName\n      });\n    } else if (typeof smth === 'number') {\n      let primaryKeys = factory ? Object.keys(factory.primaryKeys) : [];\n\n      if (primaryKeys.length > 0) {\n        // Since we're just a number, assume only the first key\n        primaryKeys = primaryKeys[0];\n      } else {\n        primaryKeys = 'id';\n      }\n\n      where[primaryKeys] = smth;\n\n      return this.whereItemsQuery(where, {\n        model: factory,\n        prefix: prepend && tableName\n      });\n    } else if (typeof smth === 'string') {\n      return this.whereItemsQuery(smth, {\n        model: factory,\n        prefix: prepend && tableName\n      });\n    } else if (Buffer.isBuffer(smth)) {\n      result = this.escape(smth);\n    } else if (Array.isArray(smth)) {\n      if (smth.length === 0 || smth.length > 0 && smth[0].length === 0) return '1=1';\n      if (Utils.canTreatArrayAsAnd(smth)) {\n        const _smth = { [Op.and]: smth };\n        result = this.getWhereConditions(_smth, tableName, factory, options, prepend);\n      } else {\n        throw new Error('Support for literal replacements in the `where` object has been removed.');\n      }\n    } else if (smth === null) {\n      return this.whereItemsQuery(smth, {\n        model: factory,\n        prefix: prepend && tableName\n      });\n    }\n\n    return result ? result : '1=1';\n  },\n\n  // A recursive parser for nested where conditions\n  parseConditionObject(conditions, path) {\n    path = path || [];\n    return _.reduce(conditions, (result, value, key) => {\n      if (_.isObject(value)) {\n        result = result.concat(this.parseConditionObject(value, path.concat(key))); // Recursively parse objects\n      } else {\n        result.push({ path: path.concat(key), value });\n      }\n      return result;\n    }, []);\n  },\n\n  isIdentifierQuoted(string) {\n    return /^\\s*(?:([`\"'])(?:(?!\\1).|\\1{2})*\\1\\.?)+\\s*$/i.test(string);\n  },\n\n  booleanValue(value) {\n    return value;\n  }\n};\n\nmodule.exports = QueryGenerator;\n","map":{"mappings":[{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":68,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":69,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":70,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":71,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":72,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":73,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":74,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":75,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":76,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":77,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":78,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":79,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":80,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":81,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":82,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":83,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":84,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":85,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":86,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":87,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":88,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":89,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":90,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":91,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":92,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":93,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":94,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":95,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":96,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":97,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":98,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":99,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":100,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":101,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":102,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":103,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":104,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":105,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":106,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":107,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":108,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":109,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":110,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":111,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":112,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":113,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":114,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":115,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":116,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":117,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":118,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":119,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":120,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":121,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":122,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":123,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":124,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":125,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":126,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":127,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":128,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":129,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":130,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":131,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":132,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":133,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":134,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":135,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":136,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":137,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":138,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":139,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":140,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":141,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":142,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":143,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":144,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":145,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":146,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":147,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":148,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":149,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":150,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":151,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":152,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":153,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":154,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":155,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":156,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":157,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":158,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":159,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":160,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":161,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":162,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":163,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":164,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":165,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":166,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":167,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":168,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":169,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":170,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":171,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":172,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":173,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":174,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":175,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":176,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":177,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":178,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":179,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":180,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":181,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":182,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":183,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":184,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":185,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":186,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":187,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":188,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":189,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":190,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":191,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":192,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":193,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":194,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":195,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":196,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":197,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":198,"column":0},"generated":{"line":199,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":199,"column":0},"generated":{"line":200,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":200,"column":0},"generated":{"line":201,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":201,"column":0},"generated":{"line":202,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":202,"column":0},"generated":{"line":203,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":203,"column":0},"generated":{"line":204,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":204,"column":0},"generated":{"line":205,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":205,"column":0},"generated":{"line":206,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":206,"column":0},"generated":{"line":207,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":207,"column":0},"generated":{"line":208,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":208,"column":0},"generated":{"line":209,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":209,"column":0},"generated":{"line":210,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":210,"column":0},"generated":{"line":211,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":211,"column":0},"generated":{"line":212,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":212,"column":0},"generated":{"line":213,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":213,"column":0},"generated":{"line":214,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":214,"column":0},"generated":{"line":215,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":215,"column":0},"generated":{"line":216,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":216,"column":0},"generated":{"line":217,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":217,"column":0},"generated":{"line":218,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":218,"column":0},"generated":{"line":219,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":219,"column":0},"generated":{"line":220,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":220,"column":0},"generated":{"line":221,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":221,"column":0},"generated":{"line":222,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":222,"column":0},"generated":{"line":223,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":223,"column":0},"generated":{"line":224,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":224,"column":0},"generated":{"line":225,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":225,"column":0},"generated":{"line":226,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":226,"column":0},"generated":{"line":227,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":227,"column":0},"generated":{"line":228,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":228,"column":0},"generated":{"line":229,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":229,"column":0},"generated":{"line":230,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":230,"column":0},"generated":{"line":231,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":231,"column":0},"generated":{"line":232,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":232,"column":0},"generated":{"line":233,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":233,"column":0},"generated":{"line":234,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":234,"column":0},"generated":{"line":235,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":235,"column":0},"generated":{"line":236,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":236,"column":0},"generated":{"line":237,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":237,"column":0},"generated":{"line":238,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":238,"column":0},"generated":{"line":239,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":239,"column":0},"generated":{"line":240,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":240,"column":0},"generated":{"line":241,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":241,"column":0},"generated":{"line":242,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":242,"column":0},"generated":{"line":243,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":243,"column":0},"generated":{"line":244,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":244,"column":0},"generated":{"line":245,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":245,"column":0},"generated":{"line":246,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":246,"column":0},"generated":{"line":247,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":247,"column":0},"generated":{"line":248,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":248,"column":0},"generated":{"line":249,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":249,"column":0},"generated":{"line":250,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":250,"column":0},"generated":{"line":251,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":251,"column":0},"generated":{"line":252,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":252,"column":0},"generated":{"line":253,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":253,"column":0},"generated":{"line":254,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":254,"column":0},"generated":{"line":255,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":255,"column":0},"generated":{"line":256,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":256,"column":0},"generated":{"line":257,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":257,"column":0},"generated":{"line":258,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":258,"column":0},"generated":{"line":259,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":259,"column":0},"generated":{"line":260,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":260,"column":0},"generated":{"line":261,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":261,"column":0},"generated":{"line":262,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":262,"column":0},"generated":{"line":263,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":263,"column":0},"generated":{"line":264,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":264,"column":0},"generated":{"line":265,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":265,"column":0},"generated":{"line":266,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":266,"column":0},"generated":{"line":267,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":267,"column":0},"generated":{"line":268,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":268,"column":0},"generated":{"line":269,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":269,"column":0},"generated":{"line":270,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":270,"column":0},"generated":{"line":271,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":271,"column":0},"generated":{"line":272,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":272,"column":0},"generated":{"line":273,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":273,"column":0},"generated":{"line":274,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":274,"column":0},"generated":{"line":275,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":275,"column":0},"generated":{"line":276,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":276,"column":0},"generated":{"line":277,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":277,"column":0},"generated":{"line":278,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":278,"column":0},"generated":{"line":279,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":279,"column":0},"generated":{"line":280,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":280,"column":0},"generated":{"line":281,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":281,"column":0},"generated":{"line":282,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":282,"column":0},"generated":{"line":283,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":283,"column":0},"generated":{"line":284,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":284,"column":0},"generated":{"line":285,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":285,"column":0},"generated":{"line":286,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":286,"column":0},"generated":{"line":287,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":287,"column":0},"generated":{"line":288,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":288,"column":0},"generated":{"line":289,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":289,"column":0},"generated":{"line":290,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":290,"column":0},"generated":{"line":291,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":291,"column":0},"generated":{"line":292,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":292,"column":0},"generated":{"line":293,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":293,"column":0},"generated":{"line":294,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":294,"column":0},"generated":{"line":295,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":295,"column":0},"generated":{"line":296,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":296,"column":0},"generated":{"line":297,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":297,"column":0},"generated":{"line":298,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":298,"column":0},"generated":{"line":299,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":299,"column":0},"generated":{"line":300,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":300,"column":0},"generated":{"line":301,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":301,"column":0},"generated":{"line":302,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":302,"column":0},"generated":{"line":303,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":303,"column":0},"generated":{"line":304,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":304,"column":0},"generated":{"line":305,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":305,"column":0},"generated":{"line":306,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":306,"column":0},"generated":{"line":307,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":307,"column":0},"generated":{"line":308,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":308,"column":0},"generated":{"line":309,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":309,"column":0},"generated":{"line":310,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":310,"column":0},"generated":{"line":311,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":311,"column":0},"generated":{"line":312,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":312,"column":0},"generated":{"line":313,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":313,"column":0},"generated":{"line":314,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":314,"column":0},"generated":{"line":315,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":315,"column":0},"generated":{"line":316,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":316,"column":0},"generated":{"line":317,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":317,"column":0},"generated":{"line":318,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":318,"column":0},"generated":{"line":319,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":319,"column":0},"generated":{"line":320,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":320,"column":0},"generated":{"line":321,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":321,"column":0},"generated":{"line":322,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":322,"column":0},"generated":{"line":323,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":323,"column":0},"generated":{"line":324,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":324,"column":0},"generated":{"line":325,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":325,"column":0},"generated":{"line":326,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":326,"column":0},"generated":{"line":327,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":327,"column":0},"generated":{"line":328,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":328,"column":0},"generated":{"line":329,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":329,"column":0},"generated":{"line":330,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":330,"column":0},"generated":{"line":331,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":331,"column":0},"generated":{"line":332,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":332,"column":0},"generated":{"line":333,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":333,"column":0},"generated":{"line":334,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":334,"column":0},"generated":{"line":335,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":335,"column":0},"generated":{"line":336,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":336,"column":0},"generated":{"line":337,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":337,"column":0},"generated":{"line":338,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":338,"column":0},"generated":{"line":339,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":339,"column":0},"generated":{"line":340,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":340,"column":0},"generated":{"line":341,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":341,"column":0},"generated":{"line":342,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":342,"column":0},"generated":{"line":343,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":343,"column":0},"generated":{"line":344,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":344,"column":0},"generated":{"line":345,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":345,"column":0},"generated":{"line":346,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":346,"column":0},"generated":{"line":347,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":347,"column":0},"generated":{"line":348,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":348,"column":0},"generated":{"line":349,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":349,"column":0},"generated":{"line":350,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":350,"column":0},"generated":{"line":351,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":351,"column":0},"generated":{"line":352,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":352,"column":0},"generated":{"line":353,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":353,"column":0},"generated":{"line":354,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":354,"column":0},"generated":{"line":355,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":355,"column":0},"generated":{"line":356,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":356,"column":0},"generated":{"line":357,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":357,"column":0},"generated":{"line":358,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":358,"column":0},"generated":{"line":359,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":359,"column":0},"generated":{"line":360,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":360,"column":0},"generated":{"line":361,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":361,"column":0},"generated":{"line":362,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":362,"column":0},"generated":{"line":363,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":363,"column":0},"generated":{"line":364,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":364,"column":0},"generated":{"line":365,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":365,"column":0},"generated":{"line":366,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":366,"column":0},"generated":{"line":367,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":367,"column":0},"generated":{"line":368,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":368,"column":0},"generated":{"line":369,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":369,"column":0},"generated":{"line":370,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":370,"column":0},"generated":{"line":371,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":371,"column":0},"generated":{"line":372,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":372,"column":0},"generated":{"line":373,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":373,"column":0},"generated":{"line":374,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":374,"column":0},"generated":{"line":375,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":375,"column":0},"generated":{"line":376,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":376,"column":0},"generated":{"line":377,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":377,"column":0},"generated":{"line":378,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":378,"column":0},"generated":{"line":379,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":379,"column":0},"generated":{"line":380,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":380,"column":0},"generated":{"line":381,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":381,"column":0},"generated":{"line":382,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":382,"column":0},"generated":{"line":383,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":383,"column":0},"generated":{"line":384,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":384,"column":0},"generated":{"line":385,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":385,"column":0},"generated":{"line":386,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":386,"column":0},"generated":{"line":387,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":387,"column":0},"generated":{"line":388,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":388,"column":0},"generated":{"line":389,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":389,"column":0},"generated":{"line":390,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":390,"column":0},"generated":{"line":391,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":391,"column":0},"generated":{"line":392,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":392,"column":0},"generated":{"line":393,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":393,"column":0},"generated":{"line":394,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":394,"column":0},"generated":{"line":395,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":395,"column":0},"generated":{"line":396,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":396,"column":0},"generated":{"line":397,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":397,"column":0},"generated":{"line":398,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":398,"column":0},"generated":{"line":399,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":399,"column":0},"generated":{"line":400,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":400,"column":0},"generated":{"line":401,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":401,"column":0},"generated":{"line":402,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":402,"column":0},"generated":{"line":403,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":403,"column":0},"generated":{"line":404,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":404,"column":0},"generated":{"line":405,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":405,"column":0},"generated":{"line":406,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":406,"column":0},"generated":{"line":407,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":407,"column":0},"generated":{"line":408,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":408,"column":0},"generated":{"line":409,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":409,"column":0},"generated":{"line":410,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":410,"column":0},"generated":{"line":411,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":411,"column":0},"generated":{"line":412,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":412,"column":0},"generated":{"line":413,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":413,"column":0},"generated":{"line":414,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":414,"column":0},"generated":{"line":415,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":415,"column":0},"generated":{"line":416,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":416,"column":0},"generated":{"line":417,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":417,"column":0},"generated":{"line":418,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":418,"column":0},"generated":{"line":419,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":419,"column":0},"generated":{"line":420,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":420,"column":0},"generated":{"line":421,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":421,"column":0},"generated":{"line":422,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":422,"column":0},"generated":{"line":423,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":423,"column":0},"generated":{"line":424,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":424,"column":0},"generated":{"line":425,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":425,"column":0},"generated":{"line":426,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":426,"column":0},"generated":{"line":427,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":427,"column":0},"generated":{"line":428,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":428,"column":0},"generated":{"line":429,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":429,"column":0},"generated":{"line":430,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":430,"column":0},"generated":{"line":431,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":431,"column":0},"generated":{"line":432,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":432,"column":0},"generated":{"line":433,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":433,"column":0},"generated":{"line":434,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":434,"column":0},"generated":{"line":435,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":435,"column":0},"generated":{"line":436,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":436,"column":0},"generated":{"line":437,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":437,"column":0},"generated":{"line":438,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":438,"column":0},"generated":{"line":439,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":439,"column":0},"generated":{"line":440,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":440,"column":0},"generated":{"line":441,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":441,"column":0},"generated":{"line":442,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":442,"column":0},"generated":{"line":443,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":443,"column":0},"generated":{"line":444,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":444,"column":0},"generated":{"line":445,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":445,"column":0},"generated":{"line":446,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":446,"column":0},"generated":{"line":447,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":447,"column":0},"generated":{"line":448,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":448,"column":0},"generated":{"line":449,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":449,"column":0},"generated":{"line":450,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":450,"column":0},"generated":{"line":451,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":451,"column":0},"generated":{"line":452,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":452,"column":0},"generated":{"line":453,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":453,"column":0},"generated":{"line":454,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":454,"column":0},"generated":{"line":455,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":455,"column":0},"generated":{"line":456,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":456,"column":0},"generated":{"line":457,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":457,"column":0},"generated":{"line":458,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":458,"column":0},"generated":{"line":459,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":459,"column":0},"generated":{"line":460,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":460,"column":0},"generated":{"line":461,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":461,"column":0},"generated":{"line":462,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":462,"column":0},"generated":{"line":463,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":463,"column":0},"generated":{"line":464,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":464,"column":0},"generated":{"line":465,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":465,"column":0},"generated":{"line":466,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":466,"column":0},"generated":{"line":467,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":467,"column":0},"generated":{"line":468,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":468,"column":0},"generated":{"line":469,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":469,"column":0},"generated":{"line":470,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":470,"column":0},"generated":{"line":471,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":471,"column":0},"generated":{"line":472,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":472,"column":0},"generated":{"line":473,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":473,"column":0},"generated":{"line":474,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":474,"column":0},"generated":{"line":475,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":475,"column":0},"generated":{"line":476,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":476,"column":0},"generated":{"line":477,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":477,"column":0},"generated":{"line":478,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":478,"column":0},"generated":{"line":479,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":479,"column":0},"generated":{"line":480,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":480,"column":0},"generated":{"line":481,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":481,"column":0},"generated":{"line":482,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":482,"column":0},"generated":{"line":483,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":483,"column":0},"generated":{"line":484,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":484,"column":0},"generated":{"line":485,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":485,"column":0},"generated":{"line":486,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":486,"column":0},"generated":{"line":487,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":487,"column":0},"generated":{"line":488,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":488,"column":0},"generated":{"line":489,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":489,"column":0},"generated":{"line":490,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":490,"column":0},"generated":{"line":491,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":491,"column":0},"generated":{"line":492,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":492,"column":0},"generated":{"line":493,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":493,"column":0},"generated":{"line":494,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":494,"column":0},"generated":{"line":495,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":495,"column":0},"generated":{"line":496,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":496,"column":0},"generated":{"line":497,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":497,"column":0},"generated":{"line":498,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":498,"column":0},"generated":{"line":499,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":499,"column":0},"generated":{"line":500,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":500,"column":0},"generated":{"line":501,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":501,"column":0},"generated":{"line":502,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":502,"column":0},"generated":{"line":503,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":503,"column":0},"generated":{"line":504,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":504,"column":0},"generated":{"line":505,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":505,"column":0},"generated":{"line":506,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":506,"column":0},"generated":{"line":507,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":507,"column":0},"generated":{"line":508,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":508,"column":0},"generated":{"line":509,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":509,"column":0},"generated":{"line":510,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":510,"column":0},"generated":{"line":511,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":511,"column":0},"generated":{"line":512,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":512,"column":0},"generated":{"line":513,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":513,"column":0},"generated":{"line":514,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":514,"column":0},"generated":{"line":515,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":515,"column":0},"generated":{"line":516,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":516,"column":0},"generated":{"line":517,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":517,"column":0},"generated":{"line":518,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":518,"column":0},"generated":{"line":519,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":519,"column":0},"generated":{"line":520,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":520,"column":0},"generated":{"line":521,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":521,"column":0},"generated":{"line":522,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":522,"column":0},"generated":{"line":523,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":523,"column":0},"generated":{"line":524,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":524,"column":0},"generated":{"line":525,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":525,"column":0},"generated":{"line":526,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":526,"column":0},"generated":{"line":527,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":527,"column":0},"generated":{"line":528,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":528,"column":0},"generated":{"line":529,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":529,"column":0},"generated":{"line":530,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":530,"column":0},"generated":{"line":531,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":531,"column":0},"generated":{"line":532,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":532,"column":0},"generated":{"line":533,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":533,"column":0},"generated":{"line":534,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":534,"column":0},"generated":{"line":535,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":535,"column":0},"generated":{"line":536,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":536,"column":0},"generated":{"line":537,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":537,"column":0},"generated":{"line":538,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":538,"column":0},"generated":{"line":539,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":539,"column":0},"generated":{"line":540,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":540,"column":0},"generated":{"line":541,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":541,"column":0},"generated":{"line":542,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":542,"column":0},"generated":{"line":543,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":543,"column":0},"generated":{"line":544,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":544,"column":0},"generated":{"line":545,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":545,"column":0},"generated":{"line":546,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":546,"column":0},"generated":{"line":547,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":547,"column":0},"generated":{"line":548,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":548,"column":0},"generated":{"line":549,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":549,"column":0},"generated":{"line":550,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":550,"column":0},"generated":{"line":551,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":551,"column":0},"generated":{"line":552,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":552,"column":0},"generated":{"line":553,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":553,"column":0},"generated":{"line":554,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":554,"column":0},"generated":{"line":555,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":555,"column":0},"generated":{"line":556,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":556,"column":0},"generated":{"line":557,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":557,"column":0},"generated":{"line":558,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":558,"column":0},"generated":{"line":559,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":559,"column":0},"generated":{"line":560,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":560,"column":0},"generated":{"line":561,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":561,"column":0},"generated":{"line":562,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":562,"column":0},"generated":{"line":563,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":563,"column":0},"generated":{"line":564,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":564,"column":0},"generated":{"line":565,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":565,"column":0},"generated":{"line":566,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":566,"column":0},"generated":{"line":567,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":567,"column":0},"generated":{"line":568,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":568,"column":0},"generated":{"line":569,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":569,"column":0},"generated":{"line":570,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":570,"column":0},"generated":{"line":571,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":571,"column":0},"generated":{"line":572,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":572,"column":0},"generated":{"line":573,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":573,"column":0},"generated":{"line":574,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":574,"column":0},"generated":{"line":575,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":575,"column":0},"generated":{"line":576,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":576,"column":0},"generated":{"line":577,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":577,"column":0},"generated":{"line":578,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":578,"column":0},"generated":{"line":579,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":579,"column":0},"generated":{"line":580,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":580,"column":0},"generated":{"line":581,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":581,"column":0},"generated":{"line":582,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":582,"column":0},"generated":{"line":583,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":583,"column":0},"generated":{"line":584,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":584,"column":0},"generated":{"line":585,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":585,"column":0},"generated":{"line":586,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":586,"column":0},"generated":{"line":587,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":587,"column":0},"generated":{"line":588,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":588,"column":0},"generated":{"line":589,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":589,"column":0},"generated":{"line":590,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":590,"column":0},"generated":{"line":591,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":591,"column":0},"generated":{"line":592,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":592,"column":0},"generated":{"line":593,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":593,"column":0},"generated":{"line":594,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":594,"column":0},"generated":{"line":595,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":595,"column":0},"generated":{"line":596,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":596,"column":0},"generated":{"line":597,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":597,"column":0},"generated":{"line":598,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":598,"column":0},"generated":{"line":599,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":599,"column":0},"generated":{"line":600,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":600,"column":0},"generated":{"line":601,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":601,"column":0},"generated":{"line":602,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":602,"column":0},"generated":{"line":603,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":603,"column":0},"generated":{"line":604,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":604,"column":0},"generated":{"line":605,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":605,"column":0},"generated":{"line":606,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":606,"column":0},"generated":{"line":607,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":607,"column":0},"generated":{"line":608,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":608,"column":0},"generated":{"line":609,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":609,"column":0},"generated":{"line":610,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":610,"column":0},"generated":{"line":611,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":611,"column":0},"generated":{"line":612,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":612,"column":0},"generated":{"line":613,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":613,"column":0},"generated":{"line":614,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":614,"column":0},"generated":{"line":615,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":615,"column":0},"generated":{"line":616,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":616,"column":0},"generated":{"line":617,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":617,"column":0},"generated":{"line":618,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":618,"column":0},"generated":{"line":619,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":619,"column":0},"generated":{"line":620,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":620,"column":0},"generated":{"line":621,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":621,"column":0},"generated":{"line":622,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":622,"column":0},"generated":{"line":623,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":623,"column":0},"generated":{"line":624,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":624,"column":0},"generated":{"line":625,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":625,"column":0},"generated":{"line":626,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":626,"column":0},"generated":{"line":627,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":627,"column":0},"generated":{"line":628,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":628,"column":0},"generated":{"line":629,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":629,"column":0},"generated":{"line":630,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":630,"column":0},"generated":{"line":631,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":631,"column":0},"generated":{"line":632,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":632,"column":0},"generated":{"line":633,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":633,"column":0},"generated":{"line":634,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":634,"column":0},"generated":{"line":635,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":635,"column":0},"generated":{"line":636,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":636,"column":0},"generated":{"line":637,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":637,"column":0},"generated":{"line":638,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":638,"column":0},"generated":{"line":639,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":639,"column":0},"generated":{"line":640,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":640,"column":0},"generated":{"line":641,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":641,"column":0},"generated":{"line":642,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":642,"column":0},"generated":{"line":643,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":643,"column":0},"generated":{"line":644,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":644,"column":0},"generated":{"line":645,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":645,"column":0},"generated":{"line":646,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":646,"column":0},"generated":{"line":647,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":647,"column":0},"generated":{"line":648,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":648,"column":0},"generated":{"line":649,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":649,"column":0},"generated":{"line":650,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":650,"column":0},"generated":{"line":651,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":651,"column":0},"generated":{"line":652,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":652,"column":0},"generated":{"line":653,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":653,"column":0},"generated":{"line":654,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":654,"column":0},"generated":{"line":655,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":655,"column":0},"generated":{"line":656,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":656,"column":0},"generated":{"line":657,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":657,"column":0},"generated":{"line":658,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":658,"column":0},"generated":{"line":659,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":659,"column":0},"generated":{"line":660,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":660,"column":0},"generated":{"line":661,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":661,"column":0},"generated":{"line":662,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":662,"column":0},"generated":{"line":663,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":663,"column":0},"generated":{"line":664,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":664,"column":0},"generated":{"line":665,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":665,"column":0},"generated":{"line":666,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":666,"column":0},"generated":{"line":667,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":667,"column":0},"generated":{"line":668,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":668,"column":0},"generated":{"line":669,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":669,"column":0},"generated":{"line":670,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":670,"column":0},"generated":{"line":671,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":671,"column":0},"generated":{"line":672,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":672,"column":0},"generated":{"line":673,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":673,"column":0},"generated":{"line":674,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":674,"column":0},"generated":{"line":675,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":675,"column":0},"generated":{"line":676,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":676,"column":0},"generated":{"line":677,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":677,"column":0},"generated":{"line":678,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":678,"column":0},"generated":{"line":679,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":679,"column":0},"generated":{"line":680,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":680,"column":0},"generated":{"line":681,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":681,"column":0},"generated":{"line":682,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":682,"column":0},"generated":{"line":683,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":683,"column":0},"generated":{"line":684,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":684,"column":0},"generated":{"line":685,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":685,"column":0},"generated":{"line":686,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":686,"column":0},"generated":{"line":687,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":687,"column":0},"generated":{"line":688,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":688,"column":0},"generated":{"line":689,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":689,"column":0},"generated":{"line":690,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":690,"column":0},"generated":{"line":691,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":691,"column":0},"generated":{"line":692,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":692,"column":0},"generated":{"line":693,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":693,"column":0},"generated":{"line":694,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":694,"column":0},"generated":{"line":695,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":695,"column":0},"generated":{"line":696,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":696,"column":0},"generated":{"line":697,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":697,"column":0},"generated":{"line":698,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":698,"column":0},"generated":{"line":699,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":699,"column":0},"generated":{"line":700,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":700,"column":0},"generated":{"line":701,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":701,"column":0},"generated":{"line":702,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":702,"column":0},"generated":{"line":703,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":703,"column":0},"generated":{"line":704,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":704,"column":0},"generated":{"line":705,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":705,"column":0},"generated":{"line":706,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":706,"column":0},"generated":{"line":707,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":707,"column":0},"generated":{"line":708,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":708,"column":0},"generated":{"line":709,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":709,"column":0},"generated":{"line":710,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":710,"column":0},"generated":{"line":711,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":711,"column":0},"generated":{"line":712,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":712,"column":0},"generated":{"line":713,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":713,"column":0},"generated":{"line":714,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":714,"column":0},"generated":{"line":715,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":715,"column":0},"generated":{"line":716,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":716,"column":0},"generated":{"line":717,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":717,"column":0},"generated":{"line":718,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":718,"column":0},"generated":{"line":719,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":719,"column":0},"generated":{"line":720,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":720,"column":0},"generated":{"line":721,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":721,"column":0},"generated":{"line":722,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":722,"column":0},"generated":{"line":723,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":723,"column":0},"generated":{"line":724,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":724,"column":0},"generated":{"line":725,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":725,"column":0},"generated":{"line":726,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":726,"column":0},"generated":{"line":727,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":727,"column":0},"generated":{"line":728,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":728,"column":0},"generated":{"line":729,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":729,"column":0},"generated":{"line":730,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":730,"column":0},"generated":{"line":731,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":731,"column":0},"generated":{"line":732,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":732,"column":0},"generated":{"line":733,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":733,"column":0},"generated":{"line":734,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":734,"column":0},"generated":{"line":735,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":735,"column":0},"generated":{"line":736,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":736,"column":0},"generated":{"line":737,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":737,"column":0},"generated":{"line":738,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":738,"column":0},"generated":{"line":739,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":739,"column":0},"generated":{"line":740,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":740,"column":0},"generated":{"line":741,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":741,"column":0},"generated":{"line":742,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":742,"column":0},"generated":{"line":743,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":743,"column":0},"generated":{"line":744,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":744,"column":0},"generated":{"line":745,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":745,"column":0},"generated":{"line":746,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":746,"column":0},"generated":{"line":747,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":747,"column":0},"generated":{"line":748,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":748,"column":0},"generated":{"line":749,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":749,"column":0},"generated":{"line":750,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":750,"column":0},"generated":{"line":751,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":751,"column":0},"generated":{"line":752,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":752,"column":0},"generated":{"line":753,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":753,"column":0},"generated":{"line":754,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":754,"column":0},"generated":{"line":755,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":755,"column":0},"generated":{"line":756,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":756,"column":0},"generated":{"line":757,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":757,"column":0},"generated":{"line":758,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":758,"column":0},"generated":{"line":759,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":759,"column":0},"generated":{"line":760,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":760,"column":0},"generated":{"line":761,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":761,"column":0},"generated":{"line":762,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":762,"column":0},"generated":{"line":763,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":763,"column":0},"generated":{"line":764,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":764,"column":0},"generated":{"line":765,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":765,"column":0},"generated":{"line":766,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":766,"column":0},"generated":{"line":767,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":767,"column":0},"generated":{"line":768,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":768,"column":0},"generated":{"line":769,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":769,"column":0},"generated":{"line":770,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":770,"column":0},"generated":{"line":771,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":771,"column":0},"generated":{"line":772,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":772,"column":0},"generated":{"line":773,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":773,"column":0},"generated":{"line":774,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":774,"column":0},"generated":{"line":775,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":775,"column":0},"generated":{"line":776,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":776,"column":0},"generated":{"line":777,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":777,"column":0},"generated":{"line":778,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":778,"column":0},"generated":{"line":779,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":779,"column":0},"generated":{"line":780,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":780,"column":0},"generated":{"line":781,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":781,"column":0},"generated":{"line":782,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":782,"column":0},"generated":{"line":783,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":783,"column":0},"generated":{"line":784,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":784,"column":0},"generated":{"line":785,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":785,"column":0},"generated":{"line":786,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":786,"column":0},"generated":{"line":787,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":787,"column":0},"generated":{"line":788,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":788,"column":0},"generated":{"line":789,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":789,"column":0},"generated":{"line":790,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":790,"column":0},"generated":{"line":791,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":791,"column":0},"generated":{"line":792,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":792,"column":0},"generated":{"line":793,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":793,"column":0},"generated":{"line":794,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":794,"column":0},"generated":{"line":795,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":795,"column":0},"generated":{"line":796,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":796,"column":0},"generated":{"line":797,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":797,"column":0},"generated":{"line":798,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":798,"column":0},"generated":{"line":799,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":799,"column":0},"generated":{"line":800,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":800,"column":0},"generated":{"line":801,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":801,"column":0},"generated":{"line":802,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":802,"column":0},"generated":{"line":803,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":803,"column":0},"generated":{"line":804,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":804,"column":0},"generated":{"line":805,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":805,"column":0},"generated":{"line":806,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":806,"column":0},"generated":{"line":807,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":807,"column":0},"generated":{"line":808,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":808,"column":0},"generated":{"line":809,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":809,"column":0},"generated":{"line":810,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":810,"column":0},"generated":{"line":811,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":811,"column":0},"generated":{"line":812,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":812,"column":0},"generated":{"line":813,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":813,"column":0},"generated":{"line":814,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":814,"column":0},"generated":{"line":815,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":815,"column":0},"generated":{"line":816,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":816,"column":0},"generated":{"line":817,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":817,"column":0},"generated":{"line":818,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":818,"column":0},"generated":{"line":819,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":819,"column":0},"generated":{"line":820,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":820,"column":0},"generated":{"line":821,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":821,"column":0},"generated":{"line":822,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":822,"column":0},"generated":{"line":823,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":823,"column":0},"generated":{"line":824,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":824,"column":0},"generated":{"line":825,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":825,"column":0},"generated":{"line":826,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":826,"column":0},"generated":{"line":827,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":827,"column":0},"generated":{"line":828,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":828,"column":0},"generated":{"line":829,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":829,"column":0},"generated":{"line":830,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":830,"column":0},"generated":{"line":831,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":831,"column":0},"generated":{"line":832,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":832,"column":0},"generated":{"line":833,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":833,"column":0},"generated":{"line":834,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":834,"column":0},"generated":{"line":835,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":835,"column":0},"generated":{"line":836,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":836,"column":0},"generated":{"line":837,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":837,"column":0},"generated":{"line":838,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":838,"column":0},"generated":{"line":839,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":839,"column":0},"generated":{"line":840,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":840,"column":0},"generated":{"line":841,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":841,"column":0},"generated":{"line":842,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":842,"column":0},"generated":{"line":843,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":843,"column":0},"generated":{"line":844,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":844,"column":0},"generated":{"line":845,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":845,"column":0},"generated":{"line":846,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":846,"column":0},"generated":{"line":847,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":847,"column":0},"generated":{"line":848,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":848,"column":0},"generated":{"line":849,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":849,"column":0},"generated":{"line":850,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":850,"column":0},"generated":{"line":851,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":851,"column":0},"generated":{"line":852,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":852,"column":0},"generated":{"line":853,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":853,"column":0},"generated":{"line":854,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":854,"column":0},"generated":{"line":855,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":855,"column":0},"generated":{"line":856,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":856,"column":0},"generated":{"line":857,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":857,"column":0},"generated":{"line":858,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":858,"column":0},"generated":{"line":859,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":859,"column":0},"generated":{"line":860,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":860,"column":0},"generated":{"line":861,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":861,"column":0},"generated":{"line":862,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":862,"column":0},"generated":{"line":863,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":863,"column":0},"generated":{"line":864,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":864,"column":0},"generated":{"line":865,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":865,"column":0},"generated":{"line":866,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":866,"column":0},"generated":{"line":867,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":867,"column":0},"generated":{"line":868,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":868,"column":0},"generated":{"line":869,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":869,"column":0},"generated":{"line":870,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":870,"column":0},"generated":{"line":871,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":871,"column":0},"generated":{"line":872,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":872,"column":0},"generated":{"line":873,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":873,"column":0},"generated":{"line":874,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":874,"column":0},"generated":{"line":875,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":875,"column":0},"generated":{"line":876,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":876,"column":0},"generated":{"line":877,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":877,"column":0},"generated":{"line":878,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":878,"column":0},"generated":{"line":879,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":879,"column":0},"generated":{"line":880,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":880,"column":0},"generated":{"line":881,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":881,"column":0},"generated":{"line":882,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":882,"column":0},"generated":{"line":883,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":883,"column":0},"generated":{"line":884,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":884,"column":0},"generated":{"line":885,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":885,"column":0},"generated":{"line":886,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":886,"column":0},"generated":{"line":887,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":887,"column":0},"generated":{"line":888,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":888,"column":0},"generated":{"line":889,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":889,"column":0},"generated":{"line":890,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":890,"column":0},"generated":{"line":891,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":891,"column":0},"generated":{"line":892,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":892,"column":0},"generated":{"line":893,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":893,"column":0},"generated":{"line":894,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":894,"column":0},"generated":{"line":895,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":895,"column":0},"generated":{"line":896,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":896,"column":0},"generated":{"line":897,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":897,"column":0},"generated":{"line":898,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":898,"column":0},"generated":{"line":899,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":899,"column":0},"generated":{"line":900,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":900,"column":0},"generated":{"line":901,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":901,"column":0},"generated":{"line":902,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":902,"column":0},"generated":{"line":903,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":903,"column":0},"generated":{"line":904,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":904,"column":0},"generated":{"line":905,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":905,"column":0},"generated":{"line":906,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":906,"column":0},"generated":{"line":907,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":907,"column":0},"generated":{"line":908,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":908,"column":0},"generated":{"line":909,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":909,"column":0},"generated":{"line":910,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":910,"column":0},"generated":{"line":911,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":911,"column":0},"generated":{"line":912,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":912,"column":0},"generated":{"line":913,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":913,"column":0},"generated":{"line":914,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":914,"column":0},"generated":{"line":915,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":915,"column":0},"generated":{"line":916,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":916,"column":0},"generated":{"line":917,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":917,"column":0},"generated":{"line":918,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":918,"column":0},"generated":{"line":919,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":919,"column":0},"generated":{"line":920,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":920,"column":0},"generated":{"line":921,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":921,"column":0},"generated":{"line":922,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":922,"column":0},"generated":{"line":923,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":923,"column":0},"generated":{"line":924,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":924,"column":0},"generated":{"line":925,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":925,"column":0},"generated":{"line":926,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":926,"column":0},"generated":{"line":927,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":927,"column":0},"generated":{"line":928,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":928,"column":0},"generated":{"line":929,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":929,"column":0},"generated":{"line":930,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":930,"column":0},"generated":{"line":931,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":931,"column":0},"generated":{"line":932,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":932,"column":0},"generated":{"line":933,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":933,"column":0},"generated":{"line":934,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":934,"column":0},"generated":{"line":935,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":935,"column":0},"generated":{"line":936,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":936,"column":0},"generated":{"line":937,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":937,"column":0},"generated":{"line":938,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":938,"column":0},"generated":{"line":939,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":939,"column":0},"generated":{"line":940,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":940,"column":0},"generated":{"line":941,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":941,"column":0},"generated":{"line":942,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":942,"column":0},"generated":{"line":943,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":943,"column":0},"generated":{"line":944,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":944,"column":0},"generated":{"line":945,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":945,"column":0},"generated":{"line":946,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":946,"column":0},"generated":{"line":947,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":947,"column":0},"generated":{"line":948,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":948,"column":0},"generated":{"line":949,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":949,"column":0},"generated":{"line":950,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":950,"column":0},"generated":{"line":951,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":951,"column":0},"generated":{"line":952,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":952,"column":0},"generated":{"line":953,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":953,"column":0},"generated":{"line":954,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":954,"column":0},"generated":{"line":955,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":955,"column":0},"generated":{"line":956,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":956,"column":0},"generated":{"line":957,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":957,"column":0},"generated":{"line":958,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":958,"column":0},"generated":{"line":959,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":959,"column":0},"generated":{"line":960,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":960,"column":0},"generated":{"line":961,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":961,"column":0},"generated":{"line":962,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":962,"column":0},"generated":{"line":963,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":963,"column":0},"generated":{"line":964,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":964,"column":0},"generated":{"line":965,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":965,"column":0},"generated":{"line":966,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":966,"column":0},"generated":{"line":967,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":967,"column":0},"generated":{"line":968,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":968,"column":0},"generated":{"line":969,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":969,"column":0},"generated":{"line":970,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":970,"column":0},"generated":{"line":971,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":971,"column":0},"generated":{"line":972,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":972,"column":0},"generated":{"line":973,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":973,"column":0},"generated":{"line":974,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":974,"column":0},"generated":{"line":975,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":975,"column":0},"generated":{"line":976,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":976,"column":0},"generated":{"line":977,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":977,"column":0},"generated":{"line":978,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":978,"column":0},"generated":{"line":979,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":979,"column":0},"generated":{"line":980,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":980,"column":0},"generated":{"line":981,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":981,"column":0},"generated":{"line":982,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":982,"column":0},"generated":{"line":983,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":983,"column":0},"generated":{"line":984,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":984,"column":0},"generated":{"line":985,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":985,"column":0},"generated":{"line":986,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":986,"column":0},"generated":{"line":987,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":987,"column":0},"generated":{"line":988,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":988,"column":0},"generated":{"line":989,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":989,"column":0},"generated":{"line":990,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":990,"column":0},"generated":{"line":991,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":991,"column":0},"generated":{"line":992,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":992,"column":0},"generated":{"line":993,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":993,"column":0},"generated":{"line":994,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":994,"column":0},"generated":{"line":995,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":995,"column":0},"generated":{"line":996,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":996,"column":0},"generated":{"line":997,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":997,"column":0},"generated":{"line":998,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":998,"column":0},"generated":{"line":999,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":999,"column":0},"generated":{"line":1000,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1000,"column":0},"generated":{"line":1001,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1001,"column":0},"generated":{"line":1002,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1002,"column":0},"generated":{"line":1003,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1003,"column":0},"generated":{"line":1004,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1004,"column":0},"generated":{"line":1005,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1005,"column":0},"generated":{"line":1006,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1006,"column":0},"generated":{"line":1007,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1007,"column":0},"generated":{"line":1008,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1008,"column":0},"generated":{"line":1009,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1009,"column":0},"generated":{"line":1010,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1010,"column":0},"generated":{"line":1011,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1011,"column":0},"generated":{"line":1012,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1012,"column":0},"generated":{"line":1013,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1013,"column":0},"generated":{"line":1014,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1014,"column":0},"generated":{"line":1015,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1015,"column":0},"generated":{"line":1016,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1016,"column":0},"generated":{"line":1017,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1017,"column":0},"generated":{"line":1018,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1018,"column":0},"generated":{"line":1019,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1019,"column":0},"generated":{"line":1020,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1020,"column":0},"generated":{"line":1021,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1021,"column":0},"generated":{"line":1022,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1022,"column":0},"generated":{"line":1023,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1023,"column":0},"generated":{"line":1024,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1024,"column":0},"generated":{"line":1025,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1025,"column":0},"generated":{"line":1026,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1026,"column":0},"generated":{"line":1027,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1027,"column":0},"generated":{"line":1028,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1028,"column":0},"generated":{"line":1029,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1029,"column":0},"generated":{"line":1030,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1030,"column":0},"generated":{"line":1031,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1031,"column":0},"generated":{"line":1032,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1032,"column":0},"generated":{"line":1033,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1033,"column":0},"generated":{"line":1034,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1034,"column":0},"generated":{"line":1035,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1035,"column":0},"generated":{"line":1036,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1036,"column":0},"generated":{"line":1037,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1037,"column":0},"generated":{"line":1038,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1038,"column":0},"generated":{"line":1039,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1039,"column":0},"generated":{"line":1040,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1040,"column":0},"generated":{"line":1041,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1041,"column":0},"generated":{"line":1042,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1042,"column":0},"generated":{"line":1043,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1043,"column":0},"generated":{"line":1044,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1044,"column":0},"generated":{"line":1045,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1045,"column":0},"generated":{"line":1046,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1046,"column":0},"generated":{"line":1047,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1047,"column":0},"generated":{"line":1048,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1048,"column":0},"generated":{"line":1049,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1049,"column":0},"generated":{"line":1050,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1050,"column":0},"generated":{"line":1051,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1051,"column":0},"generated":{"line":1052,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1052,"column":0},"generated":{"line":1053,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1053,"column":0},"generated":{"line":1054,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1054,"column":0},"generated":{"line":1055,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1055,"column":0},"generated":{"line":1056,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1056,"column":0},"generated":{"line":1057,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1057,"column":0},"generated":{"line":1058,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1058,"column":0},"generated":{"line":1059,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1059,"column":0},"generated":{"line":1060,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1060,"column":0},"generated":{"line":1061,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1061,"column":0},"generated":{"line":1062,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1062,"column":0},"generated":{"line":1063,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1063,"column":0},"generated":{"line":1064,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1064,"column":0},"generated":{"line":1065,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1065,"column":0},"generated":{"line":1066,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1066,"column":0},"generated":{"line":1067,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1067,"column":0},"generated":{"line":1068,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1068,"column":0},"generated":{"line":1069,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1069,"column":0},"generated":{"line":1070,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1070,"column":0},"generated":{"line":1071,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1071,"column":0},"generated":{"line":1072,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1072,"column":0},"generated":{"line":1073,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1073,"column":0},"generated":{"line":1074,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1074,"column":0},"generated":{"line":1075,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1075,"column":0},"generated":{"line":1076,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1076,"column":0},"generated":{"line":1077,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1077,"column":0},"generated":{"line":1078,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1078,"column":0},"generated":{"line":1079,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1079,"column":0},"generated":{"line":1080,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1080,"column":0},"generated":{"line":1081,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1081,"column":0},"generated":{"line":1082,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1082,"column":0},"generated":{"line":1083,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1083,"column":0},"generated":{"line":1084,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1084,"column":0},"generated":{"line":1085,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1085,"column":0},"generated":{"line":1086,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1086,"column":0},"generated":{"line":1087,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1087,"column":0},"generated":{"line":1088,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1088,"column":0},"generated":{"line":1089,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1089,"column":0},"generated":{"line":1090,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1090,"column":0},"generated":{"line":1091,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1091,"column":0},"generated":{"line":1092,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1092,"column":0},"generated":{"line":1093,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1093,"column":0},"generated":{"line":1094,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1094,"column":0},"generated":{"line":1095,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1095,"column":0},"generated":{"line":1096,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1096,"column":0},"generated":{"line":1097,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1097,"column":0},"generated":{"line":1098,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1098,"column":0},"generated":{"line":1099,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1099,"column":0},"generated":{"line":1100,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1100,"column":0},"generated":{"line":1101,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1101,"column":0},"generated":{"line":1102,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1102,"column":0},"generated":{"line":1103,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1103,"column":0},"generated":{"line":1104,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1104,"column":0},"generated":{"line":1105,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1105,"column":0},"generated":{"line":1106,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1106,"column":0},"generated":{"line":1107,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1107,"column":0},"generated":{"line":1108,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1108,"column":0},"generated":{"line":1109,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1109,"column":0},"generated":{"line":1110,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1110,"column":0},"generated":{"line":1111,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1111,"column":0},"generated":{"line":1112,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1112,"column":0},"generated":{"line":1113,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1113,"column":0},"generated":{"line":1114,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1114,"column":0},"generated":{"line":1115,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1115,"column":0},"generated":{"line":1116,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1116,"column":0},"generated":{"line":1117,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1117,"column":0},"generated":{"line":1118,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1118,"column":0},"generated":{"line":1119,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1119,"column":0},"generated":{"line":1120,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1120,"column":0},"generated":{"line":1121,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1121,"column":0},"generated":{"line":1122,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1122,"column":0},"generated":{"line":1123,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1123,"column":0},"generated":{"line":1124,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1124,"column":0},"generated":{"line":1125,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1125,"column":0},"generated":{"line":1126,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1126,"column":0},"generated":{"line":1127,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1127,"column":0},"generated":{"line":1128,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1128,"column":0},"generated":{"line":1129,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1129,"column":0},"generated":{"line":1130,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1130,"column":0},"generated":{"line":1131,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1131,"column":0},"generated":{"line":1132,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1132,"column":0},"generated":{"line":1133,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1133,"column":0},"generated":{"line":1134,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1134,"column":0},"generated":{"line":1135,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1135,"column":0},"generated":{"line":1136,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1136,"column":0},"generated":{"line":1137,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1137,"column":0},"generated":{"line":1138,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1138,"column":0},"generated":{"line":1139,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1139,"column":0},"generated":{"line":1140,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1140,"column":0},"generated":{"line":1141,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1141,"column":0},"generated":{"line":1142,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1142,"column":0},"generated":{"line":1143,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1143,"column":0},"generated":{"line":1144,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1144,"column":0},"generated":{"line":1145,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1145,"column":0},"generated":{"line":1146,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1146,"column":0},"generated":{"line":1147,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1147,"column":0},"generated":{"line":1148,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1148,"column":0},"generated":{"line":1149,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1149,"column":0},"generated":{"line":1150,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1150,"column":0},"generated":{"line":1151,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1151,"column":0},"generated":{"line":1152,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1152,"column":0},"generated":{"line":1153,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1153,"column":0},"generated":{"line":1154,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1154,"column":0},"generated":{"line":1155,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1155,"column":0},"generated":{"line":1156,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1156,"column":0},"generated":{"line":1157,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1157,"column":0},"generated":{"line":1158,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1158,"column":0},"generated":{"line":1159,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1159,"column":0},"generated":{"line":1160,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1160,"column":0},"generated":{"line":1161,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1161,"column":0},"generated":{"line":1162,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1162,"column":0},"generated":{"line":1163,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1163,"column":0},"generated":{"line":1164,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1164,"column":0},"generated":{"line":1165,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1165,"column":0},"generated":{"line":1166,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1166,"column":0},"generated":{"line":1167,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1167,"column":0},"generated":{"line":1168,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1168,"column":0},"generated":{"line":1169,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1169,"column":0},"generated":{"line":1170,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1170,"column":0},"generated":{"line":1171,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1171,"column":0},"generated":{"line":1172,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1172,"column":0},"generated":{"line":1173,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1173,"column":0},"generated":{"line":1174,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1174,"column":0},"generated":{"line":1175,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1175,"column":0},"generated":{"line":1176,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1176,"column":0},"generated":{"line":1177,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1177,"column":0},"generated":{"line":1178,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1178,"column":0},"generated":{"line":1179,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1179,"column":0},"generated":{"line":1180,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1180,"column":0},"generated":{"line":1181,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1181,"column":0},"generated":{"line":1182,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1182,"column":0},"generated":{"line":1183,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1183,"column":0},"generated":{"line":1184,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1184,"column":0},"generated":{"line":1185,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1185,"column":0},"generated":{"line":1186,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1186,"column":0},"generated":{"line":1187,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1187,"column":0},"generated":{"line":1188,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1188,"column":0},"generated":{"line":1189,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1189,"column":0},"generated":{"line":1190,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1190,"column":0},"generated":{"line":1191,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1191,"column":0},"generated":{"line":1192,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1192,"column":0},"generated":{"line":1193,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1193,"column":0},"generated":{"line":1194,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1194,"column":0},"generated":{"line":1195,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1195,"column":0},"generated":{"line":1196,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1196,"column":0},"generated":{"line":1197,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1197,"column":0},"generated":{"line":1198,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1198,"column":0},"generated":{"line":1199,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1199,"column":0},"generated":{"line":1200,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1200,"column":0},"generated":{"line":1201,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1201,"column":0},"generated":{"line":1202,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1202,"column":0},"generated":{"line":1203,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1203,"column":0},"generated":{"line":1204,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1204,"column":0},"generated":{"line":1205,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1205,"column":0},"generated":{"line":1206,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1206,"column":0},"generated":{"line":1207,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1207,"column":0},"generated":{"line":1208,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1208,"column":0},"generated":{"line":1209,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1209,"column":0},"generated":{"line":1210,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1210,"column":0},"generated":{"line":1211,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1211,"column":0},"generated":{"line":1212,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1212,"column":0},"generated":{"line":1213,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1213,"column":0},"generated":{"line":1214,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1214,"column":0},"generated":{"line":1215,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1215,"column":0},"generated":{"line":1216,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1216,"column":0},"generated":{"line":1217,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1217,"column":0},"generated":{"line":1218,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1218,"column":0},"generated":{"line":1219,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1219,"column":0},"generated":{"line":1220,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1220,"column":0},"generated":{"line":1221,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1221,"column":0},"generated":{"line":1222,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1222,"column":0},"generated":{"line":1223,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1223,"column":0},"generated":{"line":1224,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1224,"column":0},"generated":{"line":1225,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1225,"column":0},"generated":{"line":1226,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1226,"column":0},"generated":{"line":1227,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1227,"column":0},"generated":{"line":1228,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1228,"column":0},"generated":{"line":1229,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1229,"column":0},"generated":{"line":1230,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1230,"column":0},"generated":{"line":1231,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1231,"column":0},"generated":{"line":1232,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1232,"column":0},"generated":{"line":1233,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1233,"column":0},"generated":{"line":1234,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1234,"column":0},"generated":{"line":1235,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1235,"column":0},"generated":{"line":1236,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1236,"column":0},"generated":{"line":1237,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1237,"column":0},"generated":{"line":1238,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1238,"column":0},"generated":{"line":1239,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1239,"column":0},"generated":{"line":1240,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1240,"column":0},"generated":{"line":1241,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1241,"column":0},"generated":{"line":1242,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1242,"column":0},"generated":{"line":1243,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1243,"column":0},"generated":{"line":1244,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1244,"column":0},"generated":{"line":1245,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1245,"column":0},"generated":{"line":1246,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1246,"column":0},"generated":{"line":1247,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1247,"column":0},"generated":{"line":1248,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1248,"column":0},"generated":{"line":1249,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1249,"column":0},"generated":{"line":1250,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1250,"column":0},"generated":{"line":1251,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1251,"column":0},"generated":{"line":1252,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1252,"column":0},"generated":{"line":1253,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1253,"column":0},"generated":{"line":1254,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1254,"column":0},"generated":{"line":1255,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1255,"column":0},"generated":{"line":1256,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1256,"column":0},"generated":{"line":1257,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1257,"column":0},"generated":{"line":1258,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1258,"column":0},"generated":{"line":1259,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1259,"column":0},"generated":{"line":1260,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1260,"column":0},"generated":{"line":1261,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1261,"column":0},"generated":{"line":1262,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1262,"column":0},"generated":{"line":1263,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1263,"column":0},"generated":{"line":1264,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1264,"column":0},"generated":{"line":1265,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1265,"column":0},"generated":{"line":1266,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1266,"column":0},"generated":{"line":1267,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1267,"column":0},"generated":{"line":1268,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1268,"column":0},"generated":{"line":1269,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1269,"column":0},"generated":{"line":1270,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1270,"column":0},"generated":{"line":1271,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1271,"column":0},"generated":{"line":1272,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1272,"column":0},"generated":{"line":1273,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1273,"column":0},"generated":{"line":1274,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1274,"column":0},"generated":{"line":1275,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1275,"column":0},"generated":{"line":1276,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1276,"column":0},"generated":{"line":1277,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1277,"column":0},"generated":{"line":1278,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1278,"column":0},"generated":{"line":1279,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1279,"column":0},"generated":{"line":1280,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1280,"column":0},"generated":{"line":1281,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1281,"column":0},"generated":{"line":1282,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1282,"column":0},"generated":{"line":1283,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1283,"column":0},"generated":{"line":1284,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1284,"column":0},"generated":{"line":1285,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1285,"column":0},"generated":{"line":1286,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1286,"column":0},"generated":{"line":1287,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1287,"column":0},"generated":{"line":1288,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1288,"column":0},"generated":{"line":1289,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1289,"column":0},"generated":{"line":1290,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1290,"column":0},"generated":{"line":1291,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1291,"column":0},"generated":{"line":1292,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1292,"column":0},"generated":{"line":1293,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1293,"column":0},"generated":{"line":1294,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1294,"column":0},"generated":{"line":1295,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1295,"column":0},"generated":{"line":1296,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1296,"column":0},"generated":{"line":1297,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1297,"column":0},"generated":{"line":1298,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1298,"column":0},"generated":{"line":1299,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1299,"column":0},"generated":{"line":1300,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1300,"column":0},"generated":{"line":1301,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1301,"column":0},"generated":{"line":1302,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1302,"column":0},"generated":{"line":1303,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1303,"column":0},"generated":{"line":1304,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1304,"column":0},"generated":{"line":1305,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1305,"column":0},"generated":{"line":1306,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1306,"column":0},"generated":{"line":1307,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1307,"column":0},"generated":{"line":1308,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1308,"column":0},"generated":{"line":1309,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1309,"column":0},"generated":{"line":1310,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1310,"column":0},"generated":{"line":1311,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1311,"column":0},"generated":{"line":1312,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1312,"column":0},"generated":{"line":1313,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1313,"column":0},"generated":{"line":1314,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1314,"column":0},"generated":{"line":1315,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1315,"column":0},"generated":{"line":1316,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1316,"column":0},"generated":{"line":1317,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1317,"column":0},"generated":{"line":1318,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1318,"column":0},"generated":{"line":1319,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1319,"column":0},"generated":{"line":1320,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1320,"column":0},"generated":{"line":1321,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1321,"column":0},"generated":{"line":1322,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1322,"column":0},"generated":{"line":1323,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1323,"column":0},"generated":{"line":1324,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1324,"column":0},"generated":{"line":1325,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1325,"column":0},"generated":{"line":1326,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1326,"column":0},"generated":{"line":1327,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1327,"column":0},"generated":{"line":1328,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1328,"column":0},"generated":{"line":1329,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1329,"column":0},"generated":{"line":1330,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1330,"column":0},"generated":{"line":1331,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1331,"column":0},"generated":{"line":1332,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1332,"column":0},"generated":{"line":1333,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1333,"column":0},"generated":{"line":1334,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1334,"column":0},"generated":{"line":1335,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1335,"column":0},"generated":{"line":1336,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1336,"column":0},"generated":{"line":1337,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1337,"column":0},"generated":{"line":1338,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1338,"column":0},"generated":{"line":1339,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1339,"column":0},"generated":{"line":1340,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1340,"column":0},"generated":{"line":1341,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1341,"column":0},"generated":{"line":1342,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1342,"column":0},"generated":{"line":1343,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1343,"column":0},"generated":{"line":1344,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1344,"column":0},"generated":{"line":1345,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1345,"column":0},"generated":{"line":1346,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1346,"column":0},"generated":{"line":1347,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1347,"column":0},"generated":{"line":1348,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1348,"column":0},"generated":{"line":1349,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1349,"column":0},"generated":{"line":1350,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1350,"column":0},"generated":{"line":1351,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1351,"column":0},"generated":{"line":1352,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1352,"column":0},"generated":{"line":1353,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1353,"column":0},"generated":{"line":1354,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1354,"column":0},"generated":{"line":1355,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1355,"column":0},"generated":{"line":1356,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1356,"column":0},"generated":{"line":1357,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1357,"column":0},"generated":{"line":1358,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1358,"column":0},"generated":{"line":1359,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1359,"column":0},"generated":{"line":1360,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1360,"column":0},"generated":{"line":1361,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1361,"column":0},"generated":{"line":1362,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1362,"column":0},"generated":{"line":1363,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1363,"column":0},"generated":{"line":1364,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1364,"column":0},"generated":{"line":1365,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1365,"column":0},"generated":{"line":1366,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1366,"column":0},"generated":{"line":1367,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1367,"column":0},"generated":{"line":1368,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1368,"column":0},"generated":{"line":1369,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1369,"column":0},"generated":{"line":1370,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1370,"column":0},"generated":{"line":1371,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1371,"column":0},"generated":{"line":1372,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1372,"column":0},"generated":{"line":1373,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1373,"column":0},"generated":{"line":1374,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1374,"column":0},"generated":{"line":1375,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1375,"column":0},"generated":{"line":1376,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1376,"column":0},"generated":{"line":1377,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1377,"column":0},"generated":{"line":1378,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1378,"column":0},"generated":{"line":1379,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1379,"column":0},"generated":{"line":1380,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1380,"column":0},"generated":{"line":1381,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1381,"column":0},"generated":{"line":1382,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1382,"column":0},"generated":{"line":1383,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1383,"column":0},"generated":{"line":1384,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1384,"column":0},"generated":{"line":1385,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1385,"column":0},"generated":{"line":1386,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1386,"column":0},"generated":{"line":1387,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1387,"column":0},"generated":{"line":1388,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1388,"column":0},"generated":{"line":1389,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1389,"column":0},"generated":{"line":1390,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1390,"column":0},"generated":{"line":1391,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1391,"column":0},"generated":{"line":1392,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1392,"column":0},"generated":{"line":1393,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1393,"column":0},"generated":{"line":1394,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1394,"column":0},"generated":{"line":1395,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1395,"column":0},"generated":{"line":1396,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1396,"column":0},"generated":{"line":1397,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1397,"column":0},"generated":{"line":1398,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1398,"column":0},"generated":{"line":1399,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1399,"column":0},"generated":{"line":1400,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1400,"column":0},"generated":{"line":1401,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1401,"column":0},"generated":{"line":1402,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1402,"column":0},"generated":{"line":1403,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1403,"column":0},"generated":{"line":1404,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1404,"column":0},"generated":{"line":1405,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1405,"column":0},"generated":{"line":1406,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1406,"column":0},"generated":{"line":1407,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1407,"column":0},"generated":{"line":1408,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1408,"column":0},"generated":{"line":1409,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1409,"column":0},"generated":{"line":1410,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1410,"column":0},"generated":{"line":1411,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1411,"column":0},"generated":{"line":1412,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1412,"column":0},"generated":{"line":1413,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1413,"column":0},"generated":{"line":1414,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1414,"column":0},"generated":{"line":1415,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1415,"column":0},"generated":{"line":1416,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1416,"column":0},"generated":{"line":1417,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1417,"column":0},"generated":{"line":1418,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1418,"column":0},"generated":{"line":1419,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1419,"column":0},"generated":{"line":1420,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1420,"column":0},"generated":{"line":1421,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1421,"column":0},"generated":{"line":1422,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1422,"column":0},"generated":{"line":1423,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1423,"column":0},"generated":{"line":1424,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1424,"column":0},"generated":{"line":1425,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1425,"column":0},"generated":{"line":1426,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1426,"column":0},"generated":{"line":1427,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1427,"column":0},"generated":{"line":1428,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1428,"column":0},"generated":{"line":1429,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1429,"column":0},"generated":{"line":1430,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1430,"column":0},"generated":{"line":1431,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1431,"column":0},"generated":{"line":1432,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1432,"column":0},"generated":{"line":1433,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1433,"column":0},"generated":{"line":1434,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1434,"column":0},"generated":{"line":1435,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1435,"column":0},"generated":{"line":1436,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1436,"column":0},"generated":{"line":1437,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1437,"column":0},"generated":{"line":1438,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1438,"column":0},"generated":{"line":1439,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1439,"column":0},"generated":{"line":1440,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1440,"column":0},"generated":{"line":1441,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1441,"column":0},"generated":{"line":1442,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1442,"column":0},"generated":{"line":1443,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1443,"column":0},"generated":{"line":1444,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1444,"column":0},"generated":{"line":1445,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1445,"column":0},"generated":{"line":1446,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1446,"column":0},"generated":{"line":1447,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1447,"column":0},"generated":{"line":1448,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1448,"column":0},"generated":{"line":1449,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1449,"column":0},"generated":{"line":1450,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1450,"column":0},"generated":{"line":1451,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1451,"column":0},"generated":{"line":1452,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1452,"column":0},"generated":{"line":1453,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1453,"column":0},"generated":{"line":1454,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1454,"column":0},"generated":{"line":1455,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1455,"column":0},"generated":{"line":1456,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1456,"column":0},"generated":{"line":1457,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1457,"column":0},"generated":{"line":1458,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1458,"column":0},"generated":{"line":1459,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1459,"column":0},"generated":{"line":1460,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1460,"column":0},"generated":{"line":1461,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1461,"column":0},"generated":{"line":1462,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1462,"column":0},"generated":{"line":1463,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1463,"column":0},"generated":{"line":1464,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1464,"column":0},"generated":{"line":1465,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1465,"column":0},"generated":{"line":1466,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1466,"column":0},"generated":{"line":1467,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1467,"column":0},"generated":{"line":1468,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1468,"column":0},"generated":{"line":1469,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1469,"column":0},"generated":{"line":1470,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1470,"column":0},"generated":{"line":1471,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1471,"column":0},"generated":{"line":1472,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1472,"column":0},"generated":{"line":1473,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1473,"column":0},"generated":{"line":1474,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1474,"column":0},"generated":{"line":1475,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1475,"column":0},"generated":{"line":1476,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1476,"column":0},"generated":{"line":1477,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1477,"column":0},"generated":{"line":1478,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1478,"column":0},"generated":{"line":1479,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1479,"column":0},"generated":{"line":1480,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1480,"column":0},"generated":{"line":1481,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1481,"column":0},"generated":{"line":1482,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1482,"column":0},"generated":{"line":1483,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1483,"column":0},"generated":{"line":1484,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1484,"column":0},"generated":{"line":1485,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1485,"column":0},"generated":{"line":1486,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1486,"column":0},"generated":{"line":1487,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1487,"column":0},"generated":{"line":1488,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1488,"column":0},"generated":{"line":1489,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1489,"column":0},"generated":{"line":1490,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1490,"column":0},"generated":{"line":1491,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1491,"column":0},"generated":{"line":1492,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1492,"column":0},"generated":{"line":1493,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1493,"column":0},"generated":{"line":1494,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1494,"column":0},"generated":{"line":1495,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1495,"column":0},"generated":{"line":1496,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1496,"column":0},"generated":{"line":1497,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1497,"column":0},"generated":{"line":1498,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1498,"column":0},"generated":{"line":1499,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1499,"column":0},"generated":{"line":1500,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1500,"column":0},"generated":{"line":1501,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1501,"column":0},"generated":{"line":1502,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1502,"column":0},"generated":{"line":1503,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1503,"column":0},"generated":{"line":1504,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1504,"column":0},"generated":{"line":1505,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1505,"column":0},"generated":{"line":1506,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1506,"column":0},"generated":{"line":1507,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1507,"column":0},"generated":{"line":1508,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1508,"column":0},"generated":{"line":1509,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1509,"column":0},"generated":{"line":1510,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1510,"column":0},"generated":{"line":1511,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1511,"column":0},"generated":{"line":1512,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1512,"column":0},"generated":{"line":1513,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1513,"column":0},"generated":{"line":1514,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1514,"column":0},"generated":{"line":1515,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1515,"column":0},"generated":{"line":1516,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1516,"column":0},"generated":{"line":1517,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1517,"column":0},"generated":{"line":1518,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1518,"column":0},"generated":{"line":1519,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1519,"column":0},"generated":{"line":1520,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1520,"column":0},"generated":{"line":1521,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1521,"column":0},"generated":{"line":1522,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1522,"column":0},"generated":{"line":1523,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1523,"column":0},"generated":{"line":1524,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1524,"column":0},"generated":{"line":1525,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1525,"column":0},"generated":{"line":1526,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1526,"column":0},"generated":{"line":1527,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1527,"column":0},"generated":{"line":1528,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1528,"column":0},"generated":{"line":1529,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1529,"column":0},"generated":{"line":1530,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1530,"column":0},"generated":{"line":1531,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1531,"column":0},"generated":{"line":1532,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1532,"column":0},"generated":{"line":1533,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1533,"column":0},"generated":{"line":1534,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1534,"column":0},"generated":{"line":1535,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1535,"column":0},"generated":{"line":1536,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1536,"column":0},"generated":{"line":1537,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1537,"column":0},"generated":{"line":1538,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1538,"column":0},"generated":{"line":1539,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1539,"column":0},"generated":{"line":1540,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1540,"column":0},"generated":{"line":1541,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1541,"column":0},"generated":{"line":1542,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1542,"column":0},"generated":{"line":1543,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1543,"column":0},"generated":{"line":1544,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1544,"column":0},"generated":{"line":1545,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1545,"column":0},"generated":{"line":1546,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1546,"column":0},"generated":{"line":1547,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1547,"column":0},"generated":{"line":1548,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1548,"column":0},"generated":{"line":1549,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1549,"column":0},"generated":{"line":1550,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1550,"column":0},"generated":{"line":1551,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1551,"column":0},"generated":{"line":1552,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1552,"column":0},"generated":{"line":1553,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1553,"column":0},"generated":{"line":1554,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1554,"column":0},"generated":{"line":1555,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1555,"column":0},"generated":{"line":1556,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1556,"column":0},"generated":{"line":1557,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1557,"column":0},"generated":{"line":1558,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1558,"column":0},"generated":{"line":1559,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1559,"column":0},"generated":{"line":1560,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1560,"column":0},"generated":{"line":1561,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1561,"column":0},"generated":{"line":1562,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1562,"column":0},"generated":{"line":1563,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1563,"column":0},"generated":{"line":1564,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1564,"column":0},"generated":{"line":1565,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1565,"column":0},"generated":{"line":1566,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1566,"column":0},"generated":{"line":1567,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1567,"column":0},"generated":{"line":1568,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1568,"column":0},"generated":{"line":1569,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1569,"column":0},"generated":{"line":1570,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1570,"column":0},"generated":{"line":1571,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1571,"column":0},"generated":{"line":1572,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1572,"column":0},"generated":{"line":1573,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1573,"column":0},"generated":{"line":1574,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1574,"column":0},"generated":{"line":1575,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1575,"column":0},"generated":{"line":1576,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1576,"column":0},"generated":{"line":1577,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1577,"column":0},"generated":{"line":1578,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1578,"column":0},"generated":{"line":1579,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1579,"column":0},"generated":{"line":1580,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1580,"column":0},"generated":{"line":1581,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1581,"column":0},"generated":{"line":1582,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1582,"column":0},"generated":{"line":1583,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1583,"column":0},"generated":{"line":1584,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1584,"column":0},"generated":{"line":1585,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1585,"column":0},"generated":{"line":1586,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1586,"column":0},"generated":{"line":1587,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1587,"column":0},"generated":{"line":1588,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1588,"column":0},"generated":{"line":1589,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1589,"column":0},"generated":{"line":1590,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1590,"column":0},"generated":{"line":1591,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1591,"column":0},"generated":{"line":1592,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1592,"column":0},"generated":{"line":1593,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1593,"column":0},"generated":{"line":1594,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1594,"column":0},"generated":{"line":1595,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1595,"column":0},"generated":{"line":1596,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1596,"column":0},"generated":{"line":1597,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1597,"column":0},"generated":{"line":1598,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1598,"column":0},"generated":{"line":1599,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1599,"column":0},"generated":{"line":1600,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1600,"column":0},"generated":{"line":1601,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1601,"column":0},"generated":{"line":1602,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1602,"column":0},"generated":{"line":1603,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1603,"column":0},"generated":{"line":1604,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1604,"column":0},"generated":{"line":1605,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1605,"column":0},"generated":{"line":1606,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1606,"column":0},"generated":{"line":1607,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1607,"column":0},"generated":{"line":1608,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1608,"column":0},"generated":{"line":1609,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1609,"column":0},"generated":{"line":1610,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1610,"column":0},"generated":{"line":1611,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1611,"column":0},"generated":{"line":1612,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1612,"column":0},"generated":{"line":1613,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1613,"column":0},"generated":{"line":1614,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1614,"column":0},"generated":{"line":1615,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1615,"column":0},"generated":{"line":1616,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1616,"column":0},"generated":{"line":1617,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1617,"column":0},"generated":{"line":1618,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1618,"column":0},"generated":{"line":1619,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1619,"column":0},"generated":{"line":1620,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1620,"column":0},"generated":{"line":1621,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1621,"column":0},"generated":{"line":1622,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1622,"column":0},"generated":{"line":1623,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1623,"column":0},"generated":{"line":1624,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1624,"column":0},"generated":{"line":1625,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1625,"column":0},"generated":{"line":1626,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1626,"column":0},"generated":{"line":1627,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1627,"column":0},"generated":{"line":1628,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1628,"column":0},"generated":{"line":1629,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1629,"column":0},"generated":{"line":1630,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1630,"column":0},"generated":{"line":1631,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1631,"column":0},"generated":{"line":1632,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1632,"column":0},"generated":{"line":1633,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1633,"column":0},"generated":{"line":1634,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1634,"column":0},"generated":{"line":1635,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1635,"column":0},"generated":{"line":1636,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1636,"column":0},"generated":{"line":1637,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1637,"column":0},"generated":{"line":1638,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1638,"column":0},"generated":{"line":1639,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1639,"column":0},"generated":{"line":1640,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1640,"column":0},"generated":{"line":1641,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1641,"column":0},"generated":{"line":1642,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1642,"column":0},"generated":{"line":1643,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1643,"column":0},"generated":{"line":1644,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1644,"column":0},"generated":{"line":1645,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1645,"column":0},"generated":{"line":1646,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1646,"column":0},"generated":{"line":1647,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1647,"column":0},"generated":{"line":1648,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1648,"column":0},"generated":{"line":1649,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1649,"column":0},"generated":{"line":1650,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1650,"column":0},"generated":{"line":1651,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1651,"column":0},"generated":{"line":1652,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1652,"column":0},"generated":{"line":1653,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1653,"column":0},"generated":{"line":1654,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1654,"column":0},"generated":{"line":1655,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1655,"column":0},"generated":{"line":1656,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1656,"column":0},"generated":{"line":1657,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1657,"column":0},"generated":{"line":1658,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1658,"column":0},"generated":{"line":1659,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1659,"column":0},"generated":{"line":1660,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1660,"column":0},"generated":{"line":1661,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1661,"column":0},"generated":{"line":1662,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1662,"column":0},"generated":{"line":1663,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1663,"column":0},"generated":{"line":1664,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1664,"column":0},"generated":{"line":1665,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1665,"column":0},"generated":{"line":1666,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1666,"column":0},"generated":{"line":1667,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1667,"column":0},"generated":{"line":1668,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1668,"column":0},"generated":{"line":1669,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1669,"column":0},"generated":{"line":1670,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1670,"column":0},"generated":{"line":1671,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1671,"column":0},"generated":{"line":1672,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1672,"column":0},"generated":{"line":1673,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1673,"column":0},"generated":{"line":1674,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1674,"column":0},"generated":{"line":1675,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1675,"column":0},"generated":{"line":1676,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1676,"column":0},"generated":{"line":1677,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1677,"column":0},"generated":{"line":1678,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1678,"column":0},"generated":{"line":1679,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1679,"column":0},"generated":{"line":1680,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1680,"column":0},"generated":{"line":1681,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1681,"column":0},"generated":{"line":1682,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1682,"column":0},"generated":{"line":1683,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1683,"column":0},"generated":{"line":1684,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1684,"column":0},"generated":{"line":1685,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1685,"column":0},"generated":{"line":1686,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1686,"column":0},"generated":{"line":1687,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1687,"column":0},"generated":{"line":1688,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1688,"column":0},"generated":{"line":1689,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1689,"column":0},"generated":{"line":1690,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1690,"column":0},"generated":{"line":1691,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1691,"column":0},"generated":{"line":1692,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1692,"column":0},"generated":{"line":1693,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1693,"column":0},"generated":{"line":1694,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1694,"column":0},"generated":{"line":1695,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1695,"column":0},"generated":{"line":1696,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1696,"column":0},"generated":{"line":1697,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1697,"column":0},"generated":{"line":1698,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1698,"column":0},"generated":{"line":1699,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1699,"column":0},"generated":{"line":1700,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1700,"column":0},"generated":{"line":1701,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1701,"column":0},"generated":{"line":1702,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1702,"column":0},"generated":{"line":1703,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1703,"column":0},"generated":{"line":1704,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1704,"column":0},"generated":{"line":1705,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1705,"column":0},"generated":{"line":1706,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1706,"column":0},"generated":{"line":1707,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1707,"column":0},"generated":{"line":1708,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1708,"column":0},"generated":{"line":1709,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1709,"column":0},"generated":{"line":1710,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1710,"column":0},"generated":{"line":1711,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1711,"column":0},"generated":{"line":1712,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1712,"column":0},"generated":{"line":1713,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1713,"column":0},"generated":{"line":1714,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1714,"column":0},"generated":{"line":1715,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1715,"column":0},"generated":{"line":1716,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1716,"column":0},"generated":{"line":1717,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1717,"column":0},"generated":{"line":1718,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1718,"column":0},"generated":{"line":1719,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1719,"column":0},"generated":{"line":1720,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1720,"column":0},"generated":{"line":1721,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1721,"column":0},"generated":{"line":1722,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1722,"column":0},"generated":{"line":1723,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1723,"column":0},"generated":{"line":1724,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1724,"column":0},"generated":{"line":1725,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1725,"column":0},"generated":{"line":1726,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1726,"column":0},"generated":{"line":1727,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1727,"column":0},"generated":{"line":1728,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1728,"column":0},"generated":{"line":1729,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1729,"column":0},"generated":{"line":1730,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1730,"column":0},"generated":{"line":1731,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1731,"column":0},"generated":{"line":1732,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1732,"column":0},"generated":{"line":1733,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1733,"column":0},"generated":{"line":1734,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1734,"column":0},"generated":{"line":1735,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1735,"column":0},"generated":{"line":1736,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1736,"column":0},"generated":{"line":1737,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1737,"column":0},"generated":{"line":1738,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1738,"column":0},"generated":{"line":1739,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1739,"column":0},"generated":{"line":1740,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1740,"column":0},"generated":{"line":1741,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1741,"column":0},"generated":{"line":1742,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1742,"column":0},"generated":{"line":1743,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1743,"column":0},"generated":{"line":1744,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1744,"column":0},"generated":{"line":1745,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1745,"column":0},"generated":{"line":1746,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1746,"column":0},"generated":{"line":1747,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1747,"column":0},"generated":{"line":1748,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1748,"column":0},"generated":{"line":1749,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1749,"column":0},"generated":{"line":1750,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1750,"column":0},"generated":{"line":1751,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1751,"column":0},"generated":{"line":1752,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1752,"column":0},"generated":{"line":1753,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1753,"column":0},"generated":{"line":1754,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1754,"column":0},"generated":{"line":1755,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1755,"column":0},"generated":{"line":1756,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1756,"column":0},"generated":{"line":1757,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1757,"column":0},"generated":{"line":1758,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1758,"column":0},"generated":{"line":1759,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1759,"column":0},"generated":{"line":1760,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1760,"column":0},"generated":{"line":1761,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1761,"column":0},"generated":{"line":1762,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1762,"column":0},"generated":{"line":1763,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1763,"column":0},"generated":{"line":1764,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1764,"column":0},"generated":{"line":1765,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1765,"column":0},"generated":{"line":1766,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1766,"column":0},"generated":{"line":1767,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1767,"column":0},"generated":{"line":1768,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1768,"column":0},"generated":{"line":1769,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1769,"column":0},"generated":{"line":1770,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1770,"column":0},"generated":{"line":1771,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1771,"column":0},"generated":{"line":1772,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1772,"column":0},"generated":{"line":1773,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1773,"column":0},"generated":{"line":1774,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1774,"column":0},"generated":{"line":1775,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1775,"column":0},"generated":{"line":1776,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1776,"column":0},"generated":{"line":1777,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1777,"column":0},"generated":{"line":1778,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1778,"column":0},"generated":{"line":1779,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1779,"column":0},"generated":{"line":1780,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1780,"column":0},"generated":{"line":1781,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1781,"column":0},"generated":{"line":1782,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1782,"column":0},"generated":{"line":1783,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1783,"column":0},"generated":{"line":1784,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1784,"column":0},"generated":{"line":1785,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1785,"column":0},"generated":{"line":1786,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1786,"column":0},"generated":{"line":1787,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1787,"column":0},"generated":{"line":1788,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1788,"column":0},"generated":{"line":1789,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1789,"column":0},"generated":{"line":1790,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1790,"column":0},"generated":{"line":1791,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1791,"column":0},"generated":{"line":1792,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1792,"column":0},"generated":{"line":1793,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1793,"column":0},"generated":{"line":1794,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1794,"column":0},"generated":{"line":1795,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1795,"column":0},"generated":{"line":1796,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1796,"column":0},"generated":{"line":1797,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1797,"column":0},"generated":{"line":1798,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1798,"column":0},"generated":{"line":1799,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1799,"column":0},"generated":{"line":1800,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1800,"column":0},"generated":{"line":1801,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1801,"column":0},"generated":{"line":1802,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1802,"column":0},"generated":{"line":1803,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1803,"column":0},"generated":{"line":1804,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1804,"column":0},"generated":{"line":1805,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1805,"column":0},"generated":{"line":1806,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1806,"column":0},"generated":{"line":1807,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1807,"column":0},"generated":{"line":1808,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1808,"column":0},"generated":{"line":1809,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1809,"column":0},"generated":{"line":1810,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1810,"column":0},"generated":{"line":1811,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1811,"column":0},"generated":{"line":1812,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1812,"column":0},"generated":{"line":1813,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1813,"column":0},"generated":{"line":1814,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1814,"column":0},"generated":{"line":1815,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1815,"column":0},"generated":{"line":1816,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1816,"column":0},"generated":{"line":1817,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1817,"column":0},"generated":{"line":1818,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1818,"column":0},"generated":{"line":1819,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1819,"column":0},"generated":{"line":1820,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1820,"column":0},"generated":{"line":1821,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1821,"column":0},"generated":{"line":1822,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1822,"column":0},"generated":{"line":1823,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1823,"column":0},"generated":{"line":1824,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1824,"column":0},"generated":{"line":1825,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1825,"column":0},"generated":{"line":1826,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1826,"column":0},"generated":{"line":1827,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1827,"column":0},"generated":{"line":1828,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1828,"column":0},"generated":{"line":1829,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1829,"column":0},"generated":{"line":1830,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1830,"column":0},"generated":{"line":1831,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1831,"column":0},"generated":{"line":1832,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1832,"column":0},"generated":{"line":1833,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1833,"column":0},"generated":{"line":1834,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1834,"column":0},"generated":{"line":1835,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1835,"column":0},"generated":{"line":1836,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1836,"column":0},"generated":{"line":1837,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1837,"column":0},"generated":{"line":1838,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1838,"column":0},"generated":{"line":1839,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1839,"column":0},"generated":{"line":1840,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1840,"column":0},"generated":{"line":1841,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1841,"column":0},"generated":{"line":1842,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1842,"column":0},"generated":{"line":1843,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1843,"column":0},"generated":{"line":1844,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1844,"column":0},"generated":{"line":1845,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1845,"column":0},"generated":{"line":1846,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1846,"column":0},"generated":{"line":1847,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1847,"column":0},"generated":{"line":1848,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1848,"column":0},"generated":{"line":1849,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1849,"column":0},"generated":{"line":1850,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1850,"column":0},"generated":{"line":1851,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1851,"column":0},"generated":{"line":1852,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1852,"column":0},"generated":{"line":1853,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1853,"column":0},"generated":{"line":1854,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1854,"column":0},"generated":{"line":1855,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1855,"column":0},"generated":{"line":1856,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1856,"column":0},"generated":{"line":1857,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1857,"column":0},"generated":{"line":1858,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1858,"column":0},"generated":{"line":1859,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1859,"column":0},"generated":{"line":1860,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1860,"column":0},"generated":{"line":1861,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1861,"column":0},"generated":{"line":1862,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1862,"column":0},"generated":{"line":1863,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1863,"column":0},"generated":{"line":1864,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1864,"column":0},"generated":{"line":1865,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1865,"column":0},"generated":{"line":1866,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1866,"column":0},"generated":{"line":1867,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1867,"column":0},"generated":{"line":1868,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1868,"column":0},"generated":{"line":1869,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1869,"column":0},"generated":{"line":1870,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1870,"column":0},"generated":{"line":1871,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1871,"column":0},"generated":{"line":1872,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1872,"column":0},"generated":{"line":1873,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1873,"column":0},"generated":{"line":1874,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1874,"column":0},"generated":{"line":1875,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1875,"column":0},"generated":{"line":1876,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1876,"column":0},"generated":{"line":1877,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1877,"column":0},"generated":{"line":1878,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1878,"column":0},"generated":{"line":1879,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1879,"column":0},"generated":{"line":1880,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1880,"column":0},"generated":{"line":1881,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1881,"column":0},"generated":{"line":1882,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1882,"column":0},"generated":{"line":1883,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1883,"column":0},"generated":{"line":1884,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1884,"column":0},"generated":{"line":1885,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1885,"column":0},"generated":{"line":1886,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1886,"column":0},"generated":{"line":1887,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1887,"column":0},"generated":{"line":1888,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1888,"column":0},"generated":{"line":1889,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1889,"column":0},"generated":{"line":1890,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1890,"column":0},"generated":{"line":1891,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1891,"column":0},"generated":{"line":1892,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1892,"column":0},"generated":{"line":1893,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1893,"column":0},"generated":{"line":1894,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1894,"column":0},"generated":{"line":1895,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1895,"column":0},"generated":{"line":1896,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1896,"column":0},"generated":{"line":1897,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1897,"column":0},"generated":{"line":1898,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1898,"column":0},"generated":{"line":1899,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1899,"column":0},"generated":{"line":1900,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1900,"column":0},"generated":{"line":1901,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1901,"column":0},"generated":{"line":1902,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1902,"column":0},"generated":{"line":1903,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1903,"column":0},"generated":{"line":1904,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1904,"column":0},"generated":{"line":1905,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1905,"column":0},"generated":{"line":1906,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1906,"column":0},"generated":{"line":1907,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1907,"column":0},"generated":{"line":1908,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1908,"column":0},"generated":{"line":1909,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1909,"column":0},"generated":{"line":1910,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1910,"column":0},"generated":{"line":1911,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1911,"column":0},"generated":{"line":1912,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1912,"column":0},"generated":{"line":1913,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1913,"column":0},"generated":{"line":1914,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1914,"column":0},"generated":{"line":1915,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1915,"column":0},"generated":{"line":1916,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1916,"column":0},"generated":{"line":1917,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1917,"column":0},"generated":{"line":1918,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1918,"column":0},"generated":{"line":1919,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1919,"column":0},"generated":{"line":1920,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1920,"column":0},"generated":{"line":1921,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1921,"column":0},"generated":{"line":1922,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1922,"column":0},"generated":{"line":1923,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1923,"column":0},"generated":{"line":1924,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1924,"column":0},"generated":{"line":1925,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1925,"column":0},"generated":{"line":1926,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1926,"column":0},"generated":{"line":1927,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1927,"column":0},"generated":{"line":1928,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1928,"column":0},"generated":{"line":1929,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1929,"column":0},"generated":{"line":1930,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1930,"column":0},"generated":{"line":1931,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1931,"column":0},"generated":{"line":1932,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1932,"column":0},"generated":{"line":1933,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1933,"column":0},"generated":{"line":1934,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1934,"column":0},"generated":{"line":1935,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1935,"column":0},"generated":{"line":1936,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1936,"column":0},"generated":{"line":1937,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1937,"column":0},"generated":{"line":1938,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1938,"column":0},"generated":{"line":1939,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1939,"column":0},"generated":{"line":1940,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1940,"column":0},"generated":{"line":1941,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1941,"column":0},"generated":{"line":1942,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1942,"column":0},"generated":{"line":1943,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1943,"column":0},"generated":{"line":1944,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1944,"column":0},"generated":{"line":1945,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1945,"column":0},"generated":{"line":1946,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1946,"column":0},"generated":{"line":1947,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1947,"column":0},"generated":{"line":1948,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1948,"column":0},"generated":{"line":1949,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1949,"column":0},"generated":{"line":1950,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1950,"column":0},"generated":{"line":1951,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1951,"column":0},"generated":{"line":1952,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1952,"column":0},"generated":{"line":1953,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1953,"column":0},"generated":{"line":1954,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1954,"column":0},"generated":{"line":1955,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1955,"column":0},"generated":{"line":1956,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1956,"column":0},"generated":{"line":1957,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1957,"column":0},"generated":{"line":1958,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1958,"column":0},"generated":{"line":1959,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1959,"column":0},"generated":{"line":1960,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1960,"column":0},"generated":{"line":1961,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1961,"column":0},"generated":{"line":1962,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1962,"column":0},"generated":{"line":1963,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1963,"column":0},"generated":{"line":1964,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1964,"column":0},"generated":{"line":1965,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1965,"column":0},"generated":{"line":1966,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1966,"column":0},"generated":{"line":1967,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1967,"column":0},"generated":{"line":1968,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1968,"column":0},"generated":{"line":1969,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1969,"column":0},"generated":{"line":1970,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1970,"column":0},"generated":{"line":1971,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1971,"column":0},"generated":{"line":1972,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1972,"column":0},"generated":{"line":1973,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1973,"column":0},"generated":{"line":1974,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1974,"column":0},"generated":{"line":1975,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1975,"column":0},"generated":{"line":1976,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1976,"column":0},"generated":{"line":1977,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1977,"column":0},"generated":{"line":1978,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1978,"column":0},"generated":{"line":1979,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1979,"column":0},"generated":{"line":1980,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1980,"column":0},"generated":{"line":1981,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1981,"column":0},"generated":{"line":1982,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1982,"column":0},"generated":{"line":1983,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1983,"column":0},"generated":{"line":1984,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1984,"column":0},"generated":{"line":1985,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1985,"column":0},"generated":{"line":1986,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1986,"column":0},"generated":{"line":1987,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1987,"column":0},"generated":{"line":1988,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1988,"column":0},"generated":{"line":1989,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1989,"column":0},"generated":{"line":1990,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1990,"column":0},"generated":{"line":1991,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1991,"column":0},"generated":{"line":1992,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1992,"column":0},"generated":{"line":1993,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1993,"column":0},"generated":{"line":1994,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1994,"column":0},"generated":{"line":1995,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1995,"column":0},"generated":{"line":1996,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1996,"column":0},"generated":{"line":1997,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1997,"column":0},"generated":{"line":1998,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1998,"column":0},"generated":{"line":1999,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":1999,"column":0},"generated":{"line":2000,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2000,"column":0},"generated":{"line":2001,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2001,"column":0},"generated":{"line":2002,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2002,"column":0},"generated":{"line":2003,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2003,"column":0},"generated":{"line":2004,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2004,"column":0},"generated":{"line":2005,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2005,"column":0},"generated":{"line":2006,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2006,"column":0},"generated":{"line":2007,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2007,"column":0},"generated":{"line":2008,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2008,"column":0},"generated":{"line":2009,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2009,"column":0},"generated":{"line":2010,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2010,"column":0},"generated":{"line":2011,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2011,"column":0},"generated":{"line":2012,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2012,"column":0},"generated":{"line":2013,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2013,"column":0},"generated":{"line":2014,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2014,"column":0},"generated":{"line":2015,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2015,"column":0},"generated":{"line":2016,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2016,"column":0},"generated":{"line":2017,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2017,"column":0},"generated":{"line":2018,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2018,"column":0},"generated":{"line":2019,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2019,"column":0},"generated":{"line":2020,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2020,"column":0},"generated":{"line":2021,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2021,"column":0},"generated":{"line":2022,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2022,"column":0},"generated":{"line":2023,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2023,"column":0},"generated":{"line":2024,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2024,"column":0},"generated":{"line":2025,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2025,"column":0},"generated":{"line":2026,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2026,"column":0},"generated":{"line":2027,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2027,"column":0},"generated":{"line":2028,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2028,"column":0},"generated":{"line":2029,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2029,"column":0},"generated":{"line":2030,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2030,"column":0},"generated":{"line":2031,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2031,"column":0},"generated":{"line":2032,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2032,"column":0},"generated":{"line":2033,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2033,"column":0},"generated":{"line":2034,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2034,"column":0},"generated":{"line":2035,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2035,"column":0},"generated":{"line":2036,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2036,"column":0},"generated":{"line":2037,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2037,"column":0},"generated":{"line":2038,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2038,"column":0},"generated":{"line":2039,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2039,"column":0},"generated":{"line":2040,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2040,"column":0},"generated":{"line":2041,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2041,"column":0},"generated":{"line":2042,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2042,"column":0},"generated":{"line":2043,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2043,"column":0},"generated":{"line":2044,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2044,"column":0},"generated":{"line":2045,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2045,"column":0},"generated":{"line":2046,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2046,"column":0},"generated":{"line":2047,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2047,"column":0},"generated":{"line":2048,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2048,"column":0},"generated":{"line":2049,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2049,"column":0},"generated":{"line":2050,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2050,"column":0},"generated":{"line":2051,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2051,"column":0},"generated":{"line":2052,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2052,"column":0},"generated":{"line":2053,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2053,"column":0},"generated":{"line":2054,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2054,"column":0},"generated":{"line":2055,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2055,"column":0},"generated":{"line":2056,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2056,"column":0},"generated":{"line":2057,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2057,"column":0},"generated":{"line":2058,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2058,"column":0},"generated":{"line":2059,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2059,"column":0},"generated":{"line":2060,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2060,"column":0},"generated":{"line":2061,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2061,"column":0},"generated":{"line":2062,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2062,"column":0},"generated":{"line":2063,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2063,"column":0},"generated":{"line":2064,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2064,"column":0},"generated":{"line":2065,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2065,"column":0},"generated":{"line":2066,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2066,"column":0},"generated":{"line":2067,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2067,"column":0},"generated":{"line":2068,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2068,"column":0},"generated":{"line":2069,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2069,"column":0},"generated":{"line":2070,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2070,"column":0},"generated":{"line":2071,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2071,"column":0},"generated":{"line":2072,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2072,"column":0},"generated":{"line":2073,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2073,"column":0},"generated":{"line":2074,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2074,"column":0},"generated":{"line":2075,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2075,"column":0},"generated":{"line":2076,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2076,"column":0},"generated":{"line":2077,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2077,"column":0},"generated":{"line":2078,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2078,"column":0},"generated":{"line":2079,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2079,"column":0},"generated":{"line":2080,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2080,"column":0},"generated":{"line":2081,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2081,"column":0},"generated":{"line":2082,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2082,"column":0},"generated":{"line":2083,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2083,"column":0},"generated":{"line":2084,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2084,"column":0},"generated":{"line":2085,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2085,"column":0},"generated":{"line":2086,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2086,"column":0},"generated":{"line":2087,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2087,"column":0},"generated":{"line":2088,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2088,"column":0},"generated":{"line":2089,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2089,"column":0},"generated":{"line":2090,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2090,"column":0},"generated":{"line":2091,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2091,"column":0},"generated":{"line":2092,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2092,"column":0},"generated":{"line":2093,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2093,"column":0},"generated":{"line":2094,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2094,"column":0},"generated":{"line":2095,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2095,"column":0},"generated":{"line":2096,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2096,"column":0},"generated":{"line":2097,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2097,"column":0},"generated":{"line":2098,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2098,"column":0},"generated":{"line":2099,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2099,"column":0},"generated":{"line":2100,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2100,"column":0},"generated":{"line":2101,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2101,"column":0},"generated":{"line":2102,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2102,"column":0},"generated":{"line":2103,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2103,"column":0},"generated":{"line":2104,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2104,"column":0},"generated":{"line":2105,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2105,"column":0},"generated":{"line":2106,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2106,"column":0},"generated":{"line":2107,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2107,"column":0},"generated":{"line":2108,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2108,"column":0},"generated":{"line":2109,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2109,"column":0},"generated":{"line":2110,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2110,"column":0},"generated":{"line":2111,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2111,"column":0},"generated":{"line":2112,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2112,"column":0},"generated":{"line":2113,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2113,"column":0},"generated":{"line":2114,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2114,"column":0},"generated":{"line":2115,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2115,"column":0},"generated":{"line":2116,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2116,"column":0},"generated":{"line":2117,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2117,"column":0},"generated":{"line":2118,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2118,"column":0},"generated":{"line":2119,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2119,"column":0},"generated":{"line":2120,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2120,"column":0},"generated":{"line":2121,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2121,"column":0},"generated":{"line":2122,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2122,"column":0},"generated":{"line":2123,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2123,"column":0},"generated":{"line":2124,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2124,"column":0},"generated":{"line":2125,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2125,"column":0},"generated":{"line":2126,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2126,"column":0},"generated":{"line":2127,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2127,"column":0},"generated":{"line":2128,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2128,"column":0},"generated":{"line":2129,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2129,"column":0},"generated":{"line":2130,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2130,"column":0},"generated":{"line":2131,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2131,"column":0},"generated":{"line":2132,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2132,"column":0},"generated":{"line":2133,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2133,"column":0},"generated":{"line":2134,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2134,"column":0},"generated":{"line":2135,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2135,"column":0},"generated":{"line":2136,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2136,"column":0},"generated":{"line":2137,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2137,"column":0},"generated":{"line":2138,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2138,"column":0},"generated":{"line":2139,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2139,"column":0},"generated":{"line":2140,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2140,"column":0},"generated":{"line":2141,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2141,"column":0},"generated":{"line":2142,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2142,"column":0},"generated":{"line":2143,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2143,"column":0},"generated":{"line":2144,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2144,"column":0},"generated":{"line":2145,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2145,"column":0},"generated":{"line":2146,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2146,"column":0},"generated":{"line":2147,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2147,"column":0},"generated":{"line":2148,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2148,"column":0},"generated":{"line":2149,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2149,"column":0},"generated":{"line":2150,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2150,"column":0},"generated":{"line":2151,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2151,"column":0},"generated":{"line":2152,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2152,"column":0},"generated":{"line":2153,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2153,"column":0},"generated":{"line":2154,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2154,"column":0},"generated":{"line":2155,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2155,"column":0},"generated":{"line":2156,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2156,"column":0},"generated":{"line":2157,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2157,"column":0},"generated":{"line":2158,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2158,"column":0},"generated":{"line":2159,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2159,"column":0},"generated":{"line":2160,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2160,"column":0},"generated":{"line":2161,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2161,"column":0},"generated":{"line":2162,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2162,"column":0},"generated":{"line":2163,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2163,"column":0},"generated":{"line":2164,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2164,"column":0},"generated":{"line":2165,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2165,"column":0},"generated":{"line":2166,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2166,"column":0},"generated":{"line":2167,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2167,"column":0},"generated":{"line":2168,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2168,"column":0},"generated":{"line":2169,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2169,"column":0},"generated":{"line":2170,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2170,"column":0},"generated":{"line":2171,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2171,"column":0},"generated":{"line":2172,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2172,"column":0},"generated":{"line":2173,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2173,"column":0},"generated":{"line":2174,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2174,"column":0},"generated":{"line":2175,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2175,"column":0},"generated":{"line":2176,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2176,"column":0},"generated":{"line":2177,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2177,"column":0},"generated":{"line":2178,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2178,"column":0},"generated":{"line":2179,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2179,"column":0},"generated":{"line":2180,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2180,"column":0},"generated":{"line":2181,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2181,"column":0},"generated":{"line":2182,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2182,"column":0},"generated":{"line":2183,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2183,"column":0},"generated":{"line":2184,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2184,"column":0},"generated":{"line":2185,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2185,"column":0},"generated":{"line":2186,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2186,"column":0},"generated":{"line":2187,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2187,"column":0},"generated":{"line":2188,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2188,"column":0},"generated":{"line":2189,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2189,"column":0},"generated":{"line":2190,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2190,"column":0},"generated":{"line":2191,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2191,"column":0},"generated":{"line":2192,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2192,"column":0},"generated":{"line":2193,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2193,"column":0},"generated":{"line":2194,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2194,"column":0},"generated":{"line":2195,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2195,"column":0},"generated":{"line":2196,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2196,"column":0},"generated":{"line":2197,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2197,"column":0},"generated":{"line":2198,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2198,"column":0},"generated":{"line":2199,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2199,"column":0},"generated":{"line":2200,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2200,"column":0},"generated":{"line":2201,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2201,"column":0},"generated":{"line":2202,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2202,"column":0},"generated":{"line":2203,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2203,"column":0},"generated":{"line":2204,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2204,"column":0},"generated":{"line":2205,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2205,"column":0},"generated":{"line":2206,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2206,"column":0},"generated":{"line":2207,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2207,"column":0},"generated":{"line":2208,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2208,"column":0},"generated":{"line":2209,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2209,"column":0},"generated":{"line":2210,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2210,"column":0},"generated":{"line":2211,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2211,"column":0},"generated":{"line":2212,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2212,"column":0},"generated":{"line":2213,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2213,"column":0},"generated":{"line":2214,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2214,"column":0},"generated":{"line":2215,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2215,"column":0},"generated":{"line":2216,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2216,"column":0},"generated":{"line":2217,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2217,"column":0},"generated":{"line":2218,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2218,"column":0},"generated":{"line":2219,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2219,"column":0},"generated":{"line":2220,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2220,"column":0},"generated":{"line":2221,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2221,"column":0},"generated":{"line":2222,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2222,"column":0},"generated":{"line":2223,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2223,"column":0},"generated":{"line":2224,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2224,"column":0},"generated":{"line":2225,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2225,"column":0},"generated":{"line":2226,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2226,"column":0},"generated":{"line":2227,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2227,"column":0},"generated":{"line":2228,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2228,"column":0},"generated":{"line":2229,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2229,"column":0},"generated":{"line":2230,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2230,"column":0},"generated":{"line":2231,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2231,"column":0},"generated":{"line":2232,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2232,"column":0},"generated":{"line":2233,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2233,"column":0},"generated":{"line":2234,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2234,"column":0},"generated":{"line":2235,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2235,"column":0},"generated":{"line":2236,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2236,"column":0},"generated":{"line":2237,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2237,"column":0},"generated":{"line":2238,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2238,"column":0},"generated":{"line":2239,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2239,"column":0},"generated":{"line":2240,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2240,"column":0},"generated":{"line":2241,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2241,"column":0},"generated":{"line":2242,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2242,"column":0},"generated":{"line":2243,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2243,"column":0},"generated":{"line":2244,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2244,"column":0},"generated":{"line":2245,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2245,"column":0},"generated":{"line":2246,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2246,"column":0},"generated":{"line":2247,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2247,"column":0},"generated":{"line":2248,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2248,"column":0},"generated":{"line":2249,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2249,"column":0},"generated":{"line":2250,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2250,"column":0},"generated":{"line":2251,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2251,"column":0},"generated":{"line":2252,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2252,"column":0},"generated":{"line":2253,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2253,"column":0},"generated":{"line":2254,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2254,"column":0},"generated":{"line":2255,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2255,"column":0},"generated":{"line":2256,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2256,"column":0},"generated":{"line":2257,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2257,"column":0},"generated":{"line":2258,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2258,"column":0},"generated":{"line":2259,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2259,"column":0},"generated":{"line":2260,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2260,"column":0},"generated":{"line":2261,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2261,"column":0},"generated":{"line":2262,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2262,"column":0},"generated":{"line":2263,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2263,"column":0},"generated":{"line":2264,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2264,"column":0},"generated":{"line":2265,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2265,"column":0},"generated":{"line":2266,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2266,"column":0},"generated":{"line":2267,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2267,"column":0},"generated":{"line":2268,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2268,"column":0},"generated":{"line":2269,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2269,"column":0},"generated":{"line":2270,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2270,"column":0},"generated":{"line":2271,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2271,"column":0},"generated":{"line":2272,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2272,"column":0},"generated":{"line":2273,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2273,"column":0},"generated":{"line":2274,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2274,"column":0},"generated":{"line":2275,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2275,"column":0},"generated":{"line":2276,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2276,"column":0},"generated":{"line":2277,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2277,"column":0},"generated":{"line":2278,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2278,"column":0},"generated":{"line":2279,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2279,"column":0},"generated":{"line":2280,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2280,"column":0},"generated":{"line":2281,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2281,"column":0},"generated":{"line":2282,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2282,"column":0},"generated":{"line":2283,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2283,"column":0},"generated":{"line":2284,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2284,"column":0},"generated":{"line":2285,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2285,"column":0},"generated":{"line":2286,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2286,"column":0},"generated":{"line":2287,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2287,"column":0},"generated":{"line":2288,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2288,"column":0},"generated":{"line":2289,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2289,"column":0},"generated":{"line":2290,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2290,"column":0},"generated":{"line":2291,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2291,"column":0},"generated":{"line":2292,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2292,"column":0},"generated":{"line":2293,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2293,"column":0},"generated":{"line":2294,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2294,"column":0},"generated":{"line":2295,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2295,"column":0},"generated":{"line":2296,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2296,"column":0},"generated":{"line":2297,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2297,"column":0},"generated":{"line":2298,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2298,"column":0},"generated":{"line":2299,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2299,"column":0},"generated":{"line":2300,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2300,"column":0},"generated":{"line":2301,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2301,"column":0},"generated":{"line":2302,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2302,"column":0},"generated":{"line":2303,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2303,"column":0},"generated":{"line":2304,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2304,"column":0},"generated":{"line":2305,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2305,"column":0},"generated":{"line":2306,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2306,"column":0},"generated":{"line":2307,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2307,"column":0},"generated":{"line":2308,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2308,"column":0},"generated":{"line":2309,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2309,"column":0},"generated":{"line":2310,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2310,"column":0},"generated":{"line":2311,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2311,"column":0},"generated":{"line":2312,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2312,"column":0},"generated":{"line":2313,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2313,"column":0},"generated":{"line":2314,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2314,"column":0},"generated":{"line":2315,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2315,"column":0},"generated":{"line":2316,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2316,"column":0},"generated":{"line":2317,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2317,"column":0},"generated":{"line":2318,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2318,"column":0},"generated":{"line":2319,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2319,"column":0},"generated":{"line":2320,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2320,"column":0},"generated":{"line":2321,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2321,"column":0},"generated":{"line":2322,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2322,"column":0},"generated":{"line":2323,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2323,"column":0},"generated":{"line":2324,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2324,"column":0},"generated":{"line":2325,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2325,"column":0},"generated":{"line":2326,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2326,"column":0},"generated":{"line":2327,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2327,"column":0},"generated":{"line":2328,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2328,"column":0},"generated":{"line":2329,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2329,"column":0},"generated":{"line":2330,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2330,"column":0},"generated":{"line":2331,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2331,"column":0},"generated":{"line":2332,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2332,"column":0},"generated":{"line":2333,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2333,"column":0},"generated":{"line":2334,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2334,"column":0},"generated":{"line":2335,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2335,"column":0},"generated":{"line":2336,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2336,"column":0},"generated":{"line":2337,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2337,"column":0},"generated":{"line":2338,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2338,"column":0},"generated":{"line":2339,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2339,"column":0},"generated":{"line":2340,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2340,"column":0},"generated":{"line":2341,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2341,"column":0},"generated":{"line":2342,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2342,"column":0},"generated":{"line":2343,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2343,"column":0},"generated":{"line":2344,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2344,"column":0},"generated":{"line":2345,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2345,"column":0},"generated":{"line":2346,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2346,"column":0},"generated":{"line":2347,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2347,"column":0},"generated":{"line":2348,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2348,"column":0},"generated":{"line":2349,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2349,"column":0},"generated":{"line":2350,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2350,"column":0},"generated":{"line":2351,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2351,"column":0},"generated":{"line":2352,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2352,"column":0},"generated":{"line":2353,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2353,"column":0},"generated":{"line":2354,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2354,"column":0},"generated":{"line":2355,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2355,"column":0},"generated":{"line":2356,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2356,"column":0},"generated":{"line":2357,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2357,"column":0},"generated":{"line":2358,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2358,"column":0},"generated":{"line":2359,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2359,"column":0},"generated":{"line":2360,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2360,"column":0},"generated":{"line":2361,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2361,"column":0},"generated":{"line":2362,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2362,"column":0},"generated":{"line":2363,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2363,"column":0},"generated":{"line":2364,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2364,"column":0},"generated":{"line":2365,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2365,"column":0},"generated":{"line":2366,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2366,"column":0},"generated":{"line":2367,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2367,"column":0},"generated":{"line":2368,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2368,"column":0},"generated":{"line":2369,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2369,"column":0},"generated":{"line":2370,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2370,"column":0},"generated":{"line":2371,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2371,"column":0},"generated":{"line":2372,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2372,"column":0},"generated":{"line":2373,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2373,"column":0},"generated":{"line":2374,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2374,"column":0},"generated":{"line":2375,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2375,"column":0},"generated":{"line":2376,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2376,"column":0},"generated":{"line":2377,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2377,"column":0},"generated":{"line":2378,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2378,"column":0},"generated":{"line":2379,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2379,"column":0},"generated":{"line":2380,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2380,"column":0},"generated":{"line":2381,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2381,"column":0},"generated":{"line":2382,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2382,"column":0},"generated":{"line":2383,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2383,"column":0},"generated":{"line":2384,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2384,"column":0},"generated":{"line":2385,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2385,"column":0},"generated":{"line":2386,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2386,"column":0},"generated":{"line":2387,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2387,"column":0},"generated":{"line":2388,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2388,"column":0},"generated":{"line":2389,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2389,"column":0},"generated":{"line":2390,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2390,"column":0},"generated":{"line":2391,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2391,"column":0},"generated":{"line":2392,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2392,"column":0},"generated":{"line":2393,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2393,"column":0},"generated":{"line":2394,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2394,"column":0},"generated":{"line":2395,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2395,"column":0},"generated":{"line":2396,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2396,"column":0},"generated":{"line":2397,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2397,"column":0},"generated":{"line":2398,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2398,"column":0},"generated":{"line":2399,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2399,"column":0},"generated":{"line":2400,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2400,"column":0},"generated":{"line":2401,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2401,"column":0},"generated":{"line":2402,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2402,"column":0},"generated":{"line":2403,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2403,"column":0},"generated":{"line":2404,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2404,"column":0},"generated":{"line":2405,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2405,"column":0},"generated":{"line":2406,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2406,"column":0},"generated":{"line":2407,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2407,"column":0},"generated":{"line":2408,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2408,"column":0},"generated":{"line":2409,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2409,"column":0},"generated":{"line":2410,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2410,"column":0},"generated":{"line":2411,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2411,"column":0},"generated":{"line":2412,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2412,"column":0},"generated":{"line":2413,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2413,"column":0},"generated":{"line":2414,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2414,"column":0},"generated":{"line":2415,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2415,"column":0},"generated":{"line":2416,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2416,"column":0},"generated":{"line":2417,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2417,"column":0},"generated":{"line":2418,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2418,"column":0},"generated":{"line":2419,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2419,"column":0},"generated":{"line":2420,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2420,"column":0},"generated":{"line":2421,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2421,"column":0},"generated":{"line":2422,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2422,"column":0},"generated":{"line":2423,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2423,"column":0},"generated":{"line":2424,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2424,"column":0},"generated":{"line":2425,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2425,"column":0},"generated":{"line":2426,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2426,"column":0},"generated":{"line":2427,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2427,"column":0},"generated":{"line":2428,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2428,"column":0},"generated":{"line":2429,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2429,"column":0},"generated":{"line":2430,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2430,"column":0},"generated":{"line":2431,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2431,"column":0},"generated":{"line":2432,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2432,"column":0},"generated":{"line":2433,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2433,"column":0},"generated":{"line":2434,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2434,"column":0},"generated":{"line":2435,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2435,"column":0},"generated":{"line":2436,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2436,"column":0},"generated":{"line":2437,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2437,"column":0},"generated":{"line":2438,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2438,"column":0},"generated":{"line":2439,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2439,"column":0},"generated":{"line":2440,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2440,"column":0},"generated":{"line":2441,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2441,"column":0},"generated":{"line":2442,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2442,"column":0},"generated":{"line":2443,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2443,"column":0},"generated":{"line":2444,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2444,"column":0},"generated":{"line":2445,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2445,"column":0},"generated":{"line":2446,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2446,"column":0},"generated":{"line":2447,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2447,"column":0},"generated":{"line":2448,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2448,"column":0},"generated":{"line":2449,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2449,"column":0},"generated":{"line":2450,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2450,"column":0},"generated":{"line":2451,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2451,"column":0},"generated":{"line":2452,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2452,"column":0},"generated":{"line":2453,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2453,"column":0},"generated":{"line":2454,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2454,"column":0},"generated":{"line":2455,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2455,"column":0},"generated":{"line":2456,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2456,"column":0},"generated":{"line":2457,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2457,"column":0},"generated":{"line":2458,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2458,"column":0},"generated":{"line":2459,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2459,"column":0},"generated":{"line":2460,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2460,"column":0},"generated":{"line":2461,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2461,"column":0},"generated":{"line":2462,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2462,"column":0},"generated":{"line":2463,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2463,"column":0},"generated":{"line":2464,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2464,"column":0},"generated":{"line":2465,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2465,"column":0},"generated":{"line":2466,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2466,"column":0},"generated":{"line":2467,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2467,"column":0},"generated":{"line":2468,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2468,"column":0},"generated":{"line":2469,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2469,"column":0},"generated":{"line":2470,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2470,"column":0},"generated":{"line":2471,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2471,"column":0},"generated":{"line":2472,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2472,"column":0},"generated":{"line":2473,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2473,"column":0},"generated":{"line":2474,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2474,"column":0},"generated":{"line":2475,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2475,"column":0},"generated":{"line":2476,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2476,"column":0},"generated":{"line":2477,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2477,"column":0},"generated":{"line":2478,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2478,"column":0},"generated":{"line":2479,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2479,"column":0},"generated":{"line":2480,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2480,"column":0},"generated":{"line":2481,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2481,"column":0},"generated":{"line":2482,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2482,"column":0},"generated":{"line":2483,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2483,"column":0},"generated":{"line":2484,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2484,"column":0},"generated":{"line":2485,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2485,"column":0},"generated":{"line":2486,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2486,"column":0},"generated":{"line":2487,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2487,"column":0},"generated":{"line":2488,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2488,"column":0},"generated":{"line":2489,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2489,"column":0},"generated":{"line":2490,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2490,"column":0},"generated":{"line":2491,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/abstract/query-generator.js","original":{"line":2491,"column":0},"generated":{"line":2492,"column":0}}],"sources":{"../node_modules/sequelize/lib/dialects/abstract/query-generator.js":"'use strict';\n\nconst Utils = require('../../utils');\nconst SqlString = require('../../sql-string');\nconst Model = require('../../model');\nconst DataTypes = require('../../data-types');\nconst util = require('util');\nconst _ = require('lodash');\nconst Dottie = require('dottie');\nconst Association = require('../../associations/base');\nconst BelongsTo = require('../../associations/belongs-to');\nconst BelongsToMany = require('../../associations/belongs-to-many');\nconst HasMany = require('../../associations/has-many');\nconst Op = require('../../operators');\nconst uuid = require('uuid');\nconst semver = require('semver');\n\nconst QueryGenerator = {\n  _templateSettings: require('lodash').runInContext().templateSettings,\n  options: {},\n\n  extractTableDetails(tableName, options) {\n    options = options || {};\n    tableName = tableName || {};\n    return {\n      schema: tableName.schema || options.schema || 'public',\n      tableName: _.isPlainObject(tableName) ? tableName.tableName : tableName,\n      delimiter: tableName.delimiter || options.delimiter || '.'\n    };\n  },\n\n  addSchema(param) {\n    const self = this;\n\n    if (!param._schema) return param.tableName || param;\n\n    return {\n      tableName: param.tableName || param,\n      table: param.tableName || param,\n      name: param.name || param,\n      schema: param._schema,\n      delimiter: param._schemaDelimiter || '.',\n      toString() {\n        return self.quoteTable(this);\n      }\n    };\n  },\n\n  dropSchema(tableName, options) {\n    return this.dropTableQuery(tableName, options);\n  },\n\n  describeTableQuery(tableName, schema, schemaDelimiter) {\n    const table = this.quoteTable(\n      this.addSchema({\n        tableName,\n        _schema: schema,\n        _schemaDelimiter: schemaDelimiter\n      })\n    );\n\n    return 'DESCRIBE ' + table + ';';\n  },\n\n  dropTableQuery(tableName) {\n    return `DROP TABLE IF EXISTS ${this.quoteTable(tableName)};`;\n  },\n\n  renameTableQuery(before, after) {\n    return `ALTER TABLE ${this.quoteTable(before)} RENAME TO ${this.quoteTable(after)};`;\n  },\n\n  /*\n    Returns an insert into command. Parameters: table name + hash of attribute-value-pairs.\n   @private\n  */\n  insertQuery(table, valueHash, modelAttributes, options) {\n    options = options || {};\n    _.defaults(options, this.options);\n\n    const modelAttributeMap = {};\n    const fields = [];\n    const values = [];\n    let query;\n    let valueQuery = '<%= tmpTable %>INSERT<%= ignoreDuplicates %> INTO <%= table %> (<%= attributes %>)<%= output %> VALUES (<%= values %>)';\n    let emptyQuery = '<%= tmpTable %>INSERT<%= ignoreDuplicates %> INTO <%= table %><%= output %>';\n    let outputFragment;\n    let identityWrapperRequired = false;\n    let tmpTable = '';         //tmpTable declaration for trigger\n\n    if (modelAttributes) {\n      _.each(modelAttributes, (attribute, key) => {\n        modelAttributeMap[key] = attribute;\n        if (attribute.field) {\n          modelAttributeMap[attribute.field] = attribute;\n        }\n      });\n    }\n\n    if (this._dialect.supports['DEFAULT VALUES']) {\n      emptyQuery += ' DEFAULT VALUES';\n    } else if (this._dialect.supports['VALUES ()']) {\n      emptyQuery += ' VALUES ()';\n    }\n\n    if (this._dialect.supports.returnValues && options.returning) {\n      if (this._dialect.supports.returnValues.returning) {\n        valueQuery += ' RETURNING *';\n        emptyQuery += ' RETURNING *';\n      } else if (this._dialect.supports.returnValues.output) {\n        outputFragment = ' OUTPUT INSERTED.*';\n\n        //To capture output rows when there is a trigger on MSSQL DB\n        if (modelAttributes && options.hasTrigger && this._dialect.supports.tmpTableTrigger) {\n\n          let tmpColumns = '';\n          let outputColumns = '';\n          tmpTable = 'declare @tmp table (<%= columns %>); ';\n\n          for (const modelKey in modelAttributes) {\n            const attribute = modelAttributes[modelKey];\n            if (!(attribute.type instanceof DataTypes.VIRTUAL)) {\n              if (tmpColumns.length > 0) {\n                tmpColumns += ',';\n                outputColumns += ',';\n              }\n\n              tmpColumns += this.quoteIdentifier(attribute.field) + ' ' + attribute.type.toSql();\n              outputColumns += 'INSERTED.' + this.quoteIdentifier(attribute.field);\n            }\n          }\n\n          const replacement = {\n            columns: tmpColumns\n          };\n\n          tmpTable = _.template(tmpTable, this._templateSettings)(replacement).trim();\n          outputFragment = ' OUTPUT ' + outputColumns + ' into @tmp';\n          const selectFromTmp = ';select * from @tmp';\n\n          valueQuery += selectFromTmp;\n          emptyQuery += selectFromTmp;\n        }\n      }\n    }\n\n    if (this._dialect.supports.EXCEPTION && options.exception) {\n      // Mostly for internal use, so we expect the user to know what he's doing!\n      // pg_temp functions are private per connection, so we never risk this function interfering with another one.\n      if (semver.gte(this.sequelize.options.databaseVersion, '9.2.0')) {\n        // >= 9.2 - Use a UUID but prefix with 'func_' (numbers first not allowed)\n        const delimiter = '$func_' + uuid.v4().replace(/-/g, '') + '$';\n\n        options.exception = 'WHEN unique_violation THEN GET STACKED DIAGNOSTICS sequelize_caught_exception = PG_EXCEPTION_DETAIL;';\n        valueQuery = 'CREATE OR REPLACE FUNCTION pg_temp.testfunc(OUT response <%= table %>, OUT sequelize_caught_exception text) RETURNS RECORD AS ' + delimiter +\n          ' BEGIN ' + valueQuery + ' INTO response; EXCEPTION ' + options.exception + ' END ' + delimiter +\n          ' LANGUAGE plpgsql; SELECT (testfunc.response).*, testfunc.sequelize_caught_exception FROM pg_temp.testfunc(); DROP FUNCTION IF EXISTS pg_temp.testfunc()';\n      } else {\n        options.exception = 'WHEN unique_violation THEN NULL;';\n        valueQuery = 'CREATE OR REPLACE FUNCTION pg_temp.testfunc() RETURNS SETOF <%= table %> AS $body$ BEGIN RETURN QUERY ' + valueQuery + '; EXCEPTION ' + options.exception + ' END; $body$ LANGUAGE plpgsql; SELECT * FROM pg_temp.testfunc(); DROP FUNCTION IF EXISTS pg_temp.testfunc();';\n      }\n    }\n\n    if (this._dialect.supports['ON DUPLICATE KEY'] && options.onDuplicate) {\n      valueQuery += ' ON DUPLICATE KEY ' + options.onDuplicate;\n      emptyQuery += ' ON DUPLICATE KEY ' + options.onDuplicate;\n    }\n\n    valueHash = Utils.removeNullValuesFromHash(valueHash, this.options.omitNull);\n    for (const key in valueHash) {\n      if (valueHash.hasOwnProperty(key)) {\n        const value = valueHash[key];\n        fields.push(this.quoteIdentifier(key));\n\n        // SERIALS' can't be NULL in postgresql, use DEFAULT where supported\n        if (modelAttributeMap && modelAttributeMap[key] && modelAttributeMap[key].autoIncrement === true && !value) {\n          if (!this._dialect.supports.autoIncrement.defaultValue) {\n            fields.splice(-1, 1);\n          } else if (this._dialect.supports.DEFAULT) {\n            values.push('DEFAULT');\n          } else {\n            values.push(this.escape(null));\n          }\n        } else {\n          if (modelAttributeMap && modelAttributeMap[key] && modelAttributeMap[key].autoIncrement === true) {\n            identityWrapperRequired = true;\n          }\n\n          values.push(this.escape(value, modelAttributeMap && modelAttributeMap[key] || undefined, { context: 'INSERT' }));\n        }\n      }\n    }\n\n    const replacements = {\n      ignoreDuplicates: options.ignoreDuplicates ? this._dialect.supports.IGNORE : '',\n      table: this.quoteTable(table),\n      attributes: fields.join(','),\n      output: outputFragment,\n      values: values.join(','),\n      tmpTable\n    };\n\n    query = (replacements.attributes.length ? valueQuery : emptyQuery) + ';';\n    if (identityWrapperRequired && this._dialect.supports.autoIncrement.identityInsert) {\n      query = [\n        'SET IDENTITY_INSERT', this.quoteTable(table), 'ON;',\n        query,\n        'SET IDENTITY_INSERT', this.quoteTable(table), 'OFF;'\n      ].join(' ');\n    }\n\n    return _.template(query, this._templateSettings)(replacements);\n  },\n\n  /*\n    Returns an insert into command for multiple values.\n    Parameters: table name + list of hashes of attribute-value-pairs.\n   @private\n  */\n  bulkInsertQuery(tableName, attrValueHashes, options, rawAttributes) {\n    options = options || {};\n    rawAttributes = rawAttributes || {};\n\n    const query = 'INSERT<%= ignoreDuplicates %> INTO <%= table %> (<%= attributes %>) VALUES <%= tuples %><%= onDuplicateKeyUpdate %><%= returning %>;';\n    const tuples = [];\n    const serials = {};\n    const allAttributes = [];\n    let onDuplicateKeyUpdate = '';\n\n    for (const attrValueHash of attrValueHashes) {\n      _.forOwn(attrValueHash, (value, key) => {\n        if (allAttributes.indexOf(key) === -1) {\n          allAttributes.push(key);\n        }\n\n        if (rawAttributes[key] && rawAttributes[key].autoIncrement === true) {\n          serials[key] = true;\n        }\n      });\n    }\n\n    for (const attrValueHash of attrValueHashes) {\n      tuples.push('(' + allAttributes.map(key => {\n        if (this._dialect.supports.bulkDefault && serials[key] === true) {\n          return attrValueHash[key] || 'DEFAULT';\n        }\n        return this.escape(attrValueHash[key], rawAttributes[key], { context: 'INSERT' });\n      }).join(',') + ')');\n    }\n\n    if (this._dialect.supports.updateOnDuplicate && options.updateOnDuplicate) {\n      onDuplicateKeyUpdate += ' ON DUPLICATE KEY UPDATE ' + options.updateOnDuplicate.map(attr => {\n        const field = rawAttributes && rawAttributes[attr] && rawAttributes[attr].field || attr;\n        const key = this.quoteIdentifier(field);\n        return key + '=VALUES(' + key + ')';\n      }).join(',');\n    }\n\n    const replacements = {\n      ignoreDuplicates: options.ignoreDuplicates ? this._dialect.supports.ignoreDuplicates : '',\n      table: this.quoteTable(tableName),\n      attributes: allAttributes.map(attr => this.quoteIdentifier(attr)).join(','),\n      tuples: tuples.join(','),\n      onDuplicateKeyUpdate,\n      returning: this._dialect.supports.returnValues && options.returning ? ' RETURNING *' : ''\n    };\n\n    return _.template(query, this._templateSettings)(replacements);\n  },\n\n  /*\n    Returns an update query.\n    Parameters:\n      - tableName -> Name of the table\n      - values -> A hash with attribute-value-pairs\n      - where -> A hash with conditions (e.g. {name: 'foo'})\n                 OR an ID as integer\n                 OR a string with conditions (e.g. 'name=\"foo\"').\n                 If you use a string, you have to escape it on your own.\n   @private\n  */\n  updateQuery(tableName, attrValueHash, where, options, attributes) {\n    options = options || {};\n    _.defaults(options, this.options);\n\n    attrValueHash = Utils.removeNullValuesFromHash(attrValueHash, options.omitNull, options);\n\n    const values = [];\n    const modelAttributeMap = {};\n    let query = '<%= tmpTable %>UPDATE <%= table %> SET <%= values %><%= output %> <%= where %>';\n    let outputFragment;\n    let tmpTable = '';        // tmpTable declaration for trigger\n    let selectFromTmp = '';   // Select statement for trigger\n\n    if (this._dialect.supports['LIMIT ON UPDATE'] && options.limit) {\n      if (this.dialect !== 'mssql') {\n        query += ' LIMIT ' + this.escape(options.limit) + ' ';\n      }\n    }\n\n    if (this._dialect.supports.returnValues) {\n      if (this._dialect.supports.returnValues.output) {\n        // we always need this for mssql\n        outputFragment = ' OUTPUT INSERTED.*';\n\n        //To capture output rows when there is a trigger on MSSQL DB\n        if (attributes && options.hasTrigger && this._dialect.supports.tmpTableTrigger) {\n          tmpTable = 'declare @tmp table (<%= columns %>); ';\n          let tmpColumns = '';\n          let outputColumns = '';\n\n          for (const modelKey in attributes) {\n            const attribute = attributes[modelKey];\n            if (!(attribute.type instanceof DataTypes.VIRTUAL)) {\n              if (tmpColumns.length > 0) {\n                tmpColumns += ',';\n                outputColumns += ',';\n              }\n\n              tmpColumns += this.quoteIdentifier(attribute.field) + ' ' + attribute.type.toSql();\n              outputColumns += 'INSERTED.' + this.quoteIdentifier(attribute.field);\n            }\n          }\n\n          const replacement ={\n            columns: tmpColumns\n          };\n\n          tmpTable = _.template(tmpTable, this._templateSettings)(replacement).trim();\n          outputFragment = ' OUTPUT ' + outputColumns + ' into @tmp';\n          selectFromTmp = ';select * from @tmp';\n\n          query += selectFromTmp;\n        }\n      } else if (this._dialect.supports.returnValues && options.returning) {\n        // ensure that the return output is properly mapped to model fields.\n        options.mapToModel = true;\n        query += ' RETURNING *';\n      }\n    }\n\n    if (attributes) {\n      _.each(attributes, (attribute, key) => {\n        modelAttributeMap[key] = attribute;\n        if (attribute.field) {\n          modelAttributeMap[attribute.field] = attribute;\n        }\n      });\n    }\n\n    for (const key in attrValueHash) {\n      if (modelAttributeMap && modelAttributeMap[key] &&\n          modelAttributeMap[key].autoIncrement === true &&\n          !this._dialect.supports.autoIncrement.update) {\n        // not allowed to update identity column\n        continue;\n      }\n\n      const value = attrValueHash[key];\n      values.push(this.quoteIdentifier(key) + '=' + this.escape(value, modelAttributeMap && modelAttributeMap[key] || undefined, { context: 'UPDATE' }));\n    }\n\n    const replacements = {\n      table: this.quoteTable(tableName),\n      values: values.join(','),\n      output: outputFragment,\n      where: this.whereQuery(where, options),\n      tmpTable\n    };\n\n    if (values.length === 0) {\n      return '';\n    }\n\n    return _.template(query, this._templateSettings)(replacements).trim();\n  },\n\n  /*\n    Returns an update query.\n    Parameters:\n      - operator -> String with the arithmetic operator (e.g. '+' or '-')\n      - tableName -> Name of the table\n      - values -> A hash with attribute-value-pairs\n      - where -> A hash with conditions (e.g. {name: 'foo'})\n                 OR an ID as integer\n                 OR a string with conditions (e.g. 'name=\"foo\"').\n                 If you use a string, you have to escape it on your own.\n   @private\n  */\n  arithmeticQuery(operator, tableName, attrValueHash, where, options, attributes) {\n    options = options || {};\n    _.defaults(options, { returning: true });\n\n    attrValueHash = Utils.removeNullValuesFromHash(attrValueHash, this.options.omitNull);\n\n    const values = [];\n    let query = 'UPDATE <%= table %> SET <%= values %><%= output %> <%= where %>';\n    let outputFragment;\n\n    if (this._dialect.supports.returnValues && options.returning) {\n      if (this._dialect.supports.returnValues.returning) {\n        options.mapToModel = true;\n        query += ' RETURNING *';\n      } else if (this._dialect.supports.returnValues.output) {\n        outputFragment = ' OUTPUT INSERTED.*';\n      }\n    }\n\n    for (const key in attrValueHash) {\n      const value = attrValueHash[key];\n      values.push(this.quoteIdentifier(key) + '=' + this.quoteIdentifier(key) + operator + ' ' + this.escape(value));\n    }\n\n    attributes = attributes || {};\n    for (const key in attributes) {\n      const value = attributes[key];\n      values.push(this.quoteIdentifier(key) + '=' + this.escape(value));\n    }\n\n    const replacements = {\n      table: this.quoteTable(tableName),\n      values: values.join(','),\n      output: outputFragment,\n      where: this.whereQuery(where)\n    };\n\n    return _.template(query, this._templateSettings)(replacements);\n  },\n\n  nameIndexes(indexes, rawTablename) {\n    if (typeof rawTablename === 'object') {\n      // don't include schema in the index name\n      rawTablename = rawTablename.tableName;\n    }\n\n    return _.map(indexes, index => {\n      if (!index.hasOwnProperty('name')) {\n        const onlyAttributeNames = index.fields.map(field => typeof field === 'string' ? field : field.name || field.attribute);\n        index.name = Utils.underscore(rawTablename + '_' + onlyAttributeNames.join('_'));\n      }\n\n      return index;\n    });\n  },\n\n  /*\n    Returns an add index query.\n    Parameters:\n      - tableName -> Name of an existing table, possibly with schema.\n      - options:\n        - type: UNIQUE|FULLTEXT|SPATIAL\n        - name: The name of the index. Default is <table>_<attr1>_<attr2>\n        - fields: An array of attributes as string or as hash.\n                  If the attribute is a hash, it must have the following content:\n                  - name: The name of the attribute/column\n                  - length: An integer. Optional\n                  - order: 'ASC' or 'DESC'. Optional\n        - parser\n      - rawTablename, the name of the table, without schema. Used to create the name of the index\n   @private\n  */\n  addIndexQuery(tableName, attributes, options, rawTablename) {\n    options = options || {};\n\n    if (!Array.isArray(attributes)) {\n      options = attributes;\n      attributes = undefined;\n    } else {\n      options.fields = attributes;\n    }\n\n    // Backwards compatability\n    if (options.indexName) {\n      options.name = options.indexName;\n    }\n    if (options.indicesType) {\n      options.type = options.indicesType;\n    }\n    if (options.indexType || options.method) {\n      options.using = options.indexType || options.method;\n    }\n\n    options.prefix = options.prefix || rawTablename || tableName;\n    if (options.prefix && _.isString(options.prefix)) {\n      options.prefix = options.prefix.replace(/\\./g, '_');\n      options.prefix = options.prefix.replace(/(\\\"|\\')/g, '');\n    }\n\n    const fieldsSql = options.fields.map(field => {\n      if (typeof field === 'string') {\n        return this.quoteIdentifier(field);\n      } else if (field instanceof Utils.SequelizeMethod) {\n        return this.handleSequelizeMethod(field);\n      } else {\n        let result = '';\n\n        if (field.attribute) {\n          field.name = field.attribute;\n        }\n\n        if (!field.name) {\n          throw new Error('The following index field has no name: ' + util.inspect(field));\n        }\n\n        result += this.quoteIdentifier(field.name);\n\n        if (this._dialect.supports.index.collate && field.collate) {\n          result += ' COLLATE ' + this.quoteIdentifier(field.collate);\n        }\n\n        if (this._dialect.supports.index.length && field.length) {\n          result += '(' + field.length + ')';\n        }\n\n        if (field.order) {\n          result += ' ' + field.order;\n        }\n\n        return result;\n      }\n    });\n\n    if (!options.name) {\n      // Mostly for cases where addIndex is called directly by the user without an options object (for example in migrations)\n      // All calls that go through sequelize should already have a name\n      options = this.nameIndexes([options], options.prefix)[0];\n    }\n\n    options = Model._conformIndex(options);\n\n    if (!this._dialect.supports.index.type) {\n      delete options.type;\n    }\n\n    if (options.where) {\n      options.where = this.whereQuery(options.where);\n    }\n\n    if (_.isString(tableName)) {\n      tableName = this.quoteIdentifiers(tableName);\n    } else {\n      tableName = this.quoteTable(tableName);\n    }\n\n    const concurrently = this._dialect.supports.index.concurrently && options.concurrently ? 'CONCURRENTLY' : undefined;\n    let ind;\n    if (this._dialect.supports.indexViaAlter) {\n      ind = [\n        'ALTER TABLE',\n        tableName,\n        concurrently,\n        'ADD'\n      ];\n    } else {\n      ind = ['CREATE'];\n    }\n\n    ind = ind.concat(\n      options.unique ? 'UNIQUE' : '',\n      options.type, 'INDEX',\n      !this._dialect.supports.indexViaAlter ? concurrently : undefined,\n      this.quoteIdentifiers(options.name),\n      this._dialect.supports.index.using === 1 && options.using ? 'USING ' + options.using : '',\n      !this._dialect.supports.indexViaAlter ? 'ON ' + tableName : undefined,\n      this._dialect.supports.index.using === 2 && options.using ? 'USING ' + options.using : '',\n      '(' + fieldsSql.join(', ') + (options.operator ? ' '+options.operator : '') + ')',\n      this._dialect.supports.index.parser && options.parser ? 'WITH PARSER ' + options.parser : undefined,\n      this._dialect.supports.index.where && options.where ? options.where : undefined\n    );\n\n    return _.compact(ind).join(' ');\n  },\n\n  addConstraintQuery(tableName, options) {\n    options = options || {};\n    const constraintSnippet = this.getConstraintSnippet(tableName, options);\n\n    if (typeof tableName === 'string') {\n      tableName = this.quoteIdentifiers(tableName);\n    } else {\n      tableName = this.quoteTable(tableName);\n    }\n\n    return `ALTER TABLE ${tableName} ADD ${constraintSnippet};`;\n  },\n\n  getConstraintSnippet(tableName, options) {\n    let constraintSnippet, constraintName;\n\n    const fieldsSql = options.fields.map(field => {\n      if (typeof field === 'string') {\n        return this.quoteIdentifier(field);\n      } else if (field._isSequelizeMethod) {\n        return this.handleSequelizeMethod(field);\n      } else {\n        let result = '';\n\n        if (field.attribute) {\n          field.name = field.attribute;\n        }\n\n        if (!field.name) {\n          throw new Error('The following index field has no name: ' + field);\n        }\n\n        result += this.quoteIdentifier(field.name);\n        return result;\n      }\n    });\n\n    const fieldsSqlQuotedString = fieldsSql.join(', ');\n    const fieldsSqlString = fieldsSql.join('_');\n\n    switch (options.type.toUpperCase()) {\n      case 'UNIQUE':\n        constraintName = this.quoteIdentifier(options.name || `${tableName}_${fieldsSqlString}_uk`);\n        constraintSnippet = `CONSTRAINT ${constraintName} UNIQUE (${fieldsSqlQuotedString})`;\n        break;\n      case 'CHECK':\n        options.where = this.whereItemsQuery(options.where);\n        constraintName = this.quoteIdentifier(options.name || `${tableName}_${fieldsSqlString}_ck`);\n        constraintSnippet = `CONSTRAINT ${constraintName} CHECK (${options.where})`;\n        break;\n      case 'DEFAULT':\n        if (options.defaultValue === undefined) {\n          throw new Error('Default value must be specifed for DEFAULT CONSTRAINT');\n        }\n\n        if (this._dialect.name !== 'mssql') {\n          throw new Error('Default constraints are supported only for MSSQL dialect.');\n        }\n\n        constraintName = this.quoteIdentifier(options.name || `${tableName}_${fieldsSqlString}_df`);\n        constraintSnippet = `CONSTRAINT ${constraintName} DEFAULT (${this.escape(options.defaultValue)}) FOR ${fieldsSql[0]}`;\n        break;\n      case 'PRIMARY KEY':\n        constraintName = this.quoteIdentifier(options.name || `${tableName}_${fieldsSqlString}_pk`);\n        constraintSnippet = `CONSTRAINT ${constraintName} PRIMARY KEY (${fieldsSqlQuotedString})`;\n        break;\n      case 'FOREIGN KEY':\n        const references = options.references;\n        if (!references || !references.table || !references.field) {\n          throw new Error('references object with table and field must be specified');\n        }\n        constraintName = this.quoteIdentifier(options.name || `${tableName}_${fieldsSqlString}_${references.table}_fk`);\n        const referencesSnippet = `${this.quoteTable(references.table)} (${this.quoteIdentifier(references.field)})`;\n        constraintSnippet = `CONSTRAINT ${constraintName} `;\n        constraintSnippet += `FOREIGN KEY (${fieldsSqlQuotedString}) REFERENCES ${referencesSnippet}`;\n        if (options.onUpdate) {\n          constraintSnippet += ` ON UPDATE ${options.onUpdate.toUpperCase()}`;\n        }\n        if (options.onDelete) {\n          constraintSnippet += ` ON DELETE ${options.onDelete.toUpperCase()}`;\n        }\n        break;\n      default: throw new Error(`${options.type} is invalid.`);\n    }\n    return constraintSnippet;\n  },\n\n  removeConstraintQuery(tableName, constraintName) {\n    return `ALTER TABLE ${this.quoteIdentifiers(tableName)} DROP CONSTRAINT ${this.quoteIdentifiers(constraintName)}`;\n  },\n\n  quoteTable(param, as) {\n    let table = '';\n\n    if (as === true) {\n      as = param.as || param.name || param;\n    }\n\n    if (_.isObject(param)) {\n      if (this._dialect.supports.schemas) {\n        if (param.schema) {\n          table += this.quoteIdentifier(param.schema) + '.';\n        }\n\n        table += this.quoteIdentifier(param.tableName);\n      } else {\n        if (param.schema) {\n          table += param.schema + (param.delimiter || '.');\n        }\n\n        table += param.tableName;\n        table = this.quoteIdentifier(table);\n      }\n\n\n    } else {\n      table = this.quoteIdentifier(param);\n    }\n\n    if (as) {\n      table += ' AS ' + this.quoteIdentifier(as);\n    }\n    return table;\n  },\n\n  /*\n    Quote an object based on its type. This is a more general version of quoteIdentifiers\n    Strings: should proxy to quoteIdentifiers\n    Arrays:\n      * Expects array in the form: [<model> (optional), <model> (optional),... String, String (optional)]\n        Each <model> can be a model, or an object {model: Model, as: String}, matching include, or an\n        association object, or the name of an association.\n      * Zero or more models can be included in the array and are used to trace a path through the tree of\n        included nested associations. This produces the correct table name for the ORDER BY/GROUP BY SQL\n        and quotes it.\n      * If a single string is appended to end of array, it is quoted.\n        If two strings appended, the 1st string is quoted, the 2nd string unquoted.\n    Objects:\n      * If raw is set, that value should be returned verbatim, without quoting\n      * If fn is set, the string should start with the value of fn, starting paren, followed by\n        the values of cols (which is assumed to be an array), quoted and joined with ', ',\n        unless they are themselves objects\n      * If direction is set, should be prepended\n\n    Currently this function is only used for ordering / grouping columns and Sequelize.col(), but it could\n    potentially also be used for other places where we want to be able to call SQL functions (e.g. as default values)\n   @private\n  */\n  quote(collection, parent, connector) {\n    // init\n    const validOrderOptions = [\n      'ASC',\n      'DESC',\n      'ASC NULLS LAST',\n      'DESC NULLS LAST',\n      'ASC NULLS FIRST',\n      'DESC NULLS FIRST',\n      'NULLS FIRST',\n      'NULLS LAST'\n    ];\n\n    // default\n    connector = connector || '.';\n\n    // just quote as identifiers if string\n    if (typeof collection === 'string') {\n      return this.quoteIdentifiers(collection);\n    } else if (Array.isArray(collection)) {\n      // iterate through the collection and mutate objects into associations\n      collection.forEach((item, index) => {\n        const previous = collection[index - 1];\n        let previousAssociation;\n        let previousModel;\n\n        // set the previous as the parent when previous is undefined or the target of the association\n        if (!previous && parent !== undefined) {\n          previousModel = parent;\n        } else if (previous && previous instanceof Association) {\n          previousAssociation = previous;\n          previousModel = previous.target;\n        }\n\n        // if the previous item is a model, then attempt getting an association\n        if (previousModel && previousModel.prototype instanceof Model) {\n          let model;\n          let as;\n\n          if (typeof item === 'function' && item.prototype instanceof Model) {\n            // set\n            model = item;\n          } else if (_.isPlainObject(item) && item.model && item.model.prototype instanceof Model) {\n            // set\n            model = item.model;\n            as = item.as;\n          }\n\n          if (model) {\n            // set the as to either the through name or the model name\n            if (!as && previousAssociation && previousAssociation instanceof Association && previousAssociation.through && previousAssociation.through.model === model) {\n              // get from previous association\n              item = new Association(previousModel, model, {\n                as: model.name\n              });\n            } else {\n              // get association from previous model\n              item = previousModel.getAssociationForAlias(model, as);\n\n              // attempt to use the model name if the item is still null\n              if (!item) {\n                item = previousModel.getAssociationForAlias(model, model.name);\n              }\n            }\n\n            // make sure we have an association\n            if (!(item instanceof Association)) {\n              throw new Error(util.format('Unable to find a valid association for model, \\'%s\\'', model.name));\n            }\n          }\n        }\n\n        if (typeof item === 'string') {\n          // get order index\n          const orderIndex = validOrderOptions.indexOf(item.toUpperCase());\n\n          // see if this is an order\n          if (index > 0 && orderIndex !== -1) {\n            item = this.sequelize.literal(' ' + validOrderOptions[orderIndex]);\n          } else if (previousModel && previousModel.prototype instanceof Model) {\n            // only go down this path if we have preivous model and check only once\n            if (previousModel.associations !== undefined && previousModel.associations[item]) {\n              // convert the item to an association\n              item = previousModel.associations[item];\n            } else if (previousModel.rawAttributes !== undefined && previousModel.rawAttributes[item] && item !== previousModel.rawAttributes[item].field) {\n              // convert the item attribute from its alias\n              item = previousModel.rawAttributes[item].field;\n            } else if (\n              item.indexOf('.') !== -1\n              && previousModel.rawAttributes !== undefined\n            ) {\n              const itemSplit = item.split('.');\n\n              if (previousModel.rawAttributes[itemSplit[0]].type instanceof DataTypes.JSON) {\n                // just quote identifiers for now\n                const identifier = this.quoteIdentifiers(previousModel.name  + '.' + previousModel.rawAttributes[itemSplit[0]].field);\n\n                // get path\n                const path = itemSplit.slice(1);\n\n                // extract path\n                item = this.jsonPathExtractionQuery(identifier, path);\n\n                // literal because we don't want to append the model name when string\n                item = this.sequelize.literal(item);\n              }\n            }\n          }\n        }\n\n        collection[index] = item;\n      }, this);\n\n      // loop through array, adding table names of models to quoted\n      const collectionLength = collection.length;\n      const tableNames = [];\n      let item;\n      let i = 0;\n\n      for (i = 0; i < collectionLength - 1; i++) {\n        item = collection[i];\n        if (typeof item === 'string' || item._modelAttribute || item instanceof Utils.SequelizeMethod) {\n          break;\n        } else if (item instanceof Association) {\n          tableNames[i] = item.as;\n        }\n      }\n\n      // start building sql\n      let sql = '';\n\n      if (i > 0) {\n        sql += this.quoteIdentifier(tableNames.join(connector)) + '.';\n      } else if (typeof collection[0] === 'string' && parent) {\n        sql += this.quoteIdentifier(parent.name) + '.';\n      }\n\n      // loop through everything past i and append to the sql\n      collection.slice(i).forEach(collectionItem => {\n        sql += this.quote(collectionItem, parent, connector);\n      }, this);\n\n      return sql;\n    } else if (collection._modelAttribute) {\n      return this.quoteTable(collection.Model.name) + '.' + this.quoteIdentifier(collection.fieldName);\n    } else if (collection instanceof Utils.SequelizeMethod) {\n      return this.handleSequelizeMethod(collection);\n    } else if (_.isPlainObject(collection) && collection.raw) {\n      // simple objects with raw is no longer supported\n      throw new Error('The `{raw: \"...\"}` syntax is no longer supported.  Use `sequelize.literal` instead.');\n    } else {\n      throw new Error('Unknown structure passed to order / group: ' + util.inspect(collection));\n    }\n  },\n\n  /*\n    Split an identifier into .-separated tokens and quote each part\n   @private\n  */\n  quoteIdentifiers(identifiers) {\n    if (identifiers.indexOf('.') !== -1) {\n      identifiers = identifiers.split('.');\n      return this.quoteIdentifier(identifiers.slice(0, identifiers.length - 1).join('.')) + '.' + this.quoteIdentifier(identifiers[identifiers.length - 1]);\n    } else {\n      return this.quoteIdentifier(identifiers);\n    }\n  },\n\n  /*\n    Escape a value (e.g. a string, number or date)\n   @private\n  */\n  escape(value, field, options) {\n    options = options || {};\n\n    if (value !== null && value !== undefined) {\n      if (value instanceof Utils.SequelizeMethod) {\n        return this.handleSequelizeMethod(value);\n      } else {\n        if (field && field.type) {\n          if (this.typeValidation && field.type.validate && value) {\n            if (options.isList && Array.isArray(value)) {\n              for (const item of value) {\n                field.type.validate(item, options);\n              }\n            } else {\n              field.type.validate(value, options);\n            }\n          }\n\n          if (field.type.stringify) {\n            // Users shouldn't have to worry about these args - just give them a function that takes a single arg\n            const simpleEscape = _.partialRight(SqlString.escape, this.options.timezone, this.dialect);\n\n            value = field.type.stringify(value, { escape: simpleEscape, field, timezone: this.options.timezone, operation: options.operation });\n\n            if (field.type.escape === false) {\n              // The data-type already did the required escaping\n              return value;\n            }\n          }\n        }\n      }\n    }\n\n    return SqlString.escape(value, this.options.timezone, this.dialect);\n  },\n\n  /*\n    Returns a query for selecting elements in the table <tableName>.\n    Options:\n      - attributes -> An array of attributes (e.g. ['name', 'birthday']). Default: *\n      - where -> A hash with conditions (e.g. {name: 'foo'})\n                 OR an ID as integer\n                 OR a string with conditions (e.g. 'name=\"foo\"').\n                 If you use a string, you have to escape it on your own.\n      - order -> e.g. 'id DESC'\n      - group\n      - limit -> The maximum count you want to get.\n      - offset -> An offset value to start from. Only useable with limit!\n   @private\n  */\n  selectQuery(tableName, options, model) {\n    options = options || {};\n    const limit = options.limit;\n    const mainQueryItems = [];\n    const subQueryItems = [];\n    const subQuery = options.subQuery === undefined ? limit && options.hasMultiAssociation : options.subQuery;\n    const attributes = {\n      main: options.attributes && options.attributes.slice(),\n      subQuery: null\n    };\n    const mainTable = {\n      name: tableName,\n      quotedName: null,\n      as: null,\n      model\n    };\n    const topLevelInfo = {\n      names: mainTable,\n      options,\n      subQuery\n    };\n    let mainJoinQueries = [];\n    let subJoinQueries = [];\n    let query;\n\n    // resolve table name options\n    if (options.tableAs) {\n      mainTable.as = this.quoteIdentifier(options.tableAs);\n    } else if (!Array.isArray(mainTable.name) && mainTable.model) {\n      mainTable.as = this.quoteIdentifier(mainTable.model.name);\n    }\n\n    mainTable.quotedName = !Array.isArray(mainTable.name) ? this.quoteTable(mainTable.name) : tableName.map(t => {\n      return Array.isArray(t) ? this.quoteTable(t[0], t[1]) : this.quoteTable(t, true);\n    }).join(', ');\n\n    if (subQuery && attributes.main) {\n      for (const keyAtt of mainTable.model.primaryKeyAttributes) {\n        // Check if mainAttributes contain the primary key of the model either as a field or an aliased field\n        if (!_.find(attributes.main, attr => keyAtt === attr || keyAtt === attr[0] || keyAtt === attr[1])) {\n          attributes.main.push(mainTable.model.rawAttributes[keyAtt].field ? [keyAtt, mainTable.model.rawAttributes[keyAtt].field] : keyAtt);\n        }\n      }\n    }\n\n    attributes.main = this.escapeAttributes(attributes.main, options, mainTable.as);\n    attributes.main = attributes.main || (options.include ? [`${mainTable.as}.*`] : ['*']);\n\n    // If subquery, we ad the mainAttributes to the subQuery and set the mainAttributes to select * from subquery\n    if (subQuery || options.groupedLimit) {\n      // We need primary keys\n      attributes.subQuery = attributes.main;\n      attributes.main = [(mainTable.as || mainTable.quotedName) + '.*'];\n    }\n\n    if (options.include) {\n      for (const include of options.include) {\n        if (include.separate) {\n          continue;\n        }\n        const joinQueries = this.generateInclude(include, { externalAs: mainTable.as, internalAs: mainTable.as }, topLevelInfo);\n\n        subJoinQueries = subJoinQueries.concat(joinQueries.subQuery);\n        mainJoinQueries = mainJoinQueries.concat(joinQueries.mainQuery);\n\n        if (joinQueries.attributes.main.length > 0) {\n          attributes.main = attributes.main.concat(joinQueries.attributes.main);\n        }\n        if (joinQueries.attributes.subQuery.length > 0) {\n          attributes.subQuery = attributes.subQuery.concat(joinQueries.attributes.subQuery);\n        }\n      }\n    }\n\n    if (subQuery) {\n      subQueryItems.push(this.selectFromTableFragment(options, mainTable.model, attributes.subQuery, mainTable.quotedName, mainTable.as));\n      subQueryItems.push(subJoinQueries.join(''));\n    } else {\n      if (options.groupedLimit) {\n        if (!mainTable.as) {\n          mainTable.as = mainTable.quotedName;\n        }\n        const where = Object.assign({}, options.where);\n        let groupedLimitOrder,\n          whereKey,\n          include,\n          groupedTableName = mainTable.as;\n\n        if (typeof options.groupedLimit.on === 'string') {\n          whereKey = options.groupedLimit.on;\n        } else if (options.groupedLimit.on instanceof HasMany) {\n          whereKey = options.groupedLimit.on.foreignKeyField;\n        }\n\n        if (options.groupedLimit.on instanceof BelongsToMany) {\n          // BTM includes needs to join the through table on to check ID\n          groupedTableName = options.groupedLimit.on.manyFromSource.as;\n          const groupedLimitOptions = Model._validateIncludedElements({\n            include: [{\n              association: options.groupedLimit.on.manyFromSource,\n              duplicating: false, // The UNION'ed query may contain duplicates, but each sub-query cannot\n              required: true,\n              where: Object.assign({\n                [Op.placeholder]: true\n              }, options.groupedLimit.through && options.groupedLimit.through.where)\n            }],\n            model\n          });\n\n          // Make sure attributes from the join table are mapped back to models\n          options.hasJoin = true;\n          options.hasMultiAssociation = true;\n          options.includeMap = Object.assign(groupedLimitOptions.includeMap, options.includeMap);\n          options.includeNames = groupedLimitOptions.includeNames.concat(options.includeNames || []);\n          include = groupedLimitOptions.include;\n\n          if (Array.isArray(options.order)) {\n            // We need to make sure the order by attributes are available to the parent query\n            options.order.forEach((order, i) => {\n              if (Array.isArray(order)) {\n                order = order[0];\n              }\n\n              let alias = `subquery_order_${i}`;\n              options.attributes.push([order, alias]);\n\n              // We don't want to prepend model name when we alias the attributes, so quote them here\n              alias = this.sequelize.literal(this.quote(alias));\n\n              if (Array.isArray(options.order[i])) {\n                options.order[i][0] = alias;\n              } else {\n                options.order[i] = alias;\n              }\n            });\n            groupedLimitOrder = options.order;\n          }\n        } else {\n          // Ordering is handled by the subqueries, so ordering the UNION'ed result is not needed\n          groupedLimitOrder = options.order;\n          delete options.order;\n          where[Op.placeholder] = true;\n        }\n\n        // Caching the base query and splicing the where part into it is consistently > twice\n        // as fast than generating from scratch each time for values.length >= 5\n        const baseQuery = '(' + this.selectQuery(\n          tableName,\n          {\n            attributes: options.attributes,\n            limit: options.groupedLimit.limit,\n            order: groupedLimitOrder,\n            where,\n            include,\n            model\n          },\n          model\n        ).replace(/;$/, '') + ')';\n        const placeHolder = this.whereItemQuery(Op.placeholder, true, { model });\n        const splicePos = baseQuery.indexOf(placeHolder);\n\n        mainQueryItems.push(this.selectFromTableFragment(options, mainTable.model, attributes.main, '(' +\n          options.groupedLimit.values.map(value => {\n            let groupWhere;\n            if (whereKey) {\n              groupWhere = {\n                [whereKey]: value\n              };\n            }\n            if (include) {\n              groupWhere = {\n                [options.groupedLimit.on.foreignIdentifierField]: value\n              };\n            }\n\n            return Utils.spliceStr(baseQuery, splicePos, placeHolder.length, this.getWhereConditions(groupWhere, groupedTableName));\n          }).join(\n            this._dialect.supports['UNION ALL'] ? ' UNION ALL ' : ' UNION '\n          )\n          + ')', mainTable.as));\n      } else {\n        mainQueryItems.push(this.selectFromTableFragment(options, mainTable.model, attributes.main, mainTable.quotedName, mainTable.as));\n      }\n\n      mainQueryItems.push(mainJoinQueries.join(''));\n    }\n\n    // Add WHERE to sub or main query\n    if (options.hasOwnProperty('where') && !options.groupedLimit) {\n      options.where = this.getWhereConditions(options.where, mainTable.as || tableName, model, options);\n      if (options.where) {\n        if (subQuery) {\n          subQueryItems.push(' WHERE ' + options.where);\n        } else {\n          mainQueryItems.push(' WHERE ' + options.where);\n          // Walk the main query to update all selects\n          _.each(mainQueryItems, (value, key) => {\n            if (value.match(/^SELECT/)) {\n              mainQueryItems[key] = this.selectFromTableFragment(options, model, attributes.main, mainTable.quotedName, mainTable.as, options.where);\n            }\n          });\n        }\n      }\n    }\n\n    // Add GROUP BY to sub or main query\n    if (options.group) {\n      options.group = Array.isArray(options.group) ? options.group.map(t => this.quote(t, model)).join(', ') : this.quote(options.group, model);\n      if (subQuery) {\n        subQueryItems.push(' GROUP BY ' + options.group);\n      } else {\n        mainQueryItems.push(' GROUP BY ' + options.group);\n      }\n    }\n\n    // Add HAVING to sub or main query\n    if (options.hasOwnProperty('having')) {\n      options.having = this.getWhereConditions(options.having, tableName, model, options, false);\n      if (subQuery) {\n        subQueryItems.push(' HAVING ' + options.having);\n      } else {\n        mainQueryItems.push(' HAVING ' + options.having);\n      }\n    }\n\n    // Add ORDER to sub or main query\n    if (options.order) {\n      const orders = this.getQueryOrders(options, model, subQuery);\n      if (orders.mainQueryOrder.length) {\n        mainQueryItems.push(' ORDER BY ' + orders.mainQueryOrder.join(', '));\n      }\n      if (orders.subQueryOrder.length) {\n        subQueryItems.push(' ORDER BY ' + orders.subQueryOrder.join(', '));\n      }\n    }\n\n    // Add LIMIT, OFFSET to sub or main query\n    const limitOrder = this.addLimitAndOffset(options, mainTable.model);\n    if (limitOrder && !options.groupedLimit) {\n      if (subQuery) {\n        subQueryItems.push(limitOrder);\n      } else {\n        mainQueryItems.push(limitOrder);\n      }\n    }\n\n    if (subQuery) {\n      query = `SELECT ${attributes.main.join(', ')} FROM (${subQueryItems.join('')}) AS ${mainTable.as}${mainJoinQueries.join('')}${mainQueryItems.join('')}`;\n    } else {\n      query = mainQueryItems.join('');\n    }\n\n    if (options.lock && this._dialect.supports.lock) {\n      let lock = options.lock;\n      if (typeof options.lock === 'object') {\n        lock = options.lock.level;\n      }\n      if (this._dialect.supports.lockKey && (lock === 'KEY SHARE' || lock === 'NO KEY UPDATE')) {\n        query += ' FOR ' + lock;\n      } else if (lock === 'SHARE') {\n        query += ' ' + this._dialect.supports.forShare;\n      } else {\n        query += ' FOR UPDATE';\n      }\n      if (this._dialect.supports.lockOf && options.lock.of && options.lock.of.prototype instanceof Model) {\n        query += ' OF ' + this.quoteTable(options.lock.of.name);\n      }\n    }\n\n    return `${query};`;\n  },\n\n  escapeAttributes(attributes, options, mainTableAs) {\n    return attributes && attributes.map(attr => {\n      let addTable = true;\n\n      if (attr instanceof Utils.SequelizeMethod) {\n        return this.handleSequelizeMethod(attr);\n      }\n      if (Array.isArray(attr)) {\n        if (attr.length !== 2) {\n          throw new Error(JSON.stringify(attr) + ' is not a valid attribute definition. Please use the following format: [\\'attribute definition\\', \\'alias\\']');\n        }\n        attr = attr.slice();\n\n        if (attr[0] instanceof Utils.SequelizeMethod) {\n          attr[0] = this.handleSequelizeMethod(attr[0]);\n          addTable = false;\n        } else if (attr[0].indexOf('(') === -1 && attr[0].indexOf(')') === -1) {\n          attr[0] = this.quoteIdentifier(attr[0]);\n        }\n        attr = [attr[0], this.quoteIdentifier(attr[1])].join(' AS ');\n      } else {\n        attr = attr.indexOf(Utils.TICK_CHAR) < 0 && attr.indexOf('\"') < 0 ? this.quoteIdentifiers(attr) : attr;\n      }\n      if (options.include && attr.indexOf('.') === -1 && addTable) {\n        attr = mainTableAs + '.' + attr;\n      }\n\n      return attr;\n    });\n  },\n\n  generateInclude(include, parentTableName, topLevelInfo) {\n    const association = include.association;\n    const joinQueries = {\n      mainQuery: [],\n      subQuery: []\n    };\n    const mainChildIncludes = [];\n    const subChildIncludes = [];\n    let requiredMismatch = false;\n    const includeAs = {\n      internalAs: include.as,\n      externalAs: include.as\n    };\n    const attributes = {\n      main: [],\n      subQuery: []\n    };\n    let joinQuery;\n\n    topLevelInfo.options.keysEscaped = true;\n\n    if (topLevelInfo.names.name !== parentTableName.externalAs && topLevelInfo.names.as !== parentTableName.externalAs) {\n      includeAs.internalAs = `${parentTableName.internalAs}->${include.as}`;\n      includeAs.externalAs = `${parentTableName.externalAs}.${include.as}`;\n    }\n\n    // includeIgnoreAttributes is used by aggregate functions\n    if (topLevelInfo.options.includeIgnoreAttributes !== false) {\n      const includeAttributes = include.attributes.map(attr => {\n        let attrAs = attr;\n        let verbatim = false;\n\n        if (Array.isArray(attr) && attr.length === 2) {\n          if (attr[0] instanceof Utils.SequelizeMethod && (\n            attr[0] instanceof Utils.Literal ||\n            attr[0] instanceof Utils.Cast ||\n            attr[0] instanceof Utils.Fn\n          )) {\n            verbatim = true;\n          }\n\n          attr = attr.map(attr => attr instanceof Utils.SequelizeMethod ? this.handleSequelizeMethod(attr) : attr);\n\n          attrAs = attr[1];\n          attr = attr[0];\n        } else if (attr instanceof Utils.Literal) {\n          return attr.val; // We trust the user to rename the field correctly\n        } else if (attr instanceof Utils.Cast || attr instanceof Utils.Fn) {\n          throw new Error(\n            'Tried to select attributes using Sequelize.cast or Sequelize.fn without specifying an alias for the result, during eager loading. ' +\n            'This means the attribute will not be added to the returned instance'\n          );\n        }\n\n        let prefix;\n        if (verbatim === true) {\n          prefix = attr;\n        } else {\n          prefix = `${this.quoteIdentifier(includeAs.internalAs)}.${this.quoteIdentifier(attr)}`;\n        }\n        return `${prefix} AS ${this.quoteIdentifier(`${includeAs.externalAs}.${attrAs}`, true)}`;\n      });\n      if (include.subQuery && topLevelInfo.subQuery) {\n        for (const attr of includeAttributes) {\n          attributes.subQuery.push(attr);\n        }\n      } else {\n        for (const attr of includeAttributes) {\n          attributes.main.push(attr);\n        }\n      }\n    }\n\n    //through\n    if (include.through) {\n      joinQuery = this.generateThroughJoin(include, includeAs, parentTableName.internalAs, topLevelInfo);\n    } else {\n      if (topLevelInfo.subQuery && include.subQueryFilter) {\n        const associationWhere = {};\n\n        associationWhere[association.identifierField] = {\n          [Op.eq]: this.sequelize.literal(`${this.quoteTable(parentTableName.internalAs)}.${this.quoteIdentifier(association.sourceKeyField || association.source.primaryKeyField)}`)\n        };\n\n        if (!topLevelInfo.options.where) {\n          topLevelInfo.options.where = {};\n        }\n\n        // Creating the as-is where for the subQuery, checks that the required association exists\n        const $query = this.selectQuery(include.model.getTableName(), {\n          attributes: [association.identifierField],\n          where: {\n            [Op.and]: [\n              associationWhere,\n              include.where || {}\n            ]\n          },\n          limit: 1,\n          tableAs: include.as\n        }, include.model);\n\n        const subQueryWhere = this.sequelize.asIs([\n          '(',\n          $query.replace(/\\;$/, ''),\n          ')',\n          'IS NOT NULL'\n        ].join(' '));\n\n        if (_.isPlainObject(topLevelInfo.options.where)) {\n          topLevelInfo.options.where['__' + includeAs.internalAs] = subQueryWhere;\n        } else {\n          topLevelInfo.options.where = { [Op.and]: [topLevelInfo.options.where, subQueryWhere] };\n        }\n      }\n      joinQuery = this.generateJoin(include, topLevelInfo);\n    }\n\n    // handle possible new attributes created in join\n    if (joinQuery.attributes.main.length > 0) {\n      attributes.main = attributes.main.concat(joinQuery.attributes.main);\n    }\n\n    if (joinQuery.attributes.subQuery.length > 0) {\n      attributes.subQuery = attributes.subQuery.concat(joinQuery.attributes.subQuery);\n    }\n\n    if (include.include) {\n      for (const childInclude of include.include) {\n        if (childInclude.separate || childInclude._pseudo) {\n          continue;\n        }\n\n        const childJoinQueries = this.generateInclude(childInclude, includeAs, topLevelInfo);\n\n        if (include.required === false && childInclude.required === true) {\n          requiredMismatch = true;\n        }\n        // if the child is a sub query we just give it to the\n        if (childInclude.subQuery && topLevelInfo.subQuery) {\n          subChildIncludes.push(childJoinQueries.subQuery);\n        }\n        if (childJoinQueries.mainQuery) {\n          mainChildIncludes.push(childJoinQueries.mainQuery);\n        }\n        if (childJoinQueries.attributes.main.length > 0) {\n          attributes.main = attributes.main.concat(childJoinQueries.attributes.main);\n        }\n        if (childJoinQueries.attributes.subQuery.length > 0) {\n          attributes.subQuery = attributes.subQuery.concat(childJoinQueries.attributes.subQuery);\n        }\n      }\n    }\n\n    if (include.subQuery && topLevelInfo.subQuery) {\n      if (requiredMismatch && subChildIncludes.length > 0) {\n        joinQueries.subQuery.push(` ${joinQuery.join} ( ${joinQuery.body}${subChildIncludes.join('')} ) ON ${joinQuery.condition}`);\n      } else {\n        joinQueries.subQuery.push(` ${joinQuery.join} ${joinQuery.body} ON ${joinQuery.condition}`);\n        if (subChildIncludes.length > 0) {\n          joinQueries.subQuery.push(subChildIncludes.join(''));\n        }\n      }\n      joinQueries.mainQuery.push(mainChildIncludes.join(''));\n    } else {\n      if (requiredMismatch && mainChildIncludes.length > 0) {\n        joinQueries.mainQuery.push(` ${joinQuery.join} ( ${joinQuery.body}${mainChildIncludes.join('')} ) ON ${joinQuery.condition}`);\n      } else {\n        joinQueries.mainQuery.push(` ${joinQuery.join} ${joinQuery.body} ON ${joinQuery.condition}`);\n        if (mainChildIncludes.length > 0) {\n          joinQueries.mainQuery.push(mainChildIncludes.join(''));\n        }\n      }\n      joinQueries.subQuery.push(subChildIncludes.join(''));\n    }\n\n    return {\n      mainQuery: joinQueries.mainQuery.join(''),\n      subQuery: joinQueries.subQuery.join(''),\n      attributes\n    };\n  },\n\n  generateJoin(include, topLevelInfo) {\n    const association = include.association;\n    const parent = include.parent;\n    const parentIsTop = !!parent && !include.parent.association && include.parent.model.name === topLevelInfo.options.model.name;\n    let $parent;\n    let joinWhere;\n    /* Attributes for the left side */\n    const left = association.source;\n    const attrLeft = association instanceof BelongsTo ?\n      association.identifier :\n      association.sourceKeyAttribute || left.primaryKeyAttribute;\n    const fieldLeft = association instanceof BelongsTo ?\n      association.identifierField :\n      left.rawAttributes[association.sourceKeyAttribute || left.primaryKeyAttribute].field;\n    let asLeft;\n    /* Attributes for the right side */\n    const right = include.model;\n    const tableRight = right.getTableName();\n    const fieldRight = association instanceof BelongsTo ?\n      right.rawAttributes[association.targetIdentifier || right.primaryKeyAttribute].field :\n      association.identifierField;\n    let asRight = include.as;\n\n    while (($parent = $parent && $parent.parent || include.parent) && $parent.association) {\n      if (asLeft) {\n        asLeft = `${$parent.as}->${asLeft}`;\n      } else {\n        asLeft = $parent.as;\n      }\n    }\n\n    if (!asLeft) asLeft = parent.as || parent.model.name;\n    else asRight = `${asLeft}->${asRight}`;\n\n    let joinOn = `${this.quoteTable(asLeft)}.${this.quoteIdentifier(fieldLeft)}`;\n\n    if (topLevelInfo.options.groupedLimit && parentIsTop || topLevelInfo.subQuery && include.parent.subQuery && !include.subQuery) {\n      if (parentIsTop) {\n        // The main model attributes is not aliased to a prefix\n        joinOn = `${this.quoteTable(parent.as || parent.model.name)}.${this.quoteIdentifier(attrLeft)}`;\n      } else {\n        joinOn = this.quoteIdentifier(`${asLeft.replace(/->/g, '.')}.${attrLeft}`);\n      }\n    }\n\n    joinOn += ` = ${this.quoteIdentifier(asRight)}.${this.quoteIdentifier(fieldRight)}`;\n\n    if (include.on) {\n      joinOn = this.whereItemsQuery(include.on, {\n        prefix: this.sequelize.literal(this.quoteIdentifier(asRight)),\n        model: include.model\n      });\n    }\n\n    if (include.where) {\n      joinWhere = this.whereItemsQuery(include.where, {\n        prefix: this.sequelize.literal(this.quoteIdentifier(asRight)),\n        model: include.model\n      });\n      if (joinWhere) {\n        if (include.or) {\n          joinOn += ` OR ${joinWhere}`;\n        } else {\n          joinOn += ` AND ${joinWhere}`;\n        }\n      }\n    }\n\n    return {\n      join: include.required ? 'INNER JOIN' : 'LEFT OUTER JOIN',\n      body: this.quoteTable(tableRight, asRight),\n      condition: joinOn,\n      attributes: {\n        main: [],\n        subQuery: []\n      }\n    };\n  },\n\n  generateThroughJoin(include, includeAs, parentTableName, topLevelInfo) {\n    const through = include.through;\n    const throughTable = through.model.getTableName();\n    const throughAs = `${includeAs.internalAs}->${through.as}`;\n    const externalThroughAs = `${includeAs.externalAs}.${through.as}`;\n    const throughAttributes = through.attributes.map(attr =>\n      this.quoteIdentifier(throughAs) + '.' + this.quoteIdentifier(Array.isArray(attr) ? attr[0] : attr)\n      + ' AS '\n      + this.quoteIdentifier(externalThroughAs + '.' + (Array.isArray(attr) ? attr[1] : attr))\n    );\n    const association = include.association;\n    const parentIsTop = !include.parent.association && include.parent.model.name === topLevelInfo.options.model.name;\n    const primaryKeysSource = association.source.primaryKeyAttributes;\n    const tableSource = parentTableName;\n    const identSource = association.identifierField;\n    const primaryKeysTarget = association.target.primaryKeyAttributes;\n    const tableTarget = includeAs.internalAs;\n    const identTarget = association.foreignIdentifierField;\n    const attrTarget = association.target.rawAttributes[primaryKeysTarget[0]].field || primaryKeysTarget[0];\n\n    const joinType = include.required ? 'INNER JOIN' : 'LEFT OUTER JOIN';\n    let joinBody;\n    let joinCondition;\n    const attributes = {\n      main: [],\n      subQuery: []\n    };\n    let attrSource = primaryKeysSource[0];\n    let sourceJoinOn;\n    let targetJoinOn;\n    let throughWhere;\n    let targetWhere;\n\n    if (topLevelInfo.options.includeIgnoreAttributes !== false) {\n      // Through includes are always hasMany, so we need to add the attributes to the mainAttributes no matter what (Real join will never be executed in subquery)\n      for (const attr of throughAttributes) {\n        attributes.main.push(attr);\n      }\n    }\n\n    // Figure out if we need to use field or attribute\n    if (!topLevelInfo.subQuery) {\n      attrSource = association.source.rawAttributes[primaryKeysSource[0]].field;\n    }\n    if (topLevelInfo.subQuery && !include.subQuery && !include.parent.subQuery && include.parent.model !== topLevelInfo.options.mainModel) {\n      attrSource = association.source.rawAttributes[primaryKeysSource[0]].field;\n    }\n\n    // Filter statement for left side of through\n    // Used by both join and subquery where\n    // If parent include was in a subquery need to join on the aliased attribute\n    if (topLevelInfo.subQuery && !include.subQuery && include.parent.subQuery && !parentIsTop) {\n      sourceJoinOn = `${this.quoteIdentifier(`${tableSource}.${attrSource}`)} = `;\n    } else {\n      sourceJoinOn = `${this.quoteTable(tableSource)}.${this.quoteIdentifier(attrSource)} = `;\n    }\n    sourceJoinOn += `${this.quoteIdentifier(throughAs)}.${this.quoteIdentifier(identSource)}`;\n\n    // Filter statement for right side of through\n    // Used by both join and subquery where\n    targetJoinOn = `${this.quoteIdentifier(tableTarget)}.${this.quoteIdentifier(attrTarget)} = `;\n    targetJoinOn += `${this.quoteIdentifier(throughAs)}.${this.quoteIdentifier(identTarget)}`;\n\n    if (through.where) {\n      throughWhere = this.getWhereConditions(through.where, this.sequelize.literal(this.quoteIdentifier(throughAs)), through.model);\n    }\n\n    if (this._dialect.supports.joinTableDependent) {\n      // Generate a wrapped join so that the through table join can be dependent on the target join\n      joinBody = `( ${this.quoteTable(throughTable, throughAs)} INNER JOIN ${this.quoteTable(include.model.getTableName(), includeAs.internalAs)} ON ${targetJoinOn}`;\n      if (throughWhere) {\n        joinBody += ` AND ${throughWhere}`;\n      }\n      joinBody += ')';\n      joinCondition = sourceJoinOn;\n    } else {\n      // Generate join SQL for left side of through\n      joinBody = `${this.quoteTable(throughTable, throughAs)} ON ${sourceJoinOn} ${joinType} ${this.quoteTable(include.model.getTableName(), includeAs.internalAs)}`;\n      joinCondition = targetJoinOn;\n      if (throughWhere) {\n        joinCondition += ` AND ${throughWhere}`;\n      }\n    }\n\n    if (include.where || include.through.where) {\n      if (include.where) {\n        targetWhere = this.getWhereConditions(include.where, this.sequelize.literal(this.quoteIdentifier(includeAs.internalAs)), include.model, topLevelInfo.options);\n        if (targetWhere) {\n          joinCondition += ` AND ${targetWhere}`;\n        }\n      }\n      if (topLevelInfo.subQuery && include.required) {\n        if (!topLevelInfo.options.where) {\n          topLevelInfo.options.where = {};\n        }\n        let parent = include;\n        let child = include;\n        let nestedIncludes = [];\n        let query;\n\n        while ((parent = parent.parent)) { // eslint-disable-line\n          nestedIncludes = [_.extend({}, child, { include: nestedIncludes })];\n          child = parent;\n        }\n\n        const topInclude = nestedIncludes[0];\n        const topParent = topInclude.parent;\n\n        if (topInclude.through && Object(topInclude.through.model) === topInclude.through.model) {\n          query = this.selectQuery(topInclude.through.model.getTableName(), {\n            attributes: [topInclude.through.model.primaryKeyField],\n            include: Model._validateIncludedElements({\n              model: topInclude.through.model,\n              include: [{\n                association: topInclude.association.toTarget,\n                required: true\n              }]\n            }).include,\n            model: topInclude.through.model,\n            where: {\n              [Op.and]: [\n                this.sequelize.asIs([\n                  this.quoteTable(topParent.model.name) + '.' + this.quoteIdentifier(topParent.model.primaryKeyField),\n                  this.quoteIdentifier(topInclude.through.model.name) + '.' + this.quoteIdentifier(topInclude.association.identifierField)\n                ].join(' = ')),\n                topInclude.through.where\n              ]\n            },\n            limit: 1,\n            includeIgnoreAttributes: false\n          }, topInclude.through.model);\n        } else {\n          const isBelongsTo = topInclude.association.associationType === 'BelongsTo';\n          const join = [\n            this.quoteTable(topParent.model.name) + '.' + this.quoteIdentifier(isBelongsTo ? topInclude.association.identifierField : topParent.model.primaryKeyAttributes[0]),\n            this.quoteIdentifier(topInclude.model.name) + '.' + this.quoteIdentifier(isBelongsTo ? topInclude.model.primaryKeyAttributes[0] : topInclude.association.identifierField)\n          ].join(' = ');\n          query = this.selectQuery(topInclude.model.tableName, {\n            attributes: [topInclude.model.primaryKeyAttributes[0]],\n            include: topInclude.include,\n            where: {\n              [Op.join]: this.sequelize.asIs(join)\n            },\n            limit: 1,\n            includeIgnoreAttributes: false\n          }, topInclude.model);\n        }\n        topLevelInfo.options.where['__' + throughAs] = this.sequelize.asIs([\n          '(',\n          query.replace(/\\;$/, ''),\n          ')',\n          'IS NOT NULL'\n        ].join(' '));\n      }\n    }\n\n    return {\n      join: joinType,\n      body: joinBody,\n      condition: joinCondition,\n      attributes\n    };\n  },\n\n  getQueryOrders(options, model, subQuery) {\n    const mainQueryOrder = [];\n    const subQueryOrder = [];\n\n    if (Array.isArray(options.order)) {\n      for (let order of options.order) {\n        // wrap if not array\n        if (!Array.isArray(order)) {\n          order = [order];\n        }\n\n        if (\n          subQuery\n          && Array.isArray(order)\n          && order[0]\n          && !(order[0] instanceof Association)\n          && !(typeof order[0] === 'function' && order[0].prototype instanceof Model)\n          && !(typeof order[0].model === 'function' && order[0].model.prototype instanceof Model)\n          && !(typeof order[0] === 'string' && model && model.associations !== undefined && model.associations[order[0]])\n        ) {\n          subQueryOrder.push(this.quote(order, model, '->'));\n        }\n\n        if (subQuery) {\n          // Handle case where sub-query renames attribute we want to order by,\n          // see https://github.com/sequelize/sequelize/issues/8739\n          const subQueryAttribute = options.attributes.find(a => Array.isArray(a) && a[0] === order[0] && a[1]);\n          if (subQueryAttribute) {\n            order[0] = new Utils.Col(subQueryAttribute[1]);\n          }\n        }\n\n        mainQueryOrder.push(this.quote(order, model, '->'));\n      }\n    } else if (options.order instanceof Utils.SequelizeMethod) {\n      const sql = this.quote(options.order, model, '->');\n      if (subQuery) {\n        subQueryOrder.push(sql);\n      }\n      mainQueryOrder.push(sql);\n    } else {\n      throw new Error('Order must be type of array or instance of a valid sequelize method.');\n    }\n\n    return {mainQueryOrder, subQueryOrder};\n  },\n\n  selectFromTableFragment(options, model, attributes, tables, mainTableAs) {\n    let fragment = 'SELECT ' + attributes.join(', ') + ' FROM ' + tables;\n\n    if (mainTableAs) {\n      fragment += ' AS ' + mainTableAs;\n    }\n\n    return fragment;\n  },\n\n  /**\n   * Returns a query that starts a transaction.\n   *\n   * @param  {Boolean} value   A boolean that states whether autocommit shall be done or not.\n   * @param  {Object}  options An object with options.\n   * @return {String}          The generated sql query.\n   * @private\n   */\n  setAutocommitQuery(value, options) {\n    if (options.parent) {\n      return;\n    }\n\n    // no query when value is not explicitly set\n    if (typeof value === 'undefined' || value === null) {\n      return;\n    }\n\n    return 'SET autocommit = ' + (value ? 1 : 0) + ';';\n  },\n\n  /**\n   * Returns a query that sets the transaction isolation level.\n   *\n   * @param  {String} value   The isolation level.\n   * @param  {Object} options An object with options.\n   * @return {String}         The generated sql query.\n   * @private\n   */\n  setIsolationLevelQuery(value, options) {\n    if (options.parent) {\n      return;\n    }\n\n    return 'SET SESSION TRANSACTION ISOLATION LEVEL ' + value + ';';\n  },\n\n  generateTransactionId() {\n    return uuid.v4();\n  },\n\n  /**\n   * Returns a query that starts a transaction.\n   *\n   * @param  {Transaction} transaction\n   * @param  {Object} options An object with options.\n   * @return {String}         The generated sql query.\n   * @private\n   */\n  startTransactionQuery(transaction) {\n    if (transaction.parent) {\n      // force quoting of savepoint identifiers for postgres\n      return 'SAVEPOINT ' + this.quoteIdentifier(transaction.name, true) + ';';\n    }\n\n    return 'START TRANSACTION;';\n  },\n\n  /**\n   * Returns a query that defers the constraints. Only works for postgres.\n   *\n   * @param  {Transaction} transaction\n   * @param  {Object} options An object with options.\n   * @return {String}         The generated sql query.\n   * @private\n   */\n  deferConstraintsQuery() {},\n\n  setConstraintQuery() {},\n  setDeferredQuery() {},\n  setImmediateQuery() {},\n\n  /**\n   * Returns a query that commits a transaction.\n   *\n   * @param  {Object} options An object with options.\n   * @return {String}         The generated sql query.\n   * @private\n   */\n  commitTransactionQuery(transaction) {\n    if (transaction.parent) {\n      return;\n    }\n\n    return 'COMMIT;';\n  },\n\n  /**\n   * Returns a query that rollbacks a transaction.\n   *\n   * @param  {Transaction} transaction\n   * @param  {Object} options An object with options.\n   * @return {String}         The generated sql query.\n   * @private\n   */\n  rollbackTransactionQuery(transaction) {\n    if (transaction.parent) {\n      // force quoting of savepoint identifiers for postgres\n      return 'ROLLBACK TO SAVEPOINT ' + this.quoteIdentifier(transaction.name, true) + ';';\n    }\n\n    return 'ROLLBACK;';\n  },\n\n  /**\n   * Returns an SQL fragment for adding result constraints\n   *\n   * @param  {Object} options An object with selectQuery options.\n   * @param  {Object} options The model passed to the selectQuery.\n   * @return {String}         The generated sql query.\n   * @private\n   */\n  addLimitAndOffset(options) {\n    let fragment = '';\n\n    /* eslint-disable */\n    if (options.offset != null && options.limit == null) {\n      fragment += ' LIMIT ' + this.escape(options.offset) + ', ' + 10000000000000;\n    } else if (options.limit != null) {\n      if (options.offset != null) {\n        fragment += ' LIMIT ' + this.escape(options.offset) + ', ' + this.escape(options.limit);\n      } else {\n        fragment += ' LIMIT ' + this.escape(options.limit);\n      }\n    }\n    /* eslint-enable */\n\n    return fragment;\n  },\n\n  handleSequelizeMethod(smth, tableName, factory, options, prepend) {\n    let result;\n\n    if (smth instanceof Utils.Where) {\n      let value = smth.logic;\n      let key;\n\n      if (smth.attribute instanceof Utils.SequelizeMethod) {\n        key = this.getWhereConditions(smth.attribute, tableName, factory, options, prepend);\n      } else {\n        key = this.quoteTable(smth.attribute.Model.name) + '.' + this.quoteIdentifier(smth.attribute.field || smth.attribute.fieldName);\n      }\n\n      if (value && value instanceof Utils.SequelizeMethod) {\n        value = this.getWhereConditions(value, tableName, factory, options, prepend);\n\n        result = value === 'NULL' ? key + ' IS NULL' : [key, value].join(smth.comparator);\n      } else if (_.isPlainObject(value)) {\n        result = this.whereItemQuery(smth.attribute, value, {\n          model: factory\n        });\n      } else {\n        if (typeof value === 'boolean') {\n          value = this.booleanValue(value);\n        } else {\n          value = this.escape(value);\n        }\n\n        result = value === 'NULL' ? key + ' IS NULL' : [key, value].join(' ' + smth.comparator + ' ');\n      }\n    } else if (smth instanceof Utils.Literal) {\n      result = smth.val;\n    } else if (smth instanceof Utils.Cast) {\n      if (smth.val instanceof Utils.SequelizeMethod) {\n        result = this.handleSequelizeMethod(smth.val, tableName, factory, options, prepend);\n      } else if (_.isPlainObject(smth.val)) {\n        result = this.whereItemsQuery(smth.val);\n      } else {\n        result = this.escape(smth.val);\n      }\n\n      result = 'CAST(' + result + ' AS ' + smth.type.toUpperCase() + ')';\n    } else if (smth instanceof Utils.Fn) {\n      result = smth.fn + '(' + smth.args.map(arg => {\n        if (arg instanceof Utils.SequelizeMethod) {\n          return this.handleSequelizeMethod(arg, tableName, factory, options, prepend);\n        } else if (_.isPlainObject(arg)) {\n          return this.whereItemsQuery(arg);\n        } else {\n          return this.escape(arg);\n        }\n      }).join(', ') + ')';\n    } else if (smth instanceof Utils.Col) {\n      if (Array.isArray(smth.col)) {\n        if (!factory) {\n          throw new Error('Cannot call Sequelize.col() with array outside of order / group clause');\n        }\n      } else if (smth.col.indexOf('*') === 0) {\n        return '*';\n      }\n      return this.quote(smth.col, factory);\n    } else {\n      result = smth.toString(this, factory);\n    }\n\n    return result;\n  },\n\n  whereQuery(where, options) {\n    const query = this.whereItemsQuery(where, options);\n    if (query && query.length) {\n      return 'WHERE '+query;\n    }\n    return '';\n  },\n\n  whereItemsQuery(where, options, binding) {\n    if (\n      where === null ||\n      where === undefined ||\n      Utils.getComplexSize(where) === 0\n    ) {\n      // NO OP\n      return '';\n    }\n\n    if (_.isString(where)) {\n      throw new Error('Support for `{where: \\'raw query\\'}` has been removed.');\n    }\n\n    const items = [];\n\n    binding = binding || 'AND';\n    if (binding.substr(0, 1) !== ' ') binding = ' '+binding+' ';\n\n    if (_.isPlainObject(where)) {\n      Utils.getComplexKeys(where).forEach(prop => {\n        const item = where[prop];\n        items.push(this.whereItemQuery(prop, item, options));\n      });\n    } else {\n      items.push(this.whereItemQuery(undefined, where, options));\n    }\n\n    return items.length && items.filter(item => item && item.length).join(binding) || '';\n  },\n\n  OperatorMap: {\n    [Op.eq]: '=',\n    [Op.ne]: '!=',\n    [Op.gte]: '>=',\n    [Op.gt]: '>',\n    [Op.lte]: '<=',\n    [Op.lt]: '<',\n    [Op.not]: 'IS NOT',\n    [Op.is]: 'IS',\n    [Op.in]: 'IN',\n    [Op.notIn]: 'NOT IN',\n    [Op.like]: 'LIKE',\n    [Op.notLike]: 'NOT LIKE',\n    [Op.iLike]: 'ILIKE',\n    [Op.notILike]: 'NOT ILIKE',\n    [Op.regexp]: '~',\n    [Op.notRegexp]: '!~',\n    [Op.iRegexp]: '~*',\n    [Op.notIRegexp]: '!~*',\n    [Op.between]: 'BETWEEN',\n    [Op.notBetween]: 'NOT BETWEEN',\n    [Op.overlap]: '&&',\n    [Op.contains]: '@>',\n    [Op.contained]: '<@',\n    [Op.adjacent]: '-|-',\n    [Op.strictLeft]: '<<',\n    [Op.strictRight]: '>>',\n    [Op.noExtendRight]: '&<',\n    [Op.noExtendLeft]: '&>',\n    [Op.any]: 'ANY',\n    [Op.all]: 'ALL',\n    [Op.and]: ' AND ',\n    [Op.or]: ' OR ',\n    [Op.col]: 'COL',\n    [Op.placeholder]: '$$PLACEHOLDER$$',\n    [Op.raw]: 'DEPRECATED' //kept here since we still throw an explicit error if operator being used remove by v5,\n  },\n\n  OperatorsAliasMap: {},\n\n  setOperatorsAliases(aliases) {\n    if (!aliases || _.isEmpty(aliases)) {\n      this.OperatorsAliasMap = false;\n    } else {\n      this.OperatorsAliasMap = _.assign({}, aliases);\n    }\n  },\n\n  whereItemQuery(key, value, options) {\n    options = options || {};\n    if (key && typeof key === 'string' && key.indexOf('.') !== -1 && options.model) {\n      const keyParts = key.split('.');\n      if (options.model.rawAttributes[keyParts[0]] && options.model.rawAttributes[keyParts[0]].type instanceof DataTypes.JSON) {\n        const tmp = {};\n        const field = options.model.rawAttributes[keyParts[0]];\n        Dottie.set(tmp, keyParts.slice(1), value);\n        return this.whereItemQuery(field.field || keyParts[0], tmp, Object.assign({field}, options));\n      }\n    }\n\n    const field = this._findField(key, options);\n    const fieldType = field && field.type || options.type;\n\n    const isPlainObject = _.isPlainObject(value);\n    const isArray = !isPlainObject && Array.isArray(value);\n    key = this.OperatorsAliasMap && this.OperatorsAliasMap[key] || key;\n    if (isPlainObject) {\n      value = this._replaceAliases(value);\n    }\n    const valueKeys = isPlainObject && Utils.getComplexKeys(value);\n\n    if (key === undefined) {\n      if (typeof value === 'string') {\n        return value;\n      }\n\n      if (isPlainObject && valueKeys.length === 1) {\n        return this.whereItemQuery(valueKeys[0], value[valueKeys[0]], options);\n      }\n    }\n\n    if (!value) {\n      return this._joinKeyValue(key, this.escape(value, field), value === null ? this.OperatorMap[Op.is] : this.OperatorMap[Op.eq], options.prefix);\n    }\n\n    if (value instanceof Utils.SequelizeMethod && !(key !== undefined && value instanceof Utils.Fn)) {\n      return this.handleSequelizeMethod(value);\n    }\n\n    // Convert where: [] to Op.and if possible, else treat as literal/replacements\n    if (key === undefined && isArray) {\n      if (Utils.canTreatArrayAsAnd(value)) {\n        key = Op.and;\n      } else {\n        throw new Error('Support for literal replacements in the `where` object has been removed.');\n      }\n    }\n\n    if (key === Op.or || key === Op.and || key === Op.not) {\n      return this._whereGroupBind(key, value, options);\n    }\n\n\n    if (value[Op.or]) {\n      return this._whereBind(this.OperatorMap[Op.or], key, value[Op.or], options);\n    }\n\n    if (value[Op.and]) {\n      return this._whereBind(this.OperatorMap[Op.and], key, value[Op.and], options);\n    }\n\n    if (isArray && fieldType instanceof DataTypes.ARRAY) {\n      return this._joinKeyValue(key, this.escape(value, field), this.OperatorMap[Op.eq], options.prefix);\n    }\n\n    if (isPlainObject && fieldType instanceof DataTypes.JSON && options.json !== false) {\n      return this._whereJSON(key, value, options);\n    }\n    // If multiple keys we combine the different logic conditions\n    if (isPlainObject && valueKeys.length > 1) {\n      return this._whereBind(this.OperatorMap[Op.and], key, value, options);\n    }\n\n    if (isArray) {\n      return this._whereParseSingleValueObject(key, field, Op.in, value, options);\n    }\n    if (isPlainObject) {\n      if (this.OperatorMap[valueKeys[0]]) {\n        return this._whereParseSingleValueObject(key, field, valueKeys[0], value[valueKeys[0]], options);\n      } else {\n        return this._whereParseSingleValueObject(key, field, this.OperatorMap[Op.eq], value, options);\n      }\n    }\n\n    if (key === Op.placeholder) {\n      return this._joinKeyValue(this.OperatorMap[key], this.escape(value, field), this.OperatorMap[Op.eq], options.prefix);\n    }\n\n    return this._joinKeyValue(key, this.escape(value, field), this.OperatorMap[Op.eq], options.prefix);\n  },\n\n  _findField(key, options) {\n    if (options.field) {\n      return options.field;\n    }\n\n    if (options.model && options.model.rawAttributes && options.model.rawAttributes[key]) {\n      return options.model.rawAttributes[key];\n    }\n\n    if (options.model && options.model.fieldRawAttributesMap && options.model.fieldRawAttributesMap[key]) {\n      return options.model.fieldRawAttributesMap[key];\n    }\n  },\n\n  _replaceAliases(orig) {\n    const obj = {};\n    if (!this.OperatorsAliasMap) {\n      return orig;\n    }\n\n    Utils.getOperators(orig).forEach(op => {\n      const item = orig[op];\n      if (_.isPlainObject(item)) {\n        obj[op] = this._replaceAliases(item);\n      } else {\n        obj[op] = item;\n      }\n    });\n\n    _.forOwn(orig, (item, prop) => {\n      prop = this.OperatorsAliasMap[prop] || prop;\n      if (_.isPlainObject(item)) {\n        item = this._replaceAliases(item);\n      }\n      obj[prop] = item;\n    });\n    return obj;\n  },\n\n  // OR/AND/NOT grouping logic\n  _whereGroupBind(key, value, options) {\n    const binding = key === Op.or ? this.OperatorMap[Op.or] : this.OperatorMap[Op.and];\n    const outerBinding = key === Op.not ? 'NOT ': '';\n\n    if (Array.isArray(value)) {\n      value = value.map(item => {\n        let itemQuery = this.whereItemsQuery(item, options, this.OperatorMap[Op.and]);\n        if (itemQuery && itemQuery.length && (Array.isArray(item) || _.isPlainObject(item)) && Utils.getComplexSize(item) > 1) {\n          itemQuery = '('+itemQuery+')';\n        }\n        return itemQuery;\n      }).filter(item => item && item.length);\n\n      value = value.length && value.join(binding);\n    } else {\n      value = this.whereItemsQuery(value, options, binding);\n    }\n    // Op.or: [] should return no data.\n    // Op.not of no restriction should also return no data\n    if ((key === Op.or || key === Op.not) && !value) {\n      return '0 = 1';\n    }\n\n    return value ? outerBinding + '('+value+')' : undefined;\n  },\n\n  _whereBind(binding, key, value, options) {\n    if (_.isPlainObject(value)) {\n      value = Utils.getComplexKeys(value).map(prop => {\n        const item = value[prop];\n        return this.whereItemQuery(key, {[prop]: item}, options);\n      });\n    } else {\n      value = value.map(item => this.whereItemQuery(key, item, options));\n    }\n\n    value = value.filter(item => item && item.length);\n\n    return value.length ? '('+value.join(binding)+')' : undefined;\n  },\n\n  _whereJSON(key, value, options) {\n    const items = [];\n    let baseKey = this.quoteIdentifier(key);\n    if (options.prefix) {\n      if (options.prefix instanceof Utils.Literal) {\n        baseKey = `${this.handleSequelizeMethod(options.prefix)}.${baseKey}`;\n      } else {\n        baseKey = `${this.quoteTable(options.prefix)}.${baseKey}`;\n      }\n    }\n\n    Utils.getOperators(value).forEach(op => {\n      const where = {};\n      where[op] = value[op];\n      items.push(this.whereItemQuery(key, where, _.assign({}, options, {json: false})));\n    });\n\n    _.forOwn(value, (item, prop) => {\n      this._traverseJSON(items, baseKey, prop, item, [prop]);\n    });\n\n    const result = items.join(this.OperatorMap[Op.and]);\n    return items.length > 1 ? '('+result+')' : result;\n  },\n\n\n  _traverseJSON(items, baseKey, prop, item, path) {\n    let cast;\n\n    if (path[path.length - 1].indexOf('::') > -1) {\n      const tmp = path[path.length - 1].split('::');\n      cast = tmp[1];\n      path[path.length - 1] = tmp[0];\n    }\n\n    const pathKey = this.jsonPathExtractionQuery(baseKey, path);\n\n    if (_.isPlainObject(item)) {\n      Utils.getOperators(item).forEach(op => {\n        const value = this._toJSONValue(item[op]);\n        items.push(this.whereItemQuery(this._castKey(pathKey, value, cast), {[op]: value}));\n      });\n      _.forOwn(item, (value, itemProp) => {\n        this._traverseJSON(items, baseKey, itemProp, value, path.concat([itemProp]));\n      });\n\n      return;\n    }\n\n    item = this._toJSONValue(item);\n    items.push(this.whereItemQuery(this._castKey(pathKey, item, cast), {[Op.eq]: item}));\n  },\n\n  _toJSONValue(value) {\n    return value;\n  },\n\n  _castKey(key, value, cast, json) {\n    cast = cast || this._getJsonCast(Array.isArray(value) ? value[0] : value);\n    if (cast) {\n      return new Utils.Literal(this.handleSequelizeMethod(new Utils.Cast(new Utils.Literal(key), cast, json)));\n    }\n\n    return new Utils.Literal(key);\n  },\n\n  _getJsonCast(value) {\n    if (typeof value === 'number') {\n      return 'double precision';\n    }\n    if (value instanceof Date) {\n      return 'timestamptz';\n    }\n    if (typeof value === 'boolean') {\n      return 'boolean';\n    }\n    return;\n  },\n\n  _joinKeyValue(key, value, comparator, prefix) {\n    if (!key) {\n      return value;\n    }\n    if (comparator === undefined) {\n      throw new Error(`${key} and ${value} has no comperator`);\n    }\n    key = this._getSafeKey(key, prefix);\n    return [key, value].join(' '+comparator+' ');\n  },\n\n  _getSafeKey(key, prefix) {\n    if (key instanceof Utils.SequelizeMethod) {\n      key = this.handleSequelizeMethod(key);\n      return this._prefixKey(this.handleSequelizeMethod(key), prefix);\n    }\n\n    if (Utils.isColString(key)) {\n      key = key.substr(1, key.length - 2).split('.');\n\n      if (key.length > 2) {\n        key = [\n          // join the tables by -> to match out internal namings\n          key.slice(0, -1).join('->'),\n          key[key.length - 1]\n        ];\n      }\n\n      return key.map(identifier => this.quoteIdentifier(identifier)).join('.');\n    }\n\n    return this._prefixKey(this.quoteIdentifier(key), prefix);\n  },\n\n  _prefixKey(key, prefix) {\n    if (prefix) {\n      if (prefix instanceof Utils.Literal) {\n        return [this.handleSequelizeMethod(prefix), key].join('.');\n      }\n\n      return [this.quoteTable(prefix), key].join('.');\n    }\n\n    return key;\n  },\n\n  _whereParseSingleValueObject(key, field, prop, value, options) {\n    if (prop === Op.not) {\n      if (Array.isArray(value)) {\n        prop = Op.notIn;\n      } else if ([null, true, false].indexOf(value) < 0) {\n        prop = Op.ne;\n      }\n    }\n\n    let comparator = this.OperatorMap[prop] || this.OperatorMap[Op.eq];\n\n    switch (prop) {\n      case Op.in:\n      case Op.notIn:\n        if (value instanceof Utils.Literal) {\n          return this._joinKeyValue(key, value.val, comparator, options.prefix);\n        }\n\n        if (value.length) {\n          return this._joinKeyValue(key, `(${value.map(item => this.escape(item, field)).join(', ')})`, comparator, options.prefix);\n        }\n\n        if (comparator === this.OperatorMap[Op.in]) {\n          return this._joinKeyValue(key, '(NULL)', comparator, options.prefix);\n        }\n\n        return '';\n      case Op.any:\n      case Op.all:\n        comparator = `${this.OperatorMap[Op.eq]} ${comparator}`;\n        if (value[Op.values]) {\n          return this._joinKeyValue(key, `(VALUES ${value[Op.values].map(item => `(${this.escape(item)})`).join(', ')})`, comparator, options.prefix);\n        }\n\n        return this._joinKeyValue(key, `(${this.escape(value, field)})`, comparator, options.prefix);\n      case Op.between:\n      case Op.notBetween:\n        return this._joinKeyValue(key, `${this.escape(value[0])} AND ${this.escape(value[1])}`, comparator, options.prefix);\n      case Op.raw:\n        throw new Error('The `$raw` where property is no longer supported.  Use `sequelize.literal` instead.');\n      case Op.col:\n        comparator = this.OperatorMap[Op.eq];\n        value = value.split('.');\n\n        if (value.length > 2) {\n          value = [\n            // join the tables by -> to match out internal namings\n            value.slice(0, -1).join('->'),\n            value[value.length - 1]\n          ];\n        }\n\n        return this._joinKeyValue(key, value.map(identifier => this.quoteIdentifier(identifier)).join('.'), comparator, options.prefix);\n    }\n\n    const escapeOptions = {\n      acceptStrings: comparator.indexOf(this.OperatorMap[Op.like]) !== -1\n    };\n\n    if (_.isPlainObject(value)) {\n      if (value[Op.col]) {\n        return this._joinKeyValue(key, this.whereItemQuery(null, value), comparator, options.prefix);\n      }\n      if (value[Op.any]) {\n        escapeOptions.isList = true;\n        return this._joinKeyValue(key, `(${this.escape(value[Op.any], field, escapeOptions)})`, `${comparator} ${this.OperatorMap[Op.any]}`, options.prefix);\n      }\n      if (value[Op.all]) {\n        escapeOptions.isList = true;\n        return this._joinKeyValue(key, `(${this.escape(value[Op.all], field, escapeOptions)})`, `${comparator} ${this.OperatorMap[Op.all]}`, options.prefix);\n      }\n    }\n\n    if (comparator.indexOf(this.OperatorMap[Op.regexp]) !== -1) {\n      return this._joinKeyValue(key, `'${value}'`, comparator, options.prefix);\n    }\n\n    if (value === null && comparator === this.OperatorMap[Op.eq]) {\n      return this._joinKeyValue(key, this.escape(value, field, escapeOptions), this.OperatorMap[Op.is], options.prefix);\n    } else if (value === null && this.OperatorMap[Op.ne]) {\n      return this._joinKeyValue(key, this.escape(value, field, escapeOptions), this.OperatorMap[Op.not], options.prefix);\n    }\n\n    return this._joinKeyValue(key, this.escape(value, field, escapeOptions), comparator, options.prefix);\n  },\n\n  /*\n    Takes something and transforms it into values of a where condition.\n   @private\n  */\n  getWhereConditions(smth, tableName, factory, options, prepend) {\n    let result = null;\n    const where = {};\n\n    if (Array.isArray(tableName)) {\n      tableName = tableName[0];\n      if (Array.isArray(tableName)) {\n        tableName = tableName[1];\n      }\n    }\n\n    options = options || {};\n\n    if (typeof prepend === 'undefined') {\n      prepend = true;\n    }\n\n    if (smth && smth instanceof Utils.SequelizeMethod) { // Checking a property is cheaper than a lot of instanceof calls\n      result = this.handleSequelizeMethod(smth, tableName, factory, options, prepend);\n    } else if (_.isPlainObject(smth)) {\n      return this.whereItemsQuery(smth, {\n        model: factory,\n        prefix: prepend && tableName\n      });\n    } else if (typeof smth === 'number') {\n      let primaryKeys = factory ? Object.keys(factory.primaryKeys) : [];\n\n      if (primaryKeys.length > 0) {\n        // Since we're just a number, assume only the first key\n        primaryKeys = primaryKeys[0];\n      } else {\n        primaryKeys = 'id';\n      }\n\n      where[primaryKeys] = smth;\n\n      return this.whereItemsQuery(where, {\n        model: factory,\n        prefix: prepend && tableName\n      });\n    } else if (typeof smth === 'string') {\n      return this.whereItemsQuery(smth, {\n        model: factory,\n        prefix: prepend && tableName\n      });\n    } else if (Buffer.isBuffer(smth)) {\n      result = this.escape(smth);\n    } else if (Array.isArray(smth)) {\n      if (smth.length === 0 || smth.length > 0 && smth[0].length === 0) return '1=1';\n      if (Utils.canTreatArrayAsAnd(smth)) {\n        const _smth = { [Op.and]: smth };\n        result = this.getWhereConditions(_smth, tableName, factory, options, prepend);\n      } else {\n        throw new Error('Support for literal replacements in the `where` object has been removed.');\n      }\n    } else if (smth === null) {\n      return this.whereItemsQuery(smth, {\n        model: factory,\n        prefix: prepend && tableName\n      });\n    }\n\n    return result ? result : '1=1';\n  },\n\n  // A recursive parser for nested where conditions\n  parseConditionObject(conditions, path) {\n    path = path || [];\n    return _.reduce(conditions, (result, value, key) => {\n      if (_.isObject(value)) {\n        result = result.concat(this.parseConditionObject(value, path.concat(key))); // Recursively parse objects\n      } else {\n        result.push({ path: path.concat(key), value });\n      }\n      return result;\n    }, []);\n  },\n\n  isIdentifierQuoted(string) {\n    return /^\\s*(?:([`\"'])(?:(?!\\1).|\\1{2})*\\1\\.?)+\\s*$/i.test(string);\n  },\n\n  booleanValue(value) {\n    return value;\n  }\n};\n\nmodule.exports = QueryGenerator;\n"},"lineCount":2492}},"hash":"3eb3ba7d26be8cf9302a0756c76915ab","cacheData":{"env":{}}}