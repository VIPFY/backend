{"dependencies":[{"name":"node-pre-gyp","loc":{"line":3,"column":21}},{"name":"path","loc":{"line":4,"column":19}},{"name":"crypto","loc":{"line":8,"column":21}},{"name":"./lib/promises","loc":{"line":10,"column":23}},{"name":"process"}],"generated":{"js":"var __dirname = \"/home/user/vipfy-server/node_modules/bcrypt\";\nvar process = require(\"process\");\n'use strict';\n\nvar binary = require('node-pre-gyp');\nvar path = require('path');\nvar binding_path = binary.find(path.resolve(path.join(__dirname, './package.json')));\nvar bindings = require(binding_path);\n\nvar crypto = require('crypto');\n\nvar promises = require('./lib/promises');\n\n/// generate a salt (sync)\n/// @param {Number} [rounds] number of rounds (default 10)\n/// @return {String} salt\nmodule.exports.genSaltSync = function genSaltSync(rounds) {\n    // default 10 rounds\n    if (!rounds) {\n        rounds = 10;\n    } else if (typeof rounds !== 'number') {\n        throw new Error('rounds must be a number');\n    }\n\n    return bindings.gen_salt_sync(rounds, crypto.randomBytes(16));\n};\n\n/// generate a salt\n/// @param {Number} [rounds] number of rounds (default 10)\n/// @param {Function} cb callback(err, salt)\nmodule.exports.genSalt = function genSalt(rounds, ignore, cb) {\n    // if callback is first argument, then use defaults for others\n    if (typeof arguments[0] === 'function') {\n        // have to set callback first otherwise arguments are overriden\n        cb = arguments[0];\n        rounds = 10;\n    // callback is second argument\n    } else if (typeof arguments[1] === 'function') {\n        // have to set callback first otherwise arguments are overriden\n        cb = arguments[1];\n    }\n\n    if (!cb) {\n        return promises.promise(genSalt, this, [rounds, ignore]);\n    }\n\n    // default 10 rounds\n    if (!rounds) {\n        rounds = 10;\n    } else if (typeof rounds !== 'number') {\n        // callback error asynchronously\n        return process.nextTick(function() {\n            cb(new Error('rounds must be a number'));\n        });\n    }\n\n    crypto.randomBytes(16, function(error, randomBytes) {\n        if (error) {\n            cb(error);\n            return;\n        }\n\n        bindings.gen_salt(rounds, randomBytes, cb);\n    });\n};\n\n/// hash data using a salt\n/// @param {String} data the data to encrypt\n/// @param {String} salt the salt to use when hashing\n/// @return {String} hash\nmodule.exports.hashSync = function hashSync(data, salt) {\n    if (data == null || salt == null) {\n        throw new Error('data and salt arguments required');\n    }\n\n    if (typeof data !== 'string' || (typeof salt !== 'string' && typeof salt !== 'number')) {\n        throw new Error('data must be a string and salt must either be a salt string or a number of rounds');\n    }\n\n    if (typeof salt === 'number') {\n        salt = module.exports.genSaltSync(salt);\n    }\n\n    return bindings.encrypt_sync(data, salt);\n};\n\n/// hash data using a salt\n/// @param {String} data the data to encrypt\n/// @param {String} salt the salt to use when hashing\n/// @param {Function} cb callback(err, hash)\nmodule.exports.hash = function hash(data, salt, cb) {\n    if (typeof data === 'function') {\n        return process.nextTick(function() {\n            data(new Error('data must be a string and salt must either be a salt string or a number of rounds'));\n        });\n    }\n\n    if (typeof salt === 'function') {\n        return process.nextTick(function() {\n            salt(new Error('data must be a string and salt must either be a salt string or a number of rounds'));\n        });\n    }\n\n    // cb exists but is not a function\n    // return a rejecting promise\n    if (cb && typeof cb !== 'function') {\n        return promises.reject(new Error('cb must be a function or null to return a Promise'));\n    }\n\n    if (!cb) {\n        return promises.promise(hash, this, [data, salt]);\n    }\n\n    if (data == null || salt == null) {\n        return process.nextTick(function() {\n            cb(new Error('data and salt arguments required'));\n        });\n    }\n\n    if (typeof data !== 'string' || (typeof salt !== 'string' && typeof salt !== 'number')) {\n        return process.nextTick(function() {\n            cb(new Error('data must be a string and salt must either be a salt string or a number of rounds'));\n        });\n    }\n\n\n    if (typeof salt === 'number') {\n        return module.exports.genSalt(salt, function(err, salt) {\n            return bindings.encrypt(data, salt, cb);\n        });\n    }\n\n    return bindings.encrypt(data, salt, cb);\n};\n\n/// compare raw data to hash\n/// @param {String} data the data to hash and compare\n/// @param {String} hash expected hash\n/// @return {bool} true if hashed data matches hash\nmodule.exports.compareSync = function compareSync(data, hash) {\n    if (data == null || hash == null) {\n        throw new Error('data and hash arguments required');\n    }\n\n    if (typeof data !== 'string' || typeof hash !== 'string') {\n        throw new Error('data and hash must be strings');\n    }\n\n    return bindings.compare_sync(data, hash);\n};\n\n/// compare raw data to hash\n/// @param {String} data the data to hash and compare\n/// @param {String} hash expected hash\n/// @param {Function} cb callback(err, matched) - matched is true if hashed data matches hash\nmodule.exports.compare = function compare(data, hash, cb) {\n    if (typeof data === 'function') {\n        return process.nextTick(function() {\n            data(new Error('data and hash arguments required'));\n        });\n    }\n\n    if (typeof hash === 'function') {\n        return process.nextTick(function() {\n            hash(new Error('data and hash arguments required'));\n        });\n    }\n\n    // cb exists but is not a function\n    // return a rejecting promise\n    if (cb && typeof cb !== 'function') {\n        return promises.reject(new Error('cb must be a function or null to return a Promise'));\n    }\n\n    if (!cb) {\n        return promises.promise(compare, this, [data, hash]);\n    }\n\n    if (data == null || hash == null) {\n        return process.nextTick(function() {\n            cb(new Error('data and hash arguments required'));\n        });\n    }\n\n    if (typeof data !== 'string' || typeof hash !== 'string') {\n        return process.nextTick(function() {\n            cb(new Error('data and hash must be strings'));\n        });\n    }\n\n    return bindings.compare(data, hash, cb);\n};\n\n/// @param {String} hash extract rounds from this hash\n/// @return {Number} the number of rounds used to encrypt a given hash\nmodule.exports.getRounds = function getRounds(hash) {\n    if (hash == null) {\n        throw new Error('hash argument required');\n    }\n\n    if (typeof hash !== 'string') {\n        throw new Error('hash must be a string');\n    }\n\n    return bindings.get_rounds(hash);\n};\n","map":{"mappings":[{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":1,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":2,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":3,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":4,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":5,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":6,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":7,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":8,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":9,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":10,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":11,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":12,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":13,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":14,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":15,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":16,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":17,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":18,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":19,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":20,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":21,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":22,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":23,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":24,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":25,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":26,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":27,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":28,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":29,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":30,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":31,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":32,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":33,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":34,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":35,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":36,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":37,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":38,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":39,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":40,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":41,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":42,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":43,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":44,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":45,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":46,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":47,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":48,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":49,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":50,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":51,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":52,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":53,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":54,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":55,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":56,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":57,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":58,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":59,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":60,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":61,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":62,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":63,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":64,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":65,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":66,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":67,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":68,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":69,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":70,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":71,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":72,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":73,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":74,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":75,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":76,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":77,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":78,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":79,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":80,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":81,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":82,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":83,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":84,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":85,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":86,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":87,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":88,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":89,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":90,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":91,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":92,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":93,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":94,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":95,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":96,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":97,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":98,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":99,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":100,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":101,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":102,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":103,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":104,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":105,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":106,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":107,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":108,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":109,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":110,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":111,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":112,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":113,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":114,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":115,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":116,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":117,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":118,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":119,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":120,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":121,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":122,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":123,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":124,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":125,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":126,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":127,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":128,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":129,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":130,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":131,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":132,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":133,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":134,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":135,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":136,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":137,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":138,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":139,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":140,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":141,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":142,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":143,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":144,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":145,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":146,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":147,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":148,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":149,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":150,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":151,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":152,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":153,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":154,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":155,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":156,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":157,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":158,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":159,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":160,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":161,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":162,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":163,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":164,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":165,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":166,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":167,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":168,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":169,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":170,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":171,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":172,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":173,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":174,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":175,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":176,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":177,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":178,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":179,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":180,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":181,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":182,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":183,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":184,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":185,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":186,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":187,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":188,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":189,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":190,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":191,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":192,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":193,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":194,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":195,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":196,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":197,"column":0},"generated":{"line":199,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":198,"column":0},"generated":{"line":200,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":199,"column":0},"generated":{"line":201,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":200,"column":0},"generated":{"line":202,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":201,"column":0},"generated":{"line":203,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":202,"column":0},"generated":{"line":204,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":203,"column":0},"generated":{"line":205,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":204,"column":0},"generated":{"line":206,"column":0}},{"source":"../node_modules/bcrypt/bcrypt.js","original":{"line":205,"column":0},"generated":{"line":207,"column":0}}],"sources":{"../node_modules/bcrypt/bcrypt.js":"'use strict';\n\nvar binary = require('node-pre-gyp');\nvar path = require('path');\nvar binding_path = binary.find(path.resolve(path.join(__dirname, './package.json')));\nvar bindings = require(binding_path);\n\nvar crypto = require('crypto');\n\nvar promises = require('./lib/promises');\n\n/// generate a salt (sync)\n/// @param {Number} [rounds] number of rounds (default 10)\n/// @return {String} salt\nmodule.exports.genSaltSync = function genSaltSync(rounds) {\n    // default 10 rounds\n    if (!rounds) {\n        rounds = 10;\n    } else if (typeof rounds !== 'number') {\n        throw new Error('rounds must be a number');\n    }\n\n    return bindings.gen_salt_sync(rounds, crypto.randomBytes(16));\n};\n\n/// generate a salt\n/// @param {Number} [rounds] number of rounds (default 10)\n/// @param {Function} cb callback(err, salt)\nmodule.exports.genSalt = function genSalt(rounds, ignore, cb) {\n    // if callback is first argument, then use defaults for others\n    if (typeof arguments[0] === 'function') {\n        // have to set callback first otherwise arguments are overriden\n        cb = arguments[0];\n        rounds = 10;\n    // callback is second argument\n    } else if (typeof arguments[1] === 'function') {\n        // have to set callback first otherwise arguments are overriden\n        cb = arguments[1];\n    }\n\n    if (!cb) {\n        return promises.promise(genSalt, this, [rounds, ignore]);\n    }\n\n    // default 10 rounds\n    if (!rounds) {\n        rounds = 10;\n    } else if (typeof rounds !== 'number') {\n        // callback error asynchronously\n        return process.nextTick(function() {\n            cb(new Error('rounds must be a number'));\n        });\n    }\n\n    crypto.randomBytes(16, function(error, randomBytes) {\n        if (error) {\n            cb(error);\n            return;\n        }\n\n        bindings.gen_salt(rounds, randomBytes, cb);\n    });\n};\n\n/// hash data using a salt\n/// @param {String} data the data to encrypt\n/// @param {String} salt the salt to use when hashing\n/// @return {String} hash\nmodule.exports.hashSync = function hashSync(data, salt) {\n    if (data == null || salt == null) {\n        throw new Error('data and salt arguments required');\n    }\n\n    if (typeof data !== 'string' || (typeof salt !== 'string' && typeof salt !== 'number')) {\n        throw new Error('data must be a string and salt must either be a salt string or a number of rounds');\n    }\n\n    if (typeof salt === 'number') {\n        salt = module.exports.genSaltSync(salt);\n    }\n\n    return bindings.encrypt_sync(data, salt);\n};\n\n/// hash data using a salt\n/// @param {String} data the data to encrypt\n/// @param {String} salt the salt to use when hashing\n/// @param {Function} cb callback(err, hash)\nmodule.exports.hash = function hash(data, salt, cb) {\n    if (typeof data === 'function') {\n        return process.nextTick(function() {\n            data(new Error('data must be a string and salt must either be a salt string or a number of rounds'));\n        });\n    }\n\n    if (typeof salt === 'function') {\n        return process.nextTick(function() {\n            salt(new Error('data must be a string and salt must either be a salt string or a number of rounds'));\n        });\n    }\n\n    // cb exists but is not a function\n    // return a rejecting promise\n    if (cb && typeof cb !== 'function') {\n        return promises.reject(new Error('cb must be a function or null to return a Promise'));\n    }\n\n    if (!cb) {\n        return promises.promise(hash, this, [data, salt]);\n    }\n\n    if (data == null || salt == null) {\n        return process.nextTick(function() {\n            cb(new Error('data and salt arguments required'));\n        });\n    }\n\n    if (typeof data !== 'string' || (typeof salt !== 'string' && typeof salt !== 'number')) {\n        return process.nextTick(function() {\n            cb(new Error('data must be a string and salt must either be a salt string or a number of rounds'));\n        });\n    }\n\n\n    if (typeof salt === 'number') {\n        return module.exports.genSalt(salt, function(err, salt) {\n            return bindings.encrypt(data, salt, cb);\n        });\n    }\n\n    return bindings.encrypt(data, salt, cb);\n};\n\n/// compare raw data to hash\n/// @param {String} data the data to hash and compare\n/// @param {String} hash expected hash\n/// @return {bool} true if hashed data matches hash\nmodule.exports.compareSync = function compareSync(data, hash) {\n    if (data == null || hash == null) {\n        throw new Error('data and hash arguments required');\n    }\n\n    if (typeof data !== 'string' || typeof hash !== 'string') {\n        throw new Error('data and hash must be strings');\n    }\n\n    return bindings.compare_sync(data, hash);\n};\n\n/// compare raw data to hash\n/// @param {String} data the data to hash and compare\n/// @param {String} hash expected hash\n/// @param {Function} cb callback(err, matched) - matched is true if hashed data matches hash\nmodule.exports.compare = function compare(data, hash, cb) {\n    if (typeof data === 'function') {\n        return process.nextTick(function() {\n            data(new Error('data and hash arguments required'));\n        });\n    }\n\n    if (typeof hash === 'function') {\n        return process.nextTick(function() {\n            hash(new Error('data and hash arguments required'));\n        });\n    }\n\n    // cb exists but is not a function\n    // return a rejecting promise\n    if (cb && typeof cb !== 'function') {\n        return promises.reject(new Error('cb must be a function or null to return a Promise'));\n    }\n\n    if (!cb) {\n        return promises.promise(compare, this, [data, hash]);\n    }\n\n    if (data == null || hash == null) {\n        return process.nextTick(function() {\n            cb(new Error('data and hash arguments required'));\n        });\n    }\n\n    if (typeof data !== 'string' || typeof hash !== 'string') {\n        return process.nextTick(function() {\n            cb(new Error('data and hash must be strings'));\n        });\n    }\n\n    return bindings.compare(data, hash, cb);\n};\n\n/// @param {String} hash extract rounds from this hash\n/// @return {Number} the number of rounds used to encrypt a given hash\nmodule.exports.getRounds = function getRounds(hash) {\n    if (hash == null) {\n        throw new Error('hash argument required');\n    }\n\n    if (typeof hash !== 'string') {\n        throw new Error('hash must be a string');\n    }\n\n    return bindings.get_rounds(hash);\n};\n"},"lineCount":207}},"hash":"1c4df3f7026bec320468028acbe323d1","cacheData":{"env":{}}}