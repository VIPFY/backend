{"dependencies":[{"name":"estraverse","loc":{"line":68,"column":25}},{"name":"esutils","loc":{"line":69,"column":22}},{"name":"source-map","loc":{"line":2555,"column":37}},{"name":"./package.json","loc":{"line":2602,"column":30}}],"generated":{"js":"var global = (1,eval)(\"this\");\n/*\n  Copyright (C) 2012-2014 Yusuke Suzuki <utatane.tea@gmail.com>\n  Copyright (C) 2015 Ingvar Stepanyan <me@rreverser.com>\n  Copyright (C) 2014 Ivan Nikulin <ifaaan@gmail.com>\n  Copyright (C) 2012-2013 Michael Ficarra <escodegen.copyright@michael.ficarra.me>\n  Copyright (C) 2012-2013 Mathias Bynens <mathias@qiwi.be>\n  Copyright (C) 2013 Irakli Gozalishvili <rfobic@gmail.com>\n  Copyright (C) 2012 Robert Gust-Bardon <donate@robert.gust-bardon.org>\n  Copyright (C) 2012 John Freeman <jfreeman08@gmail.com>\n  Copyright (C) 2011-2012 Ariya Hidayat <ariya.hidayat@gmail.com>\n  Copyright (C) 2012 Joost-Wim Boekesteijn <joost-wim@boekesteijn.nl>\n  Copyright (C) 2012 Kris Kowal <kris.kowal@cixar.com>\n  Copyright (C) 2012 Arpad Borsos <arpad.borsos@googlemail.com>\n\n  Redistribution and use in source and binary forms, with or without\n  modification, are permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n/*global exports:true, require:true, global:true*/\n(function () {\n    'use strict';\n\n    var Syntax,\n        Precedence,\n        BinaryPrecedence,\n        SourceNode,\n        estraverse,\n        esutils,\n        isArray,\n        base,\n        indent,\n        json,\n        renumber,\n        hexadecimal,\n        quotes,\n        escapeless,\n        newline,\n        space,\n        parentheses,\n        semicolons,\n        safeConcatenation,\n        directive,\n        extra,\n        parse,\n        sourceMap,\n        sourceCode,\n        preserveBlankLines,\n        FORMAT_MINIFY,\n        FORMAT_DEFAULTS;\n\n    estraverse = require('estraverse');\n    esutils = require('esutils');\n\n    Syntax = estraverse.Syntax;\n\n    // Generation is done by generateExpression.\n    function isExpression(node) {\n        return CodeGenerator.Expression.hasOwnProperty(node.type);\n    }\n\n    // Generation is done by generateStatement.\n    function isStatement(node) {\n        return CodeGenerator.Statement.hasOwnProperty(node.type);\n    }\n\n    Precedence = {\n        Sequence: 0,\n        Yield: 1,\n        Await: 1,\n        Assignment: 1,\n        Conditional: 2,\n        ArrowFunction: 2,\n        LogicalOR: 3,\n        LogicalAND: 4,\n        BitwiseOR: 5,\n        BitwiseXOR: 6,\n        BitwiseAND: 7,\n        Equality: 8,\n        Relational: 9,\n        BitwiseSHIFT: 10,\n        Additive: 11,\n        Multiplicative: 12,\n        Unary: 13,\n        Postfix: 14,\n        Call: 15,\n        New: 16,\n        TaggedTemplate: 17,\n        Member: 18,\n        Primary: 19\n    };\n\n    BinaryPrecedence = {\n        '||': Precedence.LogicalOR,\n        '&&': Precedence.LogicalAND,\n        '|': Precedence.BitwiseOR,\n        '^': Precedence.BitwiseXOR,\n        '&': Precedence.BitwiseAND,\n        '==': Precedence.Equality,\n        '!=': Precedence.Equality,\n        '===': Precedence.Equality,\n        '!==': Precedence.Equality,\n        'is': Precedence.Equality,\n        'isnt': Precedence.Equality,\n        '<': Precedence.Relational,\n        '>': Precedence.Relational,\n        '<=': Precedence.Relational,\n        '>=': Precedence.Relational,\n        'in': Precedence.Relational,\n        'instanceof': Precedence.Relational,\n        '<<': Precedence.BitwiseSHIFT,\n        '>>': Precedence.BitwiseSHIFT,\n        '>>>': Precedence.BitwiseSHIFT,\n        '+': Precedence.Additive,\n        '-': Precedence.Additive,\n        '*': Precedence.Multiplicative,\n        '%': Precedence.Multiplicative,\n        '/': Precedence.Multiplicative\n    };\n\n    //Flags\n    var F_ALLOW_IN = 1,\n        F_ALLOW_CALL = 1 << 1,\n        F_ALLOW_UNPARATH_NEW = 1 << 2,\n        F_FUNC_BODY = 1 << 3,\n        F_DIRECTIVE_CTX = 1 << 4,\n        F_SEMICOLON_OPT = 1 << 5;\n\n    //Expression flag sets\n    //NOTE: Flag order:\n    // F_ALLOW_IN\n    // F_ALLOW_CALL\n    // F_ALLOW_UNPARATH_NEW\n    var E_FTT = F_ALLOW_CALL | F_ALLOW_UNPARATH_NEW,\n        E_TTF = F_ALLOW_IN | F_ALLOW_CALL,\n        E_TTT = F_ALLOW_IN | F_ALLOW_CALL | F_ALLOW_UNPARATH_NEW,\n        E_TFF = F_ALLOW_IN,\n        E_FFT = F_ALLOW_UNPARATH_NEW,\n        E_TFT = F_ALLOW_IN | F_ALLOW_UNPARATH_NEW;\n\n    //Statement flag sets\n    //NOTE: Flag order:\n    // F_ALLOW_IN\n    // F_FUNC_BODY\n    // F_DIRECTIVE_CTX\n    // F_SEMICOLON_OPT\n    var S_TFFF = F_ALLOW_IN,\n        S_TFFT = F_ALLOW_IN | F_SEMICOLON_OPT,\n        S_FFFF = 0x00,\n        S_TFTF = F_ALLOW_IN | F_DIRECTIVE_CTX,\n        S_TTFF = F_ALLOW_IN | F_FUNC_BODY;\n\n    function getDefaultOptions() {\n        // default options\n        return {\n            indent: null,\n            base: null,\n            parse: null,\n            comment: false,\n            format: {\n                indent: {\n                    style: '    ',\n                    base: 0,\n                    adjustMultilineComment: false\n                },\n                newline: '\\n',\n                space: ' ',\n                json: false,\n                renumber: false,\n                hexadecimal: false,\n                quotes: 'single',\n                escapeless: false,\n                compact: false,\n                parentheses: true,\n                semicolons: true,\n                safeConcatenation: false,\n                preserveBlankLines: false\n            },\n            moz: {\n                comprehensionExpressionStartsWithAssignment: false,\n                starlessGenerator: false\n            },\n            sourceMap: null,\n            sourceMapRoot: null,\n            sourceMapWithCode: false,\n            directive: false,\n            raw: true,\n            verbatim: null,\n            sourceCode: null\n        };\n    }\n\n    function stringRepeat(str, num) {\n        var result = '';\n\n        for (num |= 0; num > 0; num >>>= 1, str += str) {\n            if (num & 1) {\n                result += str;\n            }\n        }\n\n        return result;\n    }\n\n    isArray = Array.isArray;\n    if (!isArray) {\n        isArray = function isArray(array) {\n            return Object.prototype.toString.call(array) === '[object Array]';\n        };\n    }\n\n    function hasLineTerminator(str) {\n        return (/[\\r\\n]/g).test(str);\n    }\n\n    function endsWithLineTerminator(str) {\n        var len = str.length;\n        return len && esutils.code.isLineTerminator(str.charCodeAt(len - 1));\n    }\n\n    function merge(target, override) {\n        var key;\n        for (key in override) {\n            if (override.hasOwnProperty(key)) {\n                target[key] = override[key];\n            }\n        }\n        return target;\n    }\n\n    function updateDeeply(target, override) {\n        var key, val;\n\n        function isHashObject(target) {\n            return typeof target === 'object' && target instanceof Object && !(target instanceof RegExp);\n        }\n\n        for (key in override) {\n            if (override.hasOwnProperty(key)) {\n                val = override[key];\n                if (isHashObject(val)) {\n                    if (isHashObject(target[key])) {\n                        updateDeeply(target[key], val);\n                    } else {\n                        target[key] = updateDeeply({}, val);\n                    }\n                } else {\n                    target[key] = val;\n                }\n            }\n        }\n        return target;\n    }\n\n    function generateNumber(value) {\n        var result, point, temp, exponent, pos;\n\n        if (value !== value) {\n            throw new Error('Numeric literal whose value is NaN');\n        }\n        if (value < 0 || (value === 0 && 1 / value < 0)) {\n            throw new Error('Numeric literal whose value is negative');\n        }\n\n        if (value === 1 / 0) {\n            return json ? 'null' : renumber ? '1e400' : '1e+400';\n        }\n\n        result = '' + value;\n        if (!renumber || result.length < 3) {\n            return result;\n        }\n\n        point = result.indexOf('.');\n        if (!json && result.charCodeAt(0) === 0x30  /* 0 */ && point === 1) {\n            point = 0;\n            result = result.slice(1);\n        }\n        temp = result;\n        result = result.replace('e+', 'e');\n        exponent = 0;\n        if ((pos = temp.indexOf('e')) > 0) {\n            exponent = +temp.slice(pos + 1);\n            temp = temp.slice(0, pos);\n        }\n        if (point >= 0) {\n            exponent -= temp.length - point - 1;\n            temp = +(temp.slice(0, point) + temp.slice(point + 1)) + '';\n        }\n        pos = 0;\n        while (temp.charCodeAt(temp.length + pos - 1) === 0x30  /* 0 */) {\n            --pos;\n        }\n        if (pos !== 0) {\n            exponent -= pos;\n            temp = temp.slice(0, pos);\n        }\n        if (exponent !== 0) {\n            temp += 'e' + exponent;\n        }\n        if ((temp.length < result.length ||\n                    (hexadecimal && value > 1e12 && Math.floor(value) === value && (temp = '0x' + value.toString(16)).length < result.length)) &&\n                +temp === value) {\n            result = temp;\n        }\n\n        return result;\n    }\n\n    // Generate valid RegExp expression.\n    // This function is based on https://github.com/Constellation/iv Engine\n\n    function escapeRegExpCharacter(ch, previousIsBackslash) {\n        // not handling '\\' and handling \\u2028 or \\u2029 to unicode escape sequence\n        if ((ch & ~1) === 0x2028) {\n            return (previousIsBackslash ? 'u' : '\\\\u') + ((ch === 0x2028) ? '2028' : '2029');\n        } else if (ch === 10 || ch === 13) {  // \\n, \\r\n            return (previousIsBackslash ? '' : '\\\\') + ((ch === 10) ? 'n' : 'r');\n        }\n        return String.fromCharCode(ch);\n    }\n\n    function generateRegExp(reg) {\n        var match, result, flags, i, iz, ch, characterInBrack, previousIsBackslash;\n\n        result = reg.toString();\n\n        if (reg.source) {\n            // extract flag from toString result\n            match = result.match(/\\/([^/]*)$/);\n            if (!match) {\n                return result;\n            }\n\n            flags = match[1];\n            result = '';\n\n            characterInBrack = false;\n            previousIsBackslash = false;\n            for (i = 0, iz = reg.source.length; i < iz; ++i) {\n                ch = reg.source.charCodeAt(i);\n\n                if (!previousIsBackslash) {\n                    if (characterInBrack) {\n                        if (ch === 93) {  // ]\n                            characterInBrack = false;\n                        }\n                    } else {\n                        if (ch === 47) {  // /\n                            result += '\\\\';\n                        } else if (ch === 91) {  // [\n                            characterInBrack = true;\n                        }\n                    }\n                    result += escapeRegExpCharacter(ch, previousIsBackslash);\n                    previousIsBackslash = ch === 92;  // \\\n                } else {\n                    // if new RegExp(\"\\\\\\n') is provided, create /\\n/\n                    result += escapeRegExpCharacter(ch, previousIsBackslash);\n                    // prevent like /\\\\[/]/\n                    previousIsBackslash = false;\n                }\n            }\n\n            return '/' + result + '/' + flags;\n        }\n\n        return result;\n    }\n\n    function escapeAllowedCharacter(code, next) {\n        var hex;\n\n        if (code === 0x08  /* \\b */) {\n            return '\\\\b';\n        }\n\n        if (code === 0x0C  /* \\f */) {\n            return '\\\\f';\n        }\n\n        if (code === 0x09  /* \\t */) {\n            return '\\\\t';\n        }\n\n        hex = code.toString(16).toUpperCase();\n        if (json || code > 0xFF) {\n            return '\\\\u' + '0000'.slice(hex.length) + hex;\n        } else if (code === 0x0000 && !esutils.code.isDecimalDigit(next)) {\n            return '\\\\0';\n        } else if (code === 0x000B  /* \\v */) { // '\\v'\n            return '\\\\x0B';\n        } else {\n            return '\\\\x' + '00'.slice(hex.length) + hex;\n        }\n    }\n\n    function escapeDisallowedCharacter(code) {\n        if (code === 0x5C  /* \\ */) {\n            return '\\\\\\\\';\n        }\n\n        if (code === 0x0A  /* \\n */) {\n            return '\\\\n';\n        }\n\n        if (code === 0x0D  /* \\r */) {\n            return '\\\\r';\n        }\n\n        if (code === 0x2028) {\n            return '\\\\u2028';\n        }\n\n        if (code === 0x2029) {\n            return '\\\\u2029';\n        }\n\n        throw new Error('Incorrectly classified character');\n    }\n\n    function escapeDirective(str) {\n        var i, iz, code, quote;\n\n        quote = quotes === 'double' ? '\"' : '\\'';\n        for (i = 0, iz = str.length; i < iz; ++i) {\n            code = str.charCodeAt(i);\n            if (code === 0x27  /* ' */) {\n                quote = '\"';\n                break;\n            } else if (code === 0x22  /* \" */) {\n                quote = '\\'';\n                break;\n            } else if (code === 0x5C  /* \\ */) {\n                ++i;\n            }\n        }\n\n        return quote + str + quote;\n    }\n\n    function escapeString(str) {\n        var result = '', i, len, code, singleQuotes = 0, doubleQuotes = 0, single, quote;\n\n        for (i = 0, len = str.length; i < len; ++i) {\n            code = str.charCodeAt(i);\n            if (code === 0x27  /* ' */) {\n                ++singleQuotes;\n            } else if (code === 0x22  /* \" */) {\n                ++doubleQuotes;\n            } else if (code === 0x2F  /* / */ && json) {\n                result += '\\\\';\n            } else if (esutils.code.isLineTerminator(code) || code === 0x5C  /* \\ */) {\n                result += escapeDisallowedCharacter(code);\n                continue;\n            } else if (!esutils.code.isIdentifierPartES5(code) && (json && code < 0x20  /* SP */ || !json && !escapeless && (code < 0x20  /* SP */ || code > 0x7E  /* ~ */))) {\n                result += escapeAllowedCharacter(code, str.charCodeAt(i + 1));\n                continue;\n            }\n            result += String.fromCharCode(code);\n        }\n\n        single = !(quotes === 'double' || (quotes === 'auto' && doubleQuotes < singleQuotes));\n        quote = single ? '\\'' : '\"';\n\n        if (!(single ? singleQuotes : doubleQuotes)) {\n            return quote + result + quote;\n        }\n\n        str = result;\n        result = quote;\n\n        for (i = 0, len = str.length; i < len; ++i) {\n            code = str.charCodeAt(i);\n            if ((code === 0x27  /* ' */ && single) || (code === 0x22  /* \" */ && !single)) {\n                result += '\\\\';\n            }\n            result += String.fromCharCode(code);\n        }\n\n        return result + quote;\n    }\n\n    /**\n     * flatten an array to a string, where the array can contain\n     * either strings or nested arrays\n     */\n    function flattenToString(arr) {\n        var i, iz, elem, result = '';\n        for (i = 0, iz = arr.length; i < iz; ++i) {\n            elem = arr[i];\n            result += isArray(elem) ? flattenToString(elem) : elem;\n        }\n        return result;\n    }\n\n    /**\n     * convert generated to a SourceNode when source maps are enabled.\n     */\n    function toSourceNodeWhenNeeded(generated, node) {\n        if (!sourceMap) {\n            // with no source maps, generated is either an\n            // array or a string.  if an array, flatten it.\n            // if a string, just return it\n            if (isArray(generated)) {\n                return flattenToString(generated);\n            } else {\n                return generated;\n            }\n        }\n        if (node == null) {\n            if (generated instanceof SourceNode) {\n                return generated;\n            } else {\n                node = {};\n            }\n        }\n        if (node.loc == null) {\n            return new SourceNode(null, null, sourceMap, generated, node.name || null);\n        }\n        return new SourceNode(node.loc.start.line, node.loc.start.column, (sourceMap === true ? node.loc.source || null : sourceMap), generated, node.name || null);\n    }\n\n    function noEmptySpace() {\n        return (space) ? space : ' ';\n    }\n\n    function join(left, right) {\n        var leftSource,\n            rightSource,\n            leftCharCode,\n            rightCharCode;\n\n        leftSource = toSourceNodeWhenNeeded(left).toString();\n        if (leftSource.length === 0) {\n            return [right];\n        }\n\n        rightSource = toSourceNodeWhenNeeded(right).toString();\n        if (rightSource.length === 0) {\n            return [left];\n        }\n\n        leftCharCode = leftSource.charCodeAt(leftSource.length - 1);\n        rightCharCode = rightSource.charCodeAt(0);\n\n        if ((leftCharCode === 0x2B  /* + */ || leftCharCode === 0x2D  /* - */) && leftCharCode === rightCharCode ||\n            esutils.code.isIdentifierPartES5(leftCharCode) && esutils.code.isIdentifierPartES5(rightCharCode) ||\n            leftCharCode === 0x2F  /* / */ && rightCharCode === 0x69  /* i */) { // infix word operators all start with `i`\n            return [left, noEmptySpace(), right];\n        } else if (esutils.code.isWhiteSpace(leftCharCode) || esutils.code.isLineTerminator(leftCharCode) ||\n                esutils.code.isWhiteSpace(rightCharCode) || esutils.code.isLineTerminator(rightCharCode)) {\n            return [left, right];\n        }\n        return [left, space, right];\n    }\n\n    function addIndent(stmt) {\n        return [base, stmt];\n    }\n\n    function withIndent(fn) {\n        var previousBase;\n        previousBase = base;\n        base += indent;\n        fn(base);\n        base = previousBase;\n    }\n\n    function calculateSpaces(str) {\n        var i;\n        for (i = str.length - 1; i >= 0; --i) {\n            if (esutils.code.isLineTerminator(str.charCodeAt(i))) {\n                break;\n            }\n        }\n        return (str.length - 1) - i;\n    }\n\n    function adjustMultilineComment(value, specialBase) {\n        var array, i, len, line, j, spaces, previousBase, sn;\n\n        array = value.split(/\\r\\n|[\\r\\n]/);\n        spaces = Number.MAX_VALUE;\n\n        // first line doesn't have indentation\n        for (i = 1, len = array.length; i < len; ++i) {\n            line = array[i];\n            j = 0;\n            while (j < line.length && esutils.code.isWhiteSpace(line.charCodeAt(j))) {\n                ++j;\n            }\n            if (spaces > j) {\n                spaces = j;\n            }\n        }\n\n        if (typeof specialBase !== 'undefined') {\n            // pattern like\n            // {\n            //   var t = 20;  /*\n            //                 * this is comment\n            //                 */\n            // }\n            previousBase = base;\n            if (array[1][spaces] === '*') {\n                specialBase += ' ';\n            }\n            base = specialBase;\n        } else {\n            if (spaces & 1) {\n                // /*\n                //  *\n                //  */\n                // If spaces are odd number, above pattern is considered.\n                // We waste 1 space.\n                --spaces;\n            }\n            previousBase = base;\n        }\n\n        for (i = 1, len = array.length; i < len; ++i) {\n            sn = toSourceNodeWhenNeeded(addIndent(array[i].slice(spaces)));\n            array[i] = sourceMap ? sn.join('') : sn;\n        }\n\n        base = previousBase;\n\n        return array.join('\\n');\n    }\n\n    function generateComment(comment, specialBase) {\n        if (comment.type === 'Line') {\n            if (endsWithLineTerminator(comment.value)) {\n                return '//' + comment.value;\n            } else {\n                // Always use LineTerminator\n                var result = '//' + comment.value;\n                if (!preserveBlankLines) {\n                    result += '\\n';\n                }\n                return result;\n            }\n        }\n        if (extra.format.indent.adjustMultilineComment && /[\\n\\r]/.test(comment.value)) {\n            return adjustMultilineComment('/*' + comment.value + '*/', specialBase);\n        }\n        return '/*' + comment.value + '*/';\n    }\n\n    function addComments(stmt, result) {\n        var i, len, comment, save, tailingToStatement, specialBase, fragment,\n            extRange, range, prevRange, prefix, infix, suffix, count;\n\n        if (stmt.leadingComments && stmt.leadingComments.length > 0) {\n            save = result;\n\n            if (preserveBlankLines) {\n                comment = stmt.leadingComments[0];\n                result = [];\n\n                extRange = comment.extendedRange;\n                range = comment.range;\n\n                prefix = sourceCode.substring(extRange[0], range[0]);\n                count = (prefix.match(/\\n/g) || []).length;\n                if (count > 0) {\n                    result.push(stringRepeat('\\n', count));\n                    result.push(addIndent(generateComment(comment)));\n                } else {\n                    result.push(prefix);\n                    result.push(generateComment(comment));\n                }\n\n                prevRange = range;\n\n                for (i = 1, len = stmt.leadingComments.length; i < len; i++) {\n                    comment = stmt.leadingComments[i];\n                    range = comment.range;\n\n                    infix = sourceCode.substring(prevRange[1], range[0]);\n                    count = (infix.match(/\\n/g) || []).length;\n                    result.push(stringRepeat('\\n', count));\n                    result.push(addIndent(generateComment(comment)));\n\n                    prevRange = range;\n                }\n\n                suffix = sourceCode.substring(range[1], extRange[1]);\n                count = (suffix.match(/\\n/g) || []).length;\n                result.push(stringRepeat('\\n', count));\n            } else {\n                comment = stmt.leadingComments[0];\n                result = [];\n                if (safeConcatenation && stmt.type === Syntax.Program && stmt.body.length === 0) {\n                    result.push('\\n');\n                }\n                result.push(generateComment(comment));\n                if (!endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {\n                    result.push('\\n');\n                }\n\n                for (i = 1, len = stmt.leadingComments.length; i < len; ++i) {\n                    comment = stmt.leadingComments[i];\n                    fragment = [generateComment(comment)];\n                    if (!endsWithLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {\n                        fragment.push('\\n');\n                    }\n                    result.push(addIndent(fragment));\n                }\n            }\n\n            result.push(addIndent(save));\n        }\n\n        if (stmt.trailingComments) {\n\n            if (preserveBlankLines) {\n                comment = stmt.trailingComments[0];\n                extRange = comment.extendedRange;\n                range = comment.range;\n\n                prefix = sourceCode.substring(extRange[0], range[0]);\n                count = (prefix.match(/\\n/g) || []).length;\n\n                if (count > 0) {\n                    result.push(stringRepeat('\\n', count));\n                    result.push(addIndent(generateComment(comment)));\n                } else {\n                    result.push(prefix);\n                    result.push(generateComment(comment));\n                }\n            } else {\n                tailingToStatement = !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString());\n                specialBase = stringRepeat(' ', calculateSpaces(toSourceNodeWhenNeeded([base, result, indent]).toString()));\n                for (i = 0, len = stmt.trailingComments.length; i < len; ++i) {\n                    comment = stmt.trailingComments[i];\n                    if (tailingToStatement) {\n                        // We assume target like following script\n                        //\n                        // var t = 20;  /**\n                        //               * This is comment of t\n                        //               */\n                        if (i === 0) {\n                            // first case\n                            result = [result, indent];\n                        } else {\n                            result = [result, specialBase];\n                        }\n                        result.push(generateComment(comment, specialBase));\n                    } else {\n                        result = [result, addIndent(generateComment(comment))];\n                    }\n                    if (i !== len - 1 && !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {\n                        result = [result, '\\n'];\n                    }\n                }\n            }\n        }\n\n        return result;\n    }\n\n    function generateBlankLines(start, end, result) {\n        var j, newlineCount = 0;\n\n        for (j = start; j < end; j++) {\n            if (sourceCode[j] === '\\n') {\n                newlineCount++;\n            }\n        }\n\n        for (j = 1; j < newlineCount; j++) {\n            result.push(newline);\n        }\n    }\n\n    function parenthesize(text, current, should) {\n        if (current < should) {\n            return ['(', text, ')'];\n        }\n        return text;\n    }\n\n    function generateVerbatimString(string) {\n        var i, iz, result;\n        result = string.split(/\\r\\n|\\n/);\n        for (i = 1, iz = result.length; i < iz; i++) {\n            result[i] = newline + base + result[i];\n        }\n        return result;\n    }\n\n    function generateVerbatim(expr, precedence) {\n        var verbatim, result, prec;\n        verbatim = expr[extra.verbatim];\n\n        if (typeof verbatim === 'string') {\n            result = parenthesize(generateVerbatimString(verbatim), Precedence.Sequence, precedence);\n        } else {\n            // verbatim is object\n            result = generateVerbatimString(verbatim.content);\n            prec = (verbatim.precedence != null) ? verbatim.precedence : Precedence.Sequence;\n            result = parenthesize(result, prec, precedence);\n        }\n\n        return toSourceNodeWhenNeeded(result, expr);\n    }\n\n    function CodeGenerator() {\n    }\n\n    // Helpers.\n\n    CodeGenerator.prototype.maybeBlock = function(stmt, flags) {\n        var result, noLeadingComment, that = this;\n\n        noLeadingComment = !extra.comment || !stmt.leadingComments;\n\n        if (stmt.type === Syntax.BlockStatement && noLeadingComment) {\n            return [space, this.generateStatement(stmt, flags)];\n        }\n\n        if (stmt.type === Syntax.EmptyStatement && noLeadingComment) {\n            return ';';\n        }\n\n        withIndent(function () {\n            result = [\n                newline,\n                addIndent(that.generateStatement(stmt, flags))\n            ];\n        });\n\n        return result;\n    };\n\n    CodeGenerator.prototype.maybeBlockSuffix = function (stmt, result) {\n        var ends = endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString());\n        if (stmt.type === Syntax.BlockStatement && (!extra.comment || !stmt.leadingComments) && !ends) {\n            return [result, space];\n        }\n        if (ends) {\n            return [result, base];\n        }\n        return [result, newline, base];\n    };\n\n    function generateIdentifier(node) {\n        return toSourceNodeWhenNeeded(node.name, node);\n    }\n\n    function generateAsyncPrefix(node, spaceRequired) {\n        return node.async ? 'async' + (spaceRequired ? noEmptySpace() : space) : '';\n    }\n\n    function generateStarSuffix(node) {\n        var isGenerator = node.generator && !extra.moz.starlessGenerator;\n        return isGenerator ? '*' + space : '';\n    }\n\n    function generateMethodPrefix(prop) {\n        var func = prop.value;\n        if (func.async) {\n            return generateAsyncPrefix(func, !prop.computed);\n        } else {\n            // avoid space before method name\n            return generateStarSuffix(func) ? '*' : '';\n        }\n    }\n\n    CodeGenerator.prototype.generatePattern = function (node, precedence, flags) {\n        if (node.type === Syntax.Identifier) {\n            return generateIdentifier(node);\n        }\n        return this.generateExpression(node, precedence, flags);\n    };\n\n    CodeGenerator.prototype.generateFunctionParams = function (node) {\n        var i, iz, result, hasDefault;\n\n        hasDefault = false;\n\n        if (node.type === Syntax.ArrowFunctionExpression &&\n                !node.rest && (!node.defaults || node.defaults.length === 0) &&\n                node.params.length === 1 && node.params[0].type === Syntax.Identifier) {\n            // arg => { } case\n            result = [generateAsyncPrefix(node, true), generateIdentifier(node.params[0])];\n        } else {\n            result = node.type === Syntax.ArrowFunctionExpression ? [generateAsyncPrefix(node, false)] : [];\n            result.push('(');\n            if (node.defaults) {\n                hasDefault = true;\n            }\n            for (i = 0, iz = node.params.length; i < iz; ++i) {\n                if (hasDefault && node.defaults[i]) {\n                    // Handle default values.\n                    result.push(this.generateAssignment(node.params[i], node.defaults[i], '=', Precedence.Assignment, E_TTT));\n                } else {\n                    result.push(this.generatePattern(node.params[i], Precedence.Assignment, E_TTT));\n                }\n                if (i + 1 < iz) {\n                    result.push(',' + space);\n                }\n            }\n\n            if (node.rest) {\n                if (node.params.length) {\n                    result.push(',' + space);\n                }\n                result.push('...');\n                result.push(generateIdentifier(node.rest));\n            }\n\n            result.push(')');\n        }\n\n        return result;\n    };\n\n    CodeGenerator.prototype.generateFunctionBody = function (node) {\n        var result, expr;\n\n        result = this.generateFunctionParams(node);\n\n        if (node.type === Syntax.ArrowFunctionExpression) {\n            result.push(space);\n            result.push('=>');\n        }\n\n        if (node.expression) {\n            result.push(space);\n            expr = this.generateExpression(node.body, Precedence.Assignment, E_TTT);\n            if (expr.toString().charAt(0) === '{') {\n                expr = ['(', expr, ')'];\n            }\n            result.push(expr);\n        } else {\n            result.push(this.maybeBlock(node.body, S_TTFF));\n        }\n\n        return result;\n    };\n\n    CodeGenerator.prototype.generateIterationForStatement = function (operator, stmt, flags) {\n        var result = ['for' + space + '('], that = this;\n        withIndent(function () {\n            if (stmt.left.type === Syntax.VariableDeclaration) {\n                withIndent(function () {\n                    result.push(stmt.left.kind + noEmptySpace());\n                    result.push(that.generateStatement(stmt.left.declarations[0], S_FFFF));\n                });\n            } else {\n                result.push(that.generateExpression(stmt.left, Precedence.Call, E_TTT));\n            }\n\n            result = join(result, operator);\n            result = [join(\n                result,\n                that.generateExpression(stmt.right, Precedence.Sequence, E_TTT)\n            ), ')'];\n        });\n        result.push(this.maybeBlock(stmt.body, flags));\n        return result;\n    };\n\n    CodeGenerator.prototype.generatePropertyKey = function (expr, computed, value) {\n        var result = [];\n\n        if (computed) {\n            result.push('[');\n        }\n\n        if (value.type === 'AssignmentPattern') {\n            result.push(this.AssignmentPattern(value, Precedence.Sequence, E_TTT));\n        } else {\n            result.push(this.generateExpression(expr, Precedence.Sequence, E_TTT));\n        }\n\n        if (computed) {\n            result.push(']');\n        }\n\n        return result;\n    };\n\n    CodeGenerator.prototype.generateAssignment = function (left, right, operator, precedence, flags) {\n        if (Precedence.Assignment < precedence) {\n            flags |= F_ALLOW_IN;\n        }\n\n        return parenthesize(\n            [\n                this.generateExpression(left, Precedence.Call, flags),\n                space + operator + space,\n                this.generateExpression(right, Precedence.Assignment, flags)\n            ],\n            Precedence.Assignment,\n            precedence\n        );\n    };\n\n    CodeGenerator.prototype.semicolon = function (flags) {\n        if (!semicolons && flags & F_SEMICOLON_OPT) {\n            return '';\n        }\n        return ';';\n    };\n\n    // Statements.\n\n    CodeGenerator.Statement = {\n\n        BlockStatement: function (stmt, flags) {\n            var range, content, result = ['{', newline], that = this;\n\n            withIndent(function () {\n                // handle functions without any code\n                if (stmt.body.length === 0 && preserveBlankLines) {\n                    range = stmt.range;\n                    if (range[1] - range[0] > 2) {\n                        content = sourceCode.substring(range[0] + 1, range[1] - 1);\n                        if (content[0] === '\\n') {\n                            result = ['{'];\n                        }\n                        result.push(content);\n                    }\n                }\n\n                var i, iz, fragment, bodyFlags;\n                bodyFlags = S_TFFF;\n                if (flags & F_FUNC_BODY) {\n                    bodyFlags |= F_DIRECTIVE_CTX;\n                }\n\n                for (i = 0, iz = stmt.body.length; i < iz; ++i) {\n                    if (preserveBlankLines) {\n                        // handle spaces before the first line\n                        if (i === 0) {\n                            if (stmt.body[0].leadingComments) {\n                                range = stmt.body[0].leadingComments[0].extendedRange;\n                                content = sourceCode.substring(range[0], range[1]);\n                                if (content[0] === '\\n') {\n                                    result = ['{'];\n                                }\n                            }\n                            if (!stmt.body[0].leadingComments) {\n                                generateBlankLines(stmt.range[0], stmt.body[0].range[0], result);\n                            }\n                        }\n\n                        // handle spaces between lines\n                        if (i > 0) {\n                            if (!stmt.body[i - 1].trailingComments  && !stmt.body[i].leadingComments) {\n                                generateBlankLines(stmt.body[i - 1].range[1], stmt.body[i].range[0], result);\n                            }\n                        }\n                    }\n\n                    if (i === iz - 1) {\n                        bodyFlags |= F_SEMICOLON_OPT;\n                    }\n\n                    if (stmt.body[i].leadingComments && preserveBlankLines) {\n                        fragment = that.generateStatement(stmt.body[i], bodyFlags);\n                    } else {\n                        fragment = addIndent(that.generateStatement(stmt.body[i], bodyFlags));\n                    }\n\n                    result.push(fragment);\n                    if (!endsWithLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {\n                        if (preserveBlankLines && i < iz - 1) {\n                            // don't add a new line if there are leading coments\n                            // in the next statement\n                            if (!stmt.body[i + 1].leadingComments) {\n                                result.push(newline);\n                            }\n                        } else {\n                            result.push(newline);\n                        }\n                    }\n\n                    if (preserveBlankLines) {\n                        // handle spaces after the last line\n                        if (i === iz - 1) {\n                            if (!stmt.body[i].trailingComments) {\n                                generateBlankLines(stmt.body[i].range[1], stmt.range[1], result);\n                            }\n                        }\n                    }\n                }\n            });\n\n            result.push(addIndent('}'));\n            return result;\n        },\n\n        BreakStatement: function (stmt, flags) {\n            if (stmt.label) {\n                return 'break ' + stmt.label.name + this.semicolon(flags);\n            }\n            return 'break' + this.semicolon(flags);\n        },\n\n        ContinueStatement: function (stmt, flags) {\n            if (stmt.label) {\n                return 'continue ' + stmt.label.name + this.semicolon(flags);\n            }\n            return 'continue' + this.semicolon(flags);\n        },\n\n        ClassBody: function (stmt, flags) {\n            var result = [ '{', newline], that = this;\n\n            withIndent(function (indent) {\n                var i, iz;\n\n                for (i = 0, iz = stmt.body.length; i < iz; ++i) {\n                    result.push(indent);\n                    result.push(that.generateExpression(stmt.body[i], Precedence.Sequence, E_TTT));\n                    if (i + 1 < iz) {\n                        result.push(newline);\n                    }\n                }\n            });\n\n            if (!endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {\n                result.push(newline);\n            }\n            result.push(base);\n            result.push('}');\n            return result;\n        },\n\n        ClassDeclaration: function (stmt, flags) {\n            var result, fragment;\n            result  = ['class'];\n            if (stmt.id) {\n                result = join(result, this.generateExpression(stmt.id, Precedence.Sequence, E_TTT));\n            }\n            if (stmt.superClass) {\n                fragment = join('extends', this.generateExpression(stmt.superClass, Precedence.Assignment, E_TTT));\n                result = join(result, fragment);\n            }\n            result.push(space);\n            result.push(this.generateStatement(stmt.body, S_TFFT));\n            return result;\n        },\n\n        DirectiveStatement: function (stmt, flags) {\n            if (extra.raw && stmt.raw) {\n                return stmt.raw + this.semicolon(flags);\n            }\n            return escapeDirective(stmt.directive) + this.semicolon(flags);\n        },\n\n        DoWhileStatement: function (stmt, flags) {\n            // Because `do 42 while (cond)` is Syntax Error. We need semicolon.\n            var result = join('do', this.maybeBlock(stmt.body, S_TFFF));\n            result = this.maybeBlockSuffix(stmt.body, result);\n            return join(result, [\n                'while' + space + '(',\n                this.generateExpression(stmt.test, Precedence.Sequence, E_TTT),\n                ')' + this.semicolon(flags)\n            ]);\n        },\n\n        CatchClause: function (stmt, flags) {\n            var result, that = this;\n            withIndent(function () {\n                var guard;\n\n                result = [\n                    'catch' + space + '(',\n                    that.generateExpression(stmt.param, Precedence.Sequence, E_TTT),\n                    ')'\n                ];\n\n                if (stmt.guard) {\n                    guard = that.generateExpression(stmt.guard, Precedence.Sequence, E_TTT);\n                    result.splice(2, 0, ' if ', guard);\n                }\n            });\n            result.push(this.maybeBlock(stmt.body, S_TFFF));\n            return result;\n        },\n\n        DebuggerStatement: function (stmt, flags) {\n            return 'debugger' + this.semicolon(flags);\n        },\n\n        EmptyStatement: function (stmt, flags) {\n            return ';';\n        },\n\n        ExportDefaultDeclaration: function (stmt, flags) {\n            var result = [ 'export' ], bodyFlags;\n\n            bodyFlags = (flags & F_SEMICOLON_OPT) ? S_TFFT : S_TFFF;\n\n            // export default HoistableDeclaration[Default]\n            // export default AssignmentExpression[In] ;\n            result = join(result, 'default');\n            if (isStatement(stmt.declaration)) {\n                result = join(result, this.generateStatement(stmt.declaration, bodyFlags));\n            } else {\n                result = join(result, this.generateExpression(stmt.declaration, Precedence.Assignment, E_TTT) + this.semicolon(flags));\n            }\n            return result;\n        },\n\n        ExportNamedDeclaration: function (stmt, flags) {\n            var result = [ 'export' ], bodyFlags, that = this;\n\n            bodyFlags = (flags & F_SEMICOLON_OPT) ? S_TFFT : S_TFFF;\n\n            // export VariableStatement\n            // export Declaration[Default]\n            if (stmt.declaration) {\n                return join(result, this.generateStatement(stmt.declaration, bodyFlags));\n            }\n\n            // export ExportClause[NoReference] FromClause ;\n            // export ExportClause ;\n            if (stmt.specifiers) {\n                if (stmt.specifiers.length === 0) {\n                    result = join(result, '{' + space + '}');\n                } else if (stmt.specifiers[0].type === Syntax.ExportBatchSpecifier) {\n                    result = join(result, this.generateExpression(stmt.specifiers[0], Precedence.Sequence, E_TTT));\n                } else {\n                    result = join(result, '{');\n                    withIndent(function (indent) {\n                        var i, iz;\n                        result.push(newline);\n                        for (i = 0, iz = stmt.specifiers.length; i < iz; ++i) {\n                            result.push(indent);\n                            result.push(that.generateExpression(stmt.specifiers[i], Precedence.Sequence, E_TTT));\n                            if (i + 1 < iz) {\n                                result.push(',' + newline);\n                            }\n                        }\n                    });\n                    if (!endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {\n                        result.push(newline);\n                    }\n                    result.push(base + '}');\n                }\n\n                if (stmt.source) {\n                    result = join(result, [\n                        'from' + space,\n                        // ModuleSpecifier\n                        this.generateExpression(stmt.source, Precedence.Sequence, E_TTT),\n                        this.semicolon(flags)\n                    ]);\n                } else {\n                    result.push(this.semicolon(flags));\n                }\n            }\n            return result;\n        },\n\n        ExportAllDeclaration: function (stmt, flags) {\n            // export * FromClause ;\n            return [\n                'export' + space,\n                '*' + space,\n                'from' + space,\n                // ModuleSpecifier\n                this.generateExpression(stmt.source, Precedence.Sequence, E_TTT),\n                this.semicolon(flags)\n            ];\n        },\n\n        ExpressionStatement: function (stmt, flags) {\n            var result, fragment;\n\n            function isClassPrefixed(fragment) {\n                var code;\n                if (fragment.slice(0, 5) !== 'class') {\n                    return false;\n                }\n                code = fragment.charCodeAt(5);\n                return code === 0x7B  /* '{' */ || esutils.code.isWhiteSpace(code) || esutils.code.isLineTerminator(code);\n            }\n\n            function isFunctionPrefixed(fragment) {\n                var code;\n                if (fragment.slice(0, 8) !== 'function') {\n                    return false;\n                }\n                code = fragment.charCodeAt(8);\n                return code === 0x28 /* '(' */ || esutils.code.isWhiteSpace(code) || code === 0x2A  /* '*' */ || esutils.code.isLineTerminator(code);\n            }\n\n            function isAsyncPrefixed(fragment) {\n                var code, i, iz;\n                if (fragment.slice(0, 5) !== 'async') {\n                    return false;\n                }\n                if (!esutils.code.isWhiteSpace(fragment.charCodeAt(5))) {\n                    return false;\n                }\n                for (i = 6, iz = fragment.length; i < iz; ++i) {\n                    if (!esutils.code.isWhiteSpace(fragment.charCodeAt(i))) {\n                        break;\n                    }\n                }\n                if (i === iz) {\n                    return false;\n                }\n                if (fragment.slice(i, i + 8) !== 'function') {\n                    return false;\n                }\n                code = fragment.charCodeAt(i + 8);\n                return code === 0x28 /* '(' */ || esutils.code.isWhiteSpace(code) || code === 0x2A  /* '*' */ || esutils.code.isLineTerminator(code);\n            }\n\n            result = [this.generateExpression(stmt.expression, Precedence.Sequence, E_TTT)];\n            // 12.4 '{', 'function', 'class' is not allowed in this position.\n            // wrap expression with parentheses\n            fragment = toSourceNodeWhenNeeded(result).toString();\n            if (fragment.charCodeAt(0) === 0x7B  /* '{' */ ||  // ObjectExpression\n                    isClassPrefixed(fragment) ||\n                    isFunctionPrefixed(fragment) ||\n                    isAsyncPrefixed(fragment) ||\n                    (directive && (flags & F_DIRECTIVE_CTX) && stmt.expression.type === Syntax.Literal && typeof stmt.expression.value === 'string')) {\n                result = ['(', result, ')' + this.semicolon(flags)];\n            } else {\n                result.push(this.semicolon(flags));\n            }\n            return result;\n        },\n\n        ImportDeclaration: function (stmt, flags) {\n            // ES6: 15.2.1 valid import declarations:\n            //     - import ImportClause FromClause ;\n            //     - import ModuleSpecifier ;\n            var result, cursor, that = this;\n\n            // If no ImportClause is present,\n            // this should be `import ModuleSpecifier` so skip `from`\n            // ModuleSpecifier is StringLiteral.\n            if (stmt.specifiers.length === 0) {\n                // import ModuleSpecifier ;\n                return [\n                    'import',\n                    space,\n                    // ModuleSpecifier\n                    this.generateExpression(stmt.source, Precedence.Sequence, E_TTT),\n                    this.semicolon(flags)\n                ];\n            }\n\n            // import ImportClause FromClause ;\n            result = [\n                'import'\n            ];\n            cursor = 0;\n\n            // ImportedBinding\n            if (stmt.specifiers[cursor].type === Syntax.ImportDefaultSpecifier) {\n                result = join(result, [\n                        this.generateExpression(stmt.specifiers[cursor], Precedence.Sequence, E_TTT)\n                ]);\n                ++cursor;\n            }\n\n            if (stmt.specifiers[cursor]) {\n                if (cursor !== 0) {\n                    result.push(',');\n                }\n\n                if (stmt.specifiers[cursor].type === Syntax.ImportNamespaceSpecifier) {\n                    // NameSpaceImport\n                    result = join(result, [\n                            space,\n                            this.generateExpression(stmt.specifiers[cursor], Precedence.Sequence, E_TTT)\n                    ]);\n                } else {\n                    // NamedImports\n                    result.push(space + '{');\n\n                    if ((stmt.specifiers.length - cursor) === 1) {\n                        // import { ... } from \"...\";\n                        result.push(space);\n                        result.push(this.generateExpression(stmt.specifiers[cursor], Precedence.Sequence, E_TTT));\n                        result.push(space + '}' + space);\n                    } else {\n                        // import {\n                        //    ...,\n                        //    ...,\n                        // } from \"...\";\n                        withIndent(function (indent) {\n                            var i, iz;\n                            result.push(newline);\n                            for (i = cursor, iz = stmt.specifiers.length; i < iz; ++i) {\n                                result.push(indent);\n                                result.push(that.generateExpression(stmt.specifiers[i], Precedence.Sequence, E_TTT));\n                                if (i + 1 < iz) {\n                                    result.push(',' + newline);\n                                }\n                            }\n                        });\n                        if (!endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {\n                            result.push(newline);\n                        }\n                        result.push(base + '}' + space);\n                    }\n                }\n            }\n\n            result = join(result, [\n                'from' + space,\n                // ModuleSpecifier\n                this.generateExpression(stmt.source, Precedence.Sequence, E_TTT),\n                this.semicolon(flags)\n            ]);\n            return result;\n        },\n\n        VariableDeclarator: function (stmt, flags) {\n            var itemFlags = (flags & F_ALLOW_IN) ? E_TTT : E_FTT;\n            if (stmt.init) {\n                return [\n                    this.generateExpression(stmt.id, Precedence.Assignment, itemFlags),\n                    space,\n                    '=',\n                    space,\n                    this.generateExpression(stmt.init, Precedence.Assignment, itemFlags)\n                ];\n            }\n            return this.generatePattern(stmt.id, Precedence.Assignment, itemFlags);\n        },\n\n        VariableDeclaration: function (stmt, flags) {\n            // VariableDeclarator is typed as Statement,\n            // but joined with comma (not LineTerminator).\n            // So if comment is attached to target node, we should specialize.\n            var result, i, iz, node, bodyFlags, that = this;\n\n            result = [ stmt.kind ];\n\n            bodyFlags = (flags & F_ALLOW_IN) ? S_TFFF : S_FFFF;\n\n            function block() {\n                node = stmt.declarations[0];\n                if (extra.comment && node.leadingComments) {\n                    result.push('\\n');\n                    result.push(addIndent(that.generateStatement(node, bodyFlags)));\n                } else {\n                    result.push(noEmptySpace());\n                    result.push(that.generateStatement(node, bodyFlags));\n                }\n\n                for (i = 1, iz = stmt.declarations.length; i < iz; ++i) {\n                    node = stmt.declarations[i];\n                    if (extra.comment && node.leadingComments) {\n                        result.push(',' + newline);\n                        result.push(addIndent(that.generateStatement(node, bodyFlags)));\n                    } else {\n                        result.push(',' + space);\n                        result.push(that.generateStatement(node, bodyFlags));\n                    }\n                }\n            }\n\n            if (stmt.declarations.length > 1) {\n                withIndent(block);\n            } else {\n                block();\n            }\n\n            result.push(this.semicolon(flags));\n\n            return result;\n        },\n\n        ThrowStatement: function (stmt, flags) {\n            return [join(\n                'throw',\n                this.generateExpression(stmt.argument, Precedence.Sequence, E_TTT)\n            ), this.semicolon(flags)];\n        },\n\n        TryStatement: function (stmt, flags) {\n            var result, i, iz, guardedHandlers;\n\n            result = ['try', this.maybeBlock(stmt.block, S_TFFF)];\n            result = this.maybeBlockSuffix(stmt.block, result);\n\n            if (stmt.handlers) {\n                // old interface\n                for (i = 0, iz = stmt.handlers.length; i < iz; ++i) {\n                    result = join(result, this.generateStatement(stmt.handlers[i], S_TFFF));\n                    if (stmt.finalizer || i + 1 !== iz) {\n                        result = this.maybeBlockSuffix(stmt.handlers[i].body, result);\n                    }\n                }\n            } else {\n                guardedHandlers = stmt.guardedHandlers || [];\n\n                for (i = 0, iz = guardedHandlers.length; i < iz; ++i) {\n                    result = join(result, this.generateStatement(guardedHandlers[i], S_TFFF));\n                    if (stmt.finalizer || i + 1 !== iz) {\n                        result = this.maybeBlockSuffix(guardedHandlers[i].body, result);\n                    }\n                }\n\n                // new interface\n                if (stmt.handler) {\n                    if (isArray(stmt.handler)) {\n                        for (i = 0, iz = stmt.handler.length; i < iz; ++i) {\n                            result = join(result, this.generateStatement(stmt.handler[i], S_TFFF));\n                            if (stmt.finalizer || i + 1 !== iz) {\n                                result = this.maybeBlockSuffix(stmt.handler[i].body, result);\n                            }\n                        }\n                    } else {\n                        result = join(result, this.generateStatement(stmt.handler, S_TFFF));\n                        if (stmt.finalizer) {\n                            result = this.maybeBlockSuffix(stmt.handler.body, result);\n                        }\n                    }\n                }\n            }\n            if (stmt.finalizer) {\n                result = join(result, ['finally', this.maybeBlock(stmt.finalizer, S_TFFF)]);\n            }\n            return result;\n        },\n\n        SwitchStatement: function (stmt, flags) {\n            var result, fragment, i, iz, bodyFlags, that = this;\n            withIndent(function () {\n                result = [\n                    'switch' + space + '(',\n                    that.generateExpression(stmt.discriminant, Precedence.Sequence, E_TTT),\n                    ')' + space + '{' + newline\n                ];\n            });\n            if (stmt.cases) {\n                bodyFlags = S_TFFF;\n                for (i = 0, iz = stmt.cases.length; i < iz; ++i) {\n                    if (i === iz - 1) {\n                        bodyFlags |= F_SEMICOLON_OPT;\n                    }\n                    fragment = addIndent(this.generateStatement(stmt.cases[i], bodyFlags));\n                    result.push(fragment);\n                    if (!endsWithLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {\n                        result.push(newline);\n                    }\n                }\n            }\n            result.push(addIndent('}'));\n            return result;\n        },\n\n        SwitchCase: function (stmt, flags) {\n            var result, fragment, i, iz, bodyFlags, that = this;\n            withIndent(function () {\n                if (stmt.test) {\n                    result = [\n                        join('case', that.generateExpression(stmt.test, Precedence.Sequence, E_TTT)),\n                        ':'\n                    ];\n                } else {\n                    result = ['default:'];\n                }\n\n                i = 0;\n                iz = stmt.consequent.length;\n                if (iz && stmt.consequent[0].type === Syntax.BlockStatement) {\n                    fragment = that.maybeBlock(stmt.consequent[0], S_TFFF);\n                    result.push(fragment);\n                    i = 1;\n                }\n\n                if (i !== iz && !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {\n                    result.push(newline);\n                }\n\n                bodyFlags = S_TFFF;\n                for (; i < iz; ++i) {\n                    if (i === iz - 1 && flags & F_SEMICOLON_OPT) {\n                        bodyFlags |= F_SEMICOLON_OPT;\n                    }\n                    fragment = addIndent(that.generateStatement(stmt.consequent[i], bodyFlags));\n                    result.push(fragment);\n                    if (i + 1 !== iz && !endsWithLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {\n                        result.push(newline);\n                    }\n                }\n            });\n            return result;\n        },\n\n        IfStatement: function (stmt, flags) {\n            var result, bodyFlags, semicolonOptional, that = this;\n            withIndent(function () {\n                result = [\n                    'if' + space + '(',\n                    that.generateExpression(stmt.test, Precedence.Sequence, E_TTT),\n                    ')'\n                ];\n            });\n            semicolonOptional = flags & F_SEMICOLON_OPT;\n            bodyFlags = S_TFFF;\n            if (semicolonOptional) {\n                bodyFlags |= F_SEMICOLON_OPT;\n            }\n            if (stmt.alternate) {\n                result.push(this.maybeBlock(stmt.consequent, S_TFFF));\n                result = this.maybeBlockSuffix(stmt.consequent, result);\n                if (stmt.alternate.type === Syntax.IfStatement) {\n                    result = join(result, ['else ', this.generateStatement(stmt.alternate, bodyFlags)]);\n                } else {\n                    result = join(result, join('else', this.maybeBlock(stmt.alternate, bodyFlags)));\n                }\n            } else {\n                result.push(this.maybeBlock(stmt.consequent, bodyFlags));\n            }\n            return result;\n        },\n\n        ForStatement: function (stmt, flags) {\n            var result, that = this;\n            withIndent(function () {\n                result = ['for' + space + '('];\n                if (stmt.init) {\n                    if (stmt.init.type === Syntax.VariableDeclaration) {\n                        result.push(that.generateStatement(stmt.init, S_FFFF));\n                    } else {\n                        // F_ALLOW_IN becomes false.\n                        result.push(that.generateExpression(stmt.init, Precedence.Sequence, E_FTT));\n                        result.push(';');\n                    }\n                } else {\n                    result.push(';');\n                }\n\n                if (stmt.test) {\n                    result.push(space);\n                    result.push(that.generateExpression(stmt.test, Precedence.Sequence, E_TTT));\n                    result.push(';');\n                } else {\n                    result.push(';');\n                }\n\n                if (stmt.update) {\n                    result.push(space);\n                    result.push(that.generateExpression(stmt.update, Precedence.Sequence, E_TTT));\n                    result.push(')');\n                } else {\n                    result.push(')');\n                }\n            });\n\n            result.push(this.maybeBlock(stmt.body, flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF));\n            return result;\n        },\n\n        ForInStatement: function (stmt, flags) {\n            return this.generateIterationForStatement('in', stmt, flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF);\n        },\n\n        ForOfStatement: function (stmt, flags) {\n            return this.generateIterationForStatement('of', stmt, flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF);\n        },\n\n        LabeledStatement: function (stmt, flags) {\n            return [stmt.label.name + ':', this.maybeBlock(stmt.body, flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF)];\n        },\n\n        Program: function (stmt, flags) {\n            var result, fragment, i, iz, bodyFlags;\n            iz = stmt.body.length;\n            result = [safeConcatenation && iz > 0 ? '\\n' : ''];\n            bodyFlags = S_TFTF;\n            for (i = 0; i < iz; ++i) {\n                if (!safeConcatenation && i === iz - 1) {\n                    bodyFlags |= F_SEMICOLON_OPT;\n                }\n\n                if (preserveBlankLines) {\n                    // handle spaces before the first line\n                    if (i === 0) {\n                        if (!stmt.body[0].leadingComments) {\n                            generateBlankLines(stmt.range[0], stmt.body[i].range[0], result);\n                        }\n                    }\n\n                    // handle spaces between lines\n                    if (i > 0) {\n                        if (!stmt.body[i - 1].trailingComments && !stmt.body[i].leadingComments) {\n                            generateBlankLines(stmt.body[i - 1].range[1], stmt.body[i].range[0], result);\n                        }\n                    }\n                }\n\n                fragment = addIndent(this.generateStatement(stmt.body[i], bodyFlags));\n                result.push(fragment);\n                if (i + 1 < iz && !endsWithLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {\n                    if (preserveBlankLines) {\n                        if (!stmt.body[i + 1].leadingComments) {\n                            result.push(newline);\n                        }\n                    } else {\n                        result.push(newline);\n                    }\n                }\n\n                if (preserveBlankLines) {\n                    // handle spaces after the last line\n                    if (i === iz - 1) {\n                        if (!stmt.body[i].trailingComments) {\n                            generateBlankLines(stmt.body[i].range[1], stmt.range[1], result);\n                        }\n                    }\n                }\n            }\n            return result;\n        },\n\n        FunctionDeclaration: function (stmt, flags) {\n            return [\n                generateAsyncPrefix(stmt, true),\n                'function',\n                generateStarSuffix(stmt) || noEmptySpace(),\n                stmt.id ? generateIdentifier(stmt.id) : '',\n                this.generateFunctionBody(stmt)\n            ];\n        },\n\n        ReturnStatement: function (stmt, flags) {\n            if (stmt.argument) {\n                return [join(\n                    'return',\n                    this.generateExpression(stmt.argument, Precedence.Sequence, E_TTT)\n                ), this.semicolon(flags)];\n            }\n            return ['return' + this.semicolon(flags)];\n        },\n\n        WhileStatement: function (stmt, flags) {\n            var result, that = this;\n            withIndent(function () {\n                result = [\n                    'while' + space + '(',\n                    that.generateExpression(stmt.test, Precedence.Sequence, E_TTT),\n                    ')'\n                ];\n            });\n            result.push(this.maybeBlock(stmt.body, flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF));\n            return result;\n        },\n\n        WithStatement: function (stmt, flags) {\n            var result, that = this;\n            withIndent(function () {\n                result = [\n                    'with' + space + '(',\n                    that.generateExpression(stmt.object, Precedence.Sequence, E_TTT),\n                    ')'\n                ];\n            });\n            result.push(this.maybeBlock(stmt.body, flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF));\n            return result;\n        }\n\n    };\n\n    merge(CodeGenerator.prototype, CodeGenerator.Statement);\n\n    // Expressions.\n\n    CodeGenerator.Expression = {\n\n        SequenceExpression: function (expr, precedence, flags) {\n            var result, i, iz;\n            if (Precedence.Sequence < precedence) {\n                flags |= F_ALLOW_IN;\n            }\n            result = [];\n            for (i = 0, iz = expr.expressions.length; i < iz; ++i) {\n                result.push(this.generateExpression(expr.expressions[i], Precedence.Assignment, flags));\n                if (i + 1 < iz) {\n                    result.push(',' + space);\n                }\n            }\n            return parenthesize(result, Precedence.Sequence, precedence);\n        },\n\n        AssignmentExpression: function (expr, precedence, flags) {\n            return this.generateAssignment(expr.left, expr.right, expr.operator, precedence, flags);\n        },\n\n        ArrowFunctionExpression: function (expr, precedence, flags) {\n            return parenthesize(this.generateFunctionBody(expr), Precedence.ArrowFunction, precedence);\n        },\n\n        ConditionalExpression: function (expr, precedence, flags) {\n            if (Precedence.Conditional < precedence) {\n                flags |= F_ALLOW_IN;\n            }\n            return parenthesize(\n                [\n                    this.generateExpression(expr.test, Precedence.LogicalOR, flags),\n                    space + '?' + space,\n                    this.generateExpression(expr.consequent, Precedence.Assignment, flags),\n                    space + ':' + space,\n                    this.generateExpression(expr.alternate, Precedence.Assignment, flags)\n                ],\n                Precedence.Conditional,\n                precedence\n            );\n        },\n\n        LogicalExpression: function (expr, precedence, flags) {\n            return this.BinaryExpression(expr, precedence, flags);\n        },\n\n        BinaryExpression: function (expr, precedence, flags) {\n            var result, currentPrecedence, fragment, leftSource;\n            currentPrecedence = BinaryPrecedence[expr.operator];\n\n            if (currentPrecedence < precedence) {\n                flags |= F_ALLOW_IN;\n            }\n\n            fragment = this.generateExpression(expr.left, currentPrecedence, flags);\n\n            leftSource = fragment.toString();\n\n            if (leftSource.charCodeAt(leftSource.length - 1) === 0x2F /* / */ && esutils.code.isIdentifierPartES5(expr.operator.charCodeAt(0))) {\n                result = [fragment, noEmptySpace(), expr.operator];\n            } else {\n                result = join(fragment, expr.operator);\n            }\n\n            fragment = this.generateExpression(expr.right, currentPrecedence + 1, flags);\n\n            if (expr.operator === '/' && fragment.toString().charAt(0) === '/' ||\n            expr.operator.slice(-1) === '<' && fragment.toString().slice(0, 3) === '!--') {\n                // If '/' concats with '/' or `<` concats with `!--`, it is interpreted as comment start\n                result.push(noEmptySpace());\n                result.push(fragment);\n            } else {\n                result = join(result, fragment);\n            }\n\n            if (expr.operator === 'in' && !(flags & F_ALLOW_IN)) {\n                return ['(', result, ')'];\n            }\n            return parenthesize(result, currentPrecedence, precedence);\n        },\n\n        CallExpression: function (expr, precedence, flags) {\n            var result, i, iz;\n            // F_ALLOW_UNPARATH_NEW becomes false.\n            result = [this.generateExpression(expr.callee, Precedence.Call, E_TTF)];\n            result.push('(');\n            for (i = 0, iz = expr['arguments'].length; i < iz; ++i) {\n                result.push(this.generateExpression(expr['arguments'][i], Precedence.Assignment, E_TTT));\n                if (i + 1 < iz) {\n                    result.push(',' + space);\n                }\n            }\n            result.push(')');\n\n            if (!(flags & F_ALLOW_CALL)) {\n                return ['(', result, ')'];\n            }\n            return parenthesize(result, Precedence.Call, precedence);\n        },\n\n        NewExpression: function (expr, precedence, flags) {\n            var result, length, i, iz, itemFlags;\n            length = expr['arguments'].length;\n\n            // F_ALLOW_CALL becomes false.\n            // F_ALLOW_UNPARATH_NEW may become false.\n            itemFlags = (flags & F_ALLOW_UNPARATH_NEW && !parentheses && length === 0) ? E_TFT : E_TFF;\n\n            result = join(\n                'new',\n                this.generateExpression(expr.callee, Precedence.New, itemFlags)\n            );\n\n            if (!(flags & F_ALLOW_UNPARATH_NEW) || parentheses || length > 0) {\n                result.push('(');\n                for (i = 0, iz = length; i < iz; ++i) {\n                    result.push(this.generateExpression(expr['arguments'][i], Precedence.Assignment, E_TTT));\n                    if (i + 1 < iz) {\n                        result.push(',' + space);\n                    }\n                }\n                result.push(')');\n            }\n\n            return parenthesize(result, Precedence.New, precedence);\n        },\n\n        MemberExpression: function (expr, precedence, flags) {\n            var result, fragment;\n\n            // F_ALLOW_UNPARATH_NEW becomes false.\n            result = [this.generateExpression(expr.object, Precedence.Call, (flags & F_ALLOW_CALL) ? E_TTF : E_TFF)];\n\n            if (expr.computed) {\n                result.push('[');\n                result.push(this.generateExpression(expr.property, Precedence.Sequence, flags & F_ALLOW_CALL ? E_TTT : E_TFT));\n                result.push(']');\n            } else {\n                if (expr.object.type === Syntax.Literal && typeof expr.object.value === 'number') {\n                    fragment = toSourceNodeWhenNeeded(result).toString();\n                    // When the following conditions are all true,\n                    //   1. No floating point\n                    //   2. Don't have exponents\n                    //   3. The last character is a decimal digit\n                    //   4. Not hexadecimal OR octal number literal\n                    // we should add a floating point.\n                    if (\n                            fragment.indexOf('.') < 0 &&\n                            !/[eExX]/.test(fragment) &&\n                            esutils.code.isDecimalDigit(fragment.charCodeAt(fragment.length - 1)) &&\n                            !(fragment.length >= 2 && fragment.charCodeAt(0) === 48)  // '0'\n                            ) {\n                        result.push(' ');\n                    }\n                }\n                result.push('.');\n                result.push(generateIdentifier(expr.property));\n            }\n\n            return parenthesize(result, Precedence.Member, precedence);\n        },\n\n        MetaProperty: function (expr, precedence, flags) {\n            var result;\n            result = [];\n            result.push(expr.meta);\n            result.push('.');\n            result.push(expr.property);\n            return parenthesize(result, Precedence.Member, precedence);\n        },\n\n        UnaryExpression: function (expr, precedence, flags) {\n            var result, fragment, rightCharCode, leftSource, leftCharCode;\n            fragment = this.generateExpression(expr.argument, Precedence.Unary, E_TTT);\n\n            if (space === '') {\n                result = join(expr.operator, fragment);\n            } else {\n                result = [expr.operator];\n                if (expr.operator.length > 2) {\n                    // delete, void, typeof\n                    // get `typeof []`, not `typeof[]`\n                    result = join(result, fragment);\n                } else {\n                    // Prevent inserting spaces between operator and argument if it is unnecessary\n                    // like, `!cond`\n                    leftSource = toSourceNodeWhenNeeded(result).toString();\n                    leftCharCode = leftSource.charCodeAt(leftSource.length - 1);\n                    rightCharCode = fragment.toString().charCodeAt(0);\n\n                    if (((leftCharCode === 0x2B  /* + */ || leftCharCode === 0x2D  /* - */) && leftCharCode === rightCharCode) ||\n                            (esutils.code.isIdentifierPartES5(leftCharCode) && esutils.code.isIdentifierPartES5(rightCharCode))) {\n                        result.push(noEmptySpace());\n                        result.push(fragment);\n                    } else {\n                        result.push(fragment);\n                    }\n                }\n            }\n            return parenthesize(result, Precedence.Unary, precedence);\n        },\n\n        YieldExpression: function (expr, precedence, flags) {\n            var result;\n            if (expr.delegate) {\n                result = 'yield*';\n            } else {\n                result = 'yield';\n            }\n            if (expr.argument) {\n                result = join(\n                    result,\n                    this.generateExpression(expr.argument, Precedence.Yield, E_TTT)\n                );\n            }\n            return parenthesize(result, Precedence.Yield, precedence);\n        },\n\n        AwaitExpression: function (expr, precedence, flags) {\n            var result = join(\n                expr.all ? 'await*' : 'await',\n                this.generateExpression(expr.argument, Precedence.Await, E_TTT)\n            );\n            return parenthesize(result, Precedence.Await, precedence);\n        },\n\n        UpdateExpression: function (expr, precedence, flags) {\n            if (expr.prefix) {\n                return parenthesize(\n                    [\n                        expr.operator,\n                        this.generateExpression(expr.argument, Precedence.Unary, E_TTT)\n                    ],\n                    Precedence.Unary,\n                    precedence\n                );\n            }\n            return parenthesize(\n                [\n                    this.generateExpression(expr.argument, Precedence.Postfix, E_TTT),\n                    expr.operator\n                ],\n                Precedence.Postfix,\n                precedence\n            );\n        },\n\n        FunctionExpression: function (expr, precedence, flags) {\n            var result = [\n                generateAsyncPrefix(expr, true),\n                'function'\n            ];\n            if (expr.id) {\n                result.push(generateStarSuffix(expr) || noEmptySpace());\n                result.push(generateIdentifier(expr.id));\n            } else {\n                result.push(generateStarSuffix(expr) || space);\n            }\n            result.push(this.generateFunctionBody(expr));\n            return result;\n        },\n\n        ArrayPattern: function (expr, precedence, flags) {\n            return this.ArrayExpression(expr, precedence, flags, true);\n        },\n\n        ArrayExpression: function (expr, precedence, flags, isPattern) {\n            var result, multiline, that = this;\n            if (!expr.elements.length) {\n                return '[]';\n            }\n            multiline = isPattern ? false : expr.elements.length > 1;\n            result = ['[', multiline ? newline : ''];\n            withIndent(function (indent) {\n                var i, iz;\n                for (i = 0, iz = expr.elements.length; i < iz; ++i) {\n                    if (!expr.elements[i]) {\n                        if (multiline) {\n                            result.push(indent);\n                        }\n                        if (i + 1 === iz) {\n                            result.push(',');\n                        }\n                    } else {\n                        result.push(multiline ? indent : '');\n                        result.push(that.generateExpression(expr.elements[i], Precedence.Assignment, E_TTT));\n                    }\n                    if (i + 1 < iz) {\n                        result.push(',' + (multiline ? newline : space));\n                    }\n                }\n            });\n            if (multiline && !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {\n                result.push(newline);\n            }\n            result.push(multiline ? base : '');\n            result.push(']');\n            return result;\n        },\n\n        RestElement: function(expr, precedence, flags) {\n            return '...' + this.generatePattern(expr.argument);\n        },\n\n        ClassExpression: function (expr, precedence, flags) {\n            var result, fragment;\n            result = ['class'];\n            if (expr.id) {\n                result = join(result, this.generateExpression(expr.id, Precedence.Sequence, E_TTT));\n            }\n            if (expr.superClass) {\n                fragment = join('extends', this.generateExpression(expr.superClass, Precedence.Assignment, E_TTT));\n                result = join(result, fragment);\n            }\n            result.push(space);\n            result.push(this.generateStatement(expr.body, S_TFFT));\n            return result;\n        },\n\n        MethodDefinition: function (expr, precedence, flags) {\n            var result, fragment;\n            if (expr['static']) {\n                result = ['static' + space];\n            } else {\n                result = [];\n            }\n            if (expr.kind === 'get' || expr.kind === 'set') {\n                fragment = [\n                    join(expr.kind, this.generatePropertyKey(expr.key, expr.computed, expr.value)),\n                    this.generateFunctionBody(expr.value)\n                ];\n            } else {\n                fragment = [\n                    generateMethodPrefix(expr),\n                    this.generatePropertyKey(expr.key, expr.computed, expr.value),\n                    this.generateFunctionBody(expr.value)\n                ];\n            }\n            return join(result, fragment);\n        },\n\n        Property: function (expr, precedence, flags) {\n            if (expr.kind === 'get' || expr.kind === 'set') {\n                return [\n                    expr.kind, noEmptySpace(),\n                    this.generatePropertyKey(expr.key, expr.computed, expr.value),\n                    this.generateFunctionBody(expr.value)\n                ];\n            }\n\n            if (expr.shorthand) {\n                return this.generatePropertyKey(expr.key, expr.computed, expr.value);\n            }\n\n            if (expr.method) {\n                return [\n                    generateMethodPrefix(expr),\n                    this.generatePropertyKey(expr.key, expr.computed, expr.value),\n                    this.generateFunctionBody(expr.value)\n                ];\n            }\n\n            return [\n                this.generatePropertyKey(expr.key, expr.computed, expr.value),\n                ':' + space,\n                this.generateExpression(expr.value, Precedence.Assignment, E_TTT)\n            ];\n        },\n\n        ObjectExpression: function (expr, precedence, flags) {\n            var multiline, result, fragment, that = this;\n\n            if (!expr.properties.length) {\n                return '{}';\n            }\n            multiline = expr.properties.length > 1;\n\n            withIndent(function () {\n                fragment = that.generateExpression(expr.properties[0], Precedence.Sequence, E_TTT);\n            });\n\n            if (!multiline) {\n                // issues 4\n                // Do not transform from\n                //   dejavu.Class.declare({\n                //       method2: function () {}\n                //   });\n                // to\n                //   dejavu.Class.declare({method2: function () {\n                //       }});\n                if (!hasLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {\n                    return [ '{', space, fragment, space, '}' ];\n                }\n            }\n\n            withIndent(function (indent) {\n                var i, iz;\n                result = [ '{', newline, indent, fragment ];\n\n                if (multiline) {\n                    result.push(',' + newline);\n                    for (i = 1, iz = expr.properties.length; i < iz; ++i) {\n                        result.push(indent);\n                        result.push(that.generateExpression(expr.properties[i], Precedence.Sequence, E_TTT));\n                        if (i + 1 < iz) {\n                            result.push(',' + newline);\n                        }\n                    }\n                }\n            });\n\n            if (!endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {\n                result.push(newline);\n            }\n            result.push(base);\n            result.push('}');\n            return result;\n        },\n\n        AssignmentPattern: function(expr, precedence, flags) {\n            return this.generateAssignment(expr.left, expr.right, '=', precedence, flags);\n        },\n\n        ObjectPattern: function (expr, precedence, flags) {\n            var result, i, iz, multiline, property, that = this;\n            if (!expr.properties.length) {\n                return '{}';\n            }\n\n            multiline = false;\n            if (expr.properties.length === 1) {\n                property = expr.properties[0];\n                if (property.value.type !== Syntax.Identifier) {\n                    multiline = true;\n                }\n            } else {\n                for (i = 0, iz = expr.properties.length; i < iz; ++i) {\n                    property = expr.properties[i];\n                    if (!property.shorthand) {\n                        multiline = true;\n                        break;\n                    }\n                }\n            }\n            result = ['{', multiline ? newline : '' ];\n\n            withIndent(function (indent) {\n                var i, iz;\n                for (i = 0, iz = expr.properties.length; i < iz; ++i) {\n                    result.push(multiline ? indent : '');\n                    result.push(that.generateExpression(expr.properties[i], Precedence.Sequence, E_TTT));\n                    if (i + 1 < iz) {\n                        result.push(',' + (multiline ? newline : space));\n                    }\n                }\n            });\n\n            if (multiline && !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {\n                result.push(newline);\n            }\n            result.push(multiline ? base : '');\n            result.push('}');\n            return result;\n        },\n\n        ThisExpression: function (expr, precedence, flags) {\n            return 'this';\n        },\n\n        Super: function (expr, precedence, flags) {\n            return 'super';\n        },\n\n        Identifier: function (expr, precedence, flags) {\n            return generateIdentifier(expr);\n        },\n\n        ImportDefaultSpecifier: function (expr, precedence, flags) {\n            return generateIdentifier(expr.id || expr.local);\n        },\n\n        ImportNamespaceSpecifier: function (expr, precedence, flags) {\n            var result = ['*'];\n            var id = expr.id || expr.local;\n            if (id) {\n                result.push(space + 'as' + noEmptySpace() + generateIdentifier(id));\n            }\n            return result;\n        },\n\n        ImportSpecifier: function (expr, precedence, flags) {\n            var imported = expr.imported;\n            var result = [ imported.name ];\n            var local = expr.local;\n            if (local && local.name !== imported.name) {\n                result.push(noEmptySpace() + 'as' + noEmptySpace() + generateIdentifier(local));\n            }\n            return result;\n        },\n\n        ExportSpecifier: function (expr, precedence, flags) {\n            var local = expr.local;\n            var result = [ local.name ];\n            var exported = expr.exported;\n            if (exported && exported.name !== local.name) {\n                result.push(noEmptySpace() + 'as' + noEmptySpace() + generateIdentifier(exported));\n            }\n            return result;\n        },\n\n        Literal: function (expr, precedence, flags) {\n            var raw;\n            if (expr.hasOwnProperty('raw') && parse && extra.raw) {\n                try {\n                    raw = parse(expr.raw).body[0].expression;\n                    if (raw.type === Syntax.Literal) {\n                        if (raw.value === expr.value) {\n                            return expr.raw;\n                        }\n                    }\n                } catch (e) {\n                    // not use raw property\n                }\n            }\n\n            if (expr.value === null) {\n                return 'null';\n            }\n\n            if (typeof expr.value === 'string') {\n                return escapeString(expr.value);\n            }\n\n            if (typeof expr.value === 'number') {\n                return generateNumber(expr.value);\n            }\n\n            if (typeof expr.value === 'boolean') {\n                return expr.value ? 'true' : 'false';\n            }\n\n            if (expr.regex) {\n              return '/' + expr.regex.pattern + '/' + expr.regex.flags;\n            }\n            return generateRegExp(expr.value);\n        },\n\n        GeneratorExpression: function (expr, precedence, flags) {\n            return this.ComprehensionExpression(expr, precedence, flags);\n        },\n\n        ComprehensionExpression: function (expr, precedence, flags) {\n            // GeneratorExpression should be parenthesized with (...), ComprehensionExpression with [...]\n            // Due to https://bugzilla.mozilla.org/show_bug.cgi?id=883468 position of expr.body can differ in Spidermonkey and ES6\n\n            var result, i, iz, fragment, that = this;\n            result = (expr.type === Syntax.GeneratorExpression) ? ['('] : ['['];\n\n            if (extra.moz.comprehensionExpressionStartsWithAssignment) {\n                fragment = this.generateExpression(expr.body, Precedence.Assignment, E_TTT);\n                result.push(fragment);\n            }\n\n            if (expr.blocks) {\n                withIndent(function () {\n                    for (i = 0, iz = expr.blocks.length; i < iz; ++i) {\n                        fragment = that.generateExpression(expr.blocks[i], Precedence.Sequence, E_TTT);\n                        if (i > 0 || extra.moz.comprehensionExpressionStartsWithAssignment) {\n                            result = join(result, fragment);\n                        } else {\n                            result.push(fragment);\n                        }\n                    }\n                });\n            }\n\n            if (expr.filter) {\n                result = join(result, 'if' + space);\n                fragment = this.generateExpression(expr.filter, Precedence.Sequence, E_TTT);\n                result = join(result, [ '(', fragment, ')' ]);\n            }\n\n            if (!extra.moz.comprehensionExpressionStartsWithAssignment) {\n                fragment = this.generateExpression(expr.body, Precedence.Assignment, E_TTT);\n\n                result = join(result, fragment);\n            }\n\n            result.push((expr.type === Syntax.GeneratorExpression) ? ')' : ']');\n            return result;\n        },\n\n        ComprehensionBlock: function (expr, precedence, flags) {\n            var fragment;\n            if (expr.left.type === Syntax.VariableDeclaration) {\n                fragment = [\n                    expr.left.kind, noEmptySpace(),\n                    this.generateStatement(expr.left.declarations[0], S_FFFF)\n                ];\n            } else {\n                fragment = this.generateExpression(expr.left, Precedence.Call, E_TTT);\n            }\n\n            fragment = join(fragment, expr.of ? 'of' : 'in');\n            fragment = join(fragment, this.generateExpression(expr.right, Precedence.Sequence, E_TTT));\n\n            return [ 'for' + space + '(', fragment, ')' ];\n        },\n\n        SpreadElement: function (expr, precedence, flags) {\n            return [\n                '...',\n                this.generateExpression(expr.argument, Precedence.Assignment, E_TTT)\n            ];\n        },\n\n        TaggedTemplateExpression: function (expr, precedence, flags) {\n            var itemFlags = E_TTF;\n            if (!(flags & F_ALLOW_CALL)) {\n                itemFlags = E_TFF;\n            }\n            var result = [\n                this.generateExpression(expr.tag, Precedence.Call, itemFlags),\n                this.generateExpression(expr.quasi, Precedence.Primary, E_FFT)\n            ];\n            return parenthesize(result, Precedence.TaggedTemplate, precedence);\n        },\n\n        TemplateElement: function (expr, precedence, flags) {\n            // Don't use \"cooked\". Since tagged template can use raw template\n            // representation. So if we do so, it breaks the script semantics.\n            return expr.value.raw;\n        },\n\n        TemplateLiteral: function (expr, precedence, flags) {\n            var result, i, iz;\n            result = [ '`' ];\n            for (i = 0, iz = expr.quasis.length; i < iz; ++i) {\n                result.push(this.generateExpression(expr.quasis[i], Precedence.Primary, E_TTT));\n                if (i + 1 < iz) {\n                    result.push('${' + space);\n                    result.push(this.generateExpression(expr.expressions[i], Precedence.Sequence, E_TTT));\n                    result.push(space + '}');\n                }\n            }\n            result.push('`');\n            return result;\n        },\n\n        ModuleSpecifier: function (expr, precedence, flags) {\n            return this.Literal(expr, precedence, flags);\n        }\n\n    };\n\n    merge(CodeGenerator.prototype, CodeGenerator.Expression);\n\n    CodeGenerator.prototype.generateExpression = function (expr, precedence, flags) {\n        var result, type;\n\n        type = expr.type || Syntax.Property;\n\n        if (extra.verbatim && expr.hasOwnProperty(extra.verbatim)) {\n            return generateVerbatim(expr, precedence);\n        }\n\n        result = this[type](expr, precedence, flags);\n\n\n        if (extra.comment) {\n            result = addComments(expr, result);\n        }\n        return toSourceNodeWhenNeeded(result, expr);\n    };\n\n    CodeGenerator.prototype.generateStatement = function (stmt, flags) {\n        var result,\n            fragment;\n\n        result = this[stmt.type](stmt, flags);\n\n        // Attach comments\n\n        if (extra.comment) {\n            result = addComments(stmt, result);\n        }\n\n        fragment = toSourceNodeWhenNeeded(result).toString();\n        if (stmt.type === Syntax.Program && !safeConcatenation && newline === '' &&  fragment.charAt(fragment.length - 1) === '\\n') {\n            result = sourceMap ? toSourceNodeWhenNeeded(result).replaceRight(/\\s+$/, '') : fragment.replace(/\\s+$/, '');\n        }\n\n        return toSourceNodeWhenNeeded(result, stmt);\n    };\n\n    function generateInternal(node) {\n        var codegen;\n\n        codegen = new CodeGenerator();\n        if (isStatement(node)) {\n            return codegen.generateStatement(node, S_TFFF);\n        }\n\n        if (isExpression(node)) {\n            return codegen.generateExpression(node, Precedence.Sequence, E_TTT);\n        }\n\n        throw new Error('Unknown node type: ' + node.type);\n    }\n\n    function generate(node, options) {\n        var defaultOptions = getDefaultOptions(), result, pair;\n\n        if (options != null) {\n            // Obsolete options\n            //\n            //   `options.indent`\n            //   `options.base`\n            //\n            // Instead of them, we can use `option.format.indent`.\n            if (typeof options.indent === 'string') {\n                defaultOptions.format.indent.style = options.indent;\n            }\n            if (typeof options.base === 'number') {\n                defaultOptions.format.indent.base = options.base;\n            }\n            options = updateDeeply(defaultOptions, options);\n            indent = options.format.indent.style;\n            if (typeof options.base === 'string') {\n                base = options.base;\n            } else {\n                base = stringRepeat(indent, options.format.indent.base);\n            }\n        } else {\n            options = defaultOptions;\n            indent = options.format.indent.style;\n            base = stringRepeat(indent, options.format.indent.base);\n        }\n        json = options.format.json;\n        renumber = options.format.renumber;\n        hexadecimal = json ? false : options.format.hexadecimal;\n        quotes = json ? 'double' : options.format.quotes;\n        escapeless = options.format.escapeless;\n        newline = options.format.newline;\n        space = options.format.space;\n        if (options.format.compact) {\n            newline = space = indent = base = '';\n        }\n        parentheses = options.format.parentheses;\n        semicolons = options.format.semicolons;\n        safeConcatenation = options.format.safeConcatenation;\n        directive = options.directive;\n        parse = json ? null : options.parse;\n        sourceMap = options.sourceMap;\n        sourceCode = options.sourceCode;\n        preserveBlankLines = options.format.preserveBlankLines && sourceCode !== null;\n        extra = options;\n\n        if (sourceMap) {\n            if (!exports.browser) {\n                // We assume environment is node.js\n                // And prevent from including source-map by browserify\n                SourceNode = require('source-map').SourceNode;\n            } else {\n                SourceNode = global.sourceMap.SourceNode;\n            }\n        }\n\n        result = generateInternal(node);\n\n        if (!sourceMap) {\n            pair = {code: result.toString(), map: null};\n            return options.sourceMapWithCode ? pair : pair.code;\n        }\n\n\n        pair = result.toStringWithSourceMap({\n            file: options.file,\n            sourceRoot: options.sourceMapRoot\n        });\n\n        if (options.sourceContent) {\n            pair.map.setSourceContent(options.sourceMap,\n                                      options.sourceContent);\n        }\n\n        if (options.sourceMapWithCode) {\n            return pair;\n        }\n\n        return pair.map.toString();\n    }\n\n    FORMAT_MINIFY = {\n        indent: {\n            style: '',\n            base: 0\n        },\n        renumber: true,\n        hexadecimal: true,\n        quotes: 'auto',\n        escapeless: true,\n        compact: true,\n        parentheses: false,\n        semicolons: false\n    };\n\n    FORMAT_DEFAULTS = getDefaultOptions().format;\n\n    exports.version = require('./package.json').version;\n    exports.generate = generate;\n    exports.attachComments = estraverse.attachComments;\n    exports.Precedence = updateDeeply({}, Precedence);\n    exports.browser = false;\n    exports.FORMAT_MINIFY = FORMAT_MINIFY;\n    exports.FORMAT_DEFAULTS = FORMAT_DEFAULTS;\n}());\n/* vim: set sw=4 ts=4 et tw=80 : */\n","map":{"mappings":[{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":68,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":69,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":70,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":71,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":72,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":73,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":74,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":75,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":76,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":77,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":78,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":79,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":80,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":81,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":82,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":83,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":84,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":85,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":86,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":87,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":88,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":89,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":90,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":91,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":92,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":93,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":94,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":95,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":96,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":97,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":98,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":99,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":100,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":101,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":102,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":103,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":104,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":105,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":106,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":107,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":108,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":109,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":110,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":111,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":112,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":113,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":114,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":115,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":116,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":117,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":118,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":119,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":120,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":121,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":122,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":123,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":124,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":125,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":126,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":127,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":128,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":129,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":130,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":131,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":132,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":133,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":134,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":135,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":136,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":137,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":138,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":139,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":140,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":141,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":142,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":143,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":144,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":145,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":146,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":147,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":148,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":149,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":150,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":151,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":152,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":153,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":154,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":155,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":156,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":157,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":158,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":159,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":160,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":161,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":162,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":163,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":164,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":165,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":166,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":167,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":168,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":169,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":170,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":171,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":172,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":173,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":174,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":175,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":176,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":177,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":178,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":179,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":180,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":181,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":182,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":183,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":184,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":185,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":186,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":187,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":188,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":189,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":190,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":191,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":192,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":193,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":194,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":195,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":196,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":197,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":198,"column":0},"generated":{"line":199,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":199,"column":0},"generated":{"line":200,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":200,"column":0},"generated":{"line":201,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":201,"column":0},"generated":{"line":202,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":202,"column":0},"generated":{"line":203,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":203,"column":0},"generated":{"line":204,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":204,"column":0},"generated":{"line":205,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":205,"column":0},"generated":{"line":206,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":206,"column":0},"generated":{"line":207,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":207,"column":0},"generated":{"line":208,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":208,"column":0},"generated":{"line":209,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":209,"column":0},"generated":{"line":210,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":210,"column":0},"generated":{"line":211,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":211,"column":0},"generated":{"line":212,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":212,"column":0},"generated":{"line":213,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":213,"column":0},"generated":{"line":214,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":214,"column":0},"generated":{"line":215,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":215,"column":0},"generated":{"line":216,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":216,"column":0},"generated":{"line":217,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":217,"column":0},"generated":{"line":218,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":218,"column":0},"generated":{"line":219,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":219,"column":0},"generated":{"line":220,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":220,"column":0},"generated":{"line":221,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":221,"column":0},"generated":{"line":222,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":222,"column":0},"generated":{"line":223,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":223,"column":0},"generated":{"line":224,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":224,"column":0},"generated":{"line":225,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":225,"column":0},"generated":{"line":226,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":226,"column":0},"generated":{"line":227,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":227,"column":0},"generated":{"line":228,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":228,"column":0},"generated":{"line":229,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":229,"column":0},"generated":{"line":230,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":230,"column":0},"generated":{"line":231,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":231,"column":0},"generated":{"line":232,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":232,"column":0},"generated":{"line":233,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":233,"column":0},"generated":{"line":234,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":234,"column":0},"generated":{"line":235,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":235,"column":0},"generated":{"line":236,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":236,"column":0},"generated":{"line":237,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":237,"column":0},"generated":{"line":238,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":238,"column":0},"generated":{"line":239,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":239,"column":0},"generated":{"line":240,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":240,"column":0},"generated":{"line":241,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":241,"column":0},"generated":{"line":242,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":242,"column":0},"generated":{"line":243,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":243,"column":0},"generated":{"line":244,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":244,"column":0},"generated":{"line":245,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":245,"column":0},"generated":{"line":246,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":246,"column":0},"generated":{"line":247,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":247,"column":0},"generated":{"line":248,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":248,"column":0},"generated":{"line":249,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":249,"column":0},"generated":{"line":250,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":250,"column":0},"generated":{"line":251,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":251,"column":0},"generated":{"line":252,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":252,"column":0},"generated":{"line":253,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":253,"column":0},"generated":{"line":254,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":254,"column":0},"generated":{"line":255,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":255,"column":0},"generated":{"line":256,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":256,"column":0},"generated":{"line":257,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":257,"column":0},"generated":{"line":258,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":258,"column":0},"generated":{"line":259,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":259,"column":0},"generated":{"line":260,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":260,"column":0},"generated":{"line":261,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":261,"column":0},"generated":{"line":262,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":262,"column":0},"generated":{"line":263,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":263,"column":0},"generated":{"line":264,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":264,"column":0},"generated":{"line":265,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":265,"column":0},"generated":{"line":266,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":266,"column":0},"generated":{"line":267,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":267,"column":0},"generated":{"line":268,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":268,"column":0},"generated":{"line":269,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":269,"column":0},"generated":{"line":270,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":270,"column":0},"generated":{"line":271,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":271,"column":0},"generated":{"line":272,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":272,"column":0},"generated":{"line":273,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":273,"column":0},"generated":{"line":274,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":274,"column":0},"generated":{"line":275,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":275,"column":0},"generated":{"line":276,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":276,"column":0},"generated":{"line":277,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":277,"column":0},"generated":{"line":278,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":278,"column":0},"generated":{"line":279,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":279,"column":0},"generated":{"line":280,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":280,"column":0},"generated":{"line":281,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":281,"column":0},"generated":{"line":282,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":282,"column":0},"generated":{"line":283,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":283,"column":0},"generated":{"line":284,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":284,"column":0},"generated":{"line":285,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":285,"column":0},"generated":{"line":286,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":286,"column":0},"generated":{"line":287,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":287,"column":0},"generated":{"line":288,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":288,"column":0},"generated":{"line":289,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":289,"column":0},"generated":{"line":290,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":290,"column":0},"generated":{"line":291,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":291,"column":0},"generated":{"line":292,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":292,"column":0},"generated":{"line":293,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":293,"column":0},"generated":{"line":294,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":294,"column":0},"generated":{"line":295,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":295,"column":0},"generated":{"line":296,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":296,"column":0},"generated":{"line":297,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":297,"column":0},"generated":{"line":298,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":298,"column":0},"generated":{"line":299,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":299,"column":0},"generated":{"line":300,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":300,"column":0},"generated":{"line":301,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":301,"column":0},"generated":{"line":302,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":302,"column":0},"generated":{"line":303,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":303,"column":0},"generated":{"line":304,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":304,"column":0},"generated":{"line":305,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":305,"column":0},"generated":{"line":306,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":306,"column":0},"generated":{"line":307,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":307,"column":0},"generated":{"line":308,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":308,"column":0},"generated":{"line":309,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":309,"column":0},"generated":{"line":310,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":310,"column":0},"generated":{"line":311,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":311,"column":0},"generated":{"line":312,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":312,"column":0},"generated":{"line":313,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":313,"column":0},"generated":{"line":314,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":314,"column":0},"generated":{"line":315,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":315,"column":0},"generated":{"line":316,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":316,"column":0},"generated":{"line":317,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":317,"column":0},"generated":{"line":318,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":318,"column":0},"generated":{"line":319,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":319,"column":0},"generated":{"line":320,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":320,"column":0},"generated":{"line":321,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":321,"column":0},"generated":{"line":322,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":322,"column":0},"generated":{"line":323,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":323,"column":0},"generated":{"line":324,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":324,"column":0},"generated":{"line":325,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":325,"column":0},"generated":{"line":326,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":326,"column":0},"generated":{"line":327,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":327,"column":0},"generated":{"line":328,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":328,"column":0},"generated":{"line":329,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":329,"column":0},"generated":{"line":330,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":330,"column":0},"generated":{"line":331,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":331,"column":0},"generated":{"line":332,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":332,"column":0},"generated":{"line":333,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":333,"column":0},"generated":{"line":334,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":334,"column":0},"generated":{"line":335,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":335,"column":0},"generated":{"line":336,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":336,"column":0},"generated":{"line":337,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":337,"column":0},"generated":{"line":338,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":338,"column":0},"generated":{"line":339,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":339,"column":0},"generated":{"line":340,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":340,"column":0},"generated":{"line":341,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":341,"column":0},"generated":{"line":342,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":342,"column":0},"generated":{"line":343,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":343,"column":0},"generated":{"line":344,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":344,"column":0},"generated":{"line":345,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":345,"column":0},"generated":{"line":346,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":346,"column":0},"generated":{"line":347,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":347,"column":0},"generated":{"line":348,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":348,"column":0},"generated":{"line":349,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":349,"column":0},"generated":{"line":350,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":350,"column":0},"generated":{"line":351,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":351,"column":0},"generated":{"line":352,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":352,"column":0},"generated":{"line":353,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":353,"column":0},"generated":{"line":354,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":354,"column":0},"generated":{"line":355,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":355,"column":0},"generated":{"line":356,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":356,"column":0},"generated":{"line":357,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":357,"column":0},"generated":{"line":358,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":358,"column":0},"generated":{"line":359,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":359,"column":0},"generated":{"line":360,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":360,"column":0},"generated":{"line":361,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":361,"column":0},"generated":{"line":362,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":362,"column":0},"generated":{"line":363,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":363,"column":0},"generated":{"line":364,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":364,"column":0},"generated":{"line":365,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":365,"column":0},"generated":{"line":366,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":366,"column":0},"generated":{"line":367,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":367,"column":0},"generated":{"line":368,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":368,"column":0},"generated":{"line":369,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":369,"column":0},"generated":{"line":370,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":370,"column":0},"generated":{"line":371,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":371,"column":0},"generated":{"line":372,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":372,"column":0},"generated":{"line":373,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":373,"column":0},"generated":{"line":374,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":374,"column":0},"generated":{"line":375,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":375,"column":0},"generated":{"line":376,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":376,"column":0},"generated":{"line":377,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":377,"column":0},"generated":{"line":378,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":378,"column":0},"generated":{"line":379,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":379,"column":0},"generated":{"line":380,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":380,"column":0},"generated":{"line":381,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":381,"column":0},"generated":{"line":382,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":382,"column":0},"generated":{"line":383,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":383,"column":0},"generated":{"line":384,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":384,"column":0},"generated":{"line":385,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":385,"column":0},"generated":{"line":386,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":386,"column":0},"generated":{"line":387,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":387,"column":0},"generated":{"line":388,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":388,"column":0},"generated":{"line":389,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":389,"column":0},"generated":{"line":390,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":390,"column":0},"generated":{"line":391,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":391,"column":0},"generated":{"line":392,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":392,"column":0},"generated":{"line":393,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":393,"column":0},"generated":{"line":394,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":394,"column":0},"generated":{"line":395,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":395,"column":0},"generated":{"line":396,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":396,"column":0},"generated":{"line":397,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":397,"column":0},"generated":{"line":398,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":398,"column":0},"generated":{"line":399,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":399,"column":0},"generated":{"line":400,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":400,"column":0},"generated":{"line":401,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":401,"column":0},"generated":{"line":402,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":402,"column":0},"generated":{"line":403,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":403,"column":0},"generated":{"line":404,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":404,"column":0},"generated":{"line":405,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":405,"column":0},"generated":{"line":406,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":406,"column":0},"generated":{"line":407,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":407,"column":0},"generated":{"line":408,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":408,"column":0},"generated":{"line":409,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":409,"column":0},"generated":{"line":410,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":410,"column":0},"generated":{"line":411,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":411,"column":0},"generated":{"line":412,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":412,"column":0},"generated":{"line":413,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":413,"column":0},"generated":{"line":414,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":414,"column":0},"generated":{"line":415,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":415,"column":0},"generated":{"line":416,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":416,"column":0},"generated":{"line":417,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":417,"column":0},"generated":{"line":418,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":418,"column":0},"generated":{"line":419,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":419,"column":0},"generated":{"line":420,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":420,"column":0},"generated":{"line":421,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":421,"column":0},"generated":{"line":422,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":422,"column":0},"generated":{"line":423,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":423,"column":0},"generated":{"line":424,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":424,"column":0},"generated":{"line":425,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":425,"column":0},"generated":{"line":426,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":426,"column":0},"generated":{"line":427,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":427,"column":0},"generated":{"line":428,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":428,"column":0},"generated":{"line":429,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":429,"column":0},"generated":{"line":430,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":430,"column":0},"generated":{"line":431,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":431,"column":0},"generated":{"line":432,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":432,"column":0},"generated":{"line":433,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":433,"column":0},"generated":{"line":434,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":434,"column":0},"generated":{"line":435,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":435,"column":0},"generated":{"line":436,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":436,"column":0},"generated":{"line":437,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":437,"column":0},"generated":{"line":438,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":438,"column":0},"generated":{"line":439,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":439,"column":0},"generated":{"line":440,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":440,"column":0},"generated":{"line":441,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":441,"column":0},"generated":{"line":442,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":442,"column":0},"generated":{"line":443,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":443,"column":0},"generated":{"line":444,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":444,"column":0},"generated":{"line":445,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":445,"column":0},"generated":{"line":446,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":446,"column":0},"generated":{"line":447,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":447,"column":0},"generated":{"line":448,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":448,"column":0},"generated":{"line":449,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":449,"column":0},"generated":{"line":450,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":450,"column":0},"generated":{"line":451,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":451,"column":0},"generated":{"line":452,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":452,"column":0},"generated":{"line":453,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":453,"column":0},"generated":{"line":454,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":454,"column":0},"generated":{"line":455,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":455,"column":0},"generated":{"line":456,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":456,"column":0},"generated":{"line":457,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":457,"column":0},"generated":{"line":458,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":458,"column":0},"generated":{"line":459,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":459,"column":0},"generated":{"line":460,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":460,"column":0},"generated":{"line":461,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":461,"column":0},"generated":{"line":462,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":462,"column":0},"generated":{"line":463,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":463,"column":0},"generated":{"line":464,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":464,"column":0},"generated":{"line":465,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":465,"column":0},"generated":{"line":466,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":466,"column":0},"generated":{"line":467,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":467,"column":0},"generated":{"line":468,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":468,"column":0},"generated":{"line":469,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":469,"column":0},"generated":{"line":470,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":470,"column":0},"generated":{"line":471,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":471,"column":0},"generated":{"line":472,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":472,"column":0},"generated":{"line":473,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":473,"column":0},"generated":{"line":474,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":474,"column":0},"generated":{"line":475,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":475,"column":0},"generated":{"line":476,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":476,"column":0},"generated":{"line":477,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":477,"column":0},"generated":{"line":478,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":478,"column":0},"generated":{"line":479,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":479,"column":0},"generated":{"line":480,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":480,"column":0},"generated":{"line":481,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":481,"column":0},"generated":{"line":482,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":482,"column":0},"generated":{"line":483,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":483,"column":0},"generated":{"line":484,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":484,"column":0},"generated":{"line":485,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":485,"column":0},"generated":{"line":486,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":486,"column":0},"generated":{"line":487,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":487,"column":0},"generated":{"line":488,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":488,"column":0},"generated":{"line":489,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":489,"column":0},"generated":{"line":490,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":490,"column":0},"generated":{"line":491,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":491,"column":0},"generated":{"line":492,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":492,"column":0},"generated":{"line":493,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":493,"column":0},"generated":{"line":494,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":494,"column":0},"generated":{"line":495,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":495,"column":0},"generated":{"line":496,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":496,"column":0},"generated":{"line":497,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":497,"column":0},"generated":{"line":498,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":498,"column":0},"generated":{"line":499,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":499,"column":0},"generated":{"line":500,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":500,"column":0},"generated":{"line":501,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":501,"column":0},"generated":{"line":502,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":502,"column":0},"generated":{"line":503,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":503,"column":0},"generated":{"line":504,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":504,"column":0},"generated":{"line":505,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":505,"column":0},"generated":{"line":506,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":506,"column":0},"generated":{"line":507,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":507,"column":0},"generated":{"line":508,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":508,"column":0},"generated":{"line":509,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":509,"column":0},"generated":{"line":510,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":510,"column":0},"generated":{"line":511,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":511,"column":0},"generated":{"line":512,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":512,"column":0},"generated":{"line":513,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":513,"column":0},"generated":{"line":514,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":514,"column":0},"generated":{"line":515,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":515,"column":0},"generated":{"line":516,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":516,"column":0},"generated":{"line":517,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":517,"column":0},"generated":{"line":518,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":518,"column":0},"generated":{"line":519,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":519,"column":0},"generated":{"line":520,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":520,"column":0},"generated":{"line":521,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":521,"column":0},"generated":{"line":522,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":522,"column":0},"generated":{"line":523,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":523,"column":0},"generated":{"line":524,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":524,"column":0},"generated":{"line":525,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":525,"column":0},"generated":{"line":526,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":526,"column":0},"generated":{"line":527,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":527,"column":0},"generated":{"line":528,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":528,"column":0},"generated":{"line":529,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":529,"column":0},"generated":{"line":530,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":530,"column":0},"generated":{"line":531,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":531,"column":0},"generated":{"line":532,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":532,"column":0},"generated":{"line":533,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":533,"column":0},"generated":{"line":534,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":534,"column":0},"generated":{"line":535,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":535,"column":0},"generated":{"line":536,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":536,"column":0},"generated":{"line":537,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":537,"column":0},"generated":{"line":538,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":538,"column":0},"generated":{"line":539,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":539,"column":0},"generated":{"line":540,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":540,"column":0},"generated":{"line":541,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":541,"column":0},"generated":{"line":542,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":542,"column":0},"generated":{"line":543,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":543,"column":0},"generated":{"line":544,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":544,"column":0},"generated":{"line":545,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":545,"column":0},"generated":{"line":546,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":546,"column":0},"generated":{"line":547,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":547,"column":0},"generated":{"line":548,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":548,"column":0},"generated":{"line":549,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":549,"column":0},"generated":{"line":550,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":550,"column":0},"generated":{"line":551,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":551,"column":0},"generated":{"line":552,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":552,"column":0},"generated":{"line":553,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":553,"column":0},"generated":{"line":554,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":554,"column":0},"generated":{"line":555,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":555,"column":0},"generated":{"line":556,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":556,"column":0},"generated":{"line":557,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":557,"column":0},"generated":{"line":558,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":558,"column":0},"generated":{"line":559,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":559,"column":0},"generated":{"line":560,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":560,"column":0},"generated":{"line":561,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":561,"column":0},"generated":{"line":562,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":562,"column":0},"generated":{"line":563,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":563,"column":0},"generated":{"line":564,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":564,"column":0},"generated":{"line":565,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":565,"column":0},"generated":{"line":566,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":566,"column":0},"generated":{"line":567,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":567,"column":0},"generated":{"line":568,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":568,"column":0},"generated":{"line":569,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":569,"column":0},"generated":{"line":570,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":570,"column":0},"generated":{"line":571,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":571,"column":0},"generated":{"line":572,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":572,"column":0},"generated":{"line":573,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":573,"column":0},"generated":{"line":574,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":574,"column":0},"generated":{"line":575,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":575,"column":0},"generated":{"line":576,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":576,"column":0},"generated":{"line":577,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":577,"column":0},"generated":{"line":578,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":578,"column":0},"generated":{"line":579,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":579,"column":0},"generated":{"line":580,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":580,"column":0},"generated":{"line":581,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":581,"column":0},"generated":{"line":582,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":582,"column":0},"generated":{"line":583,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":583,"column":0},"generated":{"line":584,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":584,"column":0},"generated":{"line":585,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":585,"column":0},"generated":{"line":586,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":586,"column":0},"generated":{"line":587,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":587,"column":0},"generated":{"line":588,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":588,"column":0},"generated":{"line":589,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":589,"column":0},"generated":{"line":590,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":590,"column":0},"generated":{"line":591,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":591,"column":0},"generated":{"line":592,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":592,"column":0},"generated":{"line":593,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":593,"column":0},"generated":{"line":594,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":594,"column":0},"generated":{"line":595,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":595,"column":0},"generated":{"line":596,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":596,"column":0},"generated":{"line":597,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":597,"column":0},"generated":{"line":598,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":598,"column":0},"generated":{"line":599,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":599,"column":0},"generated":{"line":600,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":600,"column":0},"generated":{"line":601,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":601,"column":0},"generated":{"line":602,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":602,"column":0},"generated":{"line":603,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":603,"column":0},"generated":{"line":604,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":604,"column":0},"generated":{"line":605,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":605,"column":0},"generated":{"line":606,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":606,"column":0},"generated":{"line":607,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":607,"column":0},"generated":{"line":608,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":608,"column":0},"generated":{"line":609,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":609,"column":0},"generated":{"line":610,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":610,"column":0},"generated":{"line":611,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":611,"column":0},"generated":{"line":612,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":612,"column":0},"generated":{"line":613,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":613,"column":0},"generated":{"line":614,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":614,"column":0},"generated":{"line":615,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":615,"column":0},"generated":{"line":616,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":616,"column":0},"generated":{"line":617,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":617,"column":0},"generated":{"line":618,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":618,"column":0},"generated":{"line":619,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":619,"column":0},"generated":{"line":620,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":620,"column":0},"generated":{"line":621,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":621,"column":0},"generated":{"line":622,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":622,"column":0},"generated":{"line":623,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":623,"column":0},"generated":{"line":624,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":624,"column":0},"generated":{"line":625,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":625,"column":0},"generated":{"line":626,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":626,"column":0},"generated":{"line":627,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":627,"column":0},"generated":{"line":628,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":628,"column":0},"generated":{"line":629,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":629,"column":0},"generated":{"line":630,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":630,"column":0},"generated":{"line":631,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":631,"column":0},"generated":{"line":632,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":632,"column":0},"generated":{"line":633,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":633,"column":0},"generated":{"line":634,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":634,"column":0},"generated":{"line":635,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":635,"column":0},"generated":{"line":636,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":636,"column":0},"generated":{"line":637,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":637,"column":0},"generated":{"line":638,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":638,"column":0},"generated":{"line":639,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":639,"column":0},"generated":{"line":640,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":640,"column":0},"generated":{"line":641,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":641,"column":0},"generated":{"line":642,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":642,"column":0},"generated":{"line":643,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":643,"column":0},"generated":{"line":644,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":644,"column":0},"generated":{"line":645,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":645,"column":0},"generated":{"line":646,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":646,"column":0},"generated":{"line":647,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":647,"column":0},"generated":{"line":648,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":648,"column":0},"generated":{"line":649,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":649,"column":0},"generated":{"line":650,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":650,"column":0},"generated":{"line":651,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":651,"column":0},"generated":{"line":652,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":652,"column":0},"generated":{"line":653,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":653,"column":0},"generated":{"line":654,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":654,"column":0},"generated":{"line":655,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":655,"column":0},"generated":{"line":656,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":656,"column":0},"generated":{"line":657,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":657,"column":0},"generated":{"line":658,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":658,"column":0},"generated":{"line":659,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":659,"column":0},"generated":{"line":660,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":660,"column":0},"generated":{"line":661,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":661,"column":0},"generated":{"line":662,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":662,"column":0},"generated":{"line":663,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":663,"column":0},"generated":{"line":664,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":664,"column":0},"generated":{"line":665,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":665,"column":0},"generated":{"line":666,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":666,"column":0},"generated":{"line":667,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":667,"column":0},"generated":{"line":668,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":668,"column":0},"generated":{"line":669,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":669,"column":0},"generated":{"line":670,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":670,"column":0},"generated":{"line":671,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":671,"column":0},"generated":{"line":672,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":672,"column":0},"generated":{"line":673,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":673,"column":0},"generated":{"line":674,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":674,"column":0},"generated":{"line":675,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":675,"column":0},"generated":{"line":676,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":676,"column":0},"generated":{"line":677,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":677,"column":0},"generated":{"line":678,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":678,"column":0},"generated":{"line":679,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":679,"column":0},"generated":{"line":680,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":680,"column":0},"generated":{"line":681,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":681,"column":0},"generated":{"line":682,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":682,"column":0},"generated":{"line":683,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":683,"column":0},"generated":{"line":684,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":684,"column":0},"generated":{"line":685,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":685,"column":0},"generated":{"line":686,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":686,"column":0},"generated":{"line":687,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":687,"column":0},"generated":{"line":688,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":688,"column":0},"generated":{"line":689,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":689,"column":0},"generated":{"line":690,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":690,"column":0},"generated":{"line":691,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":691,"column":0},"generated":{"line":692,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":692,"column":0},"generated":{"line":693,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":693,"column":0},"generated":{"line":694,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":694,"column":0},"generated":{"line":695,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":695,"column":0},"generated":{"line":696,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":696,"column":0},"generated":{"line":697,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":697,"column":0},"generated":{"line":698,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":698,"column":0},"generated":{"line":699,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":699,"column":0},"generated":{"line":700,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":700,"column":0},"generated":{"line":701,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":701,"column":0},"generated":{"line":702,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":702,"column":0},"generated":{"line":703,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":703,"column":0},"generated":{"line":704,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":704,"column":0},"generated":{"line":705,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":705,"column":0},"generated":{"line":706,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":706,"column":0},"generated":{"line":707,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":707,"column":0},"generated":{"line":708,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":708,"column":0},"generated":{"line":709,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":709,"column":0},"generated":{"line":710,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":710,"column":0},"generated":{"line":711,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":711,"column":0},"generated":{"line":712,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":712,"column":0},"generated":{"line":713,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":713,"column":0},"generated":{"line":714,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":714,"column":0},"generated":{"line":715,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":715,"column":0},"generated":{"line":716,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":716,"column":0},"generated":{"line":717,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":717,"column":0},"generated":{"line":718,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":718,"column":0},"generated":{"line":719,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":719,"column":0},"generated":{"line":720,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":720,"column":0},"generated":{"line":721,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":721,"column":0},"generated":{"line":722,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":722,"column":0},"generated":{"line":723,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":723,"column":0},"generated":{"line":724,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":724,"column":0},"generated":{"line":725,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":725,"column":0},"generated":{"line":726,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":726,"column":0},"generated":{"line":727,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":727,"column":0},"generated":{"line":728,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":728,"column":0},"generated":{"line":729,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":729,"column":0},"generated":{"line":730,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":730,"column":0},"generated":{"line":731,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":731,"column":0},"generated":{"line":732,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":732,"column":0},"generated":{"line":733,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":733,"column":0},"generated":{"line":734,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":734,"column":0},"generated":{"line":735,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":735,"column":0},"generated":{"line":736,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":736,"column":0},"generated":{"line":737,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":737,"column":0},"generated":{"line":738,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":738,"column":0},"generated":{"line":739,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":739,"column":0},"generated":{"line":740,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":740,"column":0},"generated":{"line":741,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":741,"column":0},"generated":{"line":742,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":742,"column":0},"generated":{"line":743,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":743,"column":0},"generated":{"line":744,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":744,"column":0},"generated":{"line":745,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":745,"column":0},"generated":{"line":746,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":746,"column":0},"generated":{"line":747,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":747,"column":0},"generated":{"line":748,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":748,"column":0},"generated":{"line":749,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":749,"column":0},"generated":{"line":750,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":750,"column":0},"generated":{"line":751,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":751,"column":0},"generated":{"line":752,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":752,"column":0},"generated":{"line":753,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":753,"column":0},"generated":{"line":754,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":754,"column":0},"generated":{"line":755,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":755,"column":0},"generated":{"line":756,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":756,"column":0},"generated":{"line":757,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":757,"column":0},"generated":{"line":758,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":758,"column":0},"generated":{"line":759,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":759,"column":0},"generated":{"line":760,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":760,"column":0},"generated":{"line":761,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":761,"column":0},"generated":{"line":762,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":762,"column":0},"generated":{"line":763,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":763,"column":0},"generated":{"line":764,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":764,"column":0},"generated":{"line":765,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":765,"column":0},"generated":{"line":766,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":766,"column":0},"generated":{"line":767,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":767,"column":0},"generated":{"line":768,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":768,"column":0},"generated":{"line":769,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":769,"column":0},"generated":{"line":770,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":770,"column":0},"generated":{"line":771,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":771,"column":0},"generated":{"line":772,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":772,"column":0},"generated":{"line":773,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":773,"column":0},"generated":{"line":774,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":774,"column":0},"generated":{"line":775,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":775,"column":0},"generated":{"line":776,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":776,"column":0},"generated":{"line":777,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":777,"column":0},"generated":{"line":778,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":778,"column":0},"generated":{"line":779,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":779,"column":0},"generated":{"line":780,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":780,"column":0},"generated":{"line":781,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":781,"column":0},"generated":{"line":782,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":782,"column":0},"generated":{"line":783,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":783,"column":0},"generated":{"line":784,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":784,"column":0},"generated":{"line":785,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":785,"column":0},"generated":{"line":786,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":786,"column":0},"generated":{"line":787,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":787,"column":0},"generated":{"line":788,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":788,"column":0},"generated":{"line":789,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":789,"column":0},"generated":{"line":790,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":790,"column":0},"generated":{"line":791,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":791,"column":0},"generated":{"line":792,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":792,"column":0},"generated":{"line":793,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":793,"column":0},"generated":{"line":794,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":794,"column":0},"generated":{"line":795,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":795,"column":0},"generated":{"line":796,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":796,"column":0},"generated":{"line":797,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":797,"column":0},"generated":{"line":798,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":798,"column":0},"generated":{"line":799,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":799,"column":0},"generated":{"line":800,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":800,"column":0},"generated":{"line":801,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":801,"column":0},"generated":{"line":802,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":802,"column":0},"generated":{"line":803,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":803,"column":0},"generated":{"line":804,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":804,"column":0},"generated":{"line":805,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":805,"column":0},"generated":{"line":806,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":806,"column":0},"generated":{"line":807,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":807,"column":0},"generated":{"line":808,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":808,"column":0},"generated":{"line":809,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":809,"column":0},"generated":{"line":810,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":810,"column":0},"generated":{"line":811,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":811,"column":0},"generated":{"line":812,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":812,"column":0},"generated":{"line":813,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":813,"column":0},"generated":{"line":814,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":814,"column":0},"generated":{"line":815,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":815,"column":0},"generated":{"line":816,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":816,"column":0},"generated":{"line":817,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":817,"column":0},"generated":{"line":818,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":818,"column":0},"generated":{"line":819,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":819,"column":0},"generated":{"line":820,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":820,"column":0},"generated":{"line":821,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":821,"column":0},"generated":{"line":822,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":822,"column":0},"generated":{"line":823,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":823,"column":0},"generated":{"line":824,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":824,"column":0},"generated":{"line":825,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":825,"column":0},"generated":{"line":826,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":826,"column":0},"generated":{"line":827,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":827,"column":0},"generated":{"line":828,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":828,"column":0},"generated":{"line":829,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":829,"column":0},"generated":{"line":830,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":830,"column":0},"generated":{"line":831,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":831,"column":0},"generated":{"line":832,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":832,"column":0},"generated":{"line":833,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":833,"column":0},"generated":{"line":834,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":834,"column":0},"generated":{"line":835,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":835,"column":0},"generated":{"line":836,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":836,"column":0},"generated":{"line":837,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":837,"column":0},"generated":{"line":838,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":838,"column":0},"generated":{"line":839,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":839,"column":0},"generated":{"line":840,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":840,"column":0},"generated":{"line":841,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":841,"column":0},"generated":{"line":842,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":842,"column":0},"generated":{"line":843,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":843,"column":0},"generated":{"line":844,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":844,"column":0},"generated":{"line":845,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":845,"column":0},"generated":{"line":846,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":846,"column":0},"generated":{"line":847,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":847,"column":0},"generated":{"line":848,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":848,"column":0},"generated":{"line":849,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":849,"column":0},"generated":{"line":850,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":850,"column":0},"generated":{"line":851,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":851,"column":0},"generated":{"line":852,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":852,"column":0},"generated":{"line":853,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":853,"column":0},"generated":{"line":854,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":854,"column":0},"generated":{"line":855,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":855,"column":0},"generated":{"line":856,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":856,"column":0},"generated":{"line":857,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":857,"column":0},"generated":{"line":858,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":858,"column":0},"generated":{"line":859,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":859,"column":0},"generated":{"line":860,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":860,"column":0},"generated":{"line":861,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":861,"column":0},"generated":{"line":862,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":862,"column":0},"generated":{"line":863,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":863,"column":0},"generated":{"line":864,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":864,"column":0},"generated":{"line":865,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":865,"column":0},"generated":{"line":866,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":866,"column":0},"generated":{"line":867,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":867,"column":0},"generated":{"line":868,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":868,"column":0},"generated":{"line":869,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":869,"column":0},"generated":{"line":870,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":870,"column":0},"generated":{"line":871,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":871,"column":0},"generated":{"line":872,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":872,"column":0},"generated":{"line":873,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":873,"column":0},"generated":{"line":874,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":874,"column":0},"generated":{"line":875,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":875,"column":0},"generated":{"line":876,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":876,"column":0},"generated":{"line":877,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":877,"column":0},"generated":{"line":878,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":878,"column":0},"generated":{"line":879,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":879,"column":0},"generated":{"line":880,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":880,"column":0},"generated":{"line":881,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":881,"column":0},"generated":{"line":882,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":882,"column":0},"generated":{"line":883,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":883,"column":0},"generated":{"line":884,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":884,"column":0},"generated":{"line":885,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":885,"column":0},"generated":{"line":886,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":886,"column":0},"generated":{"line":887,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":887,"column":0},"generated":{"line":888,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":888,"column":0},"generated":{"line":889,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":889,"column":0},"generated":{"line":890,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":890,"column":0},"generated":{"line":891,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":891,"column":0},"generated":{"line":892,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":892,"column":0},"generated":{"line":893,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":893,"column":0},"generated":{"line":894,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":894,"column":0},"generated":{"line":895,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":895,"column":0},"generated":{"line":896,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":896,"column":0},"generated":{"line":897,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":897,"column":0},"generated":{"line":898,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":898,"column":0},"generated":{"line":899,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":899,"column":0},"generated":{"line":900,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":900,"column":0},"generated":{"line":901,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":901,"column":0},"generated":{"line":902,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":902,"column":0},"generated":{"line":903,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":903,"column":0},"generated":{"line":904,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":904,"column":0},"generated":{"line":905,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":905,"column":0},"generated":{"line":906,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":906,"column":0},"generated":{"line":907,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":907,"column":0},"generated":{"line":908,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":908,"column":0},"generated":{"line":909,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":909,"column":0},"generated":{"line":910,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":910,"column":0},"generated":{"line":911,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":911,"column":0},"generated":{"line":912,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":912,"column":0},"generated":{"line":913,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":913,"column":0},"generated":{"line":914,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":914,"column":0},"generated":{"line":915,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":915,"column":0},"generated":{"line":916,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":916,"column":0},"generated":{"line":917,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":917,"column":0},"generated":{"line":918,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":918,"column":0},"generated":{"line":919,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":919,"column":0},"generated":{"line":920,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":920,"column":0},"generated":{"line":921,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":921,"column":0},"generated":{"line":922,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":922,"column":0},"generated":{"line":923,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":923,"column":0},"generated":{"line":924,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":924,"column":0},"generated":{"line":925,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":925,"column":0},"generated":{"line":926,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":926,"column":0},"generated":{"line":927,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":927,"column":0},"generated":{"line":928,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":928,"column":0},"generated":{"line":929,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":929,"column":0},"generated":{"line":930,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":930,"column":0},"generated":{"line":931,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":931,"column":0},"generated":{"line":932,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":932,"column":0},"generated":{"line":933,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":933,"column":0},"generated":{"line":934,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":934,"column":0},"generated":{"line":935,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":935,"column":0},"generated":{"line":936,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":936,"column":0},"generated":{"line":937,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":937,"column":0},"generated":{"line":938,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":938,"column":0},"generated":{"line":939,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":939,"column":0},"generated":{"line":940,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":940,"column":0},"generated":{"line":941,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":941,"column":0},"generated":{"line":942,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":942,"column":0},"generated":{"line":943,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":943,"column":0},"generated":{"line":944,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":944,"column":0},"generated":{"line":945,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":945,"column":0},"generated":{"line":946,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":946,"column":0},"generated":{"line":947,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":947,"column":0},"generated":{"line":948,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":948,"column":0},"generated":{"line":949,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":949,"column":0},"generated":{"line":950,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":950,"column":0},"generated":{"line":951,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":951,"column":0},"generated":{"line":952,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":952,"column":0},"generated":{"line":953,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":953,"column":0},"generated":{"line":954,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":954,"column":0},"generated":{"line":955,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":955,"column":0},"generated":{"line":956,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":956,"column":0},"generated":{"line":957,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":957,"column":0},"generated":{"line":958,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":958,"column":0},"generated":{"line":959,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":959,"column":0},"generated":{"line":960,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":960,"column":0},"generated":{"line":961,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":961,"column":0},"generated":{"line":962,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":962,"column":0},"generated":{"line":963,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":963,"column":0},"generated":{"line":964,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":964,"column":0},"generated":{"line":965,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":965,"column":0},"generated":{"line":966,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":966,"column":0},"generated":{"line":967,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":967,"column":0},"generated":{"line":968,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":968,"column":0},"generated":{"line":969,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":969,"column":0},"generated":{"line":970,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":970,"column":0},"generated":{"line":971,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":971,"column":0},"generated":{"line":972,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":972,"column":0},"generated":{"line":973,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":973,"column":0},"generated":{"line":974,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":974,"column":0},"generated":{"line":975,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":975,"column":0},"generated":{"line":976,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":976,"column":0},"generated":{"line":977,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":977,"column":0},"generated":{"line":978,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":978,"column":0},"generated":{"line":979,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":979,"column":0},"generated":{"line":980,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":980,"column":0},"generated":{"line":981,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":981,"column":0},"generated":{"line":982,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":982,"column":0},"generated":{"line":983,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":983,"column":0},"generated":{"line":984,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":984,"column":0},"generated":{"line":985,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":985,"column":0},"generated":{"line":986,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":986,"column":0},"generated":{"line":987,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":987,"column":0},"generated":{"line":988,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":988,"column":0},"generated":{"line":989,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":989,"column":0},"generated":{"line":990,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":990,"column":0},"generated":{"line":991,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":991,"column":0},"generated":{"line":992,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":992,"column":0},"generated":{"line":993,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":993,"column":0},"generated":{"line":994,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":994,"column":0},"generated":{"line":995,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":995,"column":0},"generated":{"line":996,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":996,"column":0},"generated":{"line":997,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":997,"column":0},"generated":{"line":998,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":998,"column":0},"generated":{"line":999,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":999,"column":0},"generated":{"line":1000,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1000,"column":0},"generated":{"line":1001,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1001,"column":0},"generated":{"line":1002,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1002,"column":0},"generated":{"line":1003,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1003,"column":0},"generated":{"line":1004,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1004,"column":0},"generated":{"line":1005,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1005,"column":0},"generated":{"line":1006,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1006,"column":0},"generated":{"line":1007,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1007,"column":0},"generated":{"line":1008,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1008,"column":0},"generated":{"line":1009,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1009,"column":0},"generated":{"line":1010,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1010,"column":0},"generated":{"line":1011,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1011,"column":0},"generated":{"line":1012,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1012,"column":0},"generated":{"line":1013,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1013,"column":0},"generated":{"line":1014,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1014,"column":0},"generated":{"line":1015,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1015,"column":0},"generated":{"line":1016,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1016,"column":0},"generated":{"line":1017,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1017,"column":0},"generated":{"line":1018,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1018,"column":0},"generated":{"line":1019,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1019,"column":0},"generated":{"line":1020,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1020,"column":0},"generated":{"line":1021,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1021,"column":0},"generated":{"line":1022,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1022,"column":0},"generated":{"line":1023,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1023,"column":0},"generated":{"line":1024,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1024,"column":0},"generated":{"line":1025,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1025,"column":0},"generated":{"line":1026,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1026,"column":0},"generated":{"line":1027,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1027,"column":0},"generated":{"line":1028,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1028,"column":0},"generated":{"line":1029,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1029,"column":0},"generated":{"line":1030,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1030,"column":0},"generated":{"line":1031,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1031,"column":0},"generated":{"line":1032,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1032,"column":0},"generated":{"line":1033,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1033,"column":0},"generated":{"line":1034,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1034,"column":0},"generated":{"line":1035,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1035,"column":0},"generated":{"line":1036,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1036,"column":0},"generated":{"line":1037,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1037,"column":0},"generated":{"line":1038,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1038,"column":0},"generated":{"line":1039,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1039,"column":0},"generated":{"line":1040,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1040,"column":0},"generated":{"line":1041,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1041,"column":0},"generated":{"line":1042,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1042,"column":0},"generated":{"line":1043,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1043,"column":0},"generated":{"line":1044,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1044,"column":0},"generated":{"line":1045,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1045,"column":0},"generated":{"line":1046,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1046,"column":0},"generated":{"line":1047,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1047,"column":0},"generated":{"line":1048,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1048,"column":0},"generated":{"line":1049,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1049,"column":0},"generated":{"line":1050,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1050,"column":0},"generated":{"line":1051,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1051,"column":0},"generated":{"line":1052,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1052,"column":0},"generated":{"line":1053,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1053,"column":0},"generated":{"line":1054,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1054,"column":0},"generated":{"line":1055,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1055,"column":0},"generated":{"line":1056,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1056,"column":0},"generated":{"line":1057,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1057,"column":0},"generated":{"line":1058,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1058,"column":0},"generated":{"line":1059,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1059,"column":0},"generated":{"line":1060,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1060,"column":0},"generated":{"line":1061,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1061,"column":0},"generated":{"line":1062,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1062,"column":0},"generated":{"line":1063,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1063,"column":0},"generated":{"line":1064,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1064,"column":0},"generated":{"line":1065,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1065,"column":0},"generated":{"line":1066,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1066,"column":0},"generated":{"line":1067,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1067,"column":0},"generated":{"line":1068,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1068,"column":0},"generated":{"line":1069,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1069,"column":0},"generated":{"line":1070,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1070,"column":0},"generated":{"line":1071,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1071,"column":0},"generated":{"line":1072,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1072,"column":0},"generated":{"line":1073,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1073,"column":0},"generated":{"line":1074,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1074,"column":0},"generated":{"line":1075,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1075,"column":0},"generated":{"line":1076,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1076,"column":0},"generated":{"line":1077,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1077,"column":0},"generated":{"line":1078,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1078,"column":0},"generated":{"line":1079,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1079,"column":0},"generated":{"line":1080,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1080,"column":0},"generated":{"line":1081,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1081,"column":0},"generated":{"line":1082,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1082,"column":0},"generated":{"line":1083,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1083,"column":0},"generated":{"line":1084,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1084,"column":0},"generated":{"line":1085,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1085,"column":0},"generated":{"line":1086,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1086,"column":0},"generated":{"line":1087,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1087,"column":0},"generated":{"line":1088,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1088,"column":0},"generated":{"line":1089,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1089,"column":0},"generated":{"line":1090,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1090,"column":0},"generated":{"line":1091,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1091,"column":0},"generated":{"line":1092,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1092,"column":0},"generated":{"line":1093,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1093,"column":0},"generated":{"line":1094,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1094,"column":0},"generated":{"line":1095,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1095,"column":0},"generated":{"line":1096,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1096,"column":0},"generated":{"line":1097,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1097,"column":0},"generated":{"line":1098,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1098,"column":0},"generated":{"line":1099,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1099,"column":0},"generated":{"line":1100,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1100,"column":0},"generated":{"line":1101,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1101,"column":0},"generated":{"line":1102,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1102,"column":0},"generated":{"line":1103,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1103,"column":0},"generated":{"line":1104,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1104,"column":0},"generated":{"line":1105,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1105,"column":0},"generated":{"line":1106,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1106,"column":0},"generated":{"line":1107,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1107,"column":0},"generated":{"line":1108,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1108,"column":0},"generated":{"line":1109,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1109,"column":0},"generated":{"line":1110,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1110,"column":0},"generated":{"line":1111,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1111,"column":0},"generated":{"line":1112,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1112,"column":0},"generated":{"line":1113,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1113,"column":0},"generated":{"line":1114,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1114,"column":0},"generated":{"line":1115,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1115,"column":0},"generated":{"line":1116,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1116,"column":0},"generated":{"line":1117,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1117,"column":0},"generated":{"line":1118,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1118,"column":0},"generated":{"line":1119,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1119,"column":0},"generated":{"line":1120,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1120,"column":0},"generated":{"line":1121,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1121,"column":0},"generated":{"line":1122,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1122,"column":0},"generated":{"line":1123,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1123,"column":0},"generated":{"line":1124,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1124,"column":0},"generated":{"line":1125,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1125,"column":0},"generated":{"line":1126,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1126,"column":0},"generated":{"line":1127,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1127,"column":0},"generated":{"line":1128,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1128,"column":0},"generated":{"line":1129,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1129,"column":0},"generated":{"line":1130,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1130,"column":0},"generated":{"line":1131,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1131,"column":0},"generated":{"line":1132,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1132,"column":0},"generated":{"line":1133,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1133,"column":0},"generated":{"line":1134,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1134,"column":0},"generated":{"line":1135,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1135,"column":0},"generated":{"line":1136,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1136,"column":0},"generated":{"line":1137,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1137,"column":0},"generated":{"line":1138,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1138,"column":0},"generated":{"line":1139,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1139,"column":0},"generated":{"line":1140,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1140,"column":0},"generated":{"line":1141,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1141,"column":0},"generated":{"line":1142,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1142,"column":0},"generated":{"line":1143,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1143,"column":0},"generated":{"line":1144,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1144,"column":0},"generated":{"line":1145,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1145,"column":0},"generated":{"line":1146,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1146,"column":0},"generated":{"line":1147,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1147,"column":0},"generated":{"line":1148,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1148,"column":0},"generated":{"line":1149,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1149,"column":0},"generated":{"line":1150,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1150,"column":0},"generated":{"line":1151,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1151,"column":0},"generated":{"line":1152,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1152,"column":0},"generated":{"line":1153,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1153,"column":0},"generated":{"line":1154,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1154,"column":0},"generated":{"line":1155,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1155,"column":0},"generated":{"line":1156,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1156,"column":0},"generated":{"line":1157,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1157,"column":0},"generated":{"line":1158,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1158,"column":0},"generated":{"line":1159,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1159,"column":0},"generated":{"line":1160,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1160,"column":0},"generated":{"line":1161,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1161,"column":0},"generated":{"line":1162,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1162,"column":0},"generated":{"line":1163,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1163,"column":0},"generated":{"line":1164,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1164,"column":0},"generated":{"line":1165,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1165,"column":0},"generated":{"line":1166,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1166,"column":0},"generated":{"line":1167,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1167,"column":0},"generated":{"line":1168,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1168,"column":0},"generated":{"line":1169,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1169,"column":0},"generated":{"line":1170,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1170,"column":0},"generated":{"line":1171,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1171,"column":0},"generated":{"line":1172,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1172,"column":0},"generated":{"line":1173,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1173,"column":0},"generated":{"line":1174,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1174,"column":0},"generated":{"line":1175,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1175,"column":0},"generated":{"line":1176,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1176,"column":0},"generated":{"line":1177,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1177,"column":0},"generated":{"line":1178,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1178,"column":0},"generated":{"line":1179,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1179,"column":0},"generated":{"line":1180,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1180,"column":0},"generated":{"line":1181,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1181,"column":0},"generated":{"line":1182,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1182,"column":0},"generated":{"line":1183,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1183,"column":0},"generated":{"line":1184,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1184,"column":0},"generated":{"line":1185,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1185,"column":0},"generated":{"line":1186,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1186,"column":0},"generated":{"line":1187,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1187,"column":0},"generated":{"line":1188,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1188,"column":0},"generated":{"line":1189,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1189,"column":0},"generated":{"line":1190,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1190,"column":0},"generated":{"line":1191,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1191,"column":0},"generated":{"line":1192,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1192,"column":0},"generated":{"line":1193,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1193,"column":0},"generated":{"line":1194,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1194,"column":0},"generated":{"line":1195,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1195,"column":0},"generated":{"line":1196,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1196,"column":0},"generated":{"line":1197,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1197,"column":0},"generated":{"line":1198,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1198,"column":0},"generated":{"line":1199,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1199,"column":0},"generated":{"line":1200,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1200,"column":0},"generated":{"line":1201,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1201,"column":0},"generated":{"line":1202,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1202,"column":0},"generated":{"line":1203,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1203,"column":0},"generated":{"line":1204,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1204,"column":0},"generated":{"line":1205,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1205,"column":0},"generated":{"line":1206,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1206,"column":0},"generated":{"line":1207,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1207,"column":0},"generated":{"line":1208,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1208,"column":0},"generated":{"line":1209,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1209,"column":0},"generated":{"line":1210,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1210,"column":0},"generated":{"line":1211,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1211,"column":0},"generated":{"line":1212,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1212,"column":0},"generated":{"line":1213,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1213,"column":0},"generated":{"line":1214,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1214,"column":0},"generated":{"line":1215,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1215,"column":0},"generated":{"line":1216,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1216,"column":0},"generated":{"line":1217,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1217,"column":0},"generated":{"line":1218,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1218,"column":0},"generated":{"line":1219,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1219,"column":0},"generated":{"line":1220,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1220,"column":0},"generated":{"line":1221,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1221,"column":0},"generated":{"line":1222,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1222,"column":0},"generated":{"line":1223,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1223,"column":0},"generated":{"line":1224,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1224,"column":0},"generated":{"line":1225,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1225,"column":0},"generated":{"line":1226,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1226,"column":0},"generated":{"line":1227,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1227,"column":0},"generated":{"line":1228,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1228,"column":0},"generated":{"line":1229,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1229,"column":0},"generated":{"line":1230,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1230,"column":0},"generated":{"line":1231,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1231,"column":0},"generated":{"line":1232,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1232,"column":0},"generated":{"line":1233,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1233,"column":0},"generated":{"line":1234,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1234,"column":0},"generated":{"line":1235,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1235,"column":0},"generated":{"line":1236,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1236,"column":0},"generated":{"line":1237,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1237,"column":0},"generated":{"line":1238,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1238,"column":0},"generated":{"line":1239,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1239,"column":0},"generated":{"line":1240,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1240,"column":0},"generated":{"line":1241,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1241,"column":0},"generated":{"line":1242,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1242,"column":0},"generated":{"line":1243,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1243,"column":0},"generated":{"line":1244,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1244,"column":0},"generated":{"line":1245,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1245,"column":0},"generated":{"line":1246,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1246,"column":0},"generated":{"line":1247,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1247,"column":0},"generated":{"line":1248,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1248,"column":0},"generated":{"line":1249,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1249,"column":0},"generated":{"line":1250,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1250,"column":0},"generated":{"line":1251,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1251,"column":0},"generated":{"line":1252,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1252,"column":0},"generated":{"line":1253,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1253,"column":0},"generated":{"line":1254,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1254,"column":0},"generated":{"line":1255,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1255,"column":0},"generated":{"line":1256,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1256,"column":0},"generated":{"line":1257,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1257,"column":0},"generated":{"line":1258,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1258,"column":0},"generated":{"line":1259,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1259,"column":0},"generated":{"line":1260,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1260,"column":0},"generated":{"line":1261,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1261,"column":0},"generated":{"line":1262,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1262,"column":0},"generated":{"line":1263,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1263,"column":0},"generated":{"line":1264,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1264,"column":0},"generated":{"line":1265,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1265,"column":0},"generated":{"line":1266,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1266,"column":0},"generated":{"line":1267,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1267,"column":0},"generated":{"line":1268,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1268,"column":0},"generated":{"line":1269,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1269,"column":0},"generated":{"line":1270,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1270,"column":0},"generated":{"line":1271,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1271,"column":0},"generated":{"line":1272,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1272,"column":0},"generated":{"line":1273,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1273,"column":0},"generated":{"line":1274,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1274,"column":0},"generated":{"line":1275,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1275,"column":0},"generated":{"line":1276,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1276,"column":0},"generated":{"line":1277,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1277,"column":0},"generated":{"line":1278,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1278,"column":0},"generated":{"line":1279,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1279,"column":0},"generated":{"line":1280,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1280,"column":0},"generated":{"line":1281,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1281,"column":0},"generated":{"line":1282,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1282,"column":0},"generated":{"line":1283,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1283,"column":0},"generated":{"line":1284,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1284,"column":0},"generated":{"line":1285,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1285,"column":0},"generated":{"line":1286,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1286,"column":0},"generated":{"line":1287,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1287,"column":0},"generated":{"line":1288,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1288,"column":0},"generated":{"line":1289,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1289,"column":0},"generated":{"line":1290,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1290,"column":0},"generated":{"line":1291,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1291,"column":0},"generated":{"line":1292,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1292,"column":0},"generated":{"line":1293,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1293,"column":0},"generated":{"line":1294,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1294,"column":0},"generated":{"line":1295,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1295,"column":0},"generated":{"line":1296,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1296,"column":0},"generated":{"line":1297,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1297,"column":0},"generated":{"line":1298,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1298,"column":0},"generated":{"line":1299,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1299,"column":0},"generated":{"line":1300,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1300,"column":0},"generated":{"line":1301,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1301,"column":0},"generated":{"line":1302,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1302,"column":0},"generated":{"line":1303,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1303,"column":0},"generated":{"line":1304,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1304,"column":0},"generated":{"line":1305,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1305,"column":0},"generated":{"line":1306,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1306,"column":0},"generated":{"line":1307,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1307,"column":0},"generated":{"line":1308,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1308,"column":0},"generated":{"line":1309,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1309,"column":0},"generated":{"line":1310,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1310,"column":0},"generated":{"line":1311,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1311,"column":0},"generated":{"line":1312,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1312,"column":0},"generated":{"line":1313,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1313,"column":0},"generated":{"line":1314,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1314,"column":0},"generated":{"line":1315,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1315,"column":0},"generated":{"line":1316,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1316,"column":0},"generated":{"line":1317,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1317,"column":0},"generated":{"line":1318,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1318,"column":0},"generated":{"line":1319,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1319,"column":0},"generated":{"line":1320,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1320,"column":0},"generated":{"line":1321,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1321,"column":0},"generated":{"line":1322,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1322,"column":0},"generated":{"line":1323,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1323,"column":0},"generated":{"line":1324,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1324,"column":0},"generated":{"line":1325,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1325,"column":0},"generated":{"line":1326,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1326,"column":0},"generated":{"line":1327,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1327,"column":0},"generated":{"line":1328,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1328,"column":0},"generated":{"line":1329,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1329,"column":0},"generated":{"line":1330,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1330,"column":0},"generated":{"line":1331,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1331,"column":0},"generated":{"line":1332,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1332,"column":0},"generated":{"line":1333,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1333,"column":0},"generated":{"line":1334,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1334,"column":0},"generated":{"line":1335,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1335,"column":0},"generated":{"line":1336,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1336,"column":0},"generated":{"line":1337,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1337,"column":0},"generated":{"line":1338,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1338,"column":0},"generated":{"line":1339,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1339,"column":0},"generated":{"line":1340,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1340,"column":0},"generated":{"line":1341,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1341,"column":0},"generated":{"line":1342,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1342,"column":0},"generated":{"line":1343,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1343,"column":0},"generated":{"line":1344,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1344,"column":0},"generated":{"line":1345,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1345,"column":0},"generated":{"line":1346,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1346,"column":0},"generated":{"line":1347,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1347,"column":0},"generated":{"line":1348,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1348,"column":0},"generated":{"line":1349,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1349,"column":0},"generated":{"line":1350,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1350,"column":0},"generated":{"line":1351,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1351,"column":0},"generated":{"line":1352,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1352,"column":0},"generated":{"line":1353,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1353,"column":0},"generated":{"line":1354,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1354,"column":0},"generated":{"line":1355,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1355,"column":0},"generated":{"line":1356,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1356,"column":0},"generated":{"line":1357,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1357,"column":0},"generated":{"line":1358,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1358,"column":0},"generated":{"line":1359,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1359,"column":0},"generated":{"line":1360,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1360,"column":0},"generated":{"line":1361,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1361,"column":0},"generated":{"line":1362,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1362,"column":0},"generated":{"line":1363,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1363,"column":0},"generated":{"line":1364,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1364,"column":0},"generated":{"line":1365,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1365,"column":0},"generated":{"line":1366,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1366,"column":0},"generated":{"line":1367,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1367,"column":0},"generated":{"line":1368,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1368,"column":0},"generated":{"line":1369,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1369,"column":0},"generated":{"line":1370,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1370,"column":0},"generated":{"line":1371,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1371,"column":0},"generated":{"line":1372,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1372,"column":0},"generated":{"line":1373,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1373,"column":0},"generated":{"line":1374,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1374,"column":0},"generated":{"line":1375,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1375,"column":0},"generated":{"line":1376,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1376,"column":0},"generated":{"line":1377,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1377,"column":0},"generated":{"line":1378,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1378,"column":0},"generated":{"line":1379,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1379,"column":0},"generated":{"line":1380,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1380,"column":0},"generated":{"line":1381,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1381,"column":0},"generated":{"line":1382,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1382,"column":0},"generated":{"line":1383,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1383,"column":0},"generated":{"line":1384,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1384,"column":0},"generated":{"line":1385,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1385,"column":0},"generated":{"line":1386,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1386,"column":0},"generated":{"line":1387,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1387,"column":0},"generated":{"line":1388,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1388,"column":0},"generated":{"line":1389,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1389,"column":0},"generated":{"line":1390,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1390,"column":0},"generated":{"line":1391,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1391,"column":0},"generated":{"line":1392,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1392,"column":0},"generated":{"line":1393,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1393,"column":0},"generated":{"line":1394,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1394,"column":0},"generated":{"line":1395,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1395,"column":0},"generated":{"line":1396,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1396,"column":0},"generated":{"line":1397,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1397,"column":0},"generated":{"line":1398,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1398,"column":0},"generated":{"line":1399,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1399,"column":0},"generated":{"line":1400,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1400,"column":0},"generated":{"line":1401,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1401,"column":0},"generated":{"line":1402,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1402,"column":0},"generated":{"line":1403,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1403,"column":0},"generated":{"line":1404,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1404,"column":0},"generated":{"line":1405,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1405,"column":0},"generated":{"line":1406,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1406,"column":0},"generated":{"line":1407,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1407,"column":0},"generated":{"line":1408,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1408,"column":0},"generated":{"line":1409,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1409,"column":0},"generated":{"line":1410,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1410,"column":0},"generated":{"line":1411,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1411,"column":0},"generated":{"line":1412,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1412,"column":0},"generated":{"line":1413,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1413,"column":0},"generated":{"line":1414,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1414,"column":0},"generated":{"line":1415,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1415,"column":0},"generated":{"line":1416,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1416,"column":0},"generated":{"line":1417,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1417,"column":0},"generated":{"line":1418,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1418,"column":0},"generated":{"line":1419,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1419,"column":0},"generated":{"line":1420,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1420,"column":0},"generated":{"line":1421,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1421,"column":0},"generated":{"line":1422,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1422,"column":0},"generated":{"line":1423,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1423,"column":0},"generated":{"line":1424,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1424,"column":0},"generated":{"line":1425,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1425,"column":0},"generated":{"line":1426,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1426,"column":0},"generated":{"line":1427,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1427,"column":0},"generated":{"line":1428,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1428,"column":0},"generated":{"line":1429,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1429,"column":0},"generated":{"line":1430,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1430,"column":0},"generated":{"line":1431,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1431,"column":0},"generated":{"line":1432,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1432,"column":0},"generated":{"line":1433,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1433,"column":0},"generated":{"line":1434,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1434,"column":0},"generated":{"line":1435,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1435,"column":0},"generated":{"line":1436,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1436,"column":0},"generated":{"line":1437,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1437,"column":0},"generated":{"line":1438,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1438,"column":0},"generated":{"line":1439,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1439,"column":0},"generated":{"line":1440,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1440,"column":0},"generated":{"line":1441,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1441,"column":0},"generated":{"line":1442,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1442,"column":0},"generated":{"line":1443,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1443,"column":0},"generated":{"line":1444,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1444,"column":0},"generated":{"line":1445,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1445,"column":0},"generated":{"line":1446,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1446,"column":0},"generated":{"line":1447,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1447,"column":0},"generated":{"line":1448,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1448,"column":0},"generated":{"line":1449,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1449,"column":0},"generated":{"line":1450,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1450,"column":0},"generated":{"line":1451,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1451,"column":0},"generated":{"line":1452,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1452,"column":0},"generated":{"line":1453,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1453,"column":0},"generated":{"line":1454,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1454,"column":0},"generated":{"line":1455,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1455,"column":0},"generated":{"line":1456,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1456,"column":0},"generated":{"line":1457,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1457,"column":0},"generated":{"line":1458,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1458,"column":0},"generated":{"line":1459,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1459,"column":0},"generated":{"line":1460,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1460,"column":0},"generated":{"line":1461,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1461,"column":0},"generated":{"line":1462,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1462,"column":0},"generated":{"line":1463,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1463,"column":0},"generated":{"line":1464,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1464,"column":0},"generated":{"line":1465,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1465,"column":0},"generated":{"line":1466,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1466,"column":0},"generated":{"line":1467,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1467,"column":0},"generated":{"line":1468,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1468,"column":0},"generated":{"line":1469,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1469,"column":0},"generated":{"line":1470,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1470,"column":0},"generated":{"line":1471,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1471,"column":0},"generated":{"line":1472,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1472,"column":0},"generated":{"line":1473,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1473,"column":0},"generated":{"line":1474,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1474,"column":0},"generated":{"line":1475,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1475,"column":0},"generated":{"line":1476,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1476,"column":0},"generated":{"line":1477,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1477,"column":0},"generated":{"line":1478,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1478,"column":0},"generated":{"line":1479,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1479,"column":0},"generated":{"line":1480,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1480,"column":0},"generated":{"line":1481,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1481,"column":0},"generated":{"line":1482,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1482,"column":0},"generated":{"line":1483,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1483,"column":0},"generated":{"line":1484,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1484,"column":0},"generated":{"line":1485,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1485,"column":0},"generated":{"line":1486,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1486,"column":0},"generated":{"line":1487,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1487,"column":0},"generated":{"line":1488,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1488,"column":0},"generated":{"line":1489,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1489,"column":0},"generated":{"line":1490,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1490,"column":0},"generated":{"line":1491,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1491,"column":0},"generated":{"line":1492,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1492,"column":0},"generated":{"line":1493,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1493,"column":0},"generated":{"line":1494,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1494,"column":0},"generated":{"line":1495,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1495,"column":0},"generated":{"line":1496,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1496,"column":0},"generated":{"line":1497,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1497,"column":0},"generated":{"line":1498,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1498,"column":0},"generated":{"line":1499,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1499,"column":0},"generated":{"line":1500,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1500,"column":0},"generated":{"line":1501,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1501,"column":0},"generated":{"line":1502,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1502,"column":0},"generated":{"line":1503,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1503,"column":0},"generated":{"line":1504,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1504,"column":0},"generated":{"line":1505,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1505,"column":0},"generated":{"line":1506,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1506,"column":0},"generated":{"line":1507,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1507,"column":0},"generated":{"line":1508,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1508,"column":0},"generated":{"line":1509,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1509,"column":0},"generated":{"line":1510,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1510,"column":0},"generated":{"line":1511,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1511,"column":0},"generated":{"line":1512,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1512,"column":0},"generated":{"line":1513,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1513,"column":0},"generated":{"line":1514,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1514,"column":0},"generated":{"line":1515,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1515,"column":0},"generated":{"line":1516,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1516,"column":0},"generated":{"line":1517,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1517,"column":0},"generated":{"line":1518,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1518,"column":0},"generated":{"line":1519,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1519,"column":0},"generated":{"line":1520,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1520,"column":0},"generated":{"line":1521,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1521,"column":0},"generated":{"line":1522,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1522,"column":0},"generated":{"line":1523,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1523,"column":0},"generated":{"line":1524,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1524,"column":0},"generated":{"line":1525,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1525,"column":0},"generated":{"line":1526,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1526,"column":0},"generated":{"line":1527,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1527,"column":0},"generated":{"line":1528,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1528,"column":0},"generated":{"line":1529,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1529,"column":0},"generated":{"line":1530,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1530,"column":0},"generated":{"line":1531,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1531,"column":0},"generated":{"line":1532,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1532,"column":0},"generated":{"line":1533,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1533,"column":0},"generated":{"line":1534,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1534,"column":0},"generated":{"line":1535,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1535,"column":0},"generated":{"line":1536,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1536,"column":0},"generated":{"line":1537,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1537,"column":0},"generated":{"line":1538,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1538,"column":0},"generated":{"line":1539,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1539,"column":0},"generated":{"line":1540,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1540,"column":0},"generated":{"line":1541,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1541,"column":0},"generated":{"line":1542,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1542,"column":0},"generated":{"line":1543,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1543,"column":0},"generated":{"line":1544,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1544,"column":0},"generated":{"line":1545,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1545,"column":0},"generated":{"line":1546,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1546,"column":0},"generated":{"line":1547,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1547,"column":0},"generated":{"line":1548,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1548,"column":0},"generated":{"line":1549,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1549,"column":0},"generated":{"line":1550,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1550,"column":0},"generated":{"line":1551,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1551,"column":0},"generated":{"line":1552,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1552,"column":0},"generated":{"line":1553,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1553,"column":0},"generated":{"line":1554,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1554,"column":0},"generated":{"line":1555,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1555,"column":0},"generated":{"line":1556,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1556,"column":0},"generated":{"line":1557,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1557,"column":0},"generated":{"line":1558,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1558,"column":0},"generated":{"line":1559,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1559,"column":0},"generated":{"line":1560,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1560,"column":0},"generated":{"line":1561,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1561,"column":0},"generated":{"line":1562,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1562,"column":0},"generated":{"line":1563,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1563,"column":0},"generated":{"line":1564,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1564,"column":0},"generated":{"line":1565,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1565,"column":0},"generated":{"line":1566,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1566,"column":0},"generated":{"line":1567,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1567,"column":0},"generated":{"line":1568,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1568,"column":0},"generated":{"line":1569,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1569,"column":0},"generated":{"line":1570,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1570,"column":0},"generated":{"line":1571,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1571,"column":0},"generated":{"line":1572,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1572,"column":0},"generated":{"line":1573,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1573,"column":0},"generated":{"line":1574,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1574,"column":0},"generated":{"line":1575,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1575,"column":0},"generated":{"line":1576,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1576,"column":0},"generated":{"line":1577,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1577,"column":0},"generated":{"line":1578,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1578,"column":0},"generated":{"line":1579,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1579,"column":0},"generated":{"line":1580,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1580,"column":0},"generated":{"line":1581,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1581,"column":0},"generated":{"line":1582,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1582,"column":0},"generated":{"line":1583,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1583,"column":0},"generated":{"line":1584,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1584,"column":0},"generated":{"line":1585,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1585,"column":0},"generated":{"line":1586,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1586,"column":0},"generated":{"line":1587,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1587,"column":0},"generated":{"line":1588,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1588,"column":0},"generated":{"line":1589,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1589,"column":0},"generated":{"line":1590,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1590,"column":0},"generated":{"line":1591,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1591,"column":0},"generated":{"line":1592,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1592,"column":0},"generated":{"line":1593,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1593,"column":0},"generated":{"line":1594,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1594,"column":0},"generated":{"line":1595,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1595,"column":0},"generated":{"line":1596,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1596,"column":0},"generated":{"line":1597,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1597,"column":0},"generated":{"line":1598,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1598,"column":0},"generated":{"line":1599,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1599,"column":0},"generated":{"line":1600,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1600,"column":0},"generated":{"line":1601,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1601,"column":0},"generated":{"line":1602,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1602,"column":0},"generated":{"line":1603,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1603,"column":0},"generated":{"line":1604,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1604,"column":0},"generated":{"line":1605,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1605,"column":0},"generated":{"line":1606,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1606,"column":0},"generated":{"line":1607,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1607,"column":0},"generated":{"line":1608,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1608,"column":0},"generated":{"line":1609,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1609,"column":0},"generated":{"line":1610,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1610,"column":0},"generated":{"line":1611,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1611,"column":0},"generated":{"line":1612,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1612,"column":0},"generated":{"line":1613,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1613,"column":0},"generated":{"line":1614,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1614,"column":0},"generated":{"line":1615,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1615,"column":0},"generated":{"line":1616,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1616,"column":0},"generated":{"line":1617,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1617,"column":0},"generated":{"line":1618,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1618,"column":0},"generated":{"line":1619,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1619,"column":0},"generated":{"line":1620,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1620,"column":0},"generated":{"line":1621,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1621,"column":0},"generated":{"line":1622,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1622,"column":0},"generated":{"line":1623,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1623,"column":0},"generated":{"line":1624,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1624,"column":0},"generated":{"line":1625,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1625,"column":0},"generated":{"line":1626,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1626,"column":0},"generated":{"line":1627,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1627,"column":0},"generated":{"line":1628,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1628,"column":0},"generated":{"line":1629,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1629,"column":0},"generated":{"line":1630,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1630,"column":0},"generated":{"line":1631,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1631,"column":0},"generated":{"line":1632,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1632,"column":0},"generated":{"line":1633,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1633,"column":0},"generated":{"line":1634,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1634,"column":0},"generated":{"line":1635,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1635,"column":0},"generated":{"line":1636,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1636,"column":0},"generated":{"line":1637,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1637,"column":0},"generated":{"line":1638,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1638,"column":0},"generated":{"line":1639,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1639,"column":0},"generated":{"line":1640,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1640,"column":0},"generated":{"line":1641,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1641,"column":0},"generated":{"line":1642,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1642,"column":0},"generated":{"line":1643,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1643,"column":0},"generated":{"line":1644,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1644,"column":0},"generated":{"line":1645,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1645,"column":0},"generated":{"line":1646,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1646,"column":0},"generated":{"line":1647,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1647,"column":0},"generated":{"line":1648,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1648,"column":0},"generated":{"line":1649,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1649,"column":0},"generated":{"line":1650,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1650,"column":0},"generated":{"line":1651,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1651,"column":0},"generated":{"line":1652,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1652,"column":0},"generated":{"line":1653,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1653,"column":0},"generated":{"line":1654,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1654,"column":0},"generated":{"line":1655,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1655,"column":0},"generated":{"line":1656,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1656,"column":0},"generated":{"line":1657,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1657,"column":0},"generated":{"line":1658,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1658,"column":0},"generated":{"line":1659,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1659,"column":0},"generated":{"line":1660,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1660,"column":0},"generated":{"line":1661,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1661,"column":0},"generated":{"line":1662,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1662,"column":0},"generated":{"line":1663,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1663,"column":0},"generated":{"line":1664,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1664,"column":0},"generated":{"line":1665,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1665,"column":0},"generated":{"line":1666,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1666,"column":0},"generated":{"line":1667,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1667,"column":0},"generated":{"line":1668,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1668,"column":0},"generated":{"line":1669,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1669,"column":0},"generated":{"line":1670,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1670,"column":0},"generated":{"line":1671,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1671,"column":0},"generated":{"line":1672,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1672,"column":0},"generated":{"line":1673,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1673,"column":0},"generated":{"line":1674,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1674,"column":0},"generated":{"line":1675,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1675,"column":0},"generated":{"line":1676,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1676,"column":0},"generated":{"line":1677,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1677,"column":0},"generated":{"line":1678,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1678,"column":0},"generated":{"line":1679,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1679,"column":0},"generated":{"line":1680,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1680,"column":0},"generated":{"line":1681,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1681,"column":0},"generated":{"line":1682,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1682,"column":0},"generated":{"line":1683,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1683,"column":0},"generated":{"line":1684,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1684,"column":0},"generated":{"line":1685,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1685,"column":0},"generated":{"line":1686,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1686,"column":0},"generated":{"line":1687,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1687,"column":0},"generated":{"line":1688,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1688,"column":0},"generated":{"line":1689,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1689,"column":0},"generated":{"line":1690,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1690,"column":0},"generated":{"line":1691,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1691,"column":0},"generated":{"line":1692,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1692,"column":0},"generated":{"line":1693,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1693,"column":0},"generated":{"line":1694,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1694,"column":0},"generated":{"line":1695,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1695,"column":0},"generated":{"line":1696,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1696,"column":0},"generated":{"line":1697,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1697,"column":0},"generated":{"line":1698,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1698,"column":0},"generated":{"line":1699,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1699,"column":0},"generated":{"line":1700,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1700,"column":0},"generated":{"line":1701,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1701,"column":0},"generated":{"line":1702,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1702,"column":0},"generated":{"line":1703,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1703,"column":0},"generated":{"line":1704,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1704,"column":0},"generated":{"line":1705,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1705,"column":0},"generated":{"line":1706,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1706,"column":0},"generated":{"line":1707,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1707,"column":0},"generated":{"line":1708,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1708,"column":0},"generated":{"line":1709,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1709,"column":0},"generated":{"line":1710,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1710,"column":0},"generated":{"line":1711,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1711,"column":0},"generated":{"line":1712,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1712,"column":0},"generated":{"line":1713,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1713,"column":0},"generated":{"line":1714,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1714,"column":0},"generated":{"line":1715,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1715,"column":0},"generated":{"line":1716,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1716,"column":0},"generated":{"line":1717,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1717,"column":0},"generated":{"line":1718,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1718,"column":0},"generated":{"line":1719,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1719,"column":0},"generated":{"line":1720,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1720,"column":0},"generated":{"line":1721,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1721,"column":0},"generated":{"line":1722,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1722,"column":0},"generated":{"line":1723,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1723,"column":0},"generated":{"line":1724,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1724,"column":0},"generated":{"line":1725,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1725,"column":0},"generated":{"line":1726,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1726,"column":0},"generated":{"line":1727,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1727,"column":0},"generated":{"line":1728,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1728,"column":0},"generated":{"line":1729,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1729,"column":0},"generated":{"line":1730,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1730,"column":0},"generated":{"line":1731,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1731,"column":0},"generated":{"line":1732,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1732,"column":0},"generated":{"line":1733,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1733,"column":0},"generated":{"line":1734,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1734,"column":0},"generated":{"line":1735,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1735,"column":0},"generated":{"line":1736,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1736,"column":0},"generated":{"line":1737,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1737,"column":0},"generated":{"line":1738,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1738,"column":0},"generated":{"line":1739,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1739,"column":0},"generated":{"line":1740,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1740,"column":0},"generated":{"line":1741,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1741,"column":0},"generated":{"line":1742,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1742,"column":0},"generated":{"line":1743,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1743,"column":0},"generated":{"line":1744,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1744,"column":0},"generated":{"line":1745,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1745,"column":0},"generated":{"line":1746,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1746,"column":0},"generated":{"line":1747,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1747,"column":0},"generated":{"line":1748,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1748,"column":0},"generated":{"line":1749,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1749,"column":0},"generated":{"line":1750,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1750,"column":0},"generated":{"line":1751,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1751,"column":0},"generated":{"line":1752,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1752,"column":0},"generated":{"line":1753,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1753,"column":0},"generated":{"line":1754,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1754,"column":0},"generated":{"line":1755,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1755,"column":0},"generated":{"line":1756,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1756,"column":0},"generated":{"line":1757,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1757,"column":0},"generated":{"line":1758,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1758,"column":0},"generated":{"line":1759,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1759,"column":0},"generated":{"line":1760,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1760,"column":0},"generated":{"line":1761,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1761,"column":0},"generated":{"line":1762,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1762,"column":0},"generated":{"line":1763,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1763,"column":0},"generated":{"line":1764,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1764,"column":0},"generated":{"line":1765,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1765,"column":0},"generated":{"line":1766,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1766,"column":0},"generated":{"line":1767,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1767,"column":0},"generated":{"line":1768,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1768,"column":0},"generated":{"line":1769,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1769,"column":0},"generated":{"line":1770,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1770,"column":0},"generated":{"line":1771,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1771,"column":0},"generated":{"line":1772,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1772,"column":0},"generated":{"line":1773,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1773,"column":0},"generated":{"line":1774,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1774,"column":0},"generated":{"line":1775,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1775,"column":0},"generated":{"line":1776,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1776,"column":0},"generated":{"line":1777,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1777,"column":0},"generated":{"line":1778,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1778,"column":0},"generated":{"line":1779,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1779,"column":0},"generated":{"line":1780,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1780,"column":0},"generated":{"line":1781,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1781,"column":0},"generated":{"line":1782,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1782,"column":0},"generated":{"line":1783,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1783,"column":0},"generated":{"line":1784,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1784,"column":0},"generated":{"line":1785,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1785,"column":0},"generated":{"line":1786,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1786,"column":0},"generated":{"line":1787,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1787,"column":0},"generated":{"line":1788,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1788,"column":0},"generated":{"line":1789,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1789,"column":0},"generated":{"line":1790,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1790,"column":0},"generated":{"line":1791,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1791,"column":0},"generated":{"line":1792,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1792,"column":0},"generated":{"line":1793,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1793,"column":0},"generated":{"line":1794,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1794,"column":0},"generated":{"line":1795,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1795,"column":0},"generated":{"line":1796,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1796,"column":0},"generated":{"line":1797,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1797,"column":0},"generated":{"line":1798,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1798,"column":0},"generated":{"line":1799,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1799,"column":0},"generated":{"line":1800,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1800,"column":0},"generated":{"line":1801,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1801,"column":0},"generated":{"line":1802,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1802,"column":0},"generated":{"line":1803,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1803,"column":0},"generated":{"line":1804,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1804,"column":0},"generated":{"line":1805,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1805,"column":0},"generated":{"line":1806,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1806,"column":0},"generated":{"line":1807,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1807,"column":0},"generated":{"line":1808,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1808,"column":0},"generated":{"line":1809,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1809,"column":0},"generated":{"line":1810,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1810,"column":0},"generated":{"line":1811,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1811,"column":0},"generated":{"line":1812,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1812,"column":0},"generated":{"line":1813,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1813,"column":0},"generated":{"line":1814,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1814,"column":0},"generated":{"line":1815,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1815,"column":0},"generated":{"line":1816,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1816,"column":0},"generated":{"line":1817,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1817,"column":0},"generated":{"line":1818,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1818,"column":0},"generated":{"line":1819,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1819,"column":0},"generated":{"line":1820,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1820,"column":0},"generated":{"line":1821,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1821,"column":0},"generated":{"line":1822,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1822,"column":0},"generated":{"line":1823,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1823,"column":0},"generated":{"line":1824,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1824,"column":0},"generated":{"line":1825,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1825,"column":0},"generated":{"line":1826,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1826,"column":0},"generated":{"line":1827,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1827,"column":0},"generated":{"line":1828,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1828,"column":0},"generated":{"line":1829,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1829,"column":0},"generated":{"line":1830,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1830,"column":0},"generated":{"line":1831,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1831,"column":0},"generated":{"line":1832,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1832,"column":0},"generated":{"line":1833,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1833,"column":0},"generated":{"line":1834,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1834,"column":0},"generated":{"line":1835,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1835,"column":0},"generated":{"line":1836,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1836,"column":0},"generated":{"line":1837,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1837,"column":0},"generated":{"line":1838,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1838,"column":0},"generated":{"line":1839,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1839,"column":0},"generated":{"line":1840,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1840,"column":0},"generated":{"line":1841,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1841,"column":0},"generated":{"line":1842,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1842,"column":0},"generated":{"line":1843,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1843,"column":0},"generated":{"line":1844,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1844,"column":0},"generated":{"line":1845,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1845,"column":0},"generated":{"line":1846,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1846,"column":0},"generated":{"line":1847,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1847,"column":0},"generated":{"line":1848,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1848,"column":0},"generated":{"line":1849,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1849,"column":0},"generated":{"line":1850,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1850,"column":0},"generated":{"line":1851,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1851,"column":0},"generated":{"line":1852,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1852,"column":0},"generated":{"line":1853,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1853,"column":0},"generated":{"line":1854,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1854,"column":0},"generated":{"line":1855,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1855,"column":0},"generated":{"line":1856,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1856,"column":0},"generated":{"line":1857,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1857,"column":0},"generated":{"line":1858,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1858,"column":0},"generated":{"line":1859,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1859,"column":0},"generated":{"line":1860,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1860,"column":0},"generated":{"line":1861,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1861,"column":0},"generated":{"line":1862,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1862,"column":0},"generated":{"line":1863,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1863,"column":0},"generated":{"line":1864,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1864,"column":0},"generated":{"line":1865,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1865,"column":0},"generated":{"line":1866,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1866,"column":0},"generated":{"line":1867,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1867,"column":0},"generated":{"line":1868,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1868,"column":0},"generated":{"line":1869,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1869,"column":0},"generated":{"line":1870,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1870,"column":0},"generated":{"line":1871,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1871,"column":0},"generated":{"line":1872,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1872,"column":0},"generated":{"line":1873,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1873,"column":0},"generated":{"line":1874,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1874,"column":0},"generated":{"line":1875,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1875,"column":0},"generated":{"line":1876,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1876,"column":0},"generated":{"line":1877,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1877,"column":0},"generated":{"line":1878,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1878,"column":0},"generated":{"line":1879,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1879,"column":0},"generated":{"line":1880,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1880,"column":0},"generated":{"line":1881,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1881,"column":0},"generated":{"line":1882,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1882,"column":0},"generated":{"line":1883,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1883,"column":0},"generated":{"line":1884,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1884,"column":0},"generated":{"line":1885,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1885,"column":0},"generated":{"line":1886,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1886,"column":0},"generated":{"line":1887,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1887,"column":0},"generated":{"line":1888,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1888,"column":0},"generated":{"line":1889,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1889,"column":0},"generated":{"line":1890,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1890,"column":0},"generated":{"line":1891,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1891,"column":0},"generated":{"line":1892,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1892,"column":0},"generated":{"line":1893,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1893,"column":0},"generated":{"line":1894,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1894,"column":0},"generated":{"line":1895,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1895,"column":0},"generated":{"line":1896,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1896,"column":0},"generated":{"line":1897,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1897,"column":0},"generated":{"line":1898,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1898,"column":0},"generated":{"line":1899,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1899,"column":0},"generated":{"line":1900,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1900,"column":0},"generated":{"line":1901,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1901,"column":0},"generated":{"line":1902,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1902,"column":0},"generated":{"line":1903,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1903,"column":0},"generated":{"line":1904,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1904,"column":0},"generated":{"line":1905,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1905,"column":0},"generated":{"line":1906,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1906,"column":0},"generated":{"line":1907,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1907,"column":0},"generated":{"line":1908,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1908,"column":0},"generated":{"line":1909,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1909,"column":0},"generated":{"line":1910,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1910,"column":0},"generated":{"line":1911,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1911,"column":0},"generated":{"line":1912,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1912,"column":0},"generated":{"line":1913,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1913,"column":0},"generated":{"line":1914,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1914,"column":0},"generated":{"line":1915,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1915,"column":0},"generated":{"line":1916,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1916,"column":0},"generated":{"line":1917,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1917,"column":0},"generated":{"line":1918,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1918,"column":0},"generated":{"line":1919,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1919,"column":0},"generated":{"line":1920,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1920,"column":0},"generated":{"line":1921,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1921,"column":0},"generated":{"line":1922,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1922,"column":0},"generated":{"line":1923,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1923,"column":0},"generated":{"line":1924,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1924,"column":0},"generated":{"line":1925,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1925,"column":0},"generated":{"line":1926,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1926,"column":0},"generated":{"line":1927,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1927,"column":0},"generated":{"line":1928,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1928,"column":0},"generated":{"line":1929,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1929,"column":0},"generated":{"line":1930,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1930,"column":0},"generated":{"line":1931,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1931,"column":0},"generated":{"line":1932,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1932,"column":0},"generated":{"line":1933,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1933,"column":0},"generated":{"line":1934,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1934,"column":0},"generated":{"line":1935,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1935,"column":0},"generated":{"line":1936,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1936,"column":0},"generated":{"line":1937,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1937,"column":0},"generated":{"line":1938,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1938,"column":0},"generated":{"line":1939,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1939,"column":0},"generated":{"line":1940,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1940,"column":0},"generated":{"line":1941,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1941,"column":0},"generated":{"line":1942,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1942,"column":0},"generated":{"line":1943,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1943,"column":0},"generated":{"line":1944,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1944,"column":0},"generated":{"line":1945,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1945,"column":0},"generated":{"line":1946,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1946,"column":0},"generated":{"line":1947,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1947,"column":0},"generated":{"line":1948,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1948,"column":0},"generated":{"line":1949,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1949,"column":0},"generated":{"line":1950,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1950,"column":0},"generated":{"line":1951,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1951,"column":0},"generated":{"line":1952,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1952,"column":0},"generated":{"line":1953,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1953,"column":0},"generated":{"line":1954,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1954,"column":0},"generated":{"line":1955,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1955,"column":0},"generated":{"line":1956,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1956,"column":0},"generated":{"line":1957,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1957,"column":0},"generated":{"line":1958,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1958,"column":0},"generated":{"line":1959,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1959,"column":0},"generated":{"line":1960,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1960,"column":0},"generated":{"line":1961,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1961,"column":0},"generated":{"line":1962,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1962,"column":0},"generated":{"line":1963,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1963,"column":0},"generated":{"line":1964,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1964,"column":0},"generated":{"line":1965,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1965,"column":0},"generated":{"line":1966,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1966,"column":0},"generated":{"line":1967,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1967,"column":0},"generated":{"line":1968,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1968,"column":0},"generated":{"line":1969,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1969,"column":0},"generated":{"line":1970,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1970,"column":0},"generated":{"line":1971,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1971,"column":0},"generated":{"line":1972,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1972,"column":0},"generated":{"line":1973,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1973,"column":0},"generated":{"line":1974,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1974,"column":0},"generated":{"line":1975,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1975,"column":0},"generated":{"line":1976,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1976,"column":0},"generated":{"line":1977,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1977,"column":0},"generated":{"line":1978,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1978,"column":0},"generated":{"line":1979,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1979,"column":0},"generated":{"line":1980,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1980,"column":0},"generated":{"line":1981,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1981,"column":0},"generated":{"line":1982,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1982,"column":0},"generated":{"line":1983,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1983,"column":0},"generated":{"line":1984,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1984,"column":0},"generated":{"line":1985,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1985,"column":0},"generated":{"line":1986,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1986,"column":0},"generated":{"line":1987,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1987,"column":0},"generated":{"line":1988,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1988,"column":0},"generated":{"line":1989,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1989,"column":0},"generated":{"line":1990,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1990,"column":0},"generated":{"line":1991,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1991,"column":0},"generated":{"line":1992,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1992,"column":0},"generated":{"line":1993,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1993,"column":0},"generated":{"line":1994,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1994,"column":0},"generated":{"line":1995,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1995,"column":0},"generated":{"line":1996,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1996,"column":0},"generated":{"line":1997,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1997,"column":0},"generated":{"line":1998,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1998,"column":0},"generated":{"line":1999,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":1999,"column":0},"generated":{"line":2000,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2000,"column":0},"generated":{"line":2001,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2001,"column":0},"generated":{"line":2002,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2002,"column":0},"generated":{"line":2003,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2003,"column":0},"generated":{"line":2004,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2004,"column":0},"generated":{"line":2005,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2005,"column":0},"generated":{"line":2006,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2006,"column":0},"generated":{"line":2007,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2007,"column":0},"generated":{"line":2008,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2008,"column":0},"generated":{"line":2009,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2009,"column":0},"generated":{"line":2010,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2010,"column":0},"generated":{"line":2011,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2011,"column":0},"generated":{"line":2012,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2012,"column":0},"generated":{"line":2013,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2013,"column":0},"generated":{"line":2014,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2014,"column":0},"generated":{"line":2015,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2015,"column":0},"generated":{"line":2016,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2016,"column":0},"generated":{"line":2017,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2017,"column":0},"generated":{"line":2018,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2018,"column":0},"generated":{"line":2019,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2019,"column":0},"generated":{"line":2020,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2020,"column":0},"generated":{"line":2021,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2021,"column":0},"generated":{"line":2022,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2022,"column":0},"generated":{"line":2023,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2023,"column":0},"generated":{"line":2024,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2024,"column":0},"generated":{"line":2025,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2025,"column":0},"generated":{"line":2026,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2026,"column":0},"generated":{"line":2027,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2027,"column":0},"generated":{"line":2028,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2028,"column":0},"generated":{"line":2029,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2029,"column":0},"generated":{"line":2030,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2030,"column":0},"generated":{"line":2031,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2031,"column":0},"generated":{"line":2032,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2032,"column":0},"generated":{"line":2033,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2033,"column":0},"generated":{"line":2034,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2034,"column":0},"generated":{"line":2035,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2035,"column":0},"generated":{"line":2036,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2036,"column":0},"generated":{"line":2037,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2037,"column":0},"generated":{"line":2038,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2038,"column":0},"generated":{"line":2039,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2039,"column":0},"generated":{"line":2040,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2040,"column":0},"generated":{"line":2041,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2041,"column":0},"generated":{"line":2042,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2042,"column":0},"generated":{"line":2043,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2043,"column":0},"generated":{"line":2044,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2044,"column":0},"generated":{"line":2045,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2045,"column":0},"generated":{"line":2046,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2046,"column":0},"generated":{"line":2047,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2047,"column":0},"generated":{"line":2048,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2048,"column":0},"generated":{"line":2049,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2049,"column":0},"generated":{"line":2050,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2050,"column":0},"generated":{"line":2051,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2051,"column":0},"generated":{"line":2052,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2052,"column":0},"generated":{"line":2053,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2053,"column":0},"generated":{"line":2054,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2054,"column":0},"generated":{"line":2055,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2055,"column":0},"generated":{"line":2056,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2056,"column":0},"generated":{"line":2057,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2057,"column":0},"generated":{"line":2058,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2058,"column":0},"generated":{"line":2059,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2059,"column":0},"generated":{"line":2060,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2060,"column":0},"generated":{"line":2061,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2061,"column":0},"generated":{"line":2062,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2062,"column":0},"generated":{"line":2063,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2063,"column":0},"generated":{"line":2064,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2064,"column":0},"generated":{"line":2065,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2065,"column":0},"generated":{"line":2066,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2066,"column":0},"generated":{"line":2067,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2067,"column":0},"generated":{"line":2068,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2068,"column":0},"generated":{"line":2069,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2069,"column":0},"generated":{"line":2070,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2070,"column":0},"generated":{"line":2071,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2071,"column":0},"generated":{"line":2072,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2072,"column":0},"generated":{"line":2073,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2073,"column":0},"generated":{"line":2074,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2074,"column":0},"generated":{"line":2075,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2075,"column":0},"generated":{"line":2076,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2076,"column":0},"generated":{"line":2077,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2077,"column":0},"generated":{"line":2078,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2078,"column":0},"generated":{"line":2079,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2079,"column":0},"generated":{"line":2080,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2080,"column":0},"generated":{"line":2081,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2081,"column":0},"generated":{"line":2082,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2082,"column":0},"generated":{"line":2083,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2083,"column":0},"generated":{"line":2084,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2084,"column":0},"generated":{"line":2085,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2085,"column":0},"generated":{"line":2086,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2086,"column":0},"generated":{"line":2087,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2087,"column":0},"generated":{"line":2088,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2088,"column":0},"generated":{"line":2089,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2089,"column":0},"generated":{"line":2090,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2090,"column":0},"generated":{"line":2091,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2091,"column":0},"generated":{"line":2092,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2092,"column":0},"generated":{"line":2093,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2093,"column":0},"generated":{"line":2094,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2094,"column":0},"generated":{"line":2095,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2095,"column":0},"generated":{"line":2096,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2096,"column":0},"generated":{"line":2097,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2097,"column":0},"generated":{"line":2098,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2098,"column":0},"generated":{"line":2099,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2099,"column":0},"generated":{"line":2100,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2100,"column":0},"generated":{"line":2101,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2101,"column":0},"generated":{"line":2102,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2102,"column":0},"generated":{"line":2103,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2103,"column":0},"generated":{"line":2104,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2104,"column":0},"generated":{"line":2105,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2105,"column":0},"generated":{"line":2106,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2106,"column":0},"generated":{"line":2107,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2107,"column":0},"generated":{"line":2108,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2108,"column":0},"generated":{"line":2109,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2109,"column":0},"generated":{"line":2110,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2110,"column":0},"generated":{"line":2111,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2111,"column":0},"generated":{"line":2112,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2112,"column":0},"generated":{"line":2113,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2113,"column":0},"generated":{"line":2114,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2114,"column":0},"generated":{"line":2115,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2115,"column":0},"generated":{"line":2116,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2116,"column":0},"generated":{"line":2117,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2117,"column":0},"generated":{"line":2118,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2118,"column":0},"generated":{"line":2119,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2119,"column":0},"generated":{"line":2120,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2120,"column":0},"generated":{"line":2121,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2121,"column":0},"generated":{"line":2122,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2122,"column":0},"generated":{"line":2123,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2123,"column":0},"generated":{"line":2124,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2124,"column":0},"generated":{"line":2125,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2125,"column":0},"generated":{"line":2126,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2126,"column":0},"generated":{"line":2127,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2127,"column":0},"generated":{"line":2128,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2128,"column":0},"generated":{"line":2129,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2129,"column":0},"generated":{"line":2130,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2130,"column":0},"generated":{"line":2131,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2131,"column":0},"generated":{"line":2132,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2132,"column":0},"generated":{"line":2133,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2133,"column":0},"generated":{"line":2134,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2134,"column":0},"generated":{"line":2135,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2135,"column":0},"generated":{"line":2136,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2136,"column":0},"generated":{"line":2137,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2137,"column":0},"generated":{"line":2138,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2138,"column":0},"generated":{"line":2139,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2139,"column":0},"generated":{"line":2140,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2140,"column":0},"generated":{"line":2141,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2141,"column":0},"generated":{"line":2142,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2142,"column":0},"generated":{"line":2143,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2143,"column":0},"generated":{"line":2144,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2144,"column":0},"generated":{"line":2145,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2145,"column":0},"generated":{"line":2146,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2146,"column":0},"generated":{"line":2147,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2147,"column":0},"generated":{"line":2148,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2148,"column":0},"generated":{"line":2149,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2149,"column":0},"generated":{"line":2150,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2150,"column":0},"generated":{"line":2151,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2151,"column":0},"generated":{"line":2152,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2152,"column":0},"generated":{"line":2153,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2153,"column":0},"generated":{"line":2154,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2154,"column":0},"generated":{"line":2155,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2155,"column":0},"generated":{"line":2156,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2156,"column":0},"generated":{"line":2157,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2157,"column":0},"generated":{"line":2158,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2158,"column":0},"generated":{"line":2159,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2159,"column":0},"generated":{"line":2160,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2160,"column":0},"generated":{"line":2161,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2161,"column":0},"generated":{"line":2162,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2162,"column":0},"generated":{"line":2163,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2163,"column":0},"generated":{"line":2164,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2164,"column":0},"generated":{"line":2165,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2165,"column":0},"generated":{"line":2166,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2166,"column":0},"generated":{"line":2167,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2167,"column":0},"generated":{"line":2168,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2168,"column":0},"generated":{"line":2169,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2169,"column":0},"generated":{"line":2170,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2170,"column":0},"generated":{"line":2171,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2171,"column":0},"generated":{"line":2172,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2172,"column":0},"generated":{"line":2173,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2173,"column":0},"generated":{"line":2174,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2174,"column":0},"generated":{"line":2175,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2175,"column":0},"generated":{"line":2176,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2176,"column":0},"generated":{"line":2177,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2177,"column":0},"generated":{"line":2178,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2178,"column":0},"generated":{"line":2179,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2179,"column":0},"generated":{"line":2180,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2180,"column":0},"generated":{"line":2181,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2181,"column":0},"generated":{"line":2182,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2182,"column":0},"generated":{"line":2183,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2183,"column":0},"generated":{"line":2184,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2184,"column":0},"generated":{"line":2185,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2185,"column":0},"generated":{"line":2186,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2186,"column":0},"generated":{"line":2187,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2187,"column":0},"generated":{"line":2188,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2188,"column":0},"generated":{"line":2189,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2189,"column":0},"generated":{"line":2190,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2190,"column":0},"generated":{"line":2191,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2191,"column":0},"generated":{"line":2192,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2192,"column":0},"generated":{"line":2193,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2193,"column":0},"generated":{"line":2194,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2194,"column":0},"generated":{"line":2195,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2195,"column":0},"generated":{"line":2196,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2196,"column":0},"generated":{"line":2197,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2197,"column":0},"generated":{"line":2198,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2198,"column":0},"generated":{"line":2199,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2199,"column":0},"generated":{"line":2200,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2200,"column":0},"generated":{"line":2201,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2201,"column":0},"generated":{"line":2202,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2202,"column":0},"generated":{"line":2203,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2203,"column":0},"generated":{"line":2204,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2204,"column":0},"generated":{"line":2205,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2205,"column":0},"generated":{"line":2206,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2206,"column":0},"generated":{"line":2207,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2207,"column":0},"generated":{"line":2208,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2208,"column":0},"generated":{"line":2209,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2209,"column":0},"generated":{"line":2210,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2210,"column":0},"generated":{"line":2211,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2211,"column":0},"generated":{"line":2212,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2212,"column":0},"generated":{"line":2213,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2213,"column":0},"generated":{"line":2214,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2214,"column":0},"generated":{"line":2215,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2215,"column":0},"generated":{"line":2216,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2216,"column":0},"generated":{"line":2217,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2217,"column":0},"generated":{"line":2218,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2218,"column":0},"generated":{"line":2219,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2219,"column":0},"generated":{"line":2220,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2220,"column":0},"generated":{"line":2221,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2221,"column":0},"generated":{"line":2222,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2222,"column":0},"generated":{"line":2223,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2223,"column":0},"generated":{"line":2224,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2224,"column":0},"generated":{"line":2225,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2225,"column":0},"generated":{"line":2226,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2226,"column":0},"generated":{"line":2227,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2227,"column":0},"generated":{"line":2228,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2228,"column":0},"generated":{"line":2229,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2229,"column":0},"generated":{"line":2230,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2230,"column":0},"generated":{"line":2231,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2231,"column":0},"generated":{"line":2232,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2232,"column":0},"generated":{"line":2233,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2233,"column":0},"generated":{"line":2234,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2234,"column":0},"generated":{"line":2235,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2235,"column":0},"generated":{"line":2236,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2236,"column":0},"generated":{"line":2237,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2237,"column":0},"generated":{"line":2238,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2238,"column":0},"generated":{"line":2239,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2239,"column":0},"generated":{"line":2240,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2240,"column":0},"generated":{"line":2241,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2241,"column":0},"generated":{"line":2242,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2242,"column":0},"generated":{"line":2243,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2243,"column":0},"generated":{"line":2244,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2244,"column":0},"generated":{"line":2245,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2245,"column":0},"generated":{"line":2246,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2246,"column":0},"generated":{"line":2247,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2247,"column":0},"generated":{"line":2248,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2248,"column":0},"generated":{"line":2249,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2249,"column":0},"generated":{"line":2250,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2250,"column":0},"generated":{"line":2251,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2251,"column":0},"generated":{"line":2252,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2252,"column":0},"generated":{"line":2253,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2253,"column":0},"generated":{"line":2254,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2254,"column":0},"generated":{"line":2255,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2255,"column":0},"generated":{"line":2256,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2256,"column":0},"generated":{"line":2257,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2257,"column":0},"generated":{"line":2258,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2258,"column":0},"generated":{"line":2259,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2259,"column":0},"generated":{"line":2260,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2260,"column":0},"generated":{"line":2261,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2261,"column":0},"generated":{"line":2262,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2262,"column":0},"generated":{"line":2263,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2263,"column":0},"generated":{"line":2264,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2264,"column":0},"generated":{"line":2265,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2265,"column":0},"generated":{"line":2266,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2266,"column":0},"generated":{"line":2267,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2267,"column":0},"generated":{"line":2268,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2268,"column":0},"generated":{"line":2269,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2269,"column":0},"generated":{"line":2270,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2270,"column":0},"generated":{"line":2271,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2271,"column":0},"generated":{"line":2272,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2272,"column":0},"generated":{"line":2273,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2273,"column":0},"generated":{"line":2274,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2274,"column":0},"generated":{"line":2275,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2275,"column":0},"generated":{"line":2276,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2276,"column":0},"generated":{"line":2277,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2277,"column":0},"generated":{"line":2278,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2278,"column":0},"generated":{"line":2279,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2279,"column":0},"generated":{"line":2280,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2280,"column":0},"generated":{"line":2281,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2281,"column":0},"generated":{"line":2282,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2282,"column":0},"generated":{"line":2283,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2283,"column":0},"generated":{"line":2284,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2284,"column":0},"generated":{"line":2285,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2285,"column":0},"generated":{"line":2286,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2286,"column":0},"generated":{"line":2287,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2287,"column":0},"generated":{"line":2288,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2288,"column":0},"generated":{"line":2289,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2289,"column":0},"generated":{"line":2290,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2290,"column":0},"generated":{"line":2291,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2291,"column":0},"generated":{"line":2292,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2292,"column":0},"generated":{"line":2293,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2293,"column":0},"generated":{"line":2294,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2294,"column":0},"generated":{"line":2295,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2295,"column":0},"generated":{"line":2296,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2296,"column":0},"generated":{"line":2297,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2297,"column":0},"generated":{"line":2298,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2298,"column":0},"generated":{"line":2299,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2299,"column":0},"generated":{"line":2300,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2300,"column":0},"generated":{"line":2301,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2301,"column":0},"generated":{"line":2302,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2302,"column":0},"generated":{"line":2303,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2303,"column":0},"generated":{"line":2304,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2304,"column":0},"generated":{"line":2305,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2305,"column":0},"generated":{"line":2306,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2306,"column":0},"generated":{"line":2307,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2307,"column":0},"generated":{"line":2308,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2308,"column":0},"generated":{"line":2309,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2309,"column":0},"generated":{"line":2310,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2310,"column":0},"generated":{"line":2311,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2311,"column":0},"generated":{"line":2312,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2312,"column":0},"generated":{"line":2313,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2313,"column":0},"generated":{"line":2314,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2314,"column":0},"generated":{"line":2315,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2315,"column":0},"generated":{"line":2316,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2316,"column":0},"generated":{"line":2317,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2317,"column":0},"generated":{"line":2318,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2318,"column":0},"generated":{"line":2319,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2319,"column":0},"generated":{"line":2320,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2320,"column":0},"generated":{"line":2321,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2321,"column":0},"generated":{"line":2322,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2322,"column":0},"generated":{"line":2323,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2323,"column":0},"generated":{"line":2324,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2324,"column":0},"generated":{"line":2325,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2325,"column":0},"generated":{"line":2326,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2326,"column":0},"generated":{"line":2327,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2327,"column":0},"generated":{"line":2328,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2328,"column":0},"generated":{"line":2329,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2329,"column":0},"generated":{"line":2330,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2330,"column":0},"generated":{"line":2331,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2331,"column":0},"generated":{"line":2332,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2332,"column":0},"generated":{"line":2333,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2333,"column":0},"generated":{"line":2334,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2334,"column":0},"generated":{"line":2335,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2335,"column":0},"generated":{"line":2336,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2336,"column":0},"generated":{"line":2337,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2337,"column":0},"generated":{"line":2338,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2338,"column":0},"generated":{"line":2339,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2339,"column":0},"generated":{"line":2340,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2340,"column":0},"generated":{"line":2341,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2341,"column":0},"generated":{"line":2342,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2342,"column":0},"generated":{"line":2343,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2343,"column":0},"generated":{"line":2344,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2344,"column":0},"generated":{"line":2345,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2345,"column":0},"generated":{"line":2346,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2346,"column":0},"generated":{"line":2347,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2347,"column":0},"generated":{"line":2348,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2348,"column":0},"generated":{"line":2349,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2349,"column":0},"generated":{"line":2350,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2350,"column":0},"generated":{"line":2351,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2351,"column":0},"generated":{"line":2352,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2352,"column":0},"generated":{"line":2353,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2353,"column":0},"generated":{"line":2354,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2354,"column":0},"generated":{"line":2355,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2355,"column":0},"generated":{"line":2356,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2356,"column":0},"generated":{"line":2357,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2357,"column":0},"generated":{"line":2358,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2358,"column":0},"generated":{"line":2359,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2359,"column":0},"generated":{"line":2360,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2360,"column":0},"generated":{"line":2361,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2361,"column":0},"generated":{"line":2362,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2362,"column":0},"generated":{"line":2363,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2363,"column":0},"generated":{"line":2364,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2364,"column":0},"generated":{"line":2365,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2365,"column":0},"generated":{"line":2366,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2366,"column":0},"generated":{"line":2367,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2367,"column":0},"generated":{"line":2368,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2368,"column":0},"generated":{"line":2369,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2369,"column":0},"generated":{"line":2370,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2370,"column":0},"generated":{"line":2371,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2371,"column":0},"generated":{"line":2372,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2372,"column":0},"generated":{"line":2373,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2373,"column":0},"generated":{"line":2374,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2374,"column":0},"generated":{"line":2375,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2375,"column":0},"generated":{"line":2376,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2376,"column":0},"generated":{"line":2377,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2377,"column":0},"generated":{"line":2378,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2378,"column":0},"generated":{"line":2379,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2379,"column":0},"generated":{"line":2380,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2380,"column":0},"generated":{"line":2381,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2381,"column":0},"generated":{"line":2382,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2382,"column":0},"generated":{"line":2383,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2383,"column":0},"generated":{"line":2384,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2384,"column":0},"generated":{"line":2385,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2385,"column":0},"generated":{"line":2386,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2386,"column":0},"generated":{"line":2387,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2387,"column":0},"generated":{"line":2388,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2388,"column":0},"generated":{"line":2389,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2389,"column":0},"generated":{"line":2390,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2390,"column":0},"generated":{"line":2391,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2391,"column":0},"generated":{"line":2392,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2392,"column":0},"generated":{"line":2393,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2393,"column":0},"generated":{"line":2394,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2394,"column":0},"generated":{"line":2395,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2395,"column":0},"generated":{"line":2396,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2396,"column":0},"generated":{"line":2397,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2397,"column":0},"generated":{"line":2398,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2398,"column":0},"generated":{"line":2399,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2399,"column":0},"generated":{"line":2400,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2400,"column":0},"generated":{"line":2401,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2401,"column":0},"generated":{"line":2402,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2402,"column":0},"generated":{"line":2403,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2403,"column":0},"generated":{"line":2404,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2404,"column":0},"generated":{"line":2405,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2405,"column":0},"generated":{"line":2406,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2406,"column":0},"generated":{"line":2407,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2407,"column":0},"generated":{"line":2408,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2408,"column":0},"generated":{"line":2409,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2409,"column":0},"generated":{"line":2410,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2410,"column":0},"generated":{"line":2411,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2411,"column":0},"generated":{"line":2412,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2412,"column":0},"generated":{"line":2413,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2413,"column":0},"generated":{"line":2414,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2414,"column":0},"generated":{"line":2415,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2415,"column":0},"generated":{"line":2416,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2416,"column":0},"generated":{"line":2417,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2417,"column":0},"generated":{"line":2418,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2418,"column":0},"generated":{"line":2419,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2419,"column":0},"generated":{"line":2420,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2420,"column":0},"generated":{"line":2421,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2421,"column":0},"generated":{"line":2422,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2422,"column":0},"generated":{"line":2423,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2423,"column":0},"generated":{"line":2424,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2424,"column":0},"generated":{"line":2425,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2425,"column":0},"generated":{"line":2426,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2426,"column":0},"generated":{"line":2427,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2427,"column":0},"generated":{"line":2428,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2428,"column":0},"generated":{"line":2429,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2429,"column":0},"generated":{"line":2430,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2430,"column":0},"generated":{"line":2431,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2431,"column":0},"generated":{"line":2432,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2432,"column":0},"generated":{"line":2433,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2433,"column":0},"generated":{"line":2434,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2434,"column":0},"generated":{"line":2435,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2435,"column":0},"generated":{"line":2436,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2436,"column":0},"generated":{"line":2437,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2437,"column":0},"generated":{"line":2438,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2438,"column":0},"generated":{"line":2439,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2439,"column":0},"generated":{"line":2440,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2440,"column":0},"generated":{"line":2441,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2441,"column":0},"generated":{"line":2442,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2442,"column":0},"generated":{"line":2443,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2443,"column":0},"generated":{"line":2444,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2444,"column":0},"generated":{"line":2445,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2445,"column":0},"generated":{"line":2446,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2446,"column":0},"generated":{"line":2447,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2447,"column":0},"generated":{"line":2448,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2448,"column":0},"generated":{"line":2449,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2449,"column":0},"generated":{"line":2450,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2450,"column":0},"generated":{"line":2451,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2451,"column":0},"generated":{"line":2452,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2452,"column":0},"generated":{"line":2453,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2453,"column":0},"generated":{"line":2454,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2454,"column":0},"generated":{"line":2455,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2455,"column":0},"generated":{"line":2456,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2456,"column":0},"generated":{"line":2457,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2457,"column":0},"generated":{"line":2458,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2458,"column":0},"generated":{"line":2459,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2459,"column":0},"generated":{"line":2460,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2460,"column":0},"generated":{"line":2461,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2461,"column":0},"generated":{"line":2462,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2462,"column":0},"generated":{"line":2463,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2463,"column":0},"generated":{"line":2464,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2464,"column":0},"generated":{"line":2465,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2465,"column":0},"generated":{"line":2466,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2466,"column":0},"generated":{"line":2467,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2467,"column":0},"generated":{"line":2468,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2468,"column":0},"generated":{"line":2469,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2469,"column":0},"generated":{"line":2470,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2470,"column":0},"generated":{"line":2471,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2471,"column":0},"generated":{"line":2472,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2472,"column":0},"generated":{"line":2473,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2473,"column":0},"generated":{"line":2474,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2474,"column":0},"generated":{"line":2475,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2475,"column":0},"generated":{"line":2476,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2476,"column":0},"generated":{"line":2477,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2477,"column":0},"generated":{"line":2478,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2478,"column":0},"generated":{"line":2479,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2479,"column":0},"generated":{"line":2480,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2480,"column":0},"generated":{"line":2481,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2481,"column":0},"generated":{"line":2482,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2482,"column":0},"generated":{"line":2483,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2483,"column":0},"generated":{"line":2484,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2484,"column":0},"generated":{"line":2485,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2485,"column":0},"generated":{"line":2486,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2486,"column":0},"generated":{"line":2487,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2487,"column":0},"generated":{"line":2488,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2488,"column":0},"generated":{"line":2489,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2489,"column":0},"generated":{"line":2490,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2490,"column":0},"generated":{"line":2491,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2491,"column":0},"generated":{"line":2492,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2492,"column":0},"generated":{"line":2493,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2493,"column":0},"generated":{"line":2494,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2494,"column":0},"generated":{"line":2495,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2495,"column":0},"generated":{"line":2496,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2496,"column":0},"generated":{"line":2497,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2497,"column":0},"generated":{"line":2498,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2498,"column":0},"generated":{"line":2499,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2499,"column":0},"generated":{"line":2500,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2500,"column":0},"generated":{"line":2501,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2501,"column":0},"generated":{"line":2502,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2502,"column":0},"generated":{"line":2503,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2503,"column":0},"generated":{"line":2504,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2504,"column":0},"generated":{"line":2505,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2505,"column":0},"generated":{"line":2506,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2506,"column":0},"generated":{"line":2507,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2507,"column":0},"generated":{"line":2508,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2508,"column":0},"generated":{"line":2509,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2509,"column":0},"generated":{"line":2510,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2510,"column":0},"generated":{"line":2511,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2511,"column":0},"generated":{"line":2512,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2512,"column":0},"generated":{"line":2513,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2513,"column":0},"generated":{"line":2514,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2514,"column":0},"generated":{"line":2515,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2515,"column":0},"generated":{"line":2516,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2516,"column":0},"generated":{"line":2517,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2517,"column":0},"generated":{"line":2518,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2518,"column":0},"generated":{"line":2519,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2519,"column":0},"generated":{"line":2520,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2520,"column":0},"generated":{"line":2521,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2521,"column":0},"generated":{"line":2522,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2522,"column":0},"generated":{"line":2523,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2523,"column":0},"generated":{"line":2524,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2524,"column":0},"generated":{"line":2525,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2525,"column":0},"generated":{"line":2526,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2526,"column":0},"generated":{"line":2527,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2527,"column":0},"generated":{"line":2528,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2528,"column":0},"generated":{"line":2529,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2529,"column":0},"generated":{"line":2530,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2530,"column":0},"generated":{"line":2531,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2531,"column":0},"generated":{"line":2532,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2532,"column":0},"generated":{"line":2533,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2533,"column":0},"generated":{"line":2534,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2534,"column":0},"generated":{"line":2535,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2535,"column":0},"generated":{"line":2536,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2536,"column":0},"generated":{"line":2537,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2537,"column":0},"generated":{"line":2538,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2538,"column":0},"generated":{"line":2539,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2539,"column":0},"generated":{"line":2540,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2540,"column":0},"generated":{"line":2541,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2541,"column":0},"generated":{"line":2542,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2542,"column":0},"generated":{"line":2543,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2543,"column":0},"generated":{"line":2544,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2544,"column":0},"generated":{"line":2545,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2545,"column":0},"generated":{"line":2546,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2546,"column":0},"generated":{"line":2547,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2547,"column":0},"generated":{"line":2548,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2548,"column":0},"generated":{"line":2549,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2549,"column":0},"generated":{"line":2550,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2550,"column":0},"generated":{"line":2551,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2551,"column":0},"generated":{"line":2552,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2552,"column":0},"generated":{"line":2553,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2553,"column":0},"generated":{"line":2554,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2554,"column":0},"generated":{"line":2555,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2555,"column":0},"generated":{"line":2556,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2556,"column":0},"generated":{"line":2557,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2557,"column":0},"generated":{"line":2558,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2558,"column":0},"generated":{"line":2559,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2559,"column":0},"generated":{"line":2560,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2560,"column":0},"generated":{"line":2561,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2561,"column":0},"generated":{"line":2562,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2562,"column":0},"generated":{"line":2563,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2563,"column":0},"generated":{"line":2564,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2564,"column":0},"generated":{"line":2565,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2565,"column":0},"generated":{"line":2566,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2566,"column":0},"generated":{"line":2567,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2567,"column":0},"generated":{"line":2568,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2568,"column":0},"generated":{"line":2569,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2569,"column":0},"generated":{"line":2570,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2570,"column":0},"generated":{"line":2571,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2571,"column":0},"generated":{"line":2572,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2572,"column":0},"generated":{"line":2573,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2573,"column":0},"generated":{"line":2574,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2574,"column":0},"generated":{"line":2575,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2575,"column":0},"generated":{"line":2576,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2576,"column":0},"generated":{"line":2577,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2577,"column":0},"generated":{"line":2578,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2578,"column":0},"generated":{"line":2579,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2579,"column":0},"generated":{"line":2580,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2580,"column":0},"generated":{"line":2581,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2581,"column":0},"generated":{"line":2582,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2582,"column":0},"generated":{"line":2583,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2583,"column":0},"generated":{"line":2584,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2584,"column":0},"generated":{"line":2585,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2585,"column":0},"generated":{"line":2586,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2586,"column":0},"generated":{"line":2587,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2587,"column":0},"generated":{"line":2588,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2588,"column":0},"generated":{"line":2589,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2589,"column":0},"generated":{"line":2590,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2590,"column":0},"generated":{"line":2591,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2591,"column":0},"generated":{"line":2592,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2592,"column":0},"generated":{"line":2593,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2593,"column":0},"generated":{"line":2594,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2594,"column":0},"generated":{"line":2595,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2595,"column":0},"generated":{"line":2596,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2596,"column":0},"generated":{"line":2597,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2597,"column":0},"generated":{"line":2598,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2598,"column":0},"generated":{"line":2599,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2599,"column":0},"generated":{"line":2600,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2600,"column":0},"generated":{"line":2601,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2601,"column":0},"generated":{"line":2602,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2602,"column":0},"generated":{"line":2603,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2603,"column":0},"generated":{"line":2604,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2604,"column":0},"generated":{"line":2605,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2605,"column":0},"generated":{"line":2606,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2606,"column":0},"generated":{"line":2607,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2607,"column":0},"generated":{"line":2608,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2608,"column":0},"generated":{"line":2609,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2609,"column":0},"generated":{"line":2610,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2610,"column":0},"generated":{"line":2611,"column":0}},{"source":"../node_modules/escodegen/escodegen.js","original":{"line":2611,"column":0},"generated":{"line":2612,"column":0}}],"sources":{"../node_modules/escodegen/escodegen.js":"/*\n  Copyright (C) 2012-2014 Yusuke Suzuki <utatane.tea@gmail.com>\n  Copyright (C) 2015 Ingvar Stepanyan <me@rreverser.com>\n  Copyright (C) 2014 Ivan Nikulin <ifaaan@gmail.com>\n  Copyright (C) 2012-2013 Michael Ficarra <escodegen.copyright@michael.ficarra.me>\n  Copyright (C) 2012-2013 Mathias Bynens <mathias@qiwi.be>\n  Copyright (C) 2013 Irakli Gozalishvili <rfobic@gmail.com>\n  Copyright (C) 2012 Robert Gust-Bardon <donate@robert.gust-bardon.org>\n  Copyright (C) 2012 John Freeman <jfreeman08@gmail.com>\n  Copyright (C) 2011-2012 Ariya Hidayat <ariya.hidayat@gmail.com>\n  Copyright (C) 2012 Joost-Wim Boekesteijn <joost-wim@boekesteijn.nl>\n  Copyright (C) 2012 Kris Kowal <kris.kowal@cixar.com>\n  Copyright (C) 2012 Arpad Borsos <arpad.borsos@googlemail.com>\n\n  Redistribution and use in source and binary forms, with or without\n  modification, are permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n/*global exports:true, require:true, global:true*/\n(function () {\n    'use strict';\n\n    var Syntax,\n        Precedence,\n        BinaryPrecedence,\n        SourceNode,\n        estraverse,\n        esutils,\n        isArray,\n        base,\n        indent,\n        json,\n        renumber,\n        hexadecimal,\n        quotes,\n        escapeless,\n        newline,\n        space,\n        parentheses,\n        semicolons,\n        safeConcatenation,\n        directive,\n        extra,\n        parse,\n        sourceMap,\n        sourceCode,\n        preserveBlankLines,\n        FORMAT_MINIFY,\n        FORMAT_DEFAULTS;\n\n    estraverse = require('estraverse');\n    esutils = require('esutils');\n\n    Syntax = estraverse.Syntax;\n\n    // Generation is done by generateExpression.\n    function isExpression(node) {\n        return CodeGenerator.Expression.hasOwnProperty(node.type);\n    }\n\n    // Generation is done by generateStatement.\n    function isStatement(node) {\n        return CodeGenerator.Statement.hasOwnProperty(node.type);\n    }\n\n    Precedence = {\n        Sequence: 0,\n        Yield: 1,\n        Await: 1,\n        Assignment: 1,\n        Conditional: 2,\n        ArrowFunction: 2,\n        LogicalOR: 3,\n        LogicalAND: 4,\n        BitwiseOR: 5,\n        BitwiseXOR: 6,\n        BitwiseAND: 7,\n        Equality: 8,\n        Relational: 9,\n        BitwiseSHIFT: 10,\n        Additive: 11,\n        Multiplicative: 12,\n        Unary: 13,\n        Postfix: 14,\n        Call: 15,\n        New: 16,\n        TaggedTemplate: 17,\n        Member: 18,\n        Primary: 19\n    };\n\n    BinaryPrecedence = {\n        '||': Precedence.LogicalOR,\n        '&&': Precedence.LogicalAND,\n        '|': Precedence.BitwiseOR,\n        '^': Precedence.BitwiseXOR,\n        '&': Precedence.BitwiseAND,\n        '==': Precedence.Equality,\n        '!=': Precedence.Equality,\n        '===': Precedence.Equality,\n        '!==': Precedence.Equality,\n        'is': Precedence.Equality,\n        'isnt': Precedence.Equality,\n        '<': Precedence.Relational,\n        '>': Precedence.Relational,\n        '<=': Precedence.Relational,\n        '>=': Precedence.Relational,\n        'in': Precedence.Relational,\n        'instanceof': Precedence.Relational,\n        '<<': Precedence.BitwiseSHIFT,\n        '>>': Precedence.BitwiseSHIFT,\n        '>>>': Precedence.BitwiseSHIFT,\n        '+': Precedence.Additive,\n        '-': Precedence.Additive,\n        '*': Precedence.Multiplicative,\n        '%': Precedence.Multiplicative,\n        '/': Precedence.Multiplicative\n    };\n\n    //Flags\n    var F_ALLOW_IN = 1,\n        F_ALLOW_CALL = 1 << 1,\n        F_ALLOW_UNPARATH_NEW = 1 << 2,\n        F_FUNC_BODY = 1 << 3,\n        F_DIRECTIVE_CTX = 1 << 4,\n        F_SEMICOLON_OPT = 1 << 5;\n\n    //Expression flag sets\n    //NOTE: Flag order:\n    // F_ALLOW_IN\n    // F_ALLOW_CALL\n    // F_ALLOW_UNPARATH_NEW\n    var E_FTT = F_ALLOW_CALL | F_ALLOW_UNPARATH_NEW,\n        E_TTF = F_ALLOW_IN | F_ALLOW_CALL,\n        E_TTT = F_ALLOW_IN | F_ALLOW_CALL | F_ALLOW_UNPARATH_NEW,\n        E_TFF = F_ALLOW_IN,\n        E_FFT = F_ALLOW_UNPARATH_NEW,\n        E_TFT = F_ALLOW_IN | F_ALLOW_UNPARATH_NEW;\n\n    //Statement flag sets\n    //NOTE: Flag order:\n    // F_ALLOW_IN\n    // F_FUNC_BODY\n    // F_DIRECTIVE_CTX\n    // F_SEMICOLON_OPT\n    var S_TFFF = F_ALLOW_IN,\n        S_TFFT = F_ALLOW_IN | F_SEMICOLON_OPT,\n        S_FFFF = 0x00,\n        S_TFTF = F_ALLOW_IN | F_DIRECTIVE_CTX,\n        S_TTFF = F_ALLOW_IN | F_FUNC_BODY;\n\n    function getDefaultOptions() {\n        // default options\n        return {\n            indent: null,\n            base: null,\n            parse: null,\n            comment: false,\n            format: {\n                indent: {\n                    style: '    ',\n                    base: 0,\n                    adjustMultilineComment: false\n                },\n                newline: '\\n',\n                space: ' ',\n                json: false,\n                renumber: false,\n                hexadecimal: false,\n                quotes: 'single',\n                escapeless: false,\n                compact: false,\n                parentheses: true,\n                semicolons: true,\n                safeConcatenation: false,\n                preserveBlankLines: false\n            },\n            moz: {\n                comprehensionExpressionStartsWithAssignment: false,\n                starlessGenerator: false\n            },\n            sourceMap: null,\n            sourceMapRoot: null,\n            sourceMapWithCode: false,\n            directive: false,\n            raw: true,\n            verbatim: null,\n            sourceCode: null\n        };\n    }\n\n    function stringRepeat(str, num) {\n        var result = '';\n\n        for (num |= 0; num > 0; num >>>= 1, str += str) {\n            if (num & 1) {\n                result += str;\n            }\n        }\n\n        return result;\n    }\n\n    isArray = Array.isArray;\n    if (!isArray) {\n        isArray = function isArray(array) {\n            return Object.prototype.toString.call(array) === '[object Array]';\n        };\n    }\n\n    function hasLineTerminator(str) {\n        return (/[\\r\\n]/g).test(str);\n    }\n\n    function endsWithLineTerminator(str) {\n        var len = str.length;\n        return len && esutils.code.isLineTerminator(str.charCodeAt(len - 1));\n    }\n\n    function merge(target, override) {\n        var key;\n        for (key in override) {\n            if (override.hasOwnProperty(key)) {\n                target[key] = override[key];\n            }\n        }\n        return target;\n    }\n\n    function updateDeeply(target, override) {\n        var key, val;\n\n        function isHashObject(target) {\n            return typeof target === 'object' && target instanceof Object && !(target instanceof RegExp);\n        }\n\n        for (key in override) {\n            if (override.hasOwnProperty(key)) {\n                val = override[key];\n                if (isHashObject(val)) {\n                    if (isHashObject(target[key])) {\n                        updateDeeply(target[key], val);\n                    } else {\n                        target[key] = updateDeeply({}, val);\n                    }\n                } else {\n                    target[key] = val;\n                }\n            }\n        }\n        return target;\n    }\n\n    function generateNumber(value) {\n        var result, point, temp, exponent, pos;\n\n        if (value !== value) {\n            throw new Error('Numeric literal whose value is NaN');\n        }\n        if (value < 0 || (value === 0 && 1 / value < 0)) {\n            throw new Error('Numeric literal whose value is negative');\n        }\n\n        if (value === 1 / 0) {\n            return json ? 'null' : renumber ? '1e400' : '1e+400';\n        }\n\n        result = '' + value;\n        if (!renumber || result.length < 3) {\n            return result;\n        }\n\n        point = result.indexOf('.');\n        if (!json && result.charCodeAt(0) === 0x30  /* 0 */ && point === 1) {\n            point = 0;\n            result = result.slice(1);\n        }\n        temp = result;\n        result = result.replace('e+', 'e');\n        exponent = 0;\n        if ((pos = temp.indexOf('e')) > 0) {\n            exponent = +temp.slice(pos + 1);\n            temp = temp.slice(0, pos);\n        }\n        if (point >= 0) {\n            exponent -= temp.length - point - 1;\n            temp = +(temp.slice(0, point) + temp.slice(point + 1)) + '';\n        }\n        pos = 0;\n        while (temp.charCodeAt(temp.length + pos - 1) === 0x30  /* 0 */) {\n            --pos;\n        }\n        if (pos !== 0) {\n            exponent -= pos;\n            temp = temp.slice(0, pos);\n        }\n        if (exponent !== 0) {\n            temp += 'e' + exponent;\n        }\n        if ((temp.length < result.length ||\n                    (hexadecimal && value > 1e12 && Math.floor(value) === value && (temp = '0x' + value.toString(16)).length < result.length)) &&\n                +temp === value) {\n            result = temp;\n        }\n\n        return result;\n    }\n\n    // Generate valid RegExp expression.\n    // This function is based on https://github.com/Constellation/iv Engine\n\n    function escapeRegExpCharacter(ch, previousIsBackslash) {\n        // not handling '\\' and handling \\u2028 or \\u2029 to unicode escape sequence\n        if ((ch & ~1) === 0x2028) {\n            return (previousIsBackslash ? 'u' : '\\\\u') + ((ch === 0x2028) ? '2028' : '2029');\n        } else if (ch === 10 || ch === 13) {  // \\n, \\r\n            return (previousIsBackslash ? '' : '\\\\') + ((ch === 10) ? 'n' : 'r');\n        }\n        return String.fromCharCode(ch);\n    }\n\n    function generateRegExp(reg) {\n        var match, result, flags, i, iz, ch, characterInBrack, previousIsBackslash;\n\n        result = reg.toString();\n\n        if (reg.source) {\n            // extract flag from toString result\n            match = result.match(/\\/([^/]*)$/);\n            if (!match) {\n                return result;\n            }\n\n            flags = match[1];\n            result = '';\n\n            characterInBrack = false;\n            previousIsBackslash = false;\n            for (i = 0, iz = reg.source.length; i < iz; ++i) {\n                ch = reg.source.charCodeAt(i);\n\n                if (!previousIsBackslash) {\n                    if (characterInBrack) {\n                        if (ch === 93) {  // ]\n                            characterInBrack = false;\n                        }\n                    } else {\n                        if (ch === 47) {  // /\n                            result += '\\\\';\n                        } else if (ch === 91) {  // [\n                            characterInBrack = true;\n                        }\n                    }\n                    result += escapeRegExpCharacter(ch, previousIsBackslash);\n                    previousIsBackslash = ch === 92;  // \\\n                } else {\n                    // if new RegExp(\"\\\\\\n') is provided, create /\\n/\n                    result += escapeRegExpCharacter(ch, previousIsBackslash);\n                    // prevent like /\\\\[/]/\n                    previousIsBackslash = false;\n                }\n            }\n\n            return '/' + result + '/' + flags;\n        }\n\n        return result;\n    }\n\n    function escapeAllowedCharacter(code, next) {\n        var hex;\n\n        if (code === 0x08  /* \\b */) {\n            return '\\\\b';\n        }\n\n        if (code === 0x0C  /* \\f */) {\n            return '\\\\f';\n        }\n\n        if (code === 0x09  /* \\t */) {\n            return '\\\\t';\n        }\n\n        hex = code.toString(16).toUpperCase();\n        if (json || code > 0xFF) {\n            return '\\\\u' + '0000'.slice(hex.length) + hex;\n        } else if (code === 0x0000 && !esutils.code.isDecimalDigit(next)) {\n            return '\\\\0';\n        } else if (code === 0x000B  /* \\v */) { // '\\v'\n            return '\\\\x0B';\n        } else {\n            return '\\\\x' + '00'.slice(hex.length) + hex;\n        }\n    }\n\n    function escapeDisallowedCharacter(code) {\n        if (code === 0x5C  /* \\ */) {\n            return '\\\\\\\\';\n        }\n\n        if (code === 0x0A  /* \\n */) {\n            return '\\\\n';\n        }\n\n        if (code === 0x0D  /* \\r */) {\n            return '\\\\r';\n        }\n\n        if (code === 0x2028) {\n            return '\\\\u2028';\n        }\n\n        if (code === 0x2029) {\n            return '\\\\u2029';\n        }\n\n        throw new Error('Incorrectly classified character');\n    }\n\n    function escapeDirective(str) {\n        var i, iz, code, quote;\n\n        quote = quotes === 'double' ? '\"' : '\\'';\n        for (i = 0, iz = str.length; i < iz; ++i) {\n            code = str.charCodeAt(i);\n            if (code === 0x27  /* ' */) {\n                quote = '\"';\n                break;\n            } else if (code === 0x22  /* \" */) {\n                quote = '\\'';\n                break;\n            } else if (code === 0x5C  /* \\ */) {\n                ++i;\n            }\n        }\n\n        return quote + str + quote;\n    }\n\n    function escapeString(str) {\n        var result = '', i, len, code, singleQuotes = 0, doubleQuotes = 0, single, quote;\n\n        for (i = 0, len = str.length; i < len; ++i) {\n            code = str.charCodeAt(i);\n            if (code === 0x27  /* ' */) {\n                ++singleQuotes;\n            } else if (code === 0x22  /* \" */) {\n                ++doubleQuotes;\n            } else if (code === 0x2F  /* / */ && json) {\n                result += '\\\\';\n            } else if (esutils.code.isLineTerminator(code) || code === 0x5C  /* \\ */) {\n                result += escapeDisallowedCharacter(code);\n                continue;\n            } else if (!esutils.code.isIdentifierPartES5(code) && (json && code < 0x20  /* SP */ || !json && !escapeless && (code < 0x20  /* SP */ || code > 0x7E  /* ~ */))) {\n                result += escapeAllowedCharacter(code, str.charCodeAt(i + 1));\n                continue;\n            }\n            result += String.fromCharCode(code);\n        }\n\n        single = !(quotes === 'double' || (quotes === 'auto' && doubleQuotes < singleQuotes));\n        quote = single ? '\\'' : '\"';\n\n        if (!(single ? singleQuotes : doubleQuotes)) {\n            return quote + result + quote;\n        }\n\n        str = result;\n        result = quote;\n\n        for (i = 0, len = str.length; i < len; ++i) {\n            code = str.charCodeAt(i);\n            if ((code === 0x27  /* ' */ && single) || (code === 0x22  /* \" */ && !single)) {\n                result += '\\\\';\n            }\n            result += String.fromCharCode(code);\n        }\n\n        return result + quote;\n    }\n\n    /**\n     * flatten an array to a string, where the array can contain\n     * either strings or nested arrays\n     */\n    function flattenToString(arr) {\n        var i, iz, elem, result = '';\n        for (i = 0, iz = arr.length; i < iz; ++i) {\n            elem = arr[i];\n            result += isArray(elem) ? flattenToString(elem) : elem;\n        }\n        return result;\n    }\n\n    /**\n     * convert generated to a SourceNode when source maps are enabled.\n     */\n    function toSourceNodeWhenNeeded(generated, node) {\n        if (!sourceMap) {\n            // with no source maps, generated is either an\n            // array or a string.  if an array, flatten it.\n            // if a string, just return it\n            if (isArray(generated)) {\n                return flattenToString(generated);\n            } else {\n                return generated;\n            }\n        }\n        if (node == null) {\n            if (generated instanceof SourceNode) {\n                return generated;\n            } else {\n                node = {};\n            }\n        }\n        if (node.loc == null) {\n            return new SourceNode(null, null, sourceMap, generated, node.name || null);\n        }\n        return new SourceNode(node.loc.start.line, node.loc.start.column, (sourceMap === true ? node.loc.source || null : sourceMap), generated, node.name || null);\n    }\n\n    function noEmptySpace() {\n        return (space) ? space : ' ';\n    }\n\n    function join(left, right) {\n        var leftSource,\n            rightSource,\n            leftCharCode,\n            rightCharCode;\n\n        leftSource = toSourceNodeWhenNeeded(left).toString();\n        if (leftSource.length === 0) {\n            return [right];\n        }\n\n        rightSource = toSourceNodeWhenNeeded(right).toString();\n        if (rightSource.length === 0) {\n            return [left];\n        }\n\n        leftCharCode = leftSource.charCodeAt(leftSource.length - 1);\n        rightCharCode = rightSource.charCodeAt(0);\n\n        if ((leftCharCode === 0x2B  /* + */ || leftCharCode === 0x2D  /* - */) && leftCharCode === rightCharCode ||\n            esutils.code.isIdentifierPartES5(leftCharCode) && esutils.code.isIdentifierPartES5(rightCharCode) ||\n            leftCharCode === 0x2F  /* / */ && rightCharCode === 0x69  /* i */) { // infix word operators all start with `i`\n            return [left, noEmptySpace(), right];\n        } else if (esutils.code.isWhiteSpace(leftCharCode) || esutils.code.isLineTerminator(leftCharCode) ||\n                esutils.code.isWhiteSpace(rightCharCode) || esutils.code.isLineTerminator(rightCharCode)) {\n            return [left, right];\n        }\n        return [left, space, right];\n    }\n\n    function addIndent(stmt) {\n        return [base, stmt];\n    }\n\n    function withIndent(fn) {\n        var previousBase;\n        previousBase = base;\n        base += indent;\n        fn(base);\n        base = previousBase;\n    }\n\n    function calculateSpaces(str) {\n        var i;\n        for (i = str.length - 1; i >= 0; --i) {\n            if (esutils.code.isLineTerminator(str.charCodeAt(i))) {\n                break;\n            }\n        }\n        return (str.length - 1) - i;\n    }\n\n    function adjustMultilineComment(value, specialBase) {\n        var array, i, len, line, j, spaces, previousBase, sn;\n\n        array = value.split(/\\r\\n|[\\r\\n]/);\n        spaces = Number.MAX_VALUE;\n\n        // first line doesn't have indentation\n        for (i = 1, len = array.length; i < len; ++i) {\n            line = array[i];\n            j = 0;\n            while (j < line.length && esutils.code.isWhiteSpace(line.charCodeAt(j))) {\n                ++j;\n            }\n            if (spaces > j) {\n                spaces = j;\n            }\n        }\n\n        if (typeof specialBase !== 'undefined') {\n            // pattern like\n            // {\n            //   var t = 20;  /*\n            //                 * this is comment\n            //                 */\n            // }\n            previousBase = base;\n            if (array[1][spaces] === '*') {\n                specialBase += ' ';\n            }\n            base = specialBase;\n        } else {\n            if (spaces & 1) {\n                // /*\n                //  *\n                //  */\n                // If spaces are odd number, above pattern is considered.\n                // We waste 1 space.\n                --spaces;\n            }\n            previousBase = base;\n        }\n\n        for (i = 1, len = array.length; i < len; ++i) {\n            sn = toSourceNodeWhenNeeded(addIndent(array[i].slice(spaces)));\n            array[i] = sourceMap ? sn.join('') : sn;\n        }\n\n        base = previousBase;\n\n        return array.join('\\n');\n    }\n\n    function generateComment(comment, specialBase) {\n        if (comment.type === 'Line') {\n            if (endsWithLineTerminator(comment.value)) {\n                return '//' + comment.value;\n            } else {\n                // Always use LineTerminator\n                var result = '//' + comment.value;\n                if (!preserveBlankLines) {\n                    result += '\\n';\n                }\n                return result;\n            }\n        }\n        if (extra.format.indent.adjustMultilineComment && /[\\n\\r]/.test(comment.value)) {\n            return adjustMultilineComment('/*' + comment.value + '*/', specialBase);\n        }\n        return '/*' + comment.value + '*/';\n    }\n\n    function addComments(stmt, result) {\n        var i, len, comment, save, tailingToStatement, specialBase, fragment,\n            extRange, range, prevRange, prefix, infix, suffix, count;\n\n        if (stmt.leadingComments && stmt.leadingComments.length > 0) {\n            save = result;\n\n            if (preserveBlankLines) {\n                comment = stmt.leadingComments[0];\n                result = [];\n\n                extRange = comment.extendedRange;\n                range = comment.range;\n\n                prefix = sourceCode.substring(extRange[0], range[0]);\n                count = (prefix.match(/\\n/g) || []).length;\n                if (count > 0) {\n                    result.push(stringRepeat('\\n', count));\n                    result.push(addIndent(generateComment(comment)));\n                } else {\n                    result.push(prefix);\n                    result.push(generateComment(comment));\n                }\n\n                prevRange = range;\n\n                for (i = 1, len = stmt.leadingComments.length; i < len; i++) {\n                    comment = stmt.leadingComments[i];\n                    range = comment.range;\n\n                    infix = sourceCode.substring(prevRange[1], range[0]);\n                    count = (infix.match(/\\n/g) || []).length;\n                    result.push(stringRepeat('\\n', count));\n                    result.push(addIndent(generateComment(comment)));\n\n                    prevRange = range;\n                }\n\n                suffix = sourceCode.substring(range[1], extRange[1]);\n                count = (suffix.match(/\\n/g) || []).length;\n                result.push(stringRepeat('\\n', count));\n            } else {\n                comment = stmt.leadingComments[0];\n                result = [];\n                if (safeConcatenation && stmt.type === Syntax.Program && stmt.body.length === 0) {\n                    result.push('\\n');\n                }\n                result.push(generateComment(comment));\n                if (!endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {\n                    result.push('\\n');\n                }\n\n                for (i = 1, len = stmt.leadingComments.length; i < len; ++i) {\n                    comment = stmt.leadingComments[i];\n                    fragment = [generateComment(comment)];\n                    if (!endsWithLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {\n                        fragment.push('\\n');\n                    }\n                    result.push(addIndent(fragment));\n                }\n            }\n\n            result.push(addIndent(save));\n        }\n\n        if (stmt.trailingComments) {\n\n            if (preserveBlankLines) {\n                comment = stmt.trailingComments[0];\n                extRange = comment.extendedRange;\n                range = comment.range;\n\n                prefix = sourceCode.substring(extRange[0], range[0]);\n                count = (prefix.match(/\\n/g) || []).length;\n\n                if (count > 0) {\n                    result.push(stringRepeat('\\n', count));\n                    result.push(addIndent(generateComment(comment)));\n                } else {\n                    result.push(prefix);\n                    result.push(generateComment(comment));\n                }\n            } else {\n                tailingToStatement = !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString());\n                specialBase = stringRepeat(' ', calculateSpaces(toSourceNodeWhenNeeded([base, result, indent]).toString()));\n                for (i = 0, len = stmt.trailingComments.length; i < len; ++i) {\n                    comment = stmt.trailingComments[i];\n                    if (tailingToStatement) {\n                        // We assume target like following script\n                        //\n                        // var t = 20;  /**\n                        //               * This is comment of t\n                        //               */\n                        if (i === 0) {\n                            // first case\n                            result = [result, indent];\n                        } else {\n                            result = [result, specialBase];\n                        }\n                        result.push(generateComment(comment, specialBase));\n                    } else {\n                        result = [result, addIndent(generateComment(comment))];\n                    }\n                    if (i !== len - 1 && !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {\n                        result = [result, '\\n'];\n                    }\n                }\n            }\n        }\n\n        return result;\n    }\n\n    function generateBlankLines(start, end, result) {\n        var j, newlineCount = 0;\n\n        for (j = start; j < end; j++) {\n            if (sourceCode[j] === '\\n') {\n                newlineCount++;\n            }\n        }\n\n        for (j = 1; j < newlineCount; j++) {\n            result.push(newline);\n        }\n    }\n\n    function parenthesize(text, current, should) {\n        if (current < should) {\n            return ['(', text, ')'];\n        }\n        return text;\n    }\n\n    function generateVerbatimString(string) {\n        var i, iz, result;\n        result = string.split(/\\r\\n|\\n/);\n        for (i = 1, iz = result.length; i < iz; i++) {\n            result[i] = newline + base + result[i];\n        }\n        return result;\n    }\n\n    function generateVerbatim(expr, precedence) {\n        var verbatim, result, prec;\n        verbatim = expr[extra.verbatim];\n\n        if (typeof verbatim === 'string') {\n            result = parenthesize(generateVerbatimString(verbatim), Precedence.Sequence, precedence);\n        } else {\n            // verbatim is object\n            result = generateVerbatimString(verbatim.content);\n            prec = (verbatim.precedence != null) ? verbatim.precedence : Precedence.Sequence;\n            result = parenthesize(result, prec, precedence);\n        }\n\n        return toSourceNodeWhenNeeded(result, expr);\n    }\n\n    function CodeGenerator() {\n    }\n\n    // Helpers.\n\n    CodeGenerator.prototype.maybeBlock = function(stmt, flags) {\n        var result, noLeadingComment, that = this;\n\n        noLeadingComment = !extra.comment || !stmt.leadingComments;\n\n        if (stmt.type === Syntax.BlockStatement && noLeadingComment) {\n            return [space, this.generateStatement(stmt, flags)];\n        }\n\n        if (stmt.type === Syntax.EmptyStatement && noLeadingComment) {\n            return ';';\n        }\n\n        withIndent(function () {\n            result = [\n                newline,\n                addIndent(that.generateStatement(stmt, flags))\n            ];\n        });\n\n        return result;\n    };\n\n    CodeGenerator.prototype.maybeBlockSuffix = function (stmt, result) {\n        var ends = endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString());\n        if (stmt.type === Syntax.BlockStatement && (!extra.comment || !stmt.leadingComments) && !ends) {\n            return [result, space];\n        }\n        if (ends) {\n            return [result, base];\n        }\n        return [result, newline, base];\n    };\n\n    function generateIdentifier(node) {\n        return toSourceNodeWhenNeeded(node.name, node);\n    }\n\n    function generateAsyncPrefix(node, spaceRequired) {\n        return node.async ? 'async' + (spaceRequired ? noEmptySpace() : space) : '';\n    }\n\n    function generateStarSuffix(node) {\n        var isGenerator = node.generator && !extra.moz.starlessGenerator;\n        return isGenerator ? '*' + space : '';\n    }\n\n    function generateMethodPrefix(prop) {\n        var func = prop.value;\n        if (func.async) {\n            return generateAsyncPrefix(func, !prop.computed);\n        } else {\n            // avoid space before method name\n            return generateStarSuffix(func) ? '*' : '';\n        }\n    }\n\n    CodeGenerator.prototype.generatePattern = function (node, precedence, flags) {\n        if (node.type === Syntax.Identifier) {\n            return generateIdentifier(node);\n        }\n        return this.generateExpression(node, precedence, flags);\n    };\n\n    CodeGenerator.prototype.generateFunctionParams = function (node) {\n        var i, iz, result, hasDefault;\n\n        hasDefault = false;\n\n        if (node.type === Syntax.ArrowFunctionExpression &&\n                !node.rest && (!node.defaults || node.defaults.length === 0) &&\n                node.params.length === 1 && node.params[0].type === Syntax.Identifier) {\n            // arg => { } case\n            result = [generateAsyncPrefix(node, true), generateIdentifier(node.params[0])];\n        } else {\n            result = node.type === Syntax.ArrowFunctionExpression ? [generateAsyncPrefix(node, false)] : [];\n            result.push('(');\n            if (node.defaults) {\n                hasDefault = true;\n            }\n            for (i = 0, iz = node.params.length; i < iz; ++i) {\n                if (hasDefault && node.defaults[i]) {\n                    // Handle default values.\n                    result.push(this.generateAssignment(node.params[i], node.defaults[i], '=', Precedence.Assignment, E_TTT));\n                } else {\n                    result.push(this.generatePattern(node.params[i], Precedence.Assignment, E_TTT));\n                }\n                if (i + 1 < iz) {\n                    result.push(',' + space);\n                }\n            }\n\n            if (node.rest) {\n                if (node.params.length) {\n                    result.push(',' + space);\n                }\n                result.push('...');\n                result.push(generateIdentifier(node.rest));\n            }\n\n            result.push(')');\n        }\n\n        return result;\n    };\n\n    CodeGenerator.prototype.generateFunctionBody = function (node) {\n        var result, expr;\n\n        result = this.generateFunctionParams(node);\n\n        if (node.type === Syntax.ArrowFunctionExpression) {\n            result.push(space);\n            result.push('=>');\n        }\n\n        if (node.expression) {\n            result.push(space);\n            expr = this.generateExpression(node.body, Precedence.Assignment, E_TTT);\n            if (expr.toString().charAt(0) === '{') {\n                expr = ['(', expr, ')'];\n            }\n            result.push(expr);\n        } else {\n            result.push(this.maybeBlock(node.body, S_TTFF));\n        }\n\n        return result;\n    };\n\n    CodeGenerator.prototype.generateIterationForStatement = function (operator, stmt, flags) {\n        var result = ['for' + space + '('], that = this;\n        withIndent(function () {\n            if (stmt.left.type === Syntax.VariableDeclaration) {\n                withIndent(function () {\n                    result.push(stmt.left.kind + noEmptySpace());\n                    result.push(that.generateStatement(stmt.left.declarations[0], S_FFFF));\n                });\n            } else {\n                result.push(that.generateExpression(stmt.left, Precedence.Call, E_TTT));\n            }\n\n            result = join(result, operator);\n            result = [join(\n                result,\n                that.generateExpression(stmt.right, Precedence.Sequence, E_TTT)\n            ), ')'];\n        });\n        result.push(this.maybeBlock(stmt.body, flags));\n        return result;\n    };\n\n    CodeGenerator.prototype.generatePropertyKey = function (expr, computed, value) {\n        var result = [];\n\n        if (computed) {\n            result.push('[');\n        }\n\n        if (value.type === 'AssignmentPattern') {\n            result.push(this.AssignmentPattern(value, Precedence.Sequence, E_TTT));\n        } else {\n            result.push(this.generateExpression(expr, Precedence.Sequence, E_TTT));\n        }\n\n        if (computed) {\n            result.push(']');\n        }\n\n        return result;\n    };\n\n    CodeGenerator.prototype.generateAssignment = function (left, right, operator, precedence, flags) {\n        if (Precedence.Assignment < precedence) {\n            flags |= F_ALLOW_IN;\n        }\n\n        return parenthesize(\n            [\n                this.generateExpression(left, Precedence.Call, flags),\n                space + operator + space,\n                this.generateExpression(right, Precedence.Assignment, flags)\n            ],\n            Precedence.Assignment,\n            precedence\n        );\n    };\n\n    CodeGenerator.prototype.semicolon = function (flags) {\n        if (!semicolons && flags & F_SEMICOLON_OPT) {\n            return '';\n        }\n        return ';';\n    };\n\n    // Statements.\n\n    CodeGenerator.Statement = {\n\n        BlockStatement: function (stmt, flags) {\n            var range, content, result = ['{', newline], that = this;\n\n            withIndent(function () {\n                // handle functions without any code\n                if (stmt.body.length === 0 && preserveBlankLines) {\n                    range = stmt.range;\n                    if (range[1] - range[0] > 2) {\n                        content = sourceCode.substring(range[0] + 1, range[1] - 1);\n                        if (content[0] === '\\n') {\n                            result = ['{'];\n                        }\n                        result.push(content);\n                    }\n                }\n\n                var i, iz, fragment, bodyFlags;\n                bodyFlags = S_TFFF;\n                if (flags & F_FUNC_BODY) {\n                    bodyFlags |= F_DIRECTIVE_CTX;\n                }\n\n                for (i = 0, iz = stmt.body.length; i < iz; ++i) {\n                    if (preserveBlankLines) {\n                        // handle spaces before the first line\n                        if (i === 0) {\n                            if (stmt.body[0].leadingComments) {\n                                range = stmt.body[0].leadingComments[0].extendedRange;\n                                content = sourceCode.substring(range[0], range[1]);\n                                if (content[0] === '\\n') {\n                                    result = ['{'];\n                                }\n                            }\n                            if (!stmt.body[0].leadingComments) {\n                                generateBlankLines(stmt.range[0], stmt.body[0].range[0], result);\n                            }\n                        }\n\n                        // handle spaces between lines\n                        if (i > 0) {\n                            if (!stmt.body[i - 1].trailingComments  && !stmt.body[i].leadingComments) {\n                                generateBlankLines(stmt.body[i - 1].range[1], stmt.body[i].range[0], result);\n                            }\n                        }\n                    }\n\n                    if (i === iz - 1) {\n                        bodyFlags |= F_SEMICOLON_OPT;\n                    }\n\n                    if (stmt.body[i].leadingComments && preserveBlankLines) {\n                        fragment = that.generateStatement(stmt.body[i], bodyFlags);\n                    } else {\n                        fragment = addIndent(that.generateStatement(stmt.body[i], bodyFlags));\n                    }\n\n                    result.push(fragment);\n                    if (!endsWithLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {\n                        if (preserveBlankLines && i < iz - 1) {\n                            // don't add a new line if there are leading coments\n                            // in the next statement\n                            if (!stmt.body[i + 1].leadingComments) {\n                                result.push(newline);\n                            }\n                        } else {\n                            result.push(newline);\n                        }\n                    }\n\n                    if (preserveBlankLines) {\n                        // handle spaces after the last line\n                        if (i === iz - 1) {\n                            if (!stmt.body[i].trailingComments) {\n                                generateBlankLines(stmt.body[i].range[1], stmt.range[1], result);\n                            }\n                        }\n                    }\n                }\n            });\n\n            result.push(addIndent('}'));\n            return result;\n        },\n\n        BreakStatement: function (stmt, flags) {\n            if (stmt.label) {\n                return 'break ' + stmt.label.name + this.semicolon(flags);\n            }\n            return 'break' + this.semicolon(flags);\n        },\n\n        ContinueStatement: function (stmt, flags) {\n            if (stmt.label) {\n                return 'continue ' + stmt.label.name + this.semicolon(flags);\n            }\n            return 'continue' + this.semicolon(flags);\n        },\n\n        ClassBody: function (stmt, flags) {\n            var result = [ '{', newline], that = this;\n\n            withIndent(function (indent) {\n                var i, iz;\n\n                for (i = 0, iz = stmt.body.length; i < iz; ++i) {\n                    result.push(indent);\n                    result.push(that.generateExpression(stmt.body[i], Precedence.Sequence, E_TTT));\n                    if (i + 1 < iz) {\n                        result.push(newline);\n                    }\n                }\n            });\n\n            if (!endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {\n                result.push(newline);\n            }\n            result.push(base);\n            result.push('}');\n            return result;\n        },\n\n        ClassDeclaration: function (stmt, flags) {\n            var result, fragment;\n            result  = ['class'];\n            if (stmt.id) {\n                result = join(result, this.generateExpression(stmt.id, Precedence.Sequence, E_TTT));\n            }\n            if (stmt.superClass) {\n                fragment = join('extends', this.generateExpression(stmt.superClass, Precedence.Assignment, E_TTT));\n                result = join(result, fragment);\n            }\n            result.push(space);\n            result.push(this.generateStatement(stmt.body, S_TFFT));\n            return result;\n        },\n\n        DirectiveStatement: function (stmt, flags) {\n            if (extra.raw && stmt.raw) {\n                return stmt.raw + this.semicolon(flags);\n            }\n            return escapeDirective(stmt.directive) + this.semicolon(flags);\n        },\n\n        DoWhileStatement: function (stmt, flags) {\n            // Because `do 42 while (cond)` is Syntax Error. We need semicolon.\n            var result = join('do', this.maybeBlock(stmt.body, S_TFFF));\n            result = this.maybeBlockSuffix(stmt.body, result);\n            return join(result, [\n                'while' + space + '(',\n                this.generateExpression(stmt.test, Precedence.Sequence, E_TTT),\n                ')' + this.semicolon(flags)\n            ]);\n        },\n\n        CatchClause: function (stmt, flags) {\n            var result, that = this;\n            withIndent(function () {\n                var guard;\n\n                result = [\n                    'catch' + space + '(',\n                    that.generateExpression(stmt.param, Precedence.Sequence, E_TTT),\n                    ')'\n                ];\n\n                if (stmt.guard) {\n                    guard = that.generateExpression(stmt.guard, Precedence.Sequence, E_TTT);\n                    result.splice(2, 0, ' if ', guard);\n                }\n            });\n            result.push(this.maybeBlock(stmt.body, S_TFFF));\n            return result;\n        },\n\n        DebuggerStatement: function (stmt, flags) {\n            return 'debugger' + this.semicolon(flags);\n        },\n\n        EmptyStatement: function (stmt, flags) {\n            return ';';\n        },\n\n        ExportDefaultDeclaration: function (stmt, flags) {\n            var result = [ 'export' ], bodyFlags;\n\n            bodyFlags = (flags & F_SEMICOLON_OPT) ? S_TFFT : S_TFFF;\n\n            // export default HoistableDeclaration[Default]\n            // export default AssignmentExpression[In] ;\n            result = join(result, 'default');\n            if (isStatement(stmt.declaration)) {\n                result = join(result, this.generateStatement(stmt.declaration, bodyFlags));\n            } else {\n                result = join(result, this.generateExpression(stmt.declaration, Precedence.Assignment, E_TTT) + this.semicolon(flags));\n            }\n            return result;\n        },\n\n        ExportNamedDeclaration: function (stmt, flags) {\n            var result = [ 'export' ], bodyFlags, that = this;\n\n            bodyFlags = (flags & F_SEMICOLON_OPT) ? S_TFFT : S_TFFF;\n\n            // export VariableStatement\n            // export Declaration[Default]\n            if (stmt.declaration) {\n                return join(result, this.generateStatement(stmt.declaration, bodyFlags));\n            }\n\n            // export ExportClause[NoReference] FromClause ;\n            // export ExportClause ;\n            if (stmt.specifiers) {\n                if (stmt.specifiers.length === 0) {\n                    result = join(result, '{' + space + '}');\n                } else if (stmt.specifiers[0].type === Syntax.ExportBatchSpecifier) {\n                    result = join(result, this.generateExpression(stmt.specifiers[0], Precedence.Sequence, E_TTT));\n                } else {\n                    result = join(result, '{');\n                    withIndent(function (indent) {\n                        var i, iz;\n                        result.push(newline);\n                        for (i = 0, iz = stmt.specifiers.length; i < iz; ++i) {\n                            result.push(indent);\n                            result.push(that.generateExpression(stmt.specifiers[i], Precedence.Sequence, E_TTT));\n                            if (i + 1 < iz) {\n                                result.push(',' + newline);\n                            }\n                        }\n                    });\n                    if (!endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {\n                        result.push(newline);\n                    }\n                    result.push(base + '}');\n                }\n\n                if (stmt.source) {\n                    result = join(result, [\n                        'from' + space,\n                        // ModuleSpecifier\n                        this.generateExpression(stmt.source, Precedence.Sequence, E_TTT),\n                        this.semicolon(flags)\n                    ]);\n                } else {\n                    result.push(this.semicolon(flags));\n                }\n            }\n            return result;\n        },\n\n        ExportAllDeclaration: function (stmt, flags) {\n            // export * FromClause ;\n            return [\n                'export' + space,\n                '*' + space,\n                'from' + space,\n                // ModuleSpecifier\n                this.generateExpression(stmt.source, Precedence.Sequence, E_TTT),\n                this.semicolon(flags)\n            ];\n        },\n\n        ExpressionStatement: function (stmt, flags) {\n            var result, fragment;\n\n            function isClassPrefixed(fragment) {\n                var code;\n                if (fragment.slice(0, 5) !== 'class') {\n                    return false;\n                }\n                code = fragment.charCodeAt(5);\n                return code === 0x7B  /* '{' */ || esutils.code.isWhiteSpace(code) || esutils.code.isLineTerminator(code);\n            }\n\n            function isFunctionPrefixed(fragment) {\n                var code;\n                if (fragment.slice(0, 8) !== 'function') {\n                    return false;\n                }\n                code = fragment.charCodeAt(8);\n                return code === 0x28 /* '(' */ || esutils.code.isWhiteSpace(code) || code === 0x2A  /* '*' */ || esutils.code.isLineTerminator(code);\n            }\n\n            function isAsyncPrefixed(fragment) {\n                var code, i, iz;\n                if (fragment.slice(0, 5) !== 'async') {\n                    return false;\n                }\n                if (!esutils.code.isWhiteSpace(fragment.charCodeAt(5))) {\n                    return false;\n                }\n                for (i = 6, iz = fragment.length; i < iz; ++i) {\n                    if (!esutils.code.isWhiteSpace(fragment.charCodeAt(i))) {\n                        break;\n                    }\n                }\n                if (i === iz) {\n                    return false;\n                }\n                if (fragment.slice(i, i + 8) !== 'function') {\n                    return false;\n                }\n                code = fragment.charCodeAt(i + 8);\n                return code === 0x28 /* '(' */ || esutils.code.isWhiteSpace(code) || code === 0x2A  /* '*' */ || esutils.code.isLineTerminator(code);\n            }\n\n            result = [this.generateExpression(stmt.expression, Precedence.Sequence, E_TTT)];\n            // 12.4 '{', 'function', 'class' is not allowed in this position.\n            // wrap expression with parentheses\n            fragment = toSourceNodeWhenNeeded(result).toString();\n            if (fragment.charCodeAt(0) === 0x7B  /* '{' */ ||  // ObjectExpression\n                    isClassPrefixed(fragment) ||\n                    isFunctionPrefixed(fragment) ||\n                    isAsyncPrefixed(fragment) ||\n                    (directive && (flags & F_DIRECTIVE_CTX) && stmt.expression.type === Syntax.Literal && typeof stmt.expression.value === 'string')) {\n                result = ['(', result, ')' + this.semicolon(flags)];\n            } else {\n                result.push(this.semicolon(flags));\n            }\n            return result;\n        },\n\n        ImportDeclaration: function (stmt, flags) {\n            // ES6: 15.2.1 valid import declarations:\n            //     - import ImportClause FromClause ;\n            //     - import ModuleSpecifier ;\n            var result, cursor, that = this;\n\n            // If no ImportClause is present,\n            // this should be `import ModuleSpecifier` so skip `from`\n            // ModuleSpecifier is StringLiteral.\n            if (stmt.specifiers.length === 0) {\n                // import ModuleSpecifier ;\n                return [\n                    'import',\n                    space,\n                    // ModuleSpecifier\n                    this.generateExpression(stmt.source, Precedence.Sequence, E_TTT),\n                    this.semicolon(flags)\n                ];\n            }\n\n            // import ImportClause FromClause ;\n            result = [\n                'import'\n            ];\n            cursor = 0;\n\n            // ImportedBinding\n            if (stmt.specifiers[cursor].type === Syntax.ImportDefaultSpecifier) {\n                result = join(result, [\n                        this.generateExpression(stmt.specifiers[cursor], Precedence.Sequence, E_TTT)\n                ]);\n                ++cursor;\n            }\n\n            if (stmt.specifiers[cursor]) {\n                if (cursor !== 0) {\n                    result.push(',');\n                }\n\n                if (stmt.specifiers[cursor].type === Syntax.ImportNamespaceSpecifier) {\n                    // NameSpaceImport\n                    result = join(result, [\n                            space,\n                            this.generateExpression(stmt.specifiers[cursor], Precedence.Sequence, E_TTT)\n                    ]);\n                } else {\n                    // NamedImports\n                    result.push(space + '{');\n\n                    if ((stmt.specifiers.length - cursor) === 1) {\n                        // import { ... } from \"...\";\n                        result.push(space);\n                        result.push(this.generateExpression(stmt.specifiers[cursor], Precedence.Sequence, E_TTT));\n                        result.push(space + '}' + space);\n                    } else {\n                        // import {\n                        //    ...,\n                        //    ...,\n                        // } from \"...\";\n                        withIndent(function (indent) {\n                            var i, iz;\n                            result.push(newline);\n                            for (i = cursor, iz = stmt.specifiers.length; i < iz; ++i) {\n                                result.push(indent);\n                                result.push(that.generateExpression(stmt.specifiers[i], Precedence.Sequence, E_TTT));\n                                if (i + 1 < iz) {\n                                    result.push(',' + newline);\n                                }\n                            }\n                        });\n                        if (!endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {\n                            result.push(newline);\n                        }\n                        result.push(base + '}' + space);\n                    }\n                }\n            }\n\n            result = join(result, [\n                'from' + space,\n                // ModuleSpecifier\n                this.generateExpression(stmt.source, Precedence.Sequence, E_TTT),\n                this.semicolon(flags)\n            ]);\n            return result;\n        },\n\n        VariableDeclarator: function (stmt, flags) {\n            var itemFlags = (flags & F_ALLOW_IN) ? E_TTT : E_FTT;\n            if (stmt.init) {\n                return [\n                    this.generateExpression(stmt.id, Precedence.Assignment, itemFlags),\n                    space,\n                    '=',\n                    space,\n                    this.generateExpression(stmt.init, Precedence.Assignment, itemFlags)\n                ];\n            }\n            return this.generatePattern(stmt.id, Precedence.Assignment, itemFlags);\n        },\n\n        VariableDeclaration: function (stmt, flags) {\n            // VariableDeclarator is typed as Statement,\n            // but joined with comma (not LineTerminator).\n            // So if comment is attached to target node, we should specialize.\n            var result, i, iz, node, bodyFlags, that = this;\n\n            result = [ stmt.kind ];\n\n            bodyFlags = (flags & F_ALLOW_IN) ? S_TFFF : S_FFFF;\n\n            function block() {\n                node = stmt.declarations[0];\n                if (extra.comment && node.leadingComments) {\n                    result.push('\\n');\n                    result.push(addIndent(that.generateStatement(node, bodyFlags)));\n                } else {\n                    result.push(noEmptySpace());\n                    result.push(that.generateStatement(node, bodyFlags));\n                }\n\n                for (i = 1, iz = stmt.declarations.length; i < iz; ++i) {\n                    node = stmt.declarations[i];\n                    if (extra.comment && node.leadingComments) {\n                        result.push(',' + newline);\n                        result.push(addIndent(that.generateStatement(node, bodyFlags)));\n                    } else {\n                        result.push(',' + space);\n                        result.push(that.generateStatement(node, bodyFlags));\n                    }\n                }\n            }\n\n            if (stmt.declarations.length > 1) {\n                withIndent(block);\n            } else {\n                block();\n            }\n\n            result.push(this.semicolon(flags));\n\n            return result;\n        },\n\n        ThrowStatement: function (stmt, flags) {\n            return [join(\n                'throw',\n                this.generateExpression(stmt.argument, Precedence.Sequence, E_TTT)\n            ), this.semicolon(flags)];\n        },\n\n        TryStatement: function (stmt, flags) {\n            var result, i, iz, guardedHandlers;\n\n            result = ['try', this.maybeBlock(stmt.block, S_TFFF)];\n            result = this.maybeBlockSuffix(stmt.block, result);\n\n            if (stmt.handlers) {\n                // old interface\n                for (i = 0, iz = stmt.handlers.length; i < iz; ++i) {\n                    result = join(result, this.generateStatement(stmt.handlers[i], S_TFFF));\n                    if (stmt.finalizer || i + 1 !== iz) {\n                        result = this.maybeBlockSuffix(stmt.handlers[i].body, result);\n                    }\n                }\n            } else {\n                guardedHandlers = stmt.guardedHandlers || [];\n\n                for (i = 0, iz = guardedHandlers.length; i < iz; ++i) {\n                    result = join(result, this.generateStatement(guardedHandlers[i], S_TFFF));\n                    if (stmt.finalizer || i + 1 !== iz) {\n                        result = this.maybeBlockSuffix(guardedHandlers[i].body, result);\n                    }\n                }\n\n                // new interface\n                if (stmt.handler) {\n                    if (isArray(stmt.handler)) {\n                        for (i = 0, iz = stmt.handler.length; i < iz; ++i) {\n                            result = join(result, this.generateStatement(stmt.handler[i], S_TFFF));\n                            if (stmt.finalizer || i + 1 !== iz) {\n                                result = this.maybeBlockSuffix(stmt.handler[i].body, result);\n                            }\n                        }\n                    } else {\n                        result = join(result, this.generateStatement(stmt.handler, S_TFFF));\n                        if (stmt.finalizer) {\n                            result = this.maybeBlockSuffix(stmt.handler.body, result);\n                        }\n                    }\n                }\n            }\n            if (stmt.finalizer) {\n                result = join(result, ['finally', this.maybeBlock(stmt.finalizer, S_TFFF)]);\n            }\n            return result;\n        },\n\n        SwitchStatement: function (stmt, flags) {\n            var result, fragment, i, iz, bodyFlags, that = this;\n            withIndent(function () {\n                result = [\n                    'switch' + space + '(',\n                    that.generateExpression(stmt.discriminant, Precedence.Sequence, E_TTT),\n                    ')' + space + '{' + newline\n                ];\n            });\n            if (stmt.cases) {\n                bodyFlags = S_TFFF;\n                for (i = 0, iz = stmt.cases.length; i < iz; ++i) {\n                    if (i === iz - 1) {\n                        bodyFlags |= F_SEMICOLON_OPT;\n                    }\n                    fragment = addIndent(this.generateStatement(stmt.cases[i], bodyFlags));\n                    result.push(fragment);\n                    if (!endsWithLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {\n                        result.push(newline);\n                    }\n                }\n            }\n            result.push(addIndent('}'));\n            return result;\n        },\n\n        SwitchCase: function (stmt, flags) {\n            var result, fragment, i, iz, bodyFlags, that = this;\n            withIndent(function () {\n                if (stmt.test) {\n                    result = [\n                        join('case', that.generateExpression(stmt.test, Precedence.Sequence, E_TTT)),\n                        ':'\n                    ];\n                } else {\n                    result = ['default:'];\n                }\n\n                i = 0;\n                iz = stmt.consequent.length;\n                if (iz && stmt.consequent[0].type === Syntax.BlockStatement) {\n                    fragment = that.maybeBlock(stmt.consequent[0], S_TFFF);\n                    result.push(fragment);\n                    i = 1;\n                }\n\n                if (i !== iz && !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {\n                    result.push(newline);\n                }\n\n                bodyFlags = S_TFFF;\n                for (; i < iz; ++i) {\n                    if (i === iz - 1 && flags & F_SEMICOLON_OPT) {\n                        bodyFlags |= F_SEMICOLON_OPT;\n                    }\n                    fragment = addIndent(that.generateStatement(stmt.consequent[i], bodyFlags));\n                    result.push(fragment);\n                    if (i + 1 !== iz && !endsWithLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {\n                        result.push(newline);\n                    }\n                }\n            });\n            return result;\n        },\n\n        IfStatement: function (stmt, flags) {\n            var result, bodyFlags, semicolonOptional, that = this;\n            withIndent(function () {\n                result = [\n                    'if' + space + '(',\n                    that.generateExpression(stmt.test, Precedence.Sequence, E_TTT),\n                    ')'\n                ];\n            });\n            semicolonOptional = flags & F_SEMICOLON_OPT;\n            bodyFlags = S_TFFF;\n            if (semicolonOptional) {\n                bodyFlags |= F_SEMICOLON_OPT;\n            }\n            if (stmt.alternate) {\n                result.push(this.maybeBlock(stmt.consequent, S_TFFF));\n                result = this.maybeBlockSuffix(stmt.consequent, result);\n                if (stmt.alternate.type === Syntax.IfStatement) {\n                    result = join(result, ['else ', this.generateStatement(stmt.alternate, bodyFlags)]);\n                } else {\n                    result = join(result, join('else', this.maybeBlock(stmt.alternate, bodyFlags)));\n                }\n            } else {\n                result.push(this.maybeBlock(stmt.consequent, bodyFlags));\n            }\n            return result;\n        },\n\n        ForStatement: function (stmt, flags) {\n            var result, that = this;\n            withIndent(function () {\n                result = ['for' + space + '('];\n                if (stmt.init) {\n                    if (stmt.init.type === Syntax.VariableDeclaration) {\n                        result.push(that.generateStatement(stmt.init, S_FFFF));\n                    } else {\n                        // F_ALLOW_IN becomes false.\n                        result.push(that.generateExpression(stmt.init, Precedence.Sequence, E_FTT));\n                        result.push(';');\n                    }\n                } else {\n                    result.push(';');\n                }\n\n                if (stmt.test) {\n                    result.push(space);\n                    result.push(that.generateExpression(stmt.test, Precedence.Sequence, E_TTT));\n                    result.push(';');\n                } else {\n                    result.push(';');\n                }\n\n                if (stmt.update) {\n                    result.push(space);\n                    result.push(that.generateExpression(stmt.update, Precedence.Sequence, E_TTT));\n                    result.push(')');\n                } else {\n                    result.push(')');\n                }\n            });\n\n            result.push(this.maybeBlock(stmt.body, flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF));\n            return result;\n        },\n\n        ForInStatement: function (stmt, flags) {\n            return this.generateIterationForStatement('in', stmt, flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF);\n        },\n\n        ForOfStatement: function (stmt, flags) {\n            return this.generateIterationForStatement('of', stmt, flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF);\n        },\n\n        LabeledStatement: function (stmt, flags) {\n            return [stmt.label.name + ':', this.maybeBlock(stmt.body, flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF)];\n        },\n\n        Program: function (stmt, flags) {\n            var result, fragment, i, iz, bodyFlags;\n            iz = stmt.body.length;\n            result = [safeConcatenation && iz > 0 ? '\\n' : ''];\n            bodyFlags = S_TFTF;\n            for (i = 0; i < iz; ++i) {\n                if (!safeConcatenation && i === iz - 1) {\n                    bodyFlags |= F_SEMICOLON_OPT;\n                }\n\n                if (preserveBlankLines) {\n                    // handle spaces before the first line\n                    if (i === 0) {\n                        if (!stmt.body[0].leadingComments) {\n                            generateBlankLines(stmt.range[0], stmt.body[i].range[0], result);\n                        }\n                    }\n\n                    // handle spaces between lines\n                    if (i > 0) {\n                        if (!stmt.body[i - 1].trailingComments && !stmt.body[i].leadingComments) {\n                            generateBlankLines(stmt.body[i - 1].range[1], stmt.body[i].range[0], result);\n                        }\n                    }\n                }\n\n                fragment = addIndent(this.generateStatement(stmt.body[i], bodyFlags));\n                result.push(fragment);\n                if (i + 1 < iz && !endsWithLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {\n                    if (preserveBlankLines) {\n                        if (!stmt.body[i + 1].leadingComments) {\n                            result.push(newline);\n                        }\n                    } else {\n                        result.push(newline);\n                    }\n                }\n\n                if (preserveBlankLines) {\n                    // handle spaces after the last line\n                    if (i === iz - 1) {\n                        if (!stmt.body[i].trailingComments) {\n                            generateBlankLines(stmt.body[i].range[1], stmt.range[1], result);\n                        }\n                    }\n                }\n            }\n            return result;\n        },\n\n        FunctionDeclaration: function (stmt, flags) {\n            return [\n                generateAsyncPrefix(stmt, true),\n                'function',\n                generateStarSuffix(stmt) || noEmptySpace(),\n                stmt.id ? generateIdentifier(stmt.id) : '',\n                this.generateFunctionBody(stmt)\n            ];\n        },\n\n        ReturnStatement: function (stmt, flags) {\n            if (stmt.argument) {\n                return [join(\n                    'return',\n                    this.generateExpression(stmt.argument, Precedence.Sequence, E_TTT)\n                ), this.semicolon(flags)];\n            }\n            return ['return' + this.semicolon(flags)];\n        },\n\n        WhileStatement: function (stmt, flags) {\n            var result, that = this;\n            withIndent(function () {\n                result = [\n                    'while' + space + '(',\n                    that.generateExpression(stmt.test, Precedence.Sequence, E_TTT),\n                    ')'\n                ];\n            });\n            result.push(this.maybeBlock(stmt.body, flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF));\n            return result;\n        },\n\n        WithStatement: function (stmt, flags) {\n            var result, that = this;\n            withIndent(function () {\n                result = [\n                    'with' + space + '(',\n                    that.generateExpression(stmt.object, Precedence.Sequence, E_TTT),\n                    ')'\n                ];\n            });\n            result.push(this.maybeBlock(stmt.body, flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF));\n            return result;\n        }\n\n    };\n\n    merge(CodeGenerator.prototype, CodeGenerator.Statement);\n\n    // Expressions.\n\n    CodeGenerator.Expression = {\n\n        SequenceExpression: function (expr, precedence, flags) {\n            var result, i, iz;\n            if (Precedence.Sequence < precedence) {\n                flags |= F_ALLOW_IN;\n            }\n            result = [];\n            for (i = 0, iz = expr.expressions.length; i < iz; ++i) {\n                result.push(this.generateExpression(expr.expressions[i], Precedence.Assignment, flags));\n                if (i + 1 < iz) {\n                    result.push(',' + space);\n                }\n            }\n            return parenthesize(result, Precedence.Sequence, precedence);\n        },\n\n        AssignmentExpression: function (expr, precedence, flags) {\n            return this.generateAssignment(expr.left, expr.right, expr.operator, precedence, flags);\n        },\n\n        ArrowFunctionExpression: function (expr, precedence, flags) {\n            return parenthesize(this.generateFunctionBody(expr), Precedence.ArrowFunction, precedence);\n        },\n\n        ConditionalExpression: function (expr, precedence, flags) {\n            if (Precedence.Conditional < precedence) {\n                flags |= F_ALLOW_IN;\n            }\n            return parenthesize(\n                [\n                    this.generateExpression(expr.test, Precedence.LogicalOR, flags),\n                    space + '?' + space,\n                    this.generateExpression(expr.consequent, Precedence.Assignment, flags),\n                    space + ':' + space,\n                    this.generateExpression(expr.alternate, Precedence.Assignment, flags)\n                ],\n                Precedence.Conditional,\n                precedence\n            );\n        },\n\n        LogicalExpression: function (expr, precedence, flags) {\n            return this.BinaryExpression(expr, precedence, flags);\n        },\n\n        BinaryExpression: function (expr, precedence, flags) {\n            var result, currentPrecedence, fragment, leftSource;\n            currentPrecedence = BinaryPrecedence[expr.operator];\n\n            if (currentPrecedence < precedence) {\n                flags |= F_ALLOW_IN;\n            }\n\n            fragment = this.generateExpression(expr.left, currentPrecedence, flags);\n\n            leftSource = fragment.toString();\n\n            if (leftSource.charCodeAt(leftSource.length - 1) === 0x2F /* / */ && esutils.code.isIdentifierPartES5(expr.operator.charCodeAt(0))) {\n                result = [fragment, noEmptySpace(), expr.operator];\n            } else {\n                result = join(fragment, expr.operator);\n            }\n\n            fragment = this.generateExpression(expr.right, currentPrecedence + 1, flags);\n\n            if (expr.operator === '/' && fragment.toString().charAt(0) === '/' ||\n            expr.operator.slice(-1) === '<' && fragment.toString().slice(0, 3) === '!--') {\n                // If '/' concats with '/' or `<` concats with `!--`, it is interpreted as comment start\n                result.push(noEmptySpace());\n                result.push(fragment);\n            } else {\n                result = join(result, fragment);\n            }\n\n            if (expr.operator === 'in' && !(flags & F_ALLOW_IN)) {\n                return ['(', result, ')'];\n            }\n            return parenthesize(result, currentPrecedence, precedence);\n        },\n\n        CallExpression: function (expr, precedence, flags) {\n            var result, i, iz;\n            // F_ALLOW_UNPARATH_NEW becomes false.\n            result = [this.generateExpression(expr.callee, Precedence.Call, E_TTF)];\n            result.push('(');\n            for (i = 0, iz = expr['arguments'].length; i < iz; ++i) {\n                result.push(this.generateExpression(expr['arguments'][i], Precedence.Assignment, E_TTT));\n                if (i + 1 < iz) {\n                    result.push(',' + space);\n                }\n            }\n            result.push(')');\n\n            if (!(flags & F_ALLOW_CALL)) {\n                return ['(', result, ')'];\n            }\n            return parenthesize(result, Precedence.Call, precedence);\n        },\n\n        NewExpression: function (expr, precedence, flags) {\n            var result, length, i, iz, itemFlags;\n            length = expr['arguments'].length;\n\n            // F_ALLOW_CALL becomes false.\n            // F_ALLOW_UNPARATH_NEW may become false.\n            itemFlags = (flags & F_ALLOW_UNPARATH_NEW && !parentheses && length === 0) ? E_TFT : E_TFF;\n\n            result = join(\n                'new',\n                this.generateExpression(expr.callee, Precedence.New, itemFlags)\n            );\n\n            if (!(flags & F_ALLOW_UNPARATH_NEW) || parentheses || length > 0) {\n                result.push('(');\n                for (i = 0, iz = length; i < iz; ++i) {\n                    result.push(this.generateExpression(expr['arguments'][i], Precedence.Assignment, E_TTT));\n                    if (i + 1 < iz) {\n                        result.push(',' + space);\n                    }\n                }\n                result.push(')');\n            }\n\n            return parenthesize(result, Precedence.New, precedence);\n        },\n\n        MemberExpression: function (expr, precedence, flags) {\n            var result, fragment;\n\n            // F_ALLOW_UNPARATH_NEW becomes false.\n            result = [this.generateExpression(expr.object, Precedence.Call, (flags & F_ALLOW_CALL) ? E_TTF : E_TFF)];\n\n            if (expr.computed) {\n                result.push('[');\n                result.push(this.generateExpression(expr.property, Precedence.Sequence, flags & F_ALLOW_CALL ? E_TTT : E_TFT));\n                result.push(']');\n            } else {\n                if (expr.object.type === Syntax.Literal && typeof expr.object.value === 'number') {\n                    fragment = toSourceNodeWhenNeeded(result).toString();\n                    // When the following conditions are all true,\n                    //   1. No floating point\n                    //   2. Don't have exponents\n                    //   3. The last character is a decimal digit\n                    //   4. Not hexadecimal OR octal number literal\n                    // we should add a floating point.\n                    if (\n                            fragment.indexOf('.') < 0 &&\n                            !/[eExX]/.test(fragment) &&\n                            esutils.code.isDecimalDigit(fragment.charCodeAt(fragment.length - 1)) &&\n                            !(fragment.length >= 2 && fragment.charCodeAt(0) === 48)  // '0'\n                            ) {\n                        result.push(' ');\n                    }\n                }\n                result.push('.');\n                result.push(generateIdentifier(expr.property));\n            }\n\n            return parenthesize(result, Precedence.Member, precedence);\n        },\n\n        MetaProperty: function (expr, precedence, flags) {\n            var result;\n            result = [];\n            result.push(expr.meta);\n            result.push('.');\n            result.push(expr.property);\n            return parenthesize(result, Precedence.Member, precedence);\n        },\n\n        UnaryExpression: function (expr, precedence, flags) {\n            var result, fragment, rightCharCode, leftSource, leftCharCode;\n            fragment = this.generateExpression(expr.argument, Precedence.Unary, E_TTT);\n\n            if (space === '') {\n                result = join(expr.operator, fragment);\n            } else {\n                result = [expr.operator];\n                if (expr.operator.length > 2) {\n                    // delete, void, typeof\n                    // get `typeof []`, not `typeof[]`\n                    result = join(result, fragment);\n                } else {\n                    // Prevent inserting spaces between operator and argument if it is unnecessary\n                    // like, `!cond`\n                    leftSource = toSourceNodeWhenNeeded(result).toString();\n                    leftCharCode = leftSource.charCodeAt(leftSource.length - 1);\n                    rightCharCode = fragment.toString().charCodeAt(0);\n\n                    if (((leftCharCode === 0x2B  /* + */ || leftCharCode === 0x2D  /* - */) && leftCharCode === rightCharCode) ||\n                            (esutils.code.isIdentifierPartES5(leftCharCode) && esutils.code.isIdentifierPartES5(rightCharCode))) {\n                        result.push(noEmptySpace());\n                        result.push(fragment);\n                    } else {\n                        result.push(fragment);\n                    }\n                }\n            }\n            return parenthesize(result, Precedence.Unary, precedence);\n        },\n\n        YieldExpression: function (expr, precedence, flags) {\n            var result;\n            if (expr.delegate) {\n                result = 'yield*';\n            } else {\n                result = 'yield';\n            }\n            if (expr.argument) {\n                result = join(\n                    result,\n                    this.generateExpression(expr.argument, Precedence.Yield, E_TTT)\n                );\n            }\n            return parenthesize(result, Precedence.Yield, precedence);\n        },\n\n        AwaitExpression: function (expr, precedence, flags) {\n            var result = join(\n                expr.all ? 'await*' : 'await',\n                this.generateExpression(expr.argument, Precedence.Await, E_TTT)\n            );\n            return parenthesize(result, Precedence.Await, precedence);\n        },\n\n        UpdateExpression: function (expr, precedence, flags) {\n            if (expr.prefix) {\n                return parenthesize(\n                    [\n                        expr.operator,\n                        this.generateExpression(expr.argument, Precedence.Unary, E_TTT)\n                    ],\n                    Precedence.Unary,\n                    precedence\n                );\n            }\n            return parenthesize(\n                [\n                    this.generateExpression(expr.argument, Precedence.Postfix, E_TTT),\n                    expr.operator\n                ],\n                Precedence.Postfix,\n                precedence\n            );\n        },\n\n        FunctionExpression: function (expr, precedence, flags) {\n            var result = [\n                generateAsyncPrefix(expr, true),\n                'function'\n            ];\n            if (expr.id) {\n                result.push(generateStarSuffix(expr) || noEmptySpace());\n                result.push(generateIdentifier(expr.id));\n            } else {\n                result.push(generateStarSuffix(expr) || space);\n            }\n            result.push(this.generateFunctionBody(expr));\n            return result;\n        },\n\n        ArrayPattern: function (expr, precedence, flags) {\n            return this.ArrayExpression(expr, precedence, flags, true);\n        },\n\n        ArrayExpression: function (expr, precedence, flags, isPattern) {\n            var result, multiline, that = this;\n            if (!expr.elements.length) {\n                return '[]';\n            }\n            multiline = isPattern ? false : expr.elements.length > 1;\n            result = ['[', multiline ? newline : ''];\n            withIndent(function (indent) {\n                var i, iz;\n                for (i = 0, iz = expr.elements.length; i < iz; ++i) {\n                    if (!expr.elements[i]) {\n                        if (multiline) {\n                            result.push(indent);\n                        }\n                        if (i + 1 === iz) {\n                            result.push(',');\n                        }\n                    } else {\n                        result.push(multiline ? indent : '');\n                        result.push(that.generateExpression(expr.elements[i], Precedence.Assignment, E_TTT));\n                    }\n                    if (i + 1 < iz) {\n                        result.push(',' + (multiline ? newline : space));\n                    }\n                }\n            });\n            if (multiline && !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {\n                result.push(newline);\n            }\n            result.push(multiline ? base : '');\n            result.push(']');\n            return result;\n        },\n\n        RestElement: function(expr, precedence, flags) {\n            return '...' + this.generatePattern(expr.argument);\n        },\n\n        ClassExpression: function (expr, precedence, flags) {\n            var result, fragment;\n            result = ['class'];\n            if (expr.id) {\n                result = join(result, this.generateExpression(expr.id, Precedence.Sequence, E_TTT));\n            }\n            if (expr.superClass) {\n                fragment = join('extends', this.generateExpression(expr.superClass, Precedence.Assignment, E_TTT));\n                result = join(result, fragment);\n            }\n            result.push(space);\n            result.push(this.generateStatement(expr.body, S_TFFT));\n            return result;\n        },\n\n        MethodDefinition: function (expr, precedence, flags) {\n            var result, fragment;\n            if (expr['static']) {\n                result = ['static' + space];\n            } else {\n                result = [];\n            }\n            if (expr.kind === 'get' || expr.kind === 'set') {\n                fragment = [\n                    join(expr.kind, this.generatePropertyKey(expr.key, expr.computed, expr.value)),\n                    this.generateFunctionBody(expr.value)\n                ];\n            } else {\n                fragment = [\n                    generateMethodPrefix(expr),\n                    this.generatePropertyKey(expr.key, expr.computed, expr.value),\n                    this.generateFunctionBody(expr.value)\n                ];\n            }\n            return join(result, fragment);\n        },\n\n        Property: function (expr, precedence, flags) {\n            if (expr.kind === 'get' || expr.kind === 'set') {\n                return [\n                    expr.kind, noEmptySpace(),\n                    this.generatePropertyKey(expr.key, expr.computed, expr.value),\n                    this.generateFunctionBody(expr.value)\n                ];\n            }\n\n            if (expr.shorthand) {\n                return this.generatePropertyKey(expr.key, expr.computed, expr.value);\n            }\n\n            if (expr.method) {\n                return [\n                    generateMethodPrefix(expr),\n                    this.generatePropertyKey(expr.key, expr.computed, expr.value),\n                    this.generateFunctionBody(expr.value)\n                ];\n            }\n\n            return [\n                this.generatePropertyKey(expr.key, expr.computed, expr.value),\n                ':' + space,\n                this.generateExpression(expr.value, Precedence.Assignment, E_TTT)\n            ];\n        },\n\n        ObjectExpression: function (expr, precedence, flags) {\n            var multiline, result, fragment, that = this;\n\n            if (!expr.properties.length) {\n                return '{}';\n            }\n            multiline = expr.properties.length > 1;\n\n            withIndent(function () {\n                fragment = that.generateExpression(expr.properties[0], Precedence.Sequence, E_TTT);\n            });\n\n            if (!multiline) {\n                // issues 4\n                // Do not transform from\n                //   dejavu.Class.declare({\n                //       method2: function () {}\n                //   });\n                // to\n                //   dejavu.Class.declare({method2: function () {\n                //       }});\n                if (!hasLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {\n                    return [ '{', space, fragment, space, '}' ];\n                }\n            }\n\n            withIndent(function (indent) {\n                var i, iz;\n                result = [ '{', newline, indent, fragment ];\n\n                if (multiline) {\n                    result.push(',' + newline);\n                    for (i = 1, iz = expr.properties.length; i < iz; ++i) {\n                        result.push(indent);\n                        result.push(that.generateExpression(expr.properties[i], Precedence.Sequence, E_TTT));\n                        if (i + 1 < iz) {\n                            result.push(',' + newline);\n                        }\n                    }\n                }\n            });\n\n            if (!endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {\n                result.push(newline);\n            }\n            result.push(base);\n            result.push('}');\n            return result;\n        },\n\n        AssignmentPattern: function(expr, precedence, flags) {\n            return this.generateAssignment(expr.left, expr.right, '=', precedence, flags);\n        },\n\n        ObjectPattern: function (expr, precedence, flags) {\n            var result, i, iz, multiline, property, that = this;\n            if (!expr.properties.length) {\n                return '{}';\n            }\n\n            multiline = false;\n            if (expr.properties.length === 1) {\n                property = expr.properties[0];\n                if (property.value.type !== Syntax.Identifier) {\n                    multiline = true;\n                }\n            } else {\n                for (i = 0, iz = expr.properties.length; i < iz; ++i) {\n                    property = expr.properties[i];\n                    if (!property.shorthand) {\n                        multiline = true;\n                        break;\n                    }\n                }\n            }\n            result = ['{', multiline ? newline : '' ];\n\n            withIndent(function (indent) {\n                var i, iz;\n                for (i = 0, iz = expr.properties.length; i < iz; ++i) {\n                    result.push(multiline ? indent : '');\n                    result.push(that.generateExpression(expr.properties[i], Precedence.Sequence, E_TTT));\n                    if (i + 1 < iz) {\n                        result.push(',' + (multiline ? newline : space));\n                    }\n                }\n            });\n\n            if (multiline && !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {\n                result.push(newline);\n            }\n            result.push(multiline ? base : '');\n            result.push('}');\n            return result;\n        },\n\n        ThisExpression: function (expr, precedence, flags) {\n            return 'this';\n        },\n\n        Super: function (expr, precedence, flags) {\n            return 'super';\n        },\n\n        Identifier: function (expr, precedence, flags) {\n            return generateIdentifier(expr);\n        },\n\n        ImportDefaultSpecifier: function (expr, precedence, flags) {\n            return generateIdentifier(expr.id || expr.local);\n        },\n\n        ImportNamespaceSpecifier: function (expr, precedence, flags) {\n            var result = ['*'];\n            var id = expr.id || expr.local;\n            if (id) {\n                result.push(space + 'as' + noEmptySpace() + generateIdentifier(id));\n            }\n            return result;\n        },\n\n        ImportSpecifier: function (expr, precedence, flags) {\n            var imported = expr.imported;\n            var result = [ imported.name ];\n            var local = expr.local;\n            if (local && local.name !== imported.name) {\n                result.push(noEmptySpace() + 'as' + noEmptySpace() + generateIdentifier(local));\n            }\n            return result;\n        },\n\n        ExportSpecifier: function (expr, precedence, flags) {\n            var local = expr.local;\n            var result = [ local.name ];\n            var exported = expr.exported;\n            if (exported && exported.name !== local.name) {\n                result.push(noEmptySpace() + 'as' + noEmptySpace() + generateIdentifier(exported));\n            }\n            return result;\n        },\n\n        Literal: function (expr, precedence, flags) {\n            var raw;\n            if (expr.hasOwnProperty('raw') && parse && extra.raw) {\n                try {\n                    raw = parse(expr.raw).body[0].expression;\n                    if (raw.type === Syntax.Literal) {\n                        if (raw.value === expr.value) {\n                            return expr.raw;\n                        }\n                    }\n                } catch (e) {\n                    // not use raw property\n                }\n            }\n\n            if (expr.value === null) {\n                return 'null';\n            }\n\n            if (typeof expr.value === 'string') {\n                return escapeString(expr.value);\n            }\n\n            if (typeof expr.value === 'number') {\n                return generateNumber(expr.value);\n            }\n\n            if (typeof expr.value === 'boolean') {\n                return expr.value ? 'true' : 'false';\n            }\n\n            if (expr.regex) {\n              return '/' + expr.regex.pattern + '/' + expr.regex.flags;\n            }\n            return generateRegExp(expr.value);\n        },\n\n        GeneratorExpression: function (expr, precedence, flags) {\n            return this.ComprehensionExpression(expr, precedence, flags);\n        },\n\n        ComprehensionExpression: function (expr, precedence, flags) {\n            // GeneratorExpression should be parenthesized with (...), ComprehensionExpression with [...]\n            // Due to https://bugzilla.mozilla.org/show_bug.cgi?id=883468 position of expr.body can differ in Spidermonkey and ES6\n\n            var result, i, iz, fragment, that = this;\n            result = (expr.type === Syntax.GeneratorExpression) ? ['('] : ['['];\n\n            if (extra.moz.comprehensionExpressionStartsWithAssignment) {\n                fragment = this.generateExpression(expr.body, Precedence.Assignment, E_TTT);\n                result.push(fragment);\n            }\n\n            if (expr.blocks) {\n                withIndent(function () {\n                    for (i = 0, iz = expr.blocks.length; i < iz; ++i) {\n                        fragment = that.generateExpression(expr.blocks[i], Precedence.Sequence, E_TTT);\n                        if (i > 0 || extra.moz.comprehensionExpressionStartsWithAssignment) {\n                            result = join(result, fragment);\n                        } else {\n                            result.push(fragment);\n                        }\n                    }\n                });\n            }\n\n            if (expr.filter) {\n                result = join(result, 'if' + space);\n                fragment = this.generateExpression(expr.filter, Precedence.Sequence, E_TTT);\n                result = join(result, [ '(', fragment, ')' ]);\n            }\n\n            if (!extra.moz.comprehensionExpressionStartsWithAssignment) {\n                fragment = this.generateExpression(expr.body, Precedence.Assignment, E_TTT);\n\n                result = join(result, fragment);\n            }\n\n            result.push((expr.type === Syntax.GeneratorExpression) ? ')' : ']');\n            return result;\n        },\n\n        ComprehensionBlock: function (expr, precedence, flags) {\n            var fragment;\n            if (expr.left.type === Syntax.VariableDeclaration) {\n                fragment = [\n                    expr.left.kind, noEmptySpace(),\n                    this.generateStatement(expr.left.declarations[0], S_FFFF)\n                ];\n            } else {\n                fragment = this.generateExpression(expr.left, Precedence.Call, E_TTT);\n            }\n\n            fragment = join(fragment, expr.of ? 'of' : 'in');\n            fragment = join(fragment, this.generateExpression(expr.right, Precedence.Sequence, E_TTT));\n\n            return [ 'for' + space + '(', fragment, ')' ];\n        },\n\n        SpreadElement: function (expr, precedence, flags) {\n            return [\n                '...',\n                this.generateExpression(expr.argument, Precedence.Assignment, E_TTT)\n            ];\n        },\n\n        TaggedTemplateExpression: function (expr, precedence, flags) {\n            var itemFlags = E_TTF;\n            if (!(flags & F_ALLOW_CALL)) {\n                itemFlags = E_TFF;\n            }\n            var result = [\n                this.generateExpression(expr.tag, Precedence.Call, itemFlags),\n                this.generateExpression(expr.quasi, Precedence.Primary, E_FFT)\n            ];\n            return parenthesize(result, Precedence.TaggedTemplate, precedence);\n        },\n\n        TemplateElement: function (expr, precedence, flags) {\n            // Don't use \"cooked\". Since tagged template can use raw template\n            // representation. So if we do so, it breaks the script semantics.\n            return expr.value.raw;\n        },\n\n        TemplateLiteral: function (expr, precedence, flags) {\n            var result, i, iz;\n            result = [ '`' ];\n            for (i = 0, iz = expr.quasis.length; i < iz; ++i) {\n                result.push(this.generateExpression(expr.quasis[i], Precedence.Primary, E_TTT));\n                if (i + 1 < iz) {\n                    result.push('${' + space);\n                    result.push(this.generateExpression(expr.expressions[i], Precedence.Sequence, E_TTT));\n                    result.push(space + '}');\n                }\n            }\n            result.push('`');\n            return result;\n        },\n\n        ModuleSpecifier: function (expr, precedence, flags) {\n            return this.Literal(expr, precedence, flags);\n        }\n\n    };\n\n    merge(CodeGenerator.prototype, CodeGenerator.Expression);\n\n    CodeGenerator.prototype.generateExpression = function (expr, precedence, flags) {\n        var result, type;\n\n        type = expr.type || Syntax.Property;\n\n        if (extra.verbatim && expr.hasOwnProperty(extra.verbatim)) {\n            return generateVerbatim(expr, precedence);\n        }\n\n        result = this[type](expr, precedence, flags);\n\n\n        if (extra.comment) {\n            result = addComments(expr, result);\n        }\n        return toSourceNodeWhenNeeded(result, expr);\n    };\n\n    CodeGenerator.prototype.generateStatement = function (stmt, flags) {\n        var result,\n            fragment;\n\n        result = this[stmt.type](stmt, flags);\n\n        // Attach comments\n\n        if (extra.comment) {\n            result = addComments(stmt, result);\n        }\n\n        fragment = toSourceNodeWhenNeeded(result).toString();\n        if (stmt.type === Syntax.Program && !safeConcatenation && newline === '' &&  fragment.charAt(fragment.length - 1) === '\\n') {\n            result = sourceMap ? toSourceNodeWhenNeeded(result).replaceRight(/\\s+$/, '') : fragment.replace(/\\s+$/, '');\n        }\n\n        return toSourceNodeWhenNeeded(result, stmt);\n    };\n\n    function generateInternal(node) {\n        var codegen;\n\n        codegen = new CodeGenerator();\n        if (isStatement(node)) {\n            return codegen.generateStatement(node, S_TFFF);\n        }\n\n        if (isExpression(node)) {\n            return codegen.generateExpression(node, Precedence.Sequence, E_TTT);\n        }\n\n        throw new Error('Unknown node type: ' + node.type);\n    }\n\n    function generate(node, options) {\n        var defaultOptions = getDefaultOptions(), result, pair;\n\n        if (options != null) {\n            // Obsolete options\n            //\n            //   `options.indent`\n            //   `options.base`\n            //\n            // Instead of them, we can use `option.format.indent`.\n            if (typeof options.indent === 'string') {\n                defaultOptions.format.indent.style = options.indent;\n            }\n            if (typeof options.base === 'number') {\n                defaultOptions.format.indent.base = options.base;\n            }\n            options = updateDeeply(defaultOptions, options);\n            indent = options.format.indent.style;\n            if (typeof options.base === 'string') {\n                base = options.base;\n            } else {\n                base = stringRepeat(indent, options.format.indent.base);\n            }\n        } else {\n            options = defaultOptions;\n            indent = options.format.indent.style;\n            base = stringRepeat(indent, options.format.indent.base);\n        }\n        json = options.format.json;\n        renumber = options.format.renumber;\n        hexadecimal = json ? false : options.format.hexadecimal;\n        quotes = json ? 'double' : options.format.quotes;\n        escapeless = options.format.escapeless;\n        newline = options.format.newline;\n        space = options.format.space;\n        if (options.format.compact) {\n            newline = space = indent = base = '';\n        }\n        parentheses = options.format.parentheses;\n        semicolons = options.format.semicolons;\n        safeConcatenation = options.format.safeConcatenation;\n        directive = options.directive;\n        parse = json ? null : options.parse;\n        sourceMap = options.sourceMap;\n        sourceCode = options.sourceCode;\n        preserveBlankLines = options.format.preserveBlankLines && sourceCode !== null;\n        extra = options;\n\n        if (sourceMap) {\n            if (!exports.browser) {\n                // We assume environment is node.js\n                // And prevent from including source-map by browserify\n                SourceNode = require('source-map').SourceNode;\n            } else {\n                SourceNode = global.sourceMap.SourceNode;\n            }\n        }\n\n        result = generateInternal(node);\n\n        if (!sourceMap) {\n            pair = {code: result.toString(), map: null};\n            return options.sourceMapWithCode ? pair : pair.code;\n        }\n\n\n        pair = result.toStringWithSourceMap({\n            file: options.file,\n            sourceRoot: options.sourceMapRoot\n        });\n\n        if (options.sourceContent) {\n            pair.map.setSourceContent(options.sourceMap,\n                                      options.sourceContent);\n        }\n\n        if (options.sourceMapWithCode) {\n            return pair;\n        }\n\n        return pair.map.toString();\n    }\n\n    FORMAT_MINIFY = {\n        indent: {\n            style: '',\n            base: 0\n        },\n        renumber: true,\n        hexadecimal: true,\n        quotes: 'auto',\n        escapeless: true,\n        compact: true,\n        parentheses: false,\n        semicolons: false\n    };\n\n    FORMAT_DEFAULTS = getDefaultOptions().format;\n\n    exports.version = require('./package.json').version;\n    exports.generate = generate;\n    exports.attachComments = estraverse.attachComments;\n    exports.Precedence = updateDeeply({}, Precedence);\n    exports.browser = false;\n    exports.FORMAT_MINIFY = FORMAT_MINIFY;\n    exports.FORMAT_DEFAULTS = FORMAT_DEFAULTS;\n}());\n/* vim: set sw=4 ts=4 et tw=80 : */\n"},"lineCount":2612}},"hash":"daf28615fe96bd32ff32bf4e8bea317f","cacheData":{"env":{}}}