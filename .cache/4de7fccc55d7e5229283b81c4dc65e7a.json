{"dependencies":[{"name":"./core","loc":{"line":2,"column":21}},{"name":"../lib/types","loc":{"line":3,"column":33}},{"name":"../lib/shared","loc":{"line":6,"column":34}}],"generated":{"js":"module.exports = function (fork) {\n    fork.use(require(\"./core\"));\n    var types = fork.use(require(\"../lib/types\"));\n    var def = types.Type.def;\n    var or = types.Type.or;\n    var shared = fork.use(require(\"../lib/shared\"));\n    var geq = shared.geq;\n    var defaults = shared.defaults;\n\n    def(\"Function\")\n        // SpiderMonkey allows expression closures: function(x) x+1\n        .field(\"body\", or(def(\"BlockStatement\"), def(\"Expression\")));\n\n    def(\"ForInStatement\")\n        .build(\"left\", \"right\", \"body\", \"each\")\n        .field(\"each\", Boolean, defaults[\"false\"]);\n\n    def(\"LetStatement\")\n        .bases(\"Statement\")\n        .build(\"head\", \"body\")\n        // TODO Deviating from the spec by reusing VariableDeclarator here.\n        .field(\"head\", [def(\"VariableDeclarator\")])\n        .field(\"body\", def(\"Statement\"));\n\n    def(\"LetExpression\")\n        .bases(\"Expression\")\n        .build(\"head\", \"body\")\n        // TODO Deviating from the spec by reusing VariableDeclarator here.\n        .field(\"head\", [def(\"VariableDeclarator\")])\n        .field(\"body\", def(\"Expression\"));\n\n    def(\"GraphExpression\")\n        .bases(\"Expression\")\n        .build(\"index\", \"expression\")\n        .field(\"index\", geq(0))\n        .field(\"expression\", def(\"Literal\"));\n\n    def(\"GraphIndexExpression\")\n        .bases(\"Expression\")\n        .build(\"index\")\n        .field(\"index\", geq(0));\n};","map":{"mappings":[{"source":"../node_modules/ast-types/def/mozilla.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/ast-types/def/mozilla.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/ast-types/def/mozilla.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/ast-types/def/mozilla.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/ast-types/def/mozilla.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/ast-types/def/mozilla.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/ast-types/def/mozilla.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/ast-types/def/mozilla.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/ast-types/def/mozilla.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/ast-types/def/mozilla.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/ast-types/def/mozilla.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/ast-types/def/mozilla.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/ast-types/def/mozilla.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/ast-types/def/mozilla.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/ast-types/def/mozilla.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/ast-types/def/mozilla.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/ast-types/def/mozilla.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/ast-types/def/mozilla.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/ast-types/def/mozilla.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/ast-types/def/mozilla.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/ast-types/def/mozilla.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/ast-types/def/mozilla.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/ast-types/def/mozilla.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/ast-types/def/mozilla.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/ast-types/def/mozilla.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/ast-types/def/mozilla.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/ast-types/def/mozilla.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/ast-types/def/mozilla.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/ast-types/def/mozilla.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/ast-types/def/mozilla.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/ast-types/def/mozilla.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/ast-types/def/mozilla.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/ast-types/def/mozilla.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/ast-types/def/mozilla.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/ast-types/def/mozilla.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/ast-types/def/mozilla.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/ast-types/def/mozilla.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/ast-types/def/mozilla.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/ast-types/def/mozilla.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/ast-types/def/mozilla.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/ast-types/def/mozilla.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/ast-types/def/mozilla.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}}],"sources":{"../node_modules/ast-types/def/mozilla.js":"module.exports = function (fork) {\n    fork.use(require(\"./core\"));\n    var types = fork.use(require(\"../lib/types\"));\n    var def = types.Type.def;\n    var or = types.Type.or;\n    var shared = fork.use(require(\"../lib/shared\"));\n    var geq = shared.geq;\n    var defaults = shared.defaults;\n\n    def(\"Function\")\n        // SpiderMonkey allows expression closures: function(x) x+1\n        .field(\"body\", or(def(\"BlockStatement\"), def(\"Expression\")));\n\n    def(\"ForInStatement\")\n        .build(\"left\", \"right\", \"body\", \"each\")\n        .field(\"each\", Boolean, defaults[\"false\"]);\n\n    def(\"LetStatement\")\n        .bases(\"Statement\")\n        .build(\"head\", \"body\")\n        // TODO Deviating from the spec by reusing VariableDeclarator here.\n        .field(\"head\", [def(\"VariableDeclarator\")])\n        .field(\"body\", def(\"Statement\"));\n\n    def(\"LetExpression\")\n        .bases(\"Expression\")\n        .build(\"head\", \"body\")\n        // TODO Deviating from the spec by reusing VariableDeclarator here.\n        .field(\"head\", [def(\"VariableDeclarator\")])\n        .field(\"body\", def(\"Expression\"));\n\n    def(\"GraphExpression\")\n        .bases(\"Expression\")\n        .build(\"index\", \"expression\")\n        .field(\"index\", geq(0))\n        .field(\"expression\", def(\"Literal\"));\n\n    def(\"GraphIndexExpression\")\n        .bases(\"Expression\")\n        .build(\"index\")\n        .field(\"index\", geq(0));\n};"},"lineCount":42}},"hash":"227b3f10233c74bad8e0ed3d6bb4a366","cacheData":{"env":{}}}