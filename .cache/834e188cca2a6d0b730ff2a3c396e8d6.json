{"dependencies":[],"generated":{"js":"/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\n// It turns out that some (most?) JavaScript engines don't self-host\n// `Array.prototype.sort`. This makes sense because C++ will likely remain\n// faster than JS when doing raw CPU-intensive sorting. However, when using a\n// custom comparator function, calling back and forth between the VM's C++ and\n// JIT'd JS is rather slow *and* loses JIT type information, resulting in\n// worse generated code for the comparator function than would be optimal. In\n// fact, when sorting with a comparator, these costs outweigh the benefits of\n// sorting in C++. By using our own JS-implemented Quick Sort (below), we get\n// a ~3500ms mean speed-up in `bench/bench.html`.\n\n/**\n * Swap the elements indexed by `x` and `y` in the array `ary`.\n *\n * @param {Array} ary\n *        The array.\n * @param {Number} x\n *        The index of the first item.\n * @param {Number} y\n *        The index of the second item.\n */\nfunction swap(ary, x, y) {\n  var temp = ary[x];\n  ary[x] = ary[y];\n  ary[y] = temp;\n}\n\n/**\n * Returns a random integer within the range `low .. high` inclusive.\n *\n * @param {Number} low\n *        The lower bound on the range.\n * @param {Number} high\n *        The upper bound on the range.\n */\nfunction randomIntInRange(low, high) {\n  return Math.round(low + (Math.random() * (high - low)));\n}\n\n/**\n * The Quick Sort algorithm.\n *\n * @param {Array} ary\n *        An array to sort.\n * @param {function} comparator\n *        Function to use to compare two items.\n * @param {Number} p\n *        Start index of the array\n * @param {Number} r\n *        End index of the array\n */\nfunction doQuickSort(ary, comparator, p, r) {\n  // If our lower bound is less than our upper bound, we (1) partition the\n  // array into two pieces and (2) recurse on each half. If it is not, this is\n  // the empty array and our base case.\n\n  if (p < r) {\n    // (1) Partitioning.\n    //\n    // The partitioning chooses a pivot between `p` and `r` and moves all\n    // elements that are less than or equal to the pivot to the before it, and\n    // all the elements that are greater than it after it. The effect is that\n    // once partition is done, the pivot is in the exact place it will be when\n    // the array is put in sorted order, and it will not need to be moved\n    // again. This runs in O(n) time.\n\n    // Always choose a random pivot so that an input array which is reverse\n    // sorted does not cause O(n^2) running time.\n    var pivotIndex = randomIntInRange(p, r);\n    var i = p - 1;\n\n    swap(ary, pivotIndex, r);\n    var pivot = ary[r];\n\n    // Immediately after `j` is incremented in this loop, the following hold\n    // true:\n    //\n    //   * Every element in `ary[p .. i]` is less than or equal to the pivot.\n    //\n    //   * Every element in `ary[i+1 .. j-1]` is greater than the pivot.\n    for (var j = p; j < r; j++) {\n      if (comparator(ary[j], pivot) <= 0) {\n        i += 1;\n        swap(ary, i, j);\n      }\n    }\n\n    swap(ary, i + 1, j);\n    var q = i + 1;\n\n    // (2) Recurse on each half.\n\n    doQuickSort(ary, comparator, p, q - 1);\n    doQuickSort(ary, comparator, q + 1, r);\n  }\n}\n\n/**\n * Sort the given array in-place with the given comparator function.\n *\n * @param {Array} ary\n *        An array to sort.\n * @param {function} comparator\n *        Function to use to compare two items.\n */\nexports.quickSort = function (ary, comparator) {\n  doQuickSort(ary, comparator, 0, ary.length - 1);\n};\n","map":{"mappings":[{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/source-map/lib/quick-sort.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}}],"sources":{"../node_modules/source-map/lib/quick-sort.js":"/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\n// It turns out that some (most?) JavaScript engines don't self-host\n// `Array.prototype.sort`. This makes sense because C++ will likely remain\n// faster than JS when doing raw CPU-intensive sorting. However, when using a\n// custom comparator function, calling back and forth between the VM's C++ and\n// JIT'd JS is rather slow *and* loses JIT type information, resulting in\n// worse generated code for the comparator function than would be optimal. In\n// fact, when sorting with a comparator, these costs outweigh the benefits of\n// sorting in C++. By using our own JS-implemented Quick Sort (below), we get\n// a ~3500ms mean speed-up in `bench/bench.html`.\n\n/**\n * Swap the elements indexed by `x` and `y` in the array `ary`.\n *\n * @param {Array} ary\n *        The array.\n * @param {Number} x\n *        The index of the first item.\n * @param {Number} y\n *        The index of the second item.\n */\nfunction swap(ary, x, y) {\n  var temp = ary[x];\n  ary[x] = ary[y];\n  ary[y] = temp;\n}\n\n/**\n * Returns a random integer within the range `low .. high` inclusive.\n *\n * @param {Number} low\n *        The lower bound on the range.\n * @param {Number} high\n *        The upper bound on the range.\n */\nfunction randomIntInRange(low, high) {\n  return Math.round(low + (Math.random() * (high - low)));\n}\n\n/**\n * The Quick Sort algorithm.\n *\n * @param {Array} ary\n *        An array to sort.\n * @param {function} comparator\n *        Function to use to compare two items.\n * @param {Number} p\n *        Start index of the array\n * @param {Number} r\n *        End index of the array\n */\nfunction doQuickSort(ary, comparator, p, r) {\n  // If our lower bound is less than our upper bound, we (1) partition the\n  // array into two pieces and (2) recurse on each half. If it is not, this is\n  // the empty array and our base case.\n\n  if (p < r) {\n    // (1) Partitioning.\n    //\n    // The partitioning chooses a pivot between `p` and `r` and moves all\n    // elements that are less than or equal to the pivot to the before it, and\n    // all the elements that are greater than it after it. The effect is that\n    // once partition is done, the pivot is in the exact place it will be when\n    // the array is put in sorted order, and it will not need to be moved\n    // again. This runs in O(n) time.\n\n    // Always choose a random pivot so that an input array which is reverse\n    // sorted does not cause O(n^2) running time.\n    var pivotIndex = randomIntInRange(p, r);\n    var i = p - 1;\n\n    swap(ary, pivotIndex, r);\n    var pivot = ary[r];\n\n    // Immediately after `j` is incremented in this loop, the following hold\n    // true:\n    //\n    //   * Every element in `ary[p .. i]` is less than or equal to the pivot.\n    //\n    //   * Every element in `ary[i+1 .. j-1]` is greater than the pivot.\n    for (var j = p; j < r; j++) {\n      if (comparator(ary[j], pivot) <= 0) {\n        i += 1;\n        swap(ary, i, j);\n      }\n    }\n\n    swap(ary, i + 1, j);\n    var q = i + 1;\n\n    // (2) Recurse on each half.\n\n    doQuickSort(ary, comparator, p, q - 1);\n    doQuickSort(ary, comparator, q + 1, r);\n  }\n}\n\n/**\n * Sort the given array in-place with the given comparator function.\n *\n * @param {Array} ary\n *        An array to sort.\n * @param {function} comparator\n *        Function to use to compare two items.\n */\nexports.quickSort = function (ary, comparator) {\n  doQuickSort(ary, comparator, 0, ary.length - 1);\n};\n"},"lineCount":115}},"hash":"d8521af2d08c1a7122abde55fdb03ce7","cacheData":{"env":{}}}