{"dependencies":[{"name":"lodash","loc":{"line":3,"column":18}},{"name":"../../utils","loc":{"line":4,"column":22}},{"name":"../../promise","loc":{"line":6,"column":24}},{"name":"../abstract/query","loc":{"line":7,"column":30}},{"name":"../../query-types","loc":{"line":8,"column":27}},{"name":"../../errors.js","loc":{"line":9,"column":32}},{"name":"../parserStore","loc":{"line":10,"column":28}}],"generated":{"js":"'use strict';\n\nconst _ = require('lodash');\nconst Utils = require('../../utils');\nconst debug = Utils.getLogger().debugContext('sql:sqlite');\nconst Promise = require('../../promise');\nconst AbstractQuery = require('../abstract/query');\nconst QueryTypes = require('../../query-types');\nconst sequelizeErrors = require('../../errors.js');\nconst parserStore = require('../parserStore')('sqlite');\n\nclass Query extends AbstractQuery {\n\n  constructor(database, sequelize, options) {\n    super();\n    this.database = database;\n    this.sequelize = sequelize;\n    this.instance = options.instance;\n    this.model = options.model;\n    this.options = _.extend({\n      logging: console.log,\n      plain: false,\n      raw: false\n    }, options || {});\n\n    this.checkLoggingOption();\n  }\n\n  getInsertIdField() {\n    return 'lastID';\n  }\n\n  /**\n   * rewrite query with parameters\n   * @private\n   */\n  static formatBindParameters(sql, values, dialect) {\n    let bindParam;\n    if (Array.isArray(values)) {\n      bindParam = {};\n      values.forEach((v, i) => {\n        bindParam['$'+(i+1)] = v;\n      });\n      sql = AbstractQuery.formatBindParameters(sql, values, dialect, { skipValueReplace: true })[0];\n    } else {\n      bindParam = {};\n      if (typeof values === 'object') {\n        for (const k of Object.keys(values)) {\n          bindParam['$'+k] = values[k];\n        }\n      }\n      sql = AbstractQuery.formatBindParameters(sql, values, dialect, { skipValueReplace: true })[0];\n    }\n    return [sql, bindParam];\n  }\n\n  _collectModels(include, prefix) {\n    const ret = {};\n\n    if (include) {\n      for (const _include of include) {\n        let key;\n        if (!prefix) {\n          key = _include.as;\n        } else {\n          key = prefix + '.' + _include.as;\n        }\n        ret[key] = _include.model;\n\n        if (_include.include) {\n          _.merge(ret, this._collectModels(_include.include, key));\n        }\n      }\n    }\n\n    return ret;\n  }\n\n  run(sql, parameters) {\n    this.sql = sql;\n    const method = this.getDatabaseMethod();\n    if (method === 'exec') {\n      // exec does not support bind parameter\n      sql = AbstractQuery.formatBindParameters(sql, this.options.bind, this.options.dialect, { skipUnescape: true })[0];\n      this.sql = sql;\n    }\n\n    //do we need benchmark for this query execution\n    const benchmark = this.sequelize.options.benchmark || this.options.benchmark;\n\n    let queryBegin;\n    if (benchmark) {\n      queryBegin = Date.now();\n    } else {\n      this.sequelize.log('Executing (' + (this.database.uuid || 'default') + '): ' + this.sql, this.options);\n    }\n\n    debug(`executing(${this.database.uuid || 'default'}) : ${this.sql}`);\n\n    return new Promise(resolve => {\n      const columnTypes = {};\n      this.database.serialize(() => {\n        const executeSql = () => {\n          if (this.sql.indexOf('-- ') === 0) {\n            return resolve();\n          } else {\n            resolve(new Promise((resolve, reject) => {\n              const query = this;\n              // cannot use arrow function here because the function is bound to the statement\n              function afterExecute(err, results) {\n                debug(`executed(${query.database.uuid || 'default'}) : ${query.sql}`);\n\n                if (benchmark) {\n                  query.sequelize.log('Executed (' + (query.database.uuid || 'default') + '): ' + query.sql, Date.now() - queryBegin, query.options);\n                }\n\n                if (err) {\n                  err.sql = query.sql;\n                  reject(query.formatError(err));\n                } else {\n                  const metaData = this;\n                  let result = query.instance;\n\n                  // add the inserted row id to the instance\n                  if (query.isInsertQuery(results, metaData)) {\n                    query.handleInsertQuery(results, metaData);\n                    if (!query.instance) {\n                      // handle bulkCreate AI primary key\n                      if (\n                        metaData.constructor.name === 'Statement'\n                        && query.model\n                        && query.model.autoIncrementAttribute\n                        && query.model.autoIncrementAttribute === query.model.primaryKeyAttribute\n                        && query.model.rawAttributes[query.model.primaryKeyAttribute]\n                      ) {\n                        const startId = metaData[query.getInsertIdField()] - metaData.changes + 1;\n                        result = [];\n                        for (let i = startId; i < startId + metaData.changes; i++) {\n                          result.push({ [query.model.rawAttributes[query.model.primaryKeyAttribute].field]: i });\n                        }\n                      } else {\n                        result = metaData[query.getInsertIdField()];\n                      }\n                    }\n                  }\n\n                  if (query.sql.indexOf('sqlite_master') !== -1) {\n                    if (query.sql.indexOf('SELECT sql FROM sqlite_master WHERE tbl_name') !== -1) {\n                      result = results;\n                      if (result && result[0] && result[0].sql.indexOf('CONSTRAINT') !== -1) {\n                        result = query.parseConstraintsFromSql(results[0].sql);\n                      }\n                    } else {\n                      result = results.map(resultSet => resultSet.name);\n                    }\n                  } else if (query.isSelectQuery()) {\n                    if (!query.options.raw) {\n                      // This is a map of prefix strings to models, e.g. user.projects -> Project model\n                      const prefixes = query._collectModels(query.options.include);\n\n                      results = results.map(result => {\n                        return _.mapValues(result, (value, name) => {\n                          let model;\n                          if (name.indexOf('.') !== -1) {\n                            const lastind = name.lastIndexOf('.');\n\n                            model = prefixes[name.substr(0, lastind)];\n\n                            name = name.substr(lastind + 1);\n                          } else {\n                            model = query.options.model;\n                          }\n\n                          const tableName = model.getTableName().toString().replace(/`/g, '');\n                          const tableTypes = columnTypes[tableName] || {};\n\n                          if (tableTypes && !(name in tableTypes)) {\n                            // The column is aliased\n                            _.forOwn(model.rawAttributes, (attribute, key) => {\n                              if (name === key && attribute.field) {\n                                name = attribute.field;\n                                return false;\n                              }\n                            });\n                          }\n\n                          return tableTypes.hasOwnProperty(name)\n                            ? query.applyParsers(tableTypes[name], value)\n                            : value;\n                        });\n                      });\n                    }\n\n                    result = query.handleSelectQuery(results);\n                  } else if (query.isShowOrDescribeQuery()) {\n                    result = results;\n                  } else if (query.sql.indexOf('PRAGMA INDEX_LIST') !== -1) {\n                    result = query.handleShowIndexesQuery(results);\n                  } else if (query.sql.indexOf('PRAGMA INDEX_INFO') !== -1) {\n                    result = results;\n                  } else if (query.sql.indexOf('PRAGMA TABLE_INFO') !== -1) {\n                    // this is the sqlite way of getting the metadata of a table\n                    result = {};\n\n                    let defaultValue;\n                    for (const _result of results) {\n                      if (_result.dflt_value === null) {\n                        // Column schema omits any \"DEFAULT ...\"\n                        defaultValue = undefined;\n                      } else if (_result.dflt_value === 'NULL') {\n                        // Column schema is a \"DEFAULT NULL\"\n                        defaultValue = null;\n                      } else {\n                        defaultValue = _result.dflt_value;\n                      }\n\n                      result[_result.name] = {\n                        type: _result.type,\n                        allowNull: _result.notnull === 0,\n                        defaultValue,\n                        primaryKey: _result.pk !== 0\n                      };\n\n                      if (result[_result.name].type === 'TINYINT(1)') {\n                        result[_result.name].defaultValue = { '0': false, '1': true }[result[_result.name].defaultValue];\n                      }\n\n                      if (typeof result[_result.name].defaultValue === 'string') {\n                        result[_result.name].defaultValue = result[_result.name].defaultValue.replace(/'/g, '');\n                      }\n                    }\n                  } else if (query.sql.indexOf('PRAGMA foreign_keys;') !== -1) {\n                    result = results[0];\n                  } else if (query.sql.indexOf('PRAGMA foreign_keys') !== -1) {\n                    result = results;\n                  } else if (query.sql.indexOf('PRAGMA foreign_key_list') !== -1) {\n                    result = results;\n                  } else if ([QueryTypes.BULKUPDATE, QueryTypes.BULKDELETE].indexOf(query.options.type) !== -1) {\n                    result = metaData.changes;\n                  } else if (query.options.type === QueryTypes.UPSERT) {\n                    result = undefined;\n                  } else if (query.options.type === QueryTypes.VERSION) {\n                    result = results[0].version;\n                  } else if (query.options.type === QueryTypes.RAW) {\n                    result = [results, metaData];\n                  } else if (query.isUpdateQuery() || query.isInsertQuery()) {\n                    result = [result, metaData.changes];\n                  }\n\n                  resolve(result);\n                }\n              }\n\n              if (method === 'exec') {\n                // exec does not support bind parameter\n                this.database[method](this.sql, afterExecute);\n              } else {\n                if (!parameters) parameters = [];\n                this.database[method](this.sql, parameters, afterExecute);\n              }\n            }));\n            return null;\n          }\n        };\n\n        if (this.getDatabaseMethod() === 'all') {\n          let tableNames = [];\n          if (this.options && this.options.tableNames) {\n            tableNames = this.options.tableNames;\n          } else if (/FROM `(.*?)`/i.exec(this.sql)) {\n            tableNames.push(/FROM `(.*?)`/i.exec(this.sql)[1]);\n          }\n\n          // If we already have the metadata for the table, there's no need to ask for it again\n          tableNames = _.filter(tableNames, tableName => !(tableName in columnTypes) && tableName !== 'sqlite_master');\n\n          if (!tableNames.length) {\n            return executeSql();\n          } else {\n            return Promise.map(tableNames, tableName =>\n              new Promise(resolve => {\n                tableName = tableName.replace(/`/g, '');\n                columnTypes[tableName] = {};\n\n                this.database.all('PRAGMA table_info(`' + tableName + '`)', (err, results) => {\n                  if (!err) {\n                    for (const result of results) {\n                      columnTypes[tableName][result.name] = result.type;\n                    }\n                  }\n                  resolve();\n                });\n              })\n            ).then(executeSql);\n          }\n        } else {\n          return executeSql();\n        }\n      });\n    });\n  }\n\n  parseConstraintsFromSql(sql) {\n    let constraints = sql.split('CONSTRAINT ');\n    let referenceTableName, referenceTableKeys, updateAction, deleteAction;\n    constraints.splice(0, 1);\n    constraints = constraints.map(constraintSql => {\n      //Parse foreign key snippets\n      if (constraintSql.indexOf('REFERENCES') !== -1) {\n        //Parse out the constraint condition form sql string\n        updateAction = constraintSql.match(/ON UPDATE (CASCADE|SET NULL|RESTRICT|NO ACTION|SET DEFAULT){1}/);\n        deleteAction = constraintSql.match(/ON DELETE (CASCADE|SET NULL|RESTRICT|NO ACTION|SET DEFAULT){1}/);\n\n        if (updateAction) {\n          updateAction = updateAction[1];\n        }\n\n        if (deleteAction) {\n          deleteAction = deleteAction[1];\n        }\n\n        const referencesRegex = /REFERENCES.+\\((?:[^)(]+|\\((?:[^)(]+|\\([^)(]*\\))*\\))*\\)/;\n        const referenceConditions = constraintSql.match(referencesRegex)[0].split(' ');\n        referenceTableName = Utils.removeTicks(referenceConditions[1]);\n        let columnNames = referenceConditions[2];\n        columnNames = columnNames.replace(/\\(|\\)/g, '').split(', ');\n        referenceTableKeys = columnNames.map(column => Utils.removeTicks(column));\n      }\n\n      const constraintCondition = constraintSql.match(/\\((?:[^)(]+|\\((?:[^)(]+|\\([^)(]*\\))*\\))*\\)/)[0];\n      constraintSql = constraintSql.replace(/\\(.+\\)/, '');\n      const constraint = constraintSql.split(' ');\n\n      if (constraint[1] === 'PRIMARY' || constraint[1] === 'FOREIGN') {\n        constraint[1]+= ' KEY';\n      }\n\n      return {\n        constraintName: Utils.removeTicks(constraint[0]),\n        constraintType: constraint[1],\n        updateAction,\n        deleteAction,\n        sql: sql.replace(/\\\"/g, '\\`'), //Sqlite returns double quotes for table name\n        constraintCondition,\n        referenceTableName,\n        referenceTableKeys\n      };\n    });\n\n    return constraints;\n  }\n\n  applyParsers(type, value) {\n    if (type.indexOf('(') !== -1) {\n      // Remove the length part\n      type = type.substr(0, type.indexOf('('));\n    }\n    type = type.replace('UNSIGNED', '').replace('ZEROFILL', '');\n    type = type.trim().toUpperCase();\n    const parse = parserStore.get(type);\n\n    if (value !== null && parse) {\n      return parse(value, { timezone: this.sequelize.options.timezone });\n    }\n    return value;\n  }\n\n  formatError(err) {\n\n    switch (err.code) {\n      case 'SQLITE_CONSTRAINT': {\n        let match = err.message.match(/FOREIGN KEY constraint failed/);\n        if (match !== null) {\n          return new sequelizeErrors.ForeignKeyConstraintError({\n            parent: err\n          });\n        }\n\n        let fields = [];\n\n        // Sqlite pre 2.2 behavior - Error: SQLITE_CONSTRAINT: columns x, y are not unique\n        match = err.message.match(/columns (.*?) are/);\n        if (match !== null && match.length >= 2) {\n          fields = match[1].split(', ');\n        } else {\n\n          // Sqlite post 2.2 behavior - Error: SQLITE_CONSTRAINT: UNIQUE constraint failed: table.x, table.y\n          match = err.message.match(/UNIQUE constraint failed: (.*)/);\n          if (match !== null && match.length >= 2) {\n            fields = match[1].split(', ').map(columnWithTable => columnWithTable.split('.')[1]);\n          }\n        }\n\n        const errors = [];\n        let message = 'Validation error';\n\n        for (const field of fields) {\n          errors.push(new sequelizeErrors.ValidationErrorItem(\n            this.getUniqueConstraintErrorMessage(field),\n            'unique violation', // sequelizeErrors.ValidationErrorItem.Origins.DB,\n            field,\n            this.instance && this.instance[field],\n            this.instance,\n            'not_unique'\n          ));\n        }\n\n        if (this.model) {\n          _.forOwn(this.model.uniqueKeys, constraint => {\n            if (_.isEqual(constraint.fields, fields) && !!constraint.msg) {\n              message = constraint.msg;\n              return false;\n            }\n          });\n        }\n\n        return new sequelizeErrors.UniqueConstraintError({message, errors, parent: err, fields});\n      }\n      case 'SQLITE_BUSY':\n        return new sequelizeErrors.TimeoutError(err);\n\n      default:\n        return new sequelizeErrors.DatabaseError(err);\n    }\n  }\n\n  handleShowIndexesQuery(data) {\n\n    // Sqlite returns indexes so the one that was defined last is returned first. Lets reverse that!\n    return this.sequelize.Promise.map(data.reverse(), item => {\n      item.fields = [];\n      item.primary = false;\n      item.unique = !!item.unique;\n      item.constraintName = item.name;\n      return this.run('PRAGMA INDEX_INFO(`' + item.name + '`)').then(columns => {\n        for (const column of columns) {\n          item.fields[column.seqno] = {\n            attribute: column.name,\n            length: undefined,\n            order: undefined\n          };\n        }\n\n        return item;\n      });\n    });\n  }\n\n  getDatabaseMethod() {\n    if (this.isUpsertQuery()) {\n      return 'exec'; // Needed to run multiple queries in one\n    } else if (this.isInsertQuery() || this.isUpdateQuery() || this.isBulkUpdateQuery() || this.sql.toLowerCase().indexOf('CREATE TEMPORARY TABLE'.toLowerCase()) !== -1 || this.options.type === QueryTypes.BULKDELETE) {\n      return 'run';\n    } else {\n      return 'all';\n    }\n  }\n}\n\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;\n","map":{"mappings":[{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":371,"column":0},"generated":{"line":371,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":372,"column":0},"generated":{"line":372,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":373,"column":0},"generated":{"line":373,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":374,"column":0},"generated":{"line":374,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":375,"column":0},"generated":{"line":375,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":376,"column":0},"generated":{"line":376,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":377,"column":0},"generated":{"line":377,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":378,"column":0},"generated":{"line":378,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":379,"column":0},"generated":{"line":379,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":380,"column":0},"generated":{"line":380,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":381,"column":0},"generated":{"line":381,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":382,"column":0},"generated":{"line":382,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":383,"column":0},"generated":{"line":383,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":384,"column":0},"generated":{"line":384,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":385,"column":0},"generated":{"line":385,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":386,"column":0},"generated":{"line":386,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":387,"column":0},"generated":{"line":387,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":388,"column":0},"generated":{"line":388,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":389,"column":0},"generated":{"line":389,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":390,"column":0},"generated":{"line":390,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":391,"column":0},"generated":{"line":391,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":392,"column":0},"generated":{"line":392,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":393,"column":0},"generated":{"line":393,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":394,"column":0},"generated":{"line":394,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":395,"column":0},"generated":{"line":395,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":396,"column":0},"generated":{"line":396,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":397,"column":0},"generated":{"line":397,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":398,"column":0},"generated":{"line":398,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":399,"column":0},"generated":{"line":399,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":400,"column":0},"generated":{"line":400,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":401,"column":0},"generated":{"line":401,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":402,"column":0},"generated":{"line":402,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":403,"column":0},"generated":{"line":403,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":404,"column":0},"generated":{"line":404,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":405,"column":0},"generated":{"line":405,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":406,"column":0},"generated":{"line":406,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":407,"column":0},"generated":{"line":407,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":408,"column":0},"generated":{"line":408,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":409,"column":0},"generated":{"line":409,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":410,"column":0},"generated":{"line":410,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":411,"column":0},"generated":{"line":411,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":412,"column":0},"generated":{"line":412,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":413,"column":0},"generated":{"line":413,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":414,"column":0},"generated":{"line":414,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":415,"column":0},"generated":{"line":415,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":416,"column":0},"generated":{"line":416,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":417,"column":0},"generated":{"line":417,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":418,"column":0},"generated":{"line":418,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":419,"column":0},"generated":{"line":419,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":420,"column":0},"generated":{"line":420,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":421,"column":0},"generated":{"line":421,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":422,"column":0},"generated":{"line":422,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":423,"column":0},"generated":{"line":423,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":424,"column":0},"generated":{"line":424,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":425,"column":0},"generated":{"line":425,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":426,"column":0},"generated":{"line":426,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":427,"column":0},"generated":{"line":427,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":428,"column":0},"generated":{"line":428,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":429,"column":0},"generated":{"line":429,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":430,"column":0},"generated":{"line":430,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":431,"column":0},"generated":{"line":431,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":432,"column":0},"generated":{"line":432,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":433,"column":0},"generated":{"line":433,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":434,"column":0},"generated":{"line":434,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":435,"column":0},"generated":{"line":435,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":436,"column":0},"generated":{"line":436,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":437,"column":0},"generated":{"line":437,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":438,"column":0},"generated":{"line":438,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":439,"column":0},"generated":{"line":439,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":440,"column":0},"generated":{"line":440,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":441,"column":0},"generated":{"line":441,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":442,"column":0},"generated":{"line":442,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":443,"column":0},"generated":{"line":443,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":444,"column":0},"generated":{"line":444,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":445,"column":0},"generated":{"line":445,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":446,"column":0},"generated":{"line":446,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":447,"column":0},"generated":{"line":447,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":448,"column":0},"generated":{"line":448,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":449,"column":0},"generated":{"line":449,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":450,"column":0},"generated":{"line":450,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":451,"column":0},"generated":{"line":451,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":452,"column":0},"generated":{"line":452,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":453,"column":0},"generated":{"line":453,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":454,"column":0},"generated":{"line":454,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":455,"column":0},"generated":{"line":455,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":456,"column":0},"generated":{"line":456,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":457,"column":0},"generated":{"line":457,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":458,"column":0},"generated":{"line":458,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":459,"column":0},"generated":{"line":459,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":460,"column":0},"generated":{"line":460,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":461,"column":0},"generated":{"line":461,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":462,"column":0},"generated":{"line":462,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/sqlite/query.js","original":{"line":463,"column":0},"generated":{"line":463,"column":0}}],"sources":{"../node_modules/sequelize/lib/dialects/sqlite/query.js":"'use strict';\n\nconst _ = require('lodash');\nconst Utils = require('../../utils');\nconst debug = Utils.getLogger().debugContext('sql:sqlite');\nconst Promise = require('../../promise');\nconst AbstractQuery = require('../abstract/query');\nconst QueryTypes = require('../../query-types');\nconst sequelizeErrors = require('../../errors.js');\nconst parserStore = require('../parserStore')('sqlite');\n\nclass Query extends AbstractQuery {\n\n  constructor(database, sequelize, options) {\n    super();\n    this.database = database;\n    this.sequelize = sequelize;\n    this.instance = options.instance;\n    this.model = options.model;\n    this.options = _.extend({\n      logging: console.log,\n      plain: false,\n      raw: false\n    }, options || {});\n\n    this.checkLoggingOption();\n  }\n\n  getInsertIdField() {\n    return 'lastID';\n  }\n\n  /**\n   * rewrite query with parameters\n   * @private\n   */\n  static formatBindParameters(sql, values, dialect) {\n    let bindParam;\n    if (Array.isArray(values)) {\n      bindParam = {};\n      values.forEach((v, i) => {\n        bindParam['$'+(i+1)] = v;\n      });\n      sql = AbstractQuery.formatBindParameters(sql, values, dialect, { skipValueReplace: true })[0];\n    } else {\n      bindParam = {};\n      if (typeof values === 'object') {\n        for (const k of Object.keys(values)) {\n          bindParam['$'+k] = values[k];\n        }\n      }\n      sql = AbstractQuery.formatBindParameters(sql, values, dialect, { skipValueReplace: true })[0];\n    }\n    return [sql, bindParam];\n  }\n\n  _collectModels(include, prefix) {\n    const ret = {};\n\n    if (include) {\n      for (const _include of include) {\n        let key;\n        if (!prefix) {\n          key = _include.as;\n        } else {\n          key = prefix + '.' + _include.as;\n        }\n        ret[key] = _include.model;\n\n        if (_include.include) {\n          _.merge(ret, this._collectModels(_include.include, key));\n        }\n      }\n    }\n\n    return ret;\n  }\n\n  run(sql, parameters) {\n    this.sql = sql;\n    const method = this.getDatabaseMethod();\n    if (method === 'exec') {\n      // exec does not support bind parameter\n      sql = AbstractQuery.formatBindParameters(sql, this.options.bind, this.options.dialect, { skipUnescape: true })[0];\n      this.sql = sql;\n    }\n\n    //do we need benchmark for this query execution\n    const benchmark = this.sequelize.options.benchmark || this.options.benchmark;\n\n    let queryBegin;\n    if (benchmark) {\n      queryBegin = Date.now();\n    } else {\n      this.sequelize.log('Executing (' + (this.database.uuid || 'default') + '): ' + this.sql, this.options);\n    }\n\n    debug(`executing(${this.database.uuid || 'default'}) : ${this.sql}`);\n\n    return new Promise(resolve => {\n      const columnTypes = {};\n      this.database.serialize(() => {\n        const executeSql = () => {\n          if (this.sql.indexOf('-- ') === 0) {\n            return resolve();\n          } else {\n            resolve(new Promise((resolve, reject) => {\n              const query = this;\n              // cannot use arrow function here because the function is bound to the statement\n              function afterExecute(err, results) {\n                debug(`executed(${query.database.uuid || 'default'}) : ${query.sql}`);\n\n                if (benchmark) {\n                  query.sequelize.log('Executed (' + (query.database.uuid || 'default') + '): ' + query.sql, Date.now() - queryBegin, query.options);\n                }\n\n                if (err) {\n                  err.sql = query.sql;\n                  reject(query.formatError(err));\n                } else {\n                  const metaData = this;\n                  let result = query.instance;\n\n                  // add the inserted row id to the instance\n                  if (query.isInsertQuery(results, metaData)) {\n                    query.handleInsertQuery(results, metaData);\n                    if (!query.instance) {\n                      // handle bulkCreate AI primary key\n                      if (\n                        metaData.constructor.name === 'Statement'\n                        && query.model\n                        && query.model.autoIncrementAttribute\n                        && query.model.autoIncrementAttribute === query.model.primaryKeyAttribute\n                        && query.model.rawAttributes[query.model.primaryKeyAttribute]\n                      ) {\n                        const startId = metaData[query.getInsertIdField()] - metaData.changes + 1;\n                        result = [];\n                        for (let i = startId; i < startId + metaData.changes; i++) {\n                          result.push({ [query.model.rawAttributes[query.model.primaryKeyAttribute].field]: i });\n                        }\n                      } else {\n                        result = metaData[query.getInsertIdField()];\n                      }\n                    }\n                  }\n\n                  if (query.sql.indexOf('sqlite_master') !== -1) {\n                    if (query.sql.indexOf('SELECT sql FROM sqlite_master WHERE tbl_name') !== -1) {\n                      result = results;\n                      if (result && result[0] && result[0].sql.indexOf('CONSTRAINT') !== -1) {\n                        result = query.parseConstraintsFromSql(results[0].sql);\n                      }\n                    } else {\n                      result = results.map(resultSet => resultSet.name);\n                    }\n                  } else if (query.isSelectQuery()) {\n                    if (!query.options.raw) {\n                      // This is a map of prefix strings to models, e.g. user.projects -> Project model\n                      const prefixes = query._collectModels(query.options.include);\n\n                      results = results.map(result => {\n                        return _.mapValues(result, (value, name) => {\n                          let model;\n                          if (name.indexOf('.') !== -1) {\n                            const lastind = name.lastIndexOf('.');\n\n                            model = prefixes[name.substr(0, lastind)];\n\n                            name = name.substr(lastind + 1);\n                          } else {\n                            model = query.options.model;\n                          }\n\n                          const tableName = model.getTableName().toString().replace(/`/g, '');\n                          const tableTypes = columnTypes[tableName] || {};\n\n                          if (tableTypes && !(name in tableTypes)) {\n                            // The column is aliased\n                            _.forOwn(model.rawAttributes, (attribute, key) => {\n                              if (name === key && attribute.field) {\n                                name = attribute.field;\n                                return false;\n                              }\n                            });\n                          }\n\n                          return tableTypes.hasOwnProperty(name)\n                            ? query.applyParsers(tableTypes[name], value)\n                            : value;\n                        });\n                      });\n                    }\n\n                    result = query.handleSelectQuery(results);\n                  } else if (query.isShowOrDescribeQuery()) {\n                    result = results;\n                  } else if (query.sql.indexOf('PRAGMA INDEX_LIST') !== -1) {\n                    result = query.handleShowIndexesQuery(results);\n                  } else if (query.sql.indexOf('PRAGMA INDEX_INFO') !== -1) {\n                    result = results;\n                  } else if (query.sql.indexOf('PRAGMA TABLE_INFO') !== -1) {\n                    // this is the sqlite way of getting the metadata of a table\n                    result = {};\n\n                    let defaultValue;\n                    for (const _result of results) {\n                      if (_result.dflt_value === null) {\n                        // Column schema omits any \"DEFAULT ...\"\n                        defaultValue = undefined;\n                      } else if (_result.dflt_value === 'NULL') {\n                        // Column schema is a \"DEFAULT NULL\"\n                        defaultValue = null;\n                      } else {\n                        defaultValue = _result.dflt_value;\n                      }\n\n                      result[_result.name] = {\n                        type: _result.type,\n                        allowNull: _result.notnull === 0,\n                        defaultValue,\n                        primaryKey: _result.pk !== 0\n                      };\n\n                      if (result[_result.name].type === 'TINYINT(1)') {\n                        result[_result.name].defaultValue = { '0': false, '1': true }[result[_result.name].defaultValue];\n                      }\n\n                      if (typeof result[_result.name].defaultValue === 'string') {\n                        result[_result.name].defaultValue = result[_result.name].defaultValue.replace(/'/g, '');\n                      }\n                    }\n                  } else if (query.sql.indexOf('PRAGMA foreign_keys;') !== -1) {\n                    result = results[0];\n                  } else if (query.sql.indexOf('PRAGMA foreign_keys') !== -1) {\n                    result = results;\n                  } else if (query.sql.indexOf('PRAGMA foreign_key_list') !== -1) {\n                    result = results;\n                  } else if ([QueryTypes.BULKUPDATE, QueryTypes.BULKDELETE].indexOf(query.options.type) !== -1) {\n                    result = metaData.changes;\n                  } else if (query.options.type === QueryTypes.UPSERT) {\n                    result = undefined;\n                  } else if (query.options.type === QueryTypes.VERSION) {\n                    result = results[0].version;\n                  } else if (query.options.type === QueryTypes.RAW) {\n                    result = [results, metaData];\n                  } else if (query.isUpdateQuery() || query.isInsertQuery()) {\n                    result = [result, metaData.changes];\n                  }\n\n                  resolve(result);\n                }\n              }\n\n              if (method === 'exec') {\n                // exec does not support bind parameter\n                this.database[method](this.sql, afterExecute);\n              } else {\n                if (!parameters) parameters = [];\n                this.database[method](this.sql, parameters, afterExecute);\n              }\n            }));\n            return null;\n          }\n        };\n\n        if (this.getDatabaseMethod() === 'all') {\n          let tableNames = [];\n          if (this.options && this.options.tableNames) {\n            tableNames = this.options.tableNames;\n          } else if (/FROM `(.*?)`/i.exec(this.sql)) {\n            tableNames.push(/FROM `(.*?)`/i.exec(this.sql)[1]);\n          }\n\n          // If we already have the metadata for the table, there's no need to ask for it again\n          tableNames = _.filter(tableNames, tableName => !(tableName in columnTypes) && tableName !== 'sqlite_master');\n\n          if (!tableNames.length) {\n            return executeSql();\n          } else {\n            return Promise.map(tableNames, tableName =>\n              new Promise(resolve => {\n                tableName = tableName.replace(/`/g, '');\n                columnTypes[tableName] = {};\n\n                this.database.all('PRAGMA table_info(`' + tableName + '`)', (err, results) => {\n                  if (!err) {\n                    for (const result of results) {\n                      columnTypes[tableName][result.name] = result.type;\n                    }\n                  }\n                  resolve();\n                });\n              })\n            ).then(executeSql);\n          }\n        } else {\n          return executeSql();\n        }\n      });\n    });\n  }\n\n  parseConstraintsFromSql(sql) {\n    let constraints = sql.split('CONSTRAINT ');\n    let referenceTableName, referenceTableKeys, updateAction, deleteAction;\n    constraints.splice(0, 1);\n    constraints = constraints.map(constraintSql => {\n      //Parse foreign key snippets\n      if (constraintSql.indexOf('REFERENCES') !== -1) {\n        //Parse out the constraint condition form sql string\n        updateAction = constraintSql.match(/ON UPDATE (CASCADE|SET NULL|RESTRICT|NO ACTION|SET DEFAULT){1}/);\n        deleteAction = constraintSql.match(/ON DELETE (CASCADE|SET NULL|RESTRICT|NO ACTION|SET DEFAULT){1}/);\n\n        if (updateAction) {\n          updateAction = updateAction[1];\n        }\n\n        if (deleteAction) {\n          deleteAction = deleteAction[1];\n        }\n\n        const referencesRegex = /REFERENCES.+\\((?:[^)(]+|\\((?:[^)(]+|\\([^)(]*\\))*\\))*\\)/;\n        const referenceConditions = constraintSql.match(referencesRegex)[0].split(' ');\n        referenceTableName = Utils.removeTicks(referenceConditions[1]);\n        let columnNames = referenceConditions[2];\n        columnNames = columnNames.replace(/\\(|\\)/g, '').split(', ');\n        referenceTableKeys = columnNames.map(column => Utils.removeTicks(column));\n      }\n\n      const constraintCondition = constraintSql.match(/\\((?:[^)(]+|\\((?:[^)(]+|\\([^)(]*\\))*\\))*\\)/)[0];\n      constraintSql = constraintSql.replace(/\\(.+\\)/, '');\n      const constraint = constraintSql.split(' ');\n\n      if (constraint[1] === 'PRIMARY' || constraint[1] === 'FOREIGN') {\n        constraint[1]+= ' KEY';\n      }\n\n      return {\n        constraintName: Utils.removeTicks(constraint[0]),\n        constraintType: constraint[1],\n        updateAction,\n        deleteAction,\n        sql: sql.replace(/\\\"/g, '\\`'), //Sqlite returns double quotes for table name\n        constraintCondition,\n        referenceTableName,\n        referenceTableKeys\n      };\n    });\n\n    return constraints;\n  }\n\n  applyParsers(type, value) {\n    if (type.indexOf('(') !== -1) {\n      // Remove the length part\n      type = type.substr(0, type.indexOf('('));\n    }\n    type = type.replace('UNSIGNED', '').replace('ZEROFILL', '');\n    type = type.trim().toUpperCase();\n    const parse = parserStore.get(type);\n\n    if (value !== null && parse) {\n      return parse(value, { timezone: this.sequelize.options.timezone });\n    }\n    return value;\n  }\n\n  formatError(err) {\n\n    switch (err.code) {\n      case 'SQLITE_CONSTRAINT': {\n        let match = err.message.match(/FOREIGN KEY constraint failed/);\n        if (match !== null) {\n          return new sequelizeErrors.ForeignKeyConstraintError({\n            parent: err\n          });\n        }\n\n        let fields = [];\n\n        // Sqlite pre 2.2 behavior - Error: SQLITE_CONSTRAINT: columns x, y are not unique\n        match = err.message.match(/columns (.*?) are/);\n        if (match !== null && match.length >= 2) {\n          fields = match[1].split(', ');\n        } else {\n\n          // Sqlite post 2.2 behavior - Error: SQLITE_CONSTRAINT: UNIQUE constraint failed: table.x, table.y\n          match = err.message.match(/UNIQUE constraint failed: (.*)/);\n          if (match !== null && match.length >= 2) {\n            fields = match[1].split(', ').map(columnWithTable => columnWithTable.split('.')[1]);\n          }\n        }\n\n        const errors = [];\n        let message = 'Validation error';\n\n        for (const field of fields) {\n          errors.push(new sequelizeErrors.ValidationErrorItem(\n            this.getUniqueConstraintErrorMessage(field),\n            'unique violation', // sequelizeErrors.ValidationErrorItem.Origins.DB,\n            field,\n            this.instance && this.instance[field],\n            this.instance,\n            'not_unique'\n          ));\n        }\n\n        if (this.model) {\n          _.forOwn(this.model.uniqueKeys, constraint => {\n            if (_.isEqual(constraint.fields, fields) && !!constraint.msg) {\n              message = constraint.msg;\n              return false;\n            }\n          });\n        }\n\n        return new sequelizeErrors.UniqueConstraintError({message, errors, parent: err, fields});\n      }\n      case 'SQLITE_BUSY':\n        return new sequelizeErrors.TimeoutError(err);\n\n      default:\n        return new sequelizeErrors.DatabaseError(err);\n    }\n  }\n\n  handleShowIndexesQuery(data) {\n\n    // Sqlite returns indexes so the one that was defined last is returned first. Lets reverse that!\n    return this.sequelize.Promise.map(data.reverse(), item => {\n      item.fields = [];\n      item.primary = false;\n      item.unique = !!item.unique;\n      item.constraintName = item.name;\n      return this.run('PRAGMA INDEX_INFO(`' + item.name + '`)').then(columns => {\n        for (const column of columns) {\n          item.fields[column.seqno] = {\n            attribute: column.name,\n            length: undefined,\n            order: undefined\n          };\n        }\n\n        return item;\n      });\n    });\n  }\n\n  getDatabaseMethod() {\n    if (this.isUpsertQuery()) {\n      return 'exec'; // Needed to run multiple queries in one\n    } else if (this.isInsertQuery() || this.isUpdateQuery() || this.isBulkUpdateQuery() || this.sql.toLowerCase().indexOf('CREATE TEMPORARY TABLE'.toLowerCase()) !== -1 || this.options.type === QueryTypes.BULKDELETE) {\n      return 'run';\n    } else {\n      return 'all';\n    }\n  }\n}\n\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;\n"},"lineCount":463}},"hash":"ac56307e289e82eb272f1b9d11e2afb1","cacheData":{"env":{}}}