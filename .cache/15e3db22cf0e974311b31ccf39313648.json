{"dependencies":[{"name":"/home/user/vipfy-server/.babelrc","includedInParent":true,"mtime":1516814375768}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar types = exports.types = \"\\n# The Api-Resonse from DD24\\ntype dd24Response {\\n  code: Int!\\n  description: String!\\n  availability: Int\\n  alternative: [String]\\n  extension: String\\n  realtime: Int\\n  cid: String\\n  status: String\\n  renewalmode: String\\n  transferlock: Int\\n  whoisprivacy: Int\\n  trustee: Int\\n  reserveduntil: String\\n  nameserver: [String]\\n  ttl: Int\\n  rr: [rr]\\n  vatvalid: Int\\n  reserveduntil: String\\n  event: [Int]\\n  parameter: eventResponse\\n  class: String\\n  subclass: String\\n  object: String\\n  objecttype: String\\n  onetimepassword: String\\n  loginuri: String\\n  error: String\\n}\\n\\n# Data of a specific event\\ntype eventResponse {\\n  reserveduntil: String\\n  period: Int\\n}\\n\\n# The props which can be send to the DD24 Api\\ninput dd24 {\\n  domain: String\\n  rr: [rrInput]\\n  alternative: String\\n  cid: String\\n  period: Int\\n  extensions: extensionInput\\n  nameserver: [String!]\\n  ttl: Int\\n  renewalmode: String\\n  transferlock: Int\\n  whoisprivacy: Int\\n  title: String\\n  firstname: String\\n  lastname: String\\n  organization: String\\n  street: String\\n  zip: String\\n  city: String\\n  state: String\\n  country: String\\n  email: String\\n  phone: String\\n  fax: String\\n  language: String\\n  vatid: String\\n  event: Int\\n  class: String\\n  subclass: String\\n  objecttype: String\\n  object: String\\n}\\n\\n# A nested Object for the nameserver configuration\\ntype rr {\\n  zone: [String]\\n  a: [String]\\n  mx_host: [String]\\n  mx_prio: [String]\\n  cname: [String]\\n  txt: [String]\\n  ns: [String]\\n}\\n\\n# A nested Object for the nameserver configuration\\ninput rrInput {\\n  zone: String\\n  a: String\\n  mx_host: String\\n  mx_prio: String\\n  cname: String\\n  txt: String\\n  ns: String\\n}\\n\\n# Extensions to be send to the API\\ninput extensionInput {\\n  x_de_accept_trustee_tac: Int\\n}\\n\";\n\nvar queries = exports.queries = \"\\n\\n\";\n\nvar mutations = exports.mutations = \"\\n# Command has to be written like this: CheckDomain, params should be an Object\\ndomainCommands(command: String!, params: dd24): dd24Response!\\n\";","map":{"mappings":[{"generated":{"line":6,"column":0},"source":"schemas/DD24.js","original":{"line":1,"column":7}},{"name":"types","generated":{"line":6,"column":4},"source":"schemas/DD24.js","original":{"line":1,"column":13}},{"generated":{"line":6,"column":1825},"source":"schemas/DD24.js","original":{"line":1,"column":7}},{"generated":{"line":8,"column":0},"source":"schemas/DD24.js","original":{"line":101,"column":7}},{"name":"queries","generated":{"line":8,"column":4},"source":"schemas/DD24.js","original":{"line":101,"column":13}},{"generated":{"line":8,"column":38},"source":"schemas/DD24.js","original":{"line":101,"column":7}},{"generated":{"line":10,"column":0},"source":"schemas/DD24.js","original":{"line":105,"column":7}},{"name":"mutations","generated":{"line":10,"column":4},"source":"schemas/DD24.js","original":{"line":105,"column":13}},{"generated":{"line":10,"column":183},"source":"schemas/DD24.js","original":{"line":105,"column":7}}],"sources":{"schemas/DD24.js":"export const types = `\n# The Api-Resonse from DD24\ntype dd24Response {\n  code: Int!\n  description: String!\n  availability: Int\n  alternative: [String]\n  extension: String\n  realtime: Int\n  cid: String\n  status: String\n  renewalmode: String\n  transferlock: Int\n  whoisprivacy: Int\n  trustee: Int\n  reserveduntil: String\n  nameserver: [String]\n  ttl: Int\n  rr: [rr]\n  vatvalid: Int\n  reserveduntil: String\n  event: [Int]\n  parameter: eventResponse\n  class: String\n  subclass: String\n  object: String\n  objecttype: String\n  onetimepassword: String\n  loginuri: String\n  error: String\n}\n\n# Data of a specific event\ntype eventResponse {\n  reserveduntil: String\n  period: Int\n}\n\n# The props which can be send to the DD24 Api\ninput dd24 {\n  domain: String\n  rr: [rrInput]\n  alternative: String\n  cid: String\n  period: Int\n  extensions: extensionInput\n  nameserver: [String!]\n  ttl: Int\n  renewalmode: String\n  transferlock: Int\n  whoisprivacy: Int\n  title: String\n  firstname: String\n  lastname: String\n  organization: String\n  street: String\n  zip: String\n  city: String\n  state: String\n  country: String\n  email: String\n  phone: String\n  fax: String\n  language: String\n  vatid: String\n  event: Int\n  class: String\n  subclass: String\n  objecttype: String\n  object: String\n}\n\n# A nested Object for the nameserver configuration\ntype rr {\n  zone: [String]\n  a: [String]\n  mx_host: [String]\n  mx_prio: [String]\n  cname: [String]\n  txt: [String]\n  ns: [String]\n}\n\n# A nested Object for the nameserver configuration\ninput rrInput {\n  zone: String\n  a: String\n  mx_host: String\n  mx_prio: String\n  cname: String\n  txt: String\n  ns: String\n}\n\n# Extensions to be send to the API\ninput extensionInput {\n  x_de_accept_trustee_tac: Int\n}\n`;\n\nexport const queries = `\n\n`;\n\nexport const mutations = `\n# Command has to be written like this: CheckDomain, params should be an Object\ndomainCommands(command: String!, params: dd24): dd24Response!\n`;\n"},"lineCount":null}},"hash":"b9c8c2353733f6811b9bec171d04b962","cacheData":{"env":{}}}