{"dependencies":[{"name":"bytes","loc":{"line":13,"column":20}},{"name":"debug","loc":{"line":14,"column":20}},{"name":"../read","loc":{"line":15,"column":19}},{"name":"type-is","loc":{"line":16,"column":21}}],"generated":{"js":"/*!\n * body-parser\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n */\n\nvar bytes = require('bytes')\nvar debug = require('debug')('body-parser:raw')\nvar read = require('../read')\nvar typeis = require('type-is')\n\n/**\n * Module exports.\n */\n\nmodule.exports = raw\n\n/**\n * Create a middleware to parse raw bodies.\n *\n * @param {object} [options]\n * @return {function}\n * @api public\n */\n\nfunction raw (options) {\n  var opts = options || {}\n\n  var inflate = opts.inflate !== false\n  var limit = typeof opts.limit !== 'number'\n    ? bytes.parse(opts.limit || '100kb')\n    : opts.limit\n  var type = opts.type || 'application/octet-stream'\n  var verify = opts.verify || false\n\n  if (verify !== false && typeof verify !== 'function') {\n    throw new TypeError('option verify must be function')\n  }\n\n  // create the appropriate type checking function\n  var shouldParse = typeof type !== 'function'\n    ? typeChecker(type)\n    : type\n\n  function parse (buf) {\n    return buf\n  }\n\n  return function rawParser (req, res, next) {\n    if (req._body) {\n      debug('body already parsed')\n      next()\n      return\n    }\n\n    req.body = req.body || {}\n\n    // skip requests without bodies\n    if (!typeis.hasBody(req)) {\n      debug('skip empty body')\n      next()\n      return\n    }\n\n    debug('content-type %j', req.headers['content-type'])\n\n    // determine if request should be parsed\n    if (!shouldParse(req)) {\n      debug('skip parsing')\n      next()\n      return\n    }\n\n    // read\n    read(req, res, next, parse, debug, {\n      encoding: null,\n      inflate: inflate,\n      limit: limit,\n      verify: verify\n    })\n  }\n}\n\n/**\n * Get the simple type checker.\n *\n * @param {string} type\n * @return {function}\n */\n\nfunction typeChecker (type) {\n  return function checkType (req) {\n    return Boolean(typeis(req, type))\n  }\n}\n","map":{"mappings":[{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/body-parser/lib/types/raw.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}}],"sources":{"../node_modules/body-parser/lib/types/raw.js":"/*!\n * body-parser\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n */\n\nvar bytes = require('bytes')\nvar debug = require('debug')('body-parser:raw')\nvar read = require('../read')\nvar typeis = require('type-is')\n\n/**\n * Module exports.\n */\n\nmodule.exports = raw\n\n/**\n * Create a middleware to parse raw bodies.\n *\n * @param {object} [options]\n * @return {function}\n * @api public\n */\n\nfunction raw (options) {\n  var opts = options || {}\n\n  var inflate = opts.inflate !== false\n  var limit = typeof opts.limit !== 'number'\n    ? bytes.parse(opts.limit || '100kb')\n    : opts.limit\n  var type = opts.type || 'application/octet-stream'\n  var verify = opts.verify || false\n\n  if (verify !== false && typeof verify !== 'function') {\n    throw new TypeError('option verify must be function')\n  }\n\n  // create the appropriate type checking function\n  var shouldParse = typeof type !== 'function'\n    ? typeChecker(type)\n    : type\n\n  function parse (buf) {\n    return buf\n  }\n\n  return function rawParser (req, res, next) {\n    if (req._body) {\n      debug('body already parsed')\n      next()\n      return\n    }\n\n    req.body = req.body || {}\n\n    // skip requests without bodies\n    if (!typeis.hasBody(req)) {\n      debug('skip empty body')\n      next()\n      return\n    }\n\n    debug('content-type %j', req.headers['content-type'])\n\n    // determine if request should be parsed\n    if (!shouldParse(req)) {\n      debug('skip parsing')\n      next()\n      return\n    }\n\n    // read\n    read(req, res, next, parse, debug, {\n      encoding: null,\n      inflate: inflate,\n      limit: limit,\n      verify: verify\n    })\n  }\n}\n\n/**\n * Get the simple type checker.\n *\n * @param {string} type\n * @return {function}\n */\n\nfunction typeChecker (type) {\n  return function checkType (req) {\n    return Boolean(typeis(req, type))\n  }\n}\n"},"lineCount":102}},"hash":"f945e380dd0d99bca3a54cb95b24a805","cacheData":{"env":{}}}