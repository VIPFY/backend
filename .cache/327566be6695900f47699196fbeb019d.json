{"dependencies":[{"name":"pg-types","loc":{"line":10,"column":20}},{"name":"js-string-escape","loc":{"line":11,"column":21}}],"generated":{"js":"'use strict'\n/**\n * Copyright (c) 2010-2017 Brian Carlson (brian.m.carlson@gmail.com)\n * All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * README.md file in the root directory of this source tree.\n */\n\nvar types = require('pg-types')\nvar escape = require('js-string-escape')\n\n// result object returned from query\n// in the 'end' event and also\n// passed as second argument to provided callback\nvar Result = function (rowMode) {\n  this.command = null\n  this.rowCount = null\n  this.oid = null\n  this.rows = []\n  this.fields = []\n  this._parsers = []\n  this.RowCtor = null\n  this.rowAsArray = rowMode === 'array'\n  if (this.rowAsArray) {\n    this.parseRow = this._parseRowAsArray\n  }\n}\n\nvar matchRegexp = /^([A-Za-z]+)(?: (\\d+))?(?: (\\d+))?/\n\n// adds a command complete message\nResult.prototype.addCommandComplete = function (msg) {\n  var match\n  if (msg.text) {\n    // pure javascript\n    match = matchRegexp.exec(msg.text)\n  } else {\n    // native bindings\n    match = matchRegexp.exec(msg.command)\n  }\n  if (match) {\n    this.command = match[1]\n    if (match[3]) {\n      // COMMMAND OID ROWS\n      this.oid = parseInt(match[2], 10)\n      this.rowCount = parseInt(match[3], 10)\n    } else if (match[2]) {\n      // COMMAND ROWS\n      this.rowCount = parseInt(match[2], 10)\n    }\n  }\n}\n\nResult.prototype._parseRowAsArray = function (rowData) {\n  var row = []\n  for (var i = 0, len = rowData.length; i < len; i++) {\n    var rawValue = rowData[i]\n    if (rawValue !== null) {\n      row.push(this._parsers[i](rawValue))\n    } else {\n      row.push(null)\n    }\n  }\n  return row\n}\n\n// rowData is an array of text or binary values\n// this turns the row into a JavaScript object\nResult.prototype.parseRow = function (rowData) {\n  return new this.RowCtor(this._parsers, rowData)\n}\n\nResult.prototype.addRow = function (row) {\n  this.rows.push(row)\n}\n\nvar inlineParser = function (fieldName, i) {\n  return \"\\nthis['\" +\n    // fields containing single quotes will break\n    // the evaluated javascript unless they are escaped\n    // see https://github.com/brianc/node-postgres/issues/507\n    // Addendum: However, we need to make sure to replace all\n    // occurences of apostrophes, not just the first one.\n    // See https://github.com/brianc/node-postgres/issues/934\n    escape(fieldName) +\n    \"'] = \" +\n    'rowData[' + i + '] == null ? null : parsers[' + i + '](rowData[' + i + ']);'\n}\n\nResult.prototype.addFields = function (fieldDescriptions) {\n  // clears field definitions\n  // multiple query statements in 1 action can result in multiple sets\n  // of rowDescriptions...eg: 'select NOW(); select 1::int;'\n  // you need to reset the fields\n  if (this.fields.length) {\n    this.fields = []\n    this._parsers = []\n  }\n  var ctorBody = ''\n  for (var i = 0; i < fieldDescriptions.length; i++) {\n    var desc = fieldDescriptions[i]\n    this.fields.push(desc)\n    var parser = this._getTypeParser(desc.dataTypeID, desc.format || 'text')\n    this._parsers.push(parser)\n    // this is some craziness to compile the row result parsing\n    // results in ~60% speedup on large query result sets\n    ctorBody += inlineParser(desc.name, i)\n  }\n  if (!this.rowAsArray) {\n    this.RowCtor = Function('parsers', 'rowData', ctorBody)\n  }\n}\n\nResult.prototype._getTypeParser = types.getTypeParser\n\nmodule.exports = Result\n","map":{"mappings":[{"source":"../node_modules/pg/lib/result.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/pg/lib/result.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}}],"sources":{"../node_modules/pg/lib/result.js":"'use strict'\n/**\n * Copyright (c) 2010-2017 Brian Carlson (brian.m.carlson@gmail.com)\n * All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * README.md file in the root directory of this source tree.\n */\n\nvar types = require('pg-types')\nvar escape = require('js-string-escape')\n\n// result object returned from query\n// in the 'end' event and also\n// passed as second argument to provided callback\nvar Result = function (rowMode) {\n  this.command = null\n  this.rowCount = null\n  this.oid = null\n  this.rows = []\n  this.fields = []\n  this._parsers = []\n  this.RowCtor = null\n  this.rowAsArray = rowMode === 'array'\n  if (this.rowAsArray) {\n    this.parseRow = this._parseRowAsArray\n  }\n}\n\nvar matchRegexp = /^([A-Za-z]+)(?: (\\d+))?(?: (\\d+))?/\n\n// adds a command complete message\nResult.prototype.addCommandComplete = function (msg) {\n  var match\n  if (msg.text) {\n    // pure javascript\n    match = matchRegexp.exec(msg.text)\n  } else {\n    // native bindings\n    match = matchRegexp.exec(msg.command)\n  }\n  if (match) {\n    this.command = match[1]\n    if (match[3]) {\n      // COMMMAND OID ROWS\n      this.oid = parseInt(match[2], 10)\n      this.rowCount = parseInt(match[3], 10)\n    } else if (match[2]) {\n      // COMMAND ROWS\n      this.rowCount = parseInt(match[2], 10)\n    }\n  }\n}\n\nResult.prototype._parseRowAsArray = function (rowData) {\n  var row = []\n  for (var i = 0, len = rowData.length; i < len; i++) {\n    var rawValue = rowData[i]\n    if (rawValue !== null) {\n      row.push(this._parsers[i](rawValue))\n    } else {\n      row.push(null)\n    }\n  }\n  return row\n}\n\n// rowData is an array of text or binary values\n// this turns the row into a JavaScript object\nResult.prototype.parseRow = function (rowData) {\n  return new this.RowCtor(this._parsers, rowData)\n}\n\nResult.prototype.addRow = function (row) {\n  this.rows.push(row)\n}\n\nvar inlineParser = function (fieldName, i) {\n  return \"\\nthis['\" +\n    // fields containing single quotes will break\n    // the evaluated javascript unless they are escaped\n    // see https://github.com/brianc/node-postgres/issues/507\n    // Addendum: However, we need to make sure to replace all\n    // occurences of apostrophes, not just the first one.\n    // See https://github.com/brianc/node-postgres/issues/934\n    escape(fieldName) +\n    \"'] = \" +\n    'rowData[' + i + '] == null ? null : parsers[' + i + '](rowData[' + i + ']);'\n}\n\nResult.prototype.addFields = function (fieldDescriptions) {\n  // clears field definitions\n  // multiple query statements in 1 action can result in multiple sets\n  // of rowDescriptions...eg: 'select NOW(); select 1::int;'\n  // you need to reset the fields\n  if (this.fields.length) {\n    this.fields = []\n    this._parsers = []\n  }\n  var ctorBody = ''\n  for (var i = 0; i < fieldDescriptions.length; i++) {\n    var desc = fieldDescriptions[i]\n    this.fields.push(desc)\n    var parser = this._getTypeParser(desc.dataTypeID, desc.format || 'text')\n    this._parsers.push(parser)\n    // this is some craziness to compile the row result parsing\n    // results in ~60% speedup on large query result sets\n    ctorBody += inlineParser(desc.name, i)\n  }\n  if (!this.rowAsArray) {\n    this.RowCtor = Function('parsers', 'rowData', ctorBody)\n  }\n}\n\nResult.prototype._getTypeParser = types.getTypeParser\n\nmodule.exports = Result\n"},"lineCount":118}},"hash":"b034e313d50d049a46830edebd021433","cacheData":{"env":{}}}