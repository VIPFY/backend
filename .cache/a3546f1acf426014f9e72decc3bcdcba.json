{"dependencies":[{"name":"../lib/types","loc":{"line":2,"column":33}},{"name":"../lib/shared","loc":{"line":6,"column":34}}],"generated":{"js":"module.exports = function (fork) {\n    var types = fork.use(require(\"../lib/types\"));\n    var Type = types.Type;\n    var def = Type.def;\n    var or = Type.or;\n    var shared = fork.use(require(\"../lib/shared\"));\n    var defaults = shared.defaults;\n    var geq = shared.geq;\n\n    // Abstract supertype of all syntactic entities that are allowed to have a\n    // .loc field.\n    def(\"Printable\")\n        .field(\"loc\", or(\n            def(\"SourceLocation\"),\n            null\n        ), defaults[\"null\"], true);\n\n    def(\"Node\")\n        .bases(\"Printable\")\n        .field(\"type\", String)\n        .field(\"comments\", or(\n            [def(\"Comment\")],\n            null\n        ), defaults[\"null\"], true);\n\n    def(\"SourceLocation\")\n        .build(\"start\", \"end\", \"source\")\n        .field(\"start\", def(\"Position\"))\n        .field(\"end\", def(\"Position\"))\n        .field(\"source\", or(String, null), defaults[\"null\"]);\n\n    def(\"Position\")\n        .build(\"line\", \"column\")\n        .field(\"line\", geq(1))\n        .field(\"column\", geq(0));\n\n    def(\"File\")\n        .bases(\"Node\")\n        .build(\"program\", \"name\")\n        .field(\"program\", def(\"Program\"))\n        .field(\"name\", or(String, null), defaults[\"null\"]);\n\n    def(\"Program\")\n        .bases(\"Node\")\n        .build(\"body\")\n        .field(\"body\", [def(\"Statement\")]);\n\n    def(\"Function\")\n        .bases(\"Node\")\n        .field(\"id\", or(def(\"Identifier\"), null), defaults[\"null\"])\n        .field(\"params\", [def(\"Pattern\")])\n        .field(\"body\", def(\"BlockStatement\"));\n\n    def(\"Statement\").bases(\"Node\");\n\n// The empty .build() here means that an EmptyStatement can be constructed\n// (i.e. it's not abstract) but that it needs no arguments.\n    def(\"EmptyStatement\").bases(\"Statement\").build();\n\n    def(\"BlockStatement\")\n        .bases(\"Statement\")\n        .build(\"body\")\n        .field(\"body\", [def(\"Statement\")]);\n\n    // TODO Figure out how to silently coerce Expressions to\n    // ExpressionStatements where a Statement was expected.\n    def(\"ExpressionStatement\")\n        .bases(\"Statement\")\n        .build(\"expression\")\n        .field(\"expression\", def(\"Expression\"));\n\n    def(\"IfStatement\")\n        .bases(\"Statement\")\n        .build(\"test\", \"consequent\", \"alternate\")\n        .field(\"test\", def(\"Expression\"))\n        .field(\"consequent\", def(\"Statement\"))\n        .field(\"alternate\", or(def(\"Statement\"), null), defaults[\"null\"]);\n\n    def(\"LabeledStatement\")\n        .bases(\"Statement\")\n        .build(\"label\", \"body\")\n        .field(\"label\", def(\"Identifier\"))\n        .field(\"body\", def(\"Statement\"));\n\n    def(\"BreakStatement\")\n        .bases(\"Statement\")\n        .build(\"label\")\n        .field(\"label\", or(def(\"Identifier\"), null), defaults[\"null\"]);\n\n    def(\"ContinueStatement\")\n        .bases(\"Statement\")\n        .build(\"label\")\n        .field(\"label\", or(def(\"Identifier\"), null), defaults[\"null\"]);\n\n    def(\"WithStatement\")\n        .bases(\"Statement\")\n        .build(\"object\", \"body\")\n        .field(\"object\", def(\"Expression\"))\n        .field(\"body\", def(\"Statement\"));\n\n    def(\"SwitchStatement\")\n        .bases(\"Statement\")\n        .build(\"discriminant\", \"cases\", \"lexical\")\n        .field(\"discriminant\", def(\"Expression\"))\n        .field(\"cases\", [def(\"SwitchCase\")])\n        .field(\"lexical\", Boolean, defaults[\"false\"]);\n\n    def(\"ReturnStatement\")\n        .bases(\"Statement\")\n        .build(\"argument\")\n        .field(\"argument\", or(def(\"Expression\"), null));\n\n    def(\"ThrowStatement\")\n        .bases(\"Statement\")\n        .build(\"argument\")\n        .field(\"argument\", def(\"Expression\"));\n\n    def(\"TryStatement\")\n        .bases(\"Statement\")\n        .build(\"block\", \"handler\", \"finalizer\")\n        .field(\"block\", def(\"BlockStatement\"))\n        .field(\"handler\", or(def(\"CatchClause\"), null), function () {\n            return this.handlers && this.handlers[0] || null;\n        })\n        .field(\"handlers\", [def(\"CatchClause\")], function () {\n            return this.handler ? [this.handler] : [];\n        }, true) // Indicates this field is hidden from eachField iteration.\n        .field(\"guardedHandlers\", [def(\"CatchClause\")], defaults.emptyArray)\n        .field(\"finalizer\", or(def(\"BlockStatement\"), null), defaults[\"null\"]);\n\n    def(\"CatchClause\")\n        .bases(\"Node\")\n        .build(\"param\", \"guard\", \"body\")\n        .field(\"param\", def(\"Pattern\"))\n        .field(\"guard\", or(def(\"Expression\"), null), defaults[\"null\"])\n        .field(\"body\", def(\"BlockStatement\"));\n\n    def(\"WhileStatement\")\n        .bases(\"Statement\")\n        .build(\"test\", \"body\")\n        .field(\"test\", def(\"Expression\"))\n        .field(\"body\", def(\"Statement\"));\n\n    def(\"DoWhileStatement\")\n        .bases(\"Statement\")\n        .build(\"body\", \"test\")\n        .field(\"body\", def(\"Statement\"))\n        .field(\"test\", def(\"Expression\"));\n\n    def(\"ForStatement\")\n        .bases(\"Statement\")\n        .build(\"init\", \"test\", \"update\", \"body\")\n        .field(\"init\", or(\n            def(\"VariableDeclaration\"),\n            def(\"Expression\"),\n            null))\n        .field(\"test\", or(def(\"Expression\"), null))\n        .field(\"update\", or(def(\"Expression\"), null))\n        .field(\"body\", def(\"Statement\"));\n\n    def(\"ForInStatement\")\n        .bases(\"Statement\")\n        .build(\"left\", \"right\", \"body\")\n        .field(\"left\", or(\n            def(\"VariableDeclaration\"),\n            def(\"Expression\")))\n        .field(\"right\", def(\"Expression\"))\n        .field(\"body\", def(\"Statement\"));\n\n    def(\"DebuggerStatement\").bases(\"Statement\").build();\n\n    def(\"Declaration\").bases(\"Statement\");\n\n    def(\"FunctionDeclaration\")\n        .bases(\"Function\", \"Declaration\")\n        .build(\"id\", \"params\", \"body\")\n        .field(\"id\", def(\"Identifier\"));\n\n    def(\"FunctionExpression\")\n        .bases(\"Function\", \"Expression\")\n        .build(\"id\", \"params\", \"body\");\n\n    def(\"VariableDeclaration\")\n        .bases(\"Declaration\")\n        .build(\"kind\", \"declarations\")\n        .field(\"kind\", or(\"var\", \"let\", \"const\"))\n        .field(\"declarations\", [def(\"VariableDeclarator\")]);\n\n    def(\"VariableDeclarator\")\n        .bases(\"Node\")\n        .build(\"id\", \"init\")\n        .field(\"id\", def(\"Pattern\"))\n        .field(\"init\", or(def(\"Expression\"), null));\n\n    // TODO Are all Expressions really Patterns?\n    def(\"Expression\").bases(\"Node\", \"Pattern\");\n\n    def(\"ThisExpression\").bases(\"Expression\").build();\n\n    def(\"ArrayExpression\")\n        .bases(\"Expression\")\n        .build(\"elements\")\n        .field(\"elements\", [or(def(\"Expression\"), null)]);\n\n    def(\"ObjectExpression\")\n        .bases(\"Expression\")\n        .build(\"properties\")\n        .field(\"properties\", [def(\"Property\")]);\n\n    // TODO Not in the Mozilla Parser API, but used by Esprima.\n    def(\"Property\")\n        .bases(\"Node\") // Want to be able to visit Property Nodes.\n        .build(\"kind\", \"key\", \"value\")\n        .field(\"kind\", or(\"init\", \"get\", \"set\"))\n        .field(\"key\", or(def(\"Literal\"), def(\"Identifier\")))\n        .field(\"value\", def(\"Expression\"));\n\n    def(\"SequenceExpression\")\n        .bases(\"Expression\")\n        .build(\"expressions\")\n        .field(\"expressions\", [def(\"Expression\")]);\n\n    var UnaryOperator = or(\n        \"-\", \"+\", \"!\", \"~\",\n        \"typeof\", \"void\", \"delete\");\n\n    def(\"UnaryExpression\")\n        .bases(\"Expression\")\n        .build(\"operator\", \"argument\", \"prefix\")\n        .field(\"operator\", UnaryOperator)\n        .field(\"argument\", def(\"Expression\"))\n        // Esprima doesn't bother with this field, presumably because it's\n        // always true for unary operators.\n        .field(\"prefix\", Boolean, defaults[\"true\"]);\n\n    var BinaryOperator = or(\n        \"==\", \"!=\", \"===\", \"!==\",\n        \"<\", \"<=\", \">\", \">=\",\n        \"<<\", \">>\", \">>>\",\n        \"+\", \"-\", \"*\", \"/\", \"%\",\n        \"&\", // TODO Missing from the Parser API.\n        \"|\", \"^\", \"in\",\n        \"instanceof\", \"..\");\n\n    def(\"BinaryExpression\")\n        .bases(\"Expression\")\n        .build(\"operator\", \"left\", \"right\")\n        .field(\"operator\", BinaryOperator)\n        .field(\"left\", def(\"Expression\"))\n        .field(\"right\", def(\"Expression\"));\n\n    var AssignmentOperator = or(\n        \"=\", \"+=\", \"-=\", \"*=\", \"/=\", \"%=\",\n        \"<<=\", \">>=\", \">>>=\",\n        \"|=\", \"^=\", \"&=\");\n\n    def(\"AssignmentExpression\")\n        .bases(\"Expression\")\n        .build(\"operator\", \"left\", \"right\")\n        .field(\"operator\", AssignmentOperator)\n        .field(\"left\", def(\"Pattern\"))\n        .field(\"right\", def(\"Expression\"));\n\n    var UpdateOperator = or(\"++\", \"--\");\n\n    def(\"UpdateExpression\")\n        .bases(\"Expression\")\n        .build(\"operator\", \"argument\", \"prefix\")\n        .field(\"operator\", UpdateOperator)\n        .field(\"argument\", def(\"Expression\"))\n        .field(\"prefix\", Boolean);\n\n    var LogicalOperator = or(\"||\", \"&&\");\n\n    def(\"LogicalExpression\")\n        .bases(\"Expression\")\n        .build(\"operator\", \"left\", \"right\")\n        .field(\"operator\", LogicalOperator)\n        .field(\"left\", def(\"Expression\"))\n        .field(\"right\", def(\"Expression\"));\n\n    def(\"ConditionalExpression\")\n        .bases(\"Expression\")\n        .build(\"test\", \"consequent\", \"alternate\")\n        .field(\"test\", def(\"Expression\"))\n        .field(\"consequent\", def(\"Expression\"))\n        .field(\"alternate\", def(\"Expression\"));\n\n    def(\"NewExpression\")\n        .bases(\"Expression\")\n        .build(\"callee\", \"arguments\")\n        .field(\"callee\", def(\"Expression\"))\n        // The Mozilla Parser API gives this type as [or(def(\"Expression\"),\n        // null)], but null values don't really make sense at the call site.\n        // TODO Report this nonsense.\n        .field(\"arguments\", [def(\"Expression\")]);\n\n    def(\"CallExpression\")\n        .bases(\"Expression\")\n        .build(\"callee\", \"arguments\")\n        .field(\"callee\", def(\"Expression\"))\n        // See comment for NewExpression above.\n        .field(\"arguments\", [def(\"Expression\")]);\n\n    def(\"MemberExpression\")\n        .bases(\"Expression\")\n        .build(\"object\", \"property\", \"computed\")\n        .field(\"object\", def(\"Expression\"))\n        .field(\"property\", or(def(\"Identifier\"), def(\"Expression\")))\n        .field(\"computed\", Boolean, function () {\n            var type = this.property.type;\n            if (type === 'Literal' ||\n                type === 'MemberExpression' ||\n                type === 'BinaryExpression') {\n                return true;\n            }\n            return false;\n        });\n\n    def(\"Pattern\").bases(\"Node\");\n\n    def(\"SwitchCase\")\n        .bases(\"Node\")\n        .build(\"test\", \"consequent\")\n        .field(\"test\", or(def(\"Expression\"), null))\n        .field(\"consequent\", [def(\"Statement\")]);\n\n    def(\"Identifier\")\n        // But aren't Expressions and Patterns already Nodes? TODO Report this.\n        .bases(\"Node\", \"Expression\", \"Pattern\")\n        .build(\"name\")\n        .field(\"name\", String);\n\n    def(\"Literal\")\n        // But aren't Expressions already Nodes? TODO Report this.\n        .bases(\"Node\", \"Expression\")\n        .build(\"value\")\n        .field(\"value\", or(String, Boolean, null, Number, RegExp))\n        .field(\"regex\", or({\n            pattern: String,\n            flags: String\n        }, null), function () {\n            if (this.value instanceof RegExp) {\n                var flags = \"\";\n\n                if (this.value.ignoreCase) flags += \"i\";\n                if (this.value.multiline) flags += \"m\";\n                if (this.value.global) flags += \"g\";\n\n                return {\n                    pattern: this.value.source,\n                    flags: flags\n                };\n            }\n\n            return null;\n        });\n\n    // Abstract (non-buildable) comment supertype. Not a Node.\n    def(\"Comment\")\n        .bases(\"Printable\")\n        .field(\"value\", String)\n        // A .leading comment comes before the node, whereas a .trailing\n        // comment comes after it. These two fields should not both be true,\n        // but they might both be false when the comment falls inside a node\n        // and the node has no children for the comment to lead or trail,\n        // e.g. { /*dangling*/ }.\n        .field(\"leading\", Boolean, defaults[\"true\"])\n        .field(\"trailing\", Boolean, defaults[\"false\"]);\n};","map":{"mappings":[{"source":"../node_modules/ast-types/def/core.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"../node_modules/ast-types/def/core.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}}],"sources":{"../node_modules/ast-types/def/core.js":"module.exports = function (fork) {\n    var types = fork.use(require(\"../lib/types\"));\n    var Type = types.Type;\n    var def = Type.def;\n    var or = Type.or;\n    var shared = fork.use(require(\"../lib/shared\"));\n    var defaults = shared.defaults;\n    var geq = shared.geq;\n\n    // Abstract supertype of all syntactic entities that are allowed to have a\n    // .loc field.\n    def(\"Printable\")\n        .field(\"loc\", or(\n            def(\"SourceLocation\"),\n            null\n        ), defaults[\"null\"], true);\n\n    def(\"Node\")\n        .bases(\"Printable\")\n        .field(\"type\", String)\n        .field(\"comments\", or(\n            [def(\"Comment\")],\n            null\n        ), defaults[\"null\"], true);\n\n    def(\"SourceLocation\")\n        .build(\"start\", \"end\", \"source\")\n        .field(\"start\", def(\"Position\"))\n        .field(\"end\", def(\"Position\"))\n        .field(\"source\", or(String, null), defaults[\"null\"]);\n\n    def(\"Position\")\n        .build(\"line\", \"column\")\n        .field(\"line\", geq(1))\n        .field(\"column\", geq(0));\n\n    def(\"File\")\n        .bases(\"Node\")\n        .build(\"program\", \"name\")\n        .field(\"program\", def(\"Program\"))\n        .field(\"name\", or(String, null), defaults[\"null\"]);\n\n    def(\"Program\")\n        .bases(\"Node\")\n        .build(\"body\")\n        .field(\"body\", [def(\"Statement\")]);\n\n    def(\"Function\")\n        .bases(\"Node\")\n        .field(\"id\", or(def(\"Identifier\"), null), defaults[\"null\"])\n        .field(\"params\", [def(\"Pattern\")])\n        .field(\"body\", def(\"BlockStatement\"));\n\n    def(\"Statement\").bases(\"Node\");\n\n// The empty .build() here means that an EmptyStatement can be constructed\n// (i.e. it's not abstract) but that it needs no arguments.\n    def(\"EmptyStatement\").bases(\"Statement\").build();\n\n    def(\"BlockStatement\")\n        .bases(\"Statement\")\n        .build(\"body\")\n        .field(\"body\", [def(\"Statement\")]);\n\n    // TODO Figure out how to silently coerce Expressions to\n    // ExpressionStatements where a Statement was expected.\n    def(\"ExpressionStatement\")\n        .bases(\"Statement\")\n        .build(\"expression\")\n        .field(\"expression\", def(\"Expression\"));\n\n    def(\"IfStatement\")\n        .bases(\"Statement\")\n        .build(\"test\", \"consequent\", \"alternate\")\n        .field(\"test\", def(\"Expression\"))\n        .field(\"consequent\", def(\"Statement\"))\n        .field(\"alternate\", or(def(\"Statement\"), null), defaults[\"null\"]);\n\n    def(\"LabeledStatement\")\n        .bases(\"Statement\")\n        .build(\"label\", \"body\")\n        .field(\"label\", def(\"Identifier\"))\n        .field(\"body\", def(\"Statement\"));\n\n    def(\"BreakStatement\")\n        .bases(\"Statement\")\n        .build(\"label\")\n        .field(\"label\", or(def(\"Identifier\"), null), defaults[\"null\"]);\n\n    def(\"ContinueStatement\")\n        .bases(\"Statement\")\n        .build(\"label\")\n        .field(\"label\", or(def(\"Identifier\"), null), defaults[\"null\"]);\n\n    def(\"WithStatement\")\n        .bases(\"Statement\")\n        .build(\"object\", \"body\")\n        .field(\"object\", def(\"Expression\"))\n        .field(\"body\", def(\"Statement\"));\n\n    def(\"SwitchStatement\")\n        .bases(\"Statement\")\n        .build(\"discriminant\", \"cases\", \"lexical\")\n        .field(\"discriminant\", def(\"Expression\"))\n        .field(\"cases\", [def(\"SwitchCase\")])\n        .field(\"lexical\", Boolean, defaults[\"false\"]);\n\n    def(\"ReturnStatement\")\n        .bases(\"Statement\")\n        .build(\"argument\")\n        .field(\"argument\", or(def(\"Expression\"), null));\n\n    def(\"ThrowStatement\")\n        .bases(\"Statement\")\n        .build(\"argument\")\n        .field(\"argument\", def(\"Expression\"));\n\n    def(\"TryStatement\")\n        .bases(\"Statement\")\n        .build(\"block\", \"handler\", \"finalizer\")\n        .field(\"block\", def(\"BlockStatement\"))\n        .field(\"handler\", or(def(\"CatchClause\"), null), function () {\n            return this.handlers && this.handlers[0] || null;\n        })\n        .field(\"handlers\", [def(\"CatchClause\")], function () {\n            return this.handler ? [this.handler] : [];\n        }, true) // Indicates this field is hidden from eachField iteration.\n        .field(\"guardedHandlers\", [def(\"CatchClause\")], defaults.emptyArray)\n        .field(\"finalizer\", or(def(\"BlockStatement\"), null), defaults[\"null\"]);\n\n    def(\"CatchClause\")\n        .bases(\"Node\")\n        .build(\"param\", \"guard\", \"body\")\n        .field(\"param\", def(\"Pattern\"))\n        .field(\"guard\", or(def(\"Expression\"), null), defaults[\"null\"])\n        .field(\"body\", def(\"BlockStatement\"));\n\n    def(\"WhileStatement\")\n        .bases(\"Statement\")\n        .build(\"test\", \"body\")\n        .field(\"test\", def(\"Expression\"))\n        .field(\"body\", def(\"Statement\"));\n\n    def(\"DoWhileStatement\")\n        .bases(\"Statement\")\n        .build(\"body\", \"test\")\n        .field(\"body\", def(\"Statement\"))\n        .field(\"test\", def(\"Expression\"));\n\n    def(\"ForStatement\")\n        .bases(\"Statement\")\n        .build(\"init\", \"test\", \"update\", \"body\")\n        .field(\"init\", or(\n            def(\"VariableDeclaration\"),\n            def(\"Expression\"),\n            null))\n        .field(\"test\", or(def(\"Expression\"), null))\n        .field(\"update\", or(def(\"Expression\"), null))\n        .field(\"body\", def(\"Statement\"));\n\n    def(\"ForInStatement\")\n        .bases(\"Statement\")\n        .build(\"left\", \"right\", \"body\")\n        .field(\"left\", or(\n            def(\"VariableDeclaration\"),\n            def(\"Expression\")))\n        .field(\"right\", def(\"Expression\"))\n        .field(\"body\", def(\"Statement\"));\n\n    def(\"DebuggerStatement\").bases(\"Statement\").build();\n\n    def(\"Declaration\").bases(\"Statement\");\n\n    def(\"FunctionDeclaration\")\n        .bases(\"Function\", \"Declaration\")\n        .build(\"id\", \"params\", \"body\")\n        .field(\"id\", def(\"Identifier\"));\n\n    def(\"FunctionExpression\")\n        .bases(\"Function\", \"Expression\")\n        .build(\"id\", \"params\", \"body\");\n\n    def(\"VariableDeclaration\")\n        .bases(\"Declaration\")\n        .build(\"kind\", \"declarations\")\n        .field(\"kind\", or(\"var\", \"let\", \"const\"))\n        .field(\"declarations\", [def(\"VariableDeclarator\")]);\n\n    def(\"VariableDeclarator\")\n        .bases(\"Node\")\n        .build(\"id\", \"init\")\n        .field(\"id\", def(\"Pattern\"))\n        .field(\"init\", or(def(\"Expression\"), null));\n\n    // TODO Are all Expressions really Patterns?\n    def(\"Expression\").bases(\"Node\", \"Pattern\");\n\n    def(\"ThisExpression\").bases(\"Expression\").build();\n\n    def(\"ArrayExpression\")\n        .bases(\"Expression\")\n        .build(\"elements\")\n        .field(\"elements\", [or(def(\"Expression\"), null)]);\n\n    def(\"ObjectExpression\")\n        .bases(\"Expression\")\n        .build(\"properties\")\n        .field(\"properties\", [def(\"Property\")]);\n\n    // TODO Not in the Mozilla Parser API, but used by Esprima.\n    def(\"Property\")\n        .bases(\"Node\") // Want to be able to visit Property Nodes.\n        .build(\"kind\", \"key\", \"value\")\n        .field(\"kind\", or(\"init\", \"get\", \"set\"))\n        .field(\"key\", or(def(\"Literal\"), def(\"Identifier\")))\n        .field(\"value\", def(\"Expression\"));\n\n    def(\"SequenceExpression\")\n        .bases(\"Expression\")\n        .build(\"expressions\")\n        .field(\"expressions\", [def(\"Expression\")]);\n\n    var UnaryOperator = or(\n        \"-\", \"+\", \"!\", \"~\",\n        \"typeof\", \"void\", \"delete\");\n\n    def(\"UnaryExpression\")\n        .bases(\"Expression\")\n        .build(\"operator\", \"argument\", \"prefix\")\n        .field(\"operator\", UnaryOperator)\n        .field(\"argument\", def(\"Expression\"))\n        // Esprima doesn't bother with this field, presumably because it's\n        // always true for unary operators.\n        .field(\"prefix\", Boolean, defaults[\"true\"]);\n\n    var BinaryOperator = or(\n        \"==\", \"!=\", \"===\", \"!==\",\n        \"<\", \"<=\", \">\", \">=\",\n        \"<<\", \">>\", \">>>\",\n        \"+\", \"-\", \"*\", \"/\", \"%\",\n        \"&\", // TODO Missing from the Parser API.\n        \"|\", \"^\", \"in\",\n        \"instanceof\", \"..\");\n\n    def(\"BinaryExpression\")\n        .bases(\"Expression\")\n        .build(\"operator\", \"left\", \"right\")\n        .field(\"operator\", BinaryOperator)\n        .field(\"left\", def(\"Expression\"))\n        .field(\"right\", def(\"Expression\"));\n\n    var AssignmentOperator = or(\n        \"=\", \"+=\", \"-=\", \"*=\", \"/=\", \"%=\",\n        \"<<=\", \">>=\", \">>>=\",\n        \"|=\", \"^=\", \"&=\");\n\n    def(\"AssignmentExpression\")\n        .bases(\"Expression\")\n        .build(\"operator\", \"left\", \"right\")\n        .field(\"operator\", AssignmentOperator)\n        .field(\"left\", def(\"Pattern\"))\n        .field(\"right\", def(\"Expression\"));\n\n    var UpdateOperator = or(\"++\", \"--\");\n\n    def(\"UpdateExpression\")\n        .bases(\"Expression\")\n        .build(\"operator\", \"argument\", \"prefix\")\n        .field(\"operator\", UpdateOperator)\n        .field(\"argument\", def(\"Expression\"))\n        .field(\"prefix\", Boolean);\n\n    var LogicalOperator = or(\"||\", \"&&\");\n\n    def(\"LogicalExpression\")\n        .bases(\"Expression\")\n        .build(\"operator\", \"left\", \"right\")\n        .field(\"operator\", LogicalOperator)\n        .field(\"left\", def(\"Expression\"))\n        .field(\"right\", def(\"Expression\"));\n\n    def(\"ConditionalExpression\")\n        .bases(\"Expression\")\n        .build(\"test\", \"consequent\", \"alternate\")\n        .field(\"test\", def(\"Expression\"))\n        .field(\"consequent\", def(\"Expression\"))\n        .field(\"alternate\", def(\"Expression\"));\n\n    def(\"NewExpression\")\n        .bases(\"Expression\")\n        .build(\"callee\", \"arguments\")\n        .field(\"callee\", def(\"Expression\"))\n        // The Mozilla Parser API gives this type as [or(def(\"Expression\"),\n        // null)], but null values don't really make sense at the call site.\n        // TODO Report this nonsense.\n        .field(\"arguments\", [def(\"Expression\")]);\n\n    def(\"CallExpression\")\n        .bases(\"Expression\")\n        .build(\"callee\", \"arguments\")\n        .field(\"callee\", def(\"Expression\"))\n        // See comment for NewExpression above.\n        .field(\"arguments\", [def(\"Expression\")]);\n\n    def(\"MemberExpression\")\n        .bases(\"Expression\")\n        .build(\"object\", \"property\", \"computed\")\n        .field(\"object\", def(\"Expression\"))\n        .field(\"property\", or(def(\"Identifier\"), def(\"Expression\")))\n        .field(\"computed\", Boolean, function () {\n            var type = this.property.type;\n            if (type === 'Literal' ||\n                type === 'MemberExpression' ||\n                type === 'BinaryExpression') {\n                return true;\n            }\n            return false;\n        });\n\n    def(\"Pattern\").bases(\"Node\");\n\n    def(\"SwitchCase\")\n        .bases(\"Node\")\n        .build(\"test\", \"consequent\")\n        .field(\"test\", or(def(\"Expression\"), null))\n        .field(\"consequent\", [def(\"Statement\")]);\n\n    def(\"Identifier\")\n        // But aren't Expressions and Patterns already Nodes? TODO Report this.\n        .bases(\"Node\", \"Expression\", \"Pattern\")\n        .build(\"name\")\n        .field(\"name\", String);\n\n    def(\"Literal\")\n        // But aren't Expressions already Nodes? TODO Report this.\n        .bases(\"Node\", \"Expression\")\n        .build(\"value\")\n        .field(\"value\", or(String, Boolean, null, Number, RegExp))\n        .field(\"regex\", or({\n            pattern: String,\n            flags: String\n        }, null), function () {\n            if (this.value instanceof RegExp) {\n                var flags = \"\";\n\n                if (this.value.ignoreCase) flags += \"i\";\n                if (this.value.multiline) flags += \"m\";\n                if (this.value.global) flags += \"g\";\n\n                return {\n                    pattern: this.value.source,\n                    flags: flags\n                };\n            }\n\n            return null;\n        });\n\n    // Abstract (non-buildable) comment supertype. Not a Node.\n    def(\"Comment\")\n        .bases(\"Printable\")\n        .field(\"value\", String)\n        // A .leading comment comes before the node, whereas a .trailing\n        // comment comes after it. These two fields should not both be true,\n        // but they might both be false when the comment falls inside a node\n        // and the node has no children for the comment to lead or trail,\n        // e.g. { /*dangling*/ }.\n        .field(\"leading\", Boolean, defaults[\"true\"])\n        .field(\"trailing\", Boolean, defaults[\"false\"]);\n};"},"lineCount":370}},"hash":"84bfa908e56651d4041089a89badcfcf","cacheData":{"env":{}}}