{"dependencies":[{"name":"buffer","loc":{"line":2,"column":21}}],"generated":{"js":"\n\"use strict\";\nvar Buffer = require(\"buffer\").Buffer;\n\n// Single-byte codec. Needs a 'chars' string parameter that contains 256 or 128 chars that\n// correspond to encoded bytes (if 128 - then lower half is ASCII). \n\nexports._sbcs = SBCSCodec;\nfunction SBCSCodec(codecOptions, iconv) {\n    if (!codecOptions)\n        throw new Error(\"SBCS codec is called without the data.\")\n    \n    // Prepare char buffer for decoding.\n    if (!codecOptions.chars || (codecOptions.chars.length !== 128 && codecOptions.chars.length !== 256))\n        throw new Error(\"Encoding '\"+codecOptions.type+\"' has incorrect 'chars' (must be of len 128 or 256)\");\n    \n    if (codecOptions.chars.length === 128) {\n        var asciiString = \"\";\n        for (var i = 0; i < 128; i++)\n            asciiString += String.fromCharCode(i);\n        codecOptions.chars = asciiString + codecOptions.chars;\n    }\n\n    this.decodeBuf = new Buffer(codecOptions.chars, 'ucs2');\n    \n    // Encoding buffer.\n    var encodeBuf = new Buffer(65536);\n    encodeBuf.fill(iconv.defaultCharSingleByte.charCodeAt(0));\n\n    for (var i = 0; i < codecOptions.chars.length; i++)\n        encodeBuf[codecOptions.chars.charCodeAt(i)] = i;\n\n    this.encodeBuf = encodeBuf;\n}\n\nSBCSCodec.prototype.encoder = SBCSEncoder;\nSBCSCodec.prototype.decoder = SBCSDecoder;\n\n\nfunction SBCSEncoder(options, codec) {\n    this.encodeBuf = codec.encodeBuf;\n}\n\nSBCSEncoder.prototype.write = function(str) {\n    var buf = new Buffer(str.length);\n    for (var i = 0; i < str.length; i++)\n        buf[i] = this.encodeBuf[str.charCodeAt(i)];\n    \n    return buf;\n}\n\nSBCSEncoder.prototype.end = function() {\n}\n\n\nfunction SBCSDecoder(options, codec) {\n    this.decodeBuf = codec.decodeBuf;\n}\n\nSBCSDecoder.prototype.write = function(buf) {\n    // Strings are immutable in JS -> we use ucs2 buffer to speed up computations.\n    var decodeBuf = this.decodeBuf;\n    var newBuf = new Buffer(buf.length*2);\n    var idx1 = 0, idx2 = 0;\n    for (var i = 0; i < buf.length; i++) {\n        idx1 = buf[i]*2; idx2 = i*2;\n        newBuf[idx2] = decodeBuf[idx1];\n        newBuf[idx2+1] = decodeBuf[idx1+1];\n    }\n    return newBuf.toString('ucs2');\n}\n\nSBCSDecoder.prototype.end = function() {\n}\n","map":{"mappings":[{"source":"../node_modules/iconv-lite/encodings/sbcs-codec.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/iconv-lite/encodings/sbcs-codec.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/iconv-lite/encodings/sbcs-codec.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/iconv-lite/encodings/sbcs-codec.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/iconv-lite/encodings/sbcs-codec.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/iconv-lite/encodings/sbcs-codec.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/iconv-lite/encodings/sbcs-codec.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/iconv-lite/encodings/sbcs-codec.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/iconv-lite/encodings/sbcs-codec.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/iconv-lite/encodings/sbcs-codec.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/iconv-lite/encodings/sbcs-codec.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/iconv-lite/encodings/sbcs-codec.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/iconv-lite/encodings/sbcs-codec.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/iconv-lite/encodings/sbcs-codec.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/iconv-lite/encodings/sbcs-codec.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/iconv-lite/encodings/sbcs-codec.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/iconv-lite/encodings/sbcs-codec.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/iconv-lite/encodings/sbcs-codec.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/iconv-lite/encodings/sbcs-codec.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/iconv-lite/encodings/sbcs-codec.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/iconv-lite/encodings/sbcs-codec.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/iconv-lite/encodings/sbcs-codec.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/iconv-lite/encodings/sbcs-codec.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/iconv-lite/encodings/sbcs-codec.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/iconv-lite/encodings/sbcs-codec.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/iconv-lite/encodings/sbcs-codec.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/iconv-lite/encodings/sbcs-codec.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/iconv-lite/encodings/sbcs-codec.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/iconv-lite/encodings/sbcs-codec.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/iconv-lite/encodings/sbcs-codec.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/iconv-lite/encodings/sbcs-codec.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/iconv-lite/encodings/sbcs-codec.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/iconv-lite/encodings/sbcs-codec.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/iconv-lite/encodings/sbcs-codec.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/iconv-lite/encodings/sbcs-codec.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/iconv-lite/encodings/sbcs-codec.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/iconv-lite/encodings/sbcs-codec.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/iconv-lite/encodings/sbcs-codec.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/iconv-lite/encodings/sbcs-codec.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/iconv-lite/encodings/sbcs-codec.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/iconv-lite/encodings/sbcs-codec.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/iconv-lite/encodings/sbcs-codec.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/iconv-lite/encodings/sbcs-codec.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/iconv-lite/encodings/sbcs-codec.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/iconv-lite/encodings/sbcs-codec.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/iconv-lite/encodings/sbcs-codec.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/iconv-lite/encodings/sbcs-codec.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/iconv-lite/encodings/sbcs-codec.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/iconv-lite/encodings/sbcs-codec.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/iconv-lite/encodings/sbcs-codec.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/iconv-lite/encodings/sbcs-codec.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/iconv-lite/encodings/sbcs-codec.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/iconv-lite/encodings/sbcs-codec.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/iconv-lite/encodings/sbcs-codec.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/iconv-lite/encodings/sbcs-codec.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/iconv-lite/encodings/sbcs-codec.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/iconv-lite/encodings/sbcs-codec.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/iconv-lite/encodings/sbcs-codec.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/iconv-lite/encodings/sbcs-codec.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/iconv-lite/encodings/sbcs-codec.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/iconv-lite/encodings/sbcs-codec.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/iconv-lite/encodings/sbcs-codec.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/iconv-lite/encodings/sbcs-codec.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/iconv-lite/encodings/sbcs-codec.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/iconv-lite/encodings/sbcs-codec.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/iconv-lite/encodings/sbcs-codec.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/iconv-lite/encodings/sbcs-codec.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/iconv-lite/encodings/sbcs-codec.js","original":{"line":68,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/iconv-lite/encodings/sbcs-codec.js","original":{"line":69,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/iconv-lite/encodings/sbcs-codec.js","original":{"line":70,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/iconv-lite/encodings/sbcs-codec.js","original":{"line":71,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/iconv-lite/encodings/sbcs-codec.js","original":{"line":72,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/iconv-lite/encodings/sbcs-codec.js","original":{"line":73,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/iconv-lite/encodings/sbcs-codec.js","original":{"line":74,"column":0},"generated":{"line":75,"column":0}}],"sources":{"../node_modules/iconv-lite/encodings/sbcs-codec.js":"\"use strict\";\nvar Buffer = require(\"buffer\").Buffer;\n\n// Single-byte codec. Needs a 'chars' string parameter that contains 256 or 128 chars that\n// correspond to encoded bytes (if 128 - then lower half is ASCII). \n\nexports._sbcs = SBCSCodec;\nfunction SBCSCodec(codecOptions, iconv) {\n    if (!codecOptions)\n        throw new Error(\"SBCS codec is called without the data.\")\n    \n    // Prepare char buffer for decoding.\n    if (!codecOptions.chars || (codecOptions.chars.length !== 128 && codecOptions.chars.length !== 256))\n        throw new Error(\"Encoding '\"+codecOptions.type+\"' has incorrect 'chars' (must be of len 128 or 256)\");\n    \n    if (codecOptions.chars.length === 128) {\n        var asciiString = \"\";\n        for (var i = 0; i < 128; i++)\n            asciiString += String.fromCharCode(i);\n        codecOptions.chars = asciiString + codecOptions.chars;\n    }\n\n    this.decodeBuf = new Buffer(codecOptions.chars, 'ucs2');\n    \n    // Encoding buffer.\n    var encodeBuf = new Buffer(65536);\n    encodeBuf.fill(iconv.defaultCharSingleByte.charCodeAt(0));\n\n    for (var i = 0; i < codecOptions.chars.length; i++)\n        encodeBuf[codecOptions.chars.charCodeAt(i)] = i;\n\n    this.encodeBuf = encodeBuf;\n}\n\nSBCSCodec.prototype.encoder = SBCSEncoder;\nSBCSCodec.prototype.decoder = SBCSDecoder;\n\n\nfunction SBCSEncoder(options, codec) {\n    this.encodeBuf = codec.encodeBuf;\n}\n\nSBCSEncoder.prototype.write = function(str) {\n    var buf = new Buffer(str.length);\n    for (var i = 0; i < str.length; i++)\n        buf[i] = this.encodeBuf[str.charCodeAt(i)];\n    \n    return buf;\n}\n\nSBCSEncoder.prototype.end = function() {\n}\n\n\nfunction SBCSDecoder(options, codec) {\n    this.decodeBuf = codec.decodeBuf;\n}\n\nSBCSDecoder.prototype.write = function(buf) {\n    // Strings are immutable in JS -> we use ucs2 buffer to speed up computations.\n    var decodeBuf = this.decodeBuf;\n    var newBuf = new Buffer(buf.length*2);\n    var idx1 = 0, idx2 = 0;\n    for (var i = 0; i < buf.length; i++) {\n        idx1 = buf[i]*2; idx2 = i*2;\n        newBuf[idx2] = decodeBuf[idx1];\n        newBuf[idx2+1] = decodeBuf[idx1+1];\n    }\n    return newBuf.toString('ucs2');\n}\n\nSBCSDecoder.prototype.end = function() {\n}\n"},"lineCount":75}},"hash":"f21a4ee00f7d5ddb2c404d3c47d3e713","cacheData":{"env":{}}}