{"dependencies":[{"name":"./util/assertString","loc":{"line":8,"column":28}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isInt;\n\nvar _assertString = require('./util/assertString');\n\nvar _assertString2 = _interopRequireDefault(_assertString);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar int = /^(?:[-+]?(?:0|[1-9][0-9]*))$/;\nvar intLeadingZeroes = /^[-+]?[0-9]+$/;\n\nfunction isInt(str, options) {\n  (0, _assertString2.default)(str);\n  options = options || {};\n\n  // Get the regex to use for testing, based on whether\n  // leading zeroes are allowed or not.\n  var regex = options.hasOwnProperty('allow_leading_zeroes') && !options.allow_leading_zeroes ? int : intLeadingZeroes;\n\n  // Check min/max/lt/gt\n  var minCheckPassed = !options.hasOwnProperty('min') || str >= options.min;\n  var maxCheckPassed = !options.hasOwnProperty('max') || str <= options.max;\n  var ltCheckPassed = !options.hasOwnProperty('lt') || str < options.lt;\n  var gtCheckPassed = !options.hasOwnProperty('gt') || str > options.gt;\n\n  return regex.test(str) && minCheckPassed && maxCheckPassed && ltCheckPassed && gtCheckPassed;\n}\nmodule.exports = exports['default'];","map":{"mappings":[{"source":"../node_modules/validator/lib/isInt.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/validator/lib/isInt.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/validator/lib/isInt.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/validator/lib/isInt.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/validator/lib/isInt.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/validator/lib/isInt.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/validator/lib/isInt.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/validator/lib/isInt.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/validator/lib/isInt.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/validator/lib/isInt.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/validator/lib/isInt.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/validator/lib/isInt.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/validator/lib/isInt.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/validator/lib/isInt.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/validator/lib/isInt.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/validator/lib/isInt.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/validator/lib/isInt.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/validator/lib/isInt.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/validator/lib/isInt.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/validator/lib/isInt.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/validator/lib/isInt.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/validator/lib/isInt.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/validator/lib/isInt.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/validator/lib/isInt.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/validator/lib/isInt.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/validator/lib/isInt.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/validator/lib/isInt.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/validator/lib/isInt.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/validator/lib/isInt.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/validator/lib/isInt.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/validator/lib/isInt.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/validator/lib/isInt.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/validator/lib/isInt.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}}],"sources":{"../node_modules/validator/lib/isInt.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isInt;\n\nvar _assertString = require('./util/assertString');\n\nvar _assertString2 = _interopRequireDefault(_assertString);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar int = /^(?:[-+]?(?:0|[1-9][0-9]*))$/;\nvar intLeadingZeroes = /^[-+]?[0-9]+$/;\n\nfunction isInt(str, options) {\n  (0, _assertString2.default)(str);\n  options = options || {};\n\n  // Get the regex to use for testing, based on whether\n  // leading zeroes are allowed or not.\n  var regex = options.hasOwnProperty('allow_leading_zeroes') && !options.allow_leading_zeroes ? int : intLeadingZeroes;\n\n  // Check min/max/lt/gt\n  var minCheckPassed = !options.hasOwnProperty('min') || str >= options.min;\n  var maxCheckPassed = !options.hasOwnProperty('max') || str <= options.max;\n  var ltCheckPassed = !options.hasOwnProperty('lt') || str < options.lt;\n  var gtCheckPassed = !options.hasOwnProperty('gt') || str > options.gt;\n\n  return regex.test(str) && minCheckPassed && maxCheckPassed && ltCheckPassed && gtCheckPassed;\n}\nmodule.exports = exports['default'];"},"lineCount":33}},"hash":"2f084270b031fda7b8cc9ed8400e7082","cacheData":{"env":{}}}