{"dependencies":[],"generated":{"js":"'use strict'\n\n/**\n * Creates an interator for a DoublyLinkedList starting at the given node\n * It's internal cursor will remains relative to the last \"iterated\" node as that\n * node moves through the list until it either iterates to the end of the list,\n * or the the node it's tracking is removed from the list. Until the first 'next'\n * call it tracks the head/tail of the linked list. This means that one can create\n * an iterator on an empty list, then add nodes, and then the iterator will follow\n * those nodes. Because the DoublyLinkedList nodes don't track their owning \"list\" and\n * it's highly inefficient to walk the list for every iteration, the iterator won't know\n * if the node has been detached from one List and added to another list, or if the iterator\n *\n * The created object is an es6 compatible iterator\n */\nclass DoublyLinkedListIterator {\n\n  /**\n   * @param  {Object} doublyLinkedListNode a node that is part of a doublyLinkedList\n   * @param  {Boolean} reverse             is this a reverse iterator? default: false\n   */\n  constructor (doublyLinkedList, reverse) {\n    this._list = doublyLinkedList\n    // NOTE: these key names are tied to the DoublyLinkedListIterator\n    this._direction = reverse === true ? 'prev' : 'next'\n    this._startPosition = reverse === true ? 'tail' : 'head'\n    this._started = false\n    this._cursor = null\n    this._done = false\n  }\n\n  _start () {\n    this._cursor = this._list[this._startPosition]\n    this._started = true\n  }\n\n  _advanceCursor () {\n    if (this._started === false) {\n      this._started = true\n      this._cursor = this._list[this._startPosition]\n      return\n    }\n    this._cursor = this._cursor[this._direction]\n  }\n\n  reset () {\n    this._done = false\n    this._started = false\n    this._cursor = null\n  }\n\n  remove () {\n    if (this._started === false || this._done === true || this._isCursorDetached()) {\n      return false\n    }\n    this._list.remove(this._cursor)\n  }\n\n  next () {\n    if (this._done === true) {\n      return { done: true }\n    }\n\n    this._advanceCursor()\n\n    // if there is no node at the cursor or the node at the cursor is no longer part of\n    // a doubly linked list then we are done/finished/kaput\n    if (this._cursor === null || this._isCursorDetached()) {\n      this._done = true\n      return { done: true }\n    }\n\n    return {\n      value: this._cursor,\n      done: false\n    }\n  }\n\n  /**\n   * Is the node detached from a list?\n   * NOTE: you can trick/bypass/confuse this check by removing a node from one DoublyLinkedList\n   * and adding it to another.\n   * TODO: We can make this smarter by checking the direction of travel and only checking\n   * the required next/prev/head/tail rather than all of them\n   * @param  {[type]}  node [description]\n   * @return {Boolean}      [description]\n   */\n  _isCursorDetached () {\n    return this._cursor.prev === null && this._cursor.next === null && this._list.tail !== this._cursor && this._list.head !== this._cursor\n  }\n}\n\nmodule.exports = DoublyLinkedListIterator\n","map":{"mappings":[{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}}],"sources":{"../node_modules/generic-pool/lib/DoublyLinkedListIterator.js":"'use strict'\n\n/**\n * Creates an interator for a DoublyLinkedList starting at the given node\n * It's internal cursor will remains relative to the last \"iterated\" node as that\n * node moves through the list until it either iterates to the end of the list,\n * or the the node it's tracking is removed from the list. Until the first 'next'\n * call it tracks the head/tail of the linked list. This means that one can create\n * an iterator on an empty list, then add nodes, and then the iterator will follow\n * those nodes. Because the DoublyLinkedList nodes don't track their owning \"list\" and\n * it's highly inefficient to walk the list for every iteration, the iterator won't know\n * if the node has been detached from one List and added to another list, or if the iterator\n *\n * The created object is an es6 compatible iterator\n */\nclass DoublyLinkedListIterator {\n\n  /**\n   * @param  {Object} doublyLinkedListNode a node that is part of a doublyLinkedList\n   * @param  {Boolean} reverse             is this a reverse iterator? default: false\n   */\n  constructor (doublyLinkedList, reverse) {\n    this._list = doublyLinkedList\n    // NOTE: these key names are tied to the DoublyLinkedListIterator\n    this._direction = reverse === true ? 'prev' : 'next'\n    this._startPosition = reverse === true ? 'tail' : 'head'\n    this._started = false\n    this._cursor = null\n    this._done = false\n  }\n\n  _start () {\n    this._cursor = this._list[this._startPosition]\n    this._started = true\n  }\n\n  _advanceCursor () {\n    if (this._started === false) {\n      this._started = true\n      this._cursor = this._list[this._startPosition]\n      return\n    }\n    this._cursor = this._cursor[this._direction]\n  }\n\n  reset () {\n    this._done = false\n    this._started = false\n    this._cursor = null\n  }\n\n  remove () {\n    if (this._started === false || this._done === true || this._isCursorDetached()) {\n      return false\n    }\n    this._list.remove(this._cursor)\n  }\n\n  next () {\n    if (this._done === true) {\n      return { done: true }\n    }\n\n    this._advanceCursor()\n\n    // if there is no node at the cursor or the node at the cursor is no longer part of\n    // a doubly linked list then we are done/finished/kaput\n    if (this._cursor === null || this._isCursorDetached()) {\n      this._done = true\n      return { done: true }\n    }\n\n    return {\n      value: this._cursor,\n      done: false\n    }\n  }\n\n  /**\n   * Is the node detached from a list?\n   * NOTE: you can trick/bypass/confuse this check by removing a node from one DoublyLinkedList\n   * and adding it to another.\n   * TODO: We can make this smarter by checking the direction of travel and only checking\n   * the required next/prev/head/tail rather than all of them\n   * @param  {[type]}  node [description]\n   * @return {Boolean}      [description]\n   */\n  _isCursorDetached () {\n    return this._cursor.prev === null && this._cursor.next === null && this._list.tail !== this._cursor && this._list.head !== this._cursor\n  }\n}\n\nmodule.exports = DoublyLinkedListIterator\n"},"lineCount":94}},"hash":"39b931004d6b5b8cea9129ff2930d158","cacheData":{"env":{}}}