{"dependencies":[{"name":"./util/assertString","loc":{"line":8,"column":28}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isIP;\n\nvar _assertString = require('./util/assertString');\n\nvar _assertString2 = _interopRequireDefault(_assertString);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar ipv4Maybe = /^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$/;\nvar ipv6Block = /^[0-9A-F]{1,4}$/i;\n\nfunction isIP(str) {\n  var version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n  (0, _assertString2.default)(str);\n  version = String(version);\n  if (!version) {\n    return isIP(str, 4) || isIP(str, 6);\n  } else if (version === '4') {\n    if (!ipv4Maybe.test(str)) {\n      return false;\n    }\n    var parts = str.split('.').sort(function (a, b) {\n      return a - b;\n    });\n    return parts[3] <= 255;\n  } else if (version === '6') {\n    var blocks = str.split(':');\n    var foundOmissionBlock = false; // marker to indicate ::\n\n    // At least some OS accept the last 32 bits of an IPv6 address\n    // (i.e. 2 of the blocks) in IPv4 notation, and RFC 3493 says\n    // that '::ffff:a.b.c.d' is valid for IPv4-mapped IPv6 addresses,\n    // and '::a.b.c.d' is deprecated, but also valid.\n    var foundIPv4TransitionBlock = isIP(blocks[blocks.length - 1], 4);\n    var expectedNumberOfBlocks = foundIPv4TransitionBlock ? 7 : 8;\n\n    if (blocks.length > expectedNumberOfBlocks) {\n      return false;\n    }\n    // initial or final ::\n    if (str === '::') {\n      return true;\n    } else if (str.substr(0, 2) === '::') {\n      blocks.shift();\n      blocks.shift();\n      foundOmissionBlock = true;\n    } else if (str.substr(str.length - 2) === '::') {\n      blocks.pop();\n      blocks.pop();\n      foundOmissionBlock = true;\n    }\n\n    for (var i = 0; i < blocks.length; ++i) {\n      // test for a :: which can not be at the string start/end\n      // since those cases have been handled above\n      if (blocks[i] === '' && i > 0 && i < blocks.length - 1) {\n        if (foundOmissionBlock) {\n          return false; // multiple :: in address\n        }\n        foundOmissionBlock = true;\n      } else if (foundIPv4TransitionBlock && i === blocks.length - 1) {\n        // it has been checked before that the last\n        // block is a valid IPv4 address\n      } else if (!ipv6Block.test(blocks[i])) {\n        return false;\n      }\n    }\n    if (foundOmissionBlock) {\n      return blocks.length >= 1;\n    }\n    return blocks.length === expectedNumberOfBlocks;\n  }\n  return false;\n}\nmodule.exports = exports['default'];","map":{"mappings":[{"source":"../node_modules/validator/lib/isIP.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/validator/lib/isIP.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/validator/lib/isIP.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/validator/lib/isIP.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/validator/lib/isIP.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/validator/lib/isIP.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/validator/lib/isIP.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/validator/lib/isIP.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/validator/lib/isIP.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/validator/lib/isIP.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/validator/lib/isIP.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/validator/lib/isIP.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/validator/lib/isIP.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/validator/lib/isIP.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/validator/lib/isIP.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/validator/lib/isIP.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/validator/lib/isIP.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/validator/lib/isIP.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/validator/lib/isIP.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/validator/lib/isIP.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/validator/lib/isIP.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/validator/lib/isIP.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/validator/lib/isIP.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/validator/lib/isIP.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/validator/lib/isIP.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/validator/lib/isIP.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/validator/lib/isIP.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/validator/lib/isIP.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/validator/lib/isIP.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/validator/lib/isIP.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/validator/lib/isIP.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/validator/lib/isIP.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/validator/lib/isIP.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/validator/lib/isIP.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/validator/lib/isIP.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/validator/lib/isIP.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/validator/lib/isIP.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/validator/lib/isIP.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/validator/lib/isIP.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/validator/lib/isIP.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/validator/lib/isIP.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/validator/lib/isIP.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/validator/lib/isIP.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/validator/lib/isIP.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/validator/lib/isIP.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/validator/lib/isIP.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/validator/lib/isIP.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/validator/lib/isIP.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/validator/lib/isIP.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/validator/lib/isIP.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/validator/lib/isIP.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/validator/lib/isIP.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/validator/lib/isIP.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/validator/lib/isIP.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/validator/lib/isIP.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/validator/lib/isIP.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/validator/lib/isIP.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/validator/lib/isIP.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/validator/lib/isIP.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/validator/lib/isIP.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/validator/lib/isIP.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/validator/lib/isIP.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/validator/lib/isIP.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/validator/lib/isIP.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/validator/lib/isIP.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/validator/lib/isIP.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/validator/lib/isIP.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/validator/lib/isIP.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/validator/lib/isIP.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/validator/lib/isIP.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/validator/lib/isIP.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/validator/lib/isIP.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/validator/lib/isIP.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/validator/lib/isIP.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/validator/lib/isIP.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/validator/lib/isIP.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/validator/lib/isIP.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/validator/lib/isIP.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/validator/lib/isIP.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/validator/lib/isIP.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/validator/lib/isIP.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}}],"sources":{"../node_modules/validator/lib/isIP.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isIP;\n\nvar _assertString = require('./util/assertString');\n\nvar _assertString2 = _interopRequireDefault(_assertString);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar ipv4Maybe = /^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$/;\nvar ipv6Block = /^[0-9A-F]{1,4}$/i;\n\nfunction isIP(str) {\n  var version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n  (0, _assertString2.default)(str);\n  version = String(version);\n  if (!version) {\n    return isIP(str, 4) || isIP(str, 6);\n  } else if (version === '4') {\n    if (!ipv4Maybe.test(str)) {\n      return false;\n    }\n    var parts = str.split('.').sort(function (a, b) {\n      return a - b;\n    });\n    return parts[3] <= 255;\n  } else if (version === '6') {\n    var blocks = str.split(':');\n    var foundOmissionBlock = false; // marker to indicate ::\n\n    // At least some OS accept the last 32 bits of an IPv6 address\n    // (i.e. 2 of the blocks) in IPv4 notation, and RFC 3493 says\n    // that '::ffff:a.b.c.d' is valid for IPv4-mapped IPv6 addresses,\n    // and '::a.b.c.d' is deprecated, but also valid.\n    var foundIPv4TransitionBlock = isIP(blocks[blocks.length - 1], 4);\n    var expectedNumberOfBlocks = foundIPv4TransitionBlock ? 7 : 8;\n\n    if (blocks.length > expectedNumberOfBlocks) {\n      return false;\n    }\n    // initial or final ::\n    if (str === '::') {\n      return true;\n    } else if (str.substr(0, 2) === '::') {\n      blocks.shift();\n      blocks.shift();\n      foundOmissionBlock = true;\n    } else if (str.substr(str.length - 2) === '::') {\n      blocks.pop();\n      blocks.pop();\n      foundOmissionBlock = true;\n    }\n\n    for (var i = 0; i < blocks.length; ++i) {\n      // test for a :: which can not be at the string start/end\n      // since those cases have been handled above\n      if (blocks[i] === '' && i > 0 && i < blocks.length - 1) {\n        if (foundOmissionBlock) {\n          return false; // multiple :: in address\n        }\n        foundOmissionBlock = true;\n      } else if (foundIPv4TransitionBlock && i === blocks.length - 1) {\n        // it has been checked before that the last\n        // block is a valid IPv4 address\n      } else if (!ipv6Block.test(blocks[i])) {\n        return false;\n      }\n    }\n    if (foundOmissionBlock) {\n      return blocks.length >= 1;\n    }\n    return blocks.length === expectedNumberOfBlocks;\n  }\n  return false;\n}\nmodule.exports = exports['default'];"},"lineCount":81}},"hash":"0018400f19354ff78044b2b8f60e4535","cacheData":{"env":{}}}