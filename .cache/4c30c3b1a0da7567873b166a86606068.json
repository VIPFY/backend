{"dependencies":[{"name":"../../utils","loc":{"line":3,"column":22}},{"name":"util","loc":{"line":4,"column":21}},{"name":"../../data-types","loc":{"line":5,"column":26}},{"name":"../abstract/query-generator","loc":{"line":6,"column":39}},{"name":"semver","loc":{"line":7,"column":23}},{"name":"lodash","loc":{"line":8,"column":18}}],"generated":{"js":"'use strict';\n\nconst Utils = require('../../utils');\nconst util = require('util');\nconst DataTypes = require('../../data-types');\nconst AbstractQueryGenerator = require('../abstract/query-generator');\nconst semver = require('semver');\nconst _ = require('lodash');\n\nconst QueryGenerator = {\n  __proto__: AbstractQueryGenerator,\n  options: {},\n  dialect: 'postgres',\n\n  setSearchPath(searchPath) {\n    return `SET search_path to ${searchPath};`;\n  },\n\n  createSchema(schema) {\n    const databaseVersion = _.get(this, 'sequelize.options.databaseVersion', 0);\n\n    if (databaseVersion && semver.gte(databaseVersion, '9.2.0')) {\n      return `CREATE SCHEMA IF NOT EXISTS ${schema};`;\n    }\n\n    return `CREATE SCHEMA ${schema};`;\n  },\n\n  dropSchema(schema) {\n    return `DROP SCHEMA IF EXISTS ${schema} CASCADE;`;\n  },\n\n  showSchemasQuery() {\n    return \"SELECT schema_name FROM information_schema.schemata WHERE schema_name <> 'information_schema' AND schema_name != 'public' AND schema_name !~ E'^pg_';\";\n  },\n\n  versionQuery() {\n    return 'SHOW SERVER_VERSION';\n  },\n\n  createTableQuery(tableName, attributes, options) {\n\n    options = _.extend({\n    }, options || {});\n\n    //Postgres 9.0 does not support CREATE TABLE IF NOT EXISTS, 9.1 and above do\n    const databaseVersion = _.get(this, 'sequelize.options.databaseVersion', 0);\n    const attrStr = [];\n    let comments = '';\n\n    if (options.comment && _.isString(options.comment)) {\n      comments += '; COMMENT ON TABLE <%= table %> IS ' + this.escape(options.comment);\n    }\n\n    for (const attr in attributes) {\n      const i = attributes[attr].indexOf('COMMENT');\n      if (i !== -1) {\n        // Move comment to a separate query\n        comments += '; ' + attributes[attr].substring(i);\n        attributes[attr] = attributes[attr].substring(0, i);\n      }\n\n      const dataType = this.dataTypeMapping(tableName, attr, attributes[attr]);\n      attrStr.push(this.quoteIdentifier(attr) + ' ' + dataType);\n    }\n\n    const values = {\n      table: this.quoteTable(tableName),\n      attributes: attrStr.join(', '),\n      comments: _.template(comments, this._templateSettings)({ table: this.quoteTable(tableName) })\n    };\n\n    if (options.uniqueKeys) {\n      _.each(options.uniqueKeys, columns => {\n        if (!columns.singleField) { // If it's a single field it's handled in column def, not as an index\n          values.attributes += ', UNIQUE (' + columns.fields.map(f => this.quoteIdentifiers(f)).join(', ') + ')';\n        }\n      });\n    }\n\n    const pks = _.reduce(attributes, (acc, attribute, key) => {\n      if (_.includes(attribute, 'PRIMARY KEY')) {\n        acc.push(this.quoteIdentifier(key));\n      }\n      return acc;\n    }, []).join(',');\n\n    if (pks.length > 0) {\n      values.attributes += ', PRIMARY KEY (' + pks + ')';\n    }\n\n    return `CREATE TABLE ${databaseVersion === 0 || semver.gte(databaseVersion, '9.1.0') ? 'IF NOT EXISTS ' : ''}${values.table} (${values.attributes})${values.comments};`;\n  },\n\n  dropTableQuery(tableName, options) {\n    options = options || {};\n    return `DROP TABLE IF EXISTS ${this.quoteTable(tableName)}${options.cascade ? ' CASCADE' : ''};`;\n  },\n\n  showTablesQuery() {\n    return \"SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_type LIKE '%TABLE' AND table_name != 'spatial_ref_sys';\";\n  },\n\n  describeTableQuery(tableName, schema) {\n    if (!schema) {\n      schema = 'public';\n    }\n    return 'SELECT pk.constraint_type as \"Constraint\", c.column_name as \"Field\", ' +\n              'c.column_default as \"Default\", c.is_nullable as \"Null\", ' +\n              '(CASE WHEN c.udt_name = \\'hstore\\' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN \\'(\\' || c.character_maximum_length || \\')\\' ELSE \\'\\' END) as \"Type\", ' +\n              '(SELECT array_agg(e.enumlabel) ' +\n              'FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid ' +\n              'WHERE t.typname=c.udt_name) AS \"special\" ' +\n            'FROM information_schema.columns c ' +\n            'LEFT JOIN (SELECT tc.table_schema, tc.table_name, ' +\n              'cu.column_name, tc.constraint_type ' +\n              'FROM information_schema.TABLE_CONSTRAINTS tc ' +\n              'JOIN information_schema.KEY_COLUMN_USAGE  cu ' +\n              'ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name ' +\n                'and tc.constraint_name=cu.constraint_name ' +\n                'and tc.constraint_type=\\'PRIMARY KEY\\') pk ' +\n            'ON pk.table_schema=c.table_schema ' +\n            'AND pk.table_name=c.table_name ' +\n            'AND pk.column_name=c.column_name ' +\n      `WHERE c.table_name = ${this.escape(tableName)} AND c.table_schema = ${this.escape(schema)} `;\n  },\n\n  /**\n   * Check whether the statmement is json function or simple path\n   *\n   * @param   {String}  stmt  The statement to validate\n   * @returns {Boolean}       true if the given statement is json function\n   * @throws  {Error}         throw if the statement looks like json function but has invalid token\n   */\n  _checkValidJsonStatement(stmt) {\n    if (!_.isString(stmt)) {\n      return false;\n    }\n\n    // https://www.postgresql.org/docs/current/static/functions-json.html\n    const jsonFunctionRegex = /^\\s*((?:[a-z]+_){0,2}jsonb?(?:_[a-z]+){0,2})\\([^)]*\\)/i;\n    const jsonOperatorRegex = /^\\s*(->>?|#>>?|@>|<@|\\?[|&]?|\\|{2}|#-)/i;\n    const tokenCaptureRegex = /^\\s*((?:([`\"'])(?:(?!\\2).|\\2{2})*\\2)|[\\w\\d\\s]+|[().,;+-])/i;\n\n    let currentIndex = 0;\n    let openingBrackets = 0;\n    let closingBrackets = 0;\n    let hasJsonFunction = false;\n    let hasInvalidToken = false;\n\n    while (currentIndex < stmt.length) {\n      const string = stmt.substr(currentIndex);\n      const functionMatches = jsonFunctionRegex.exec(string);\n      if (functionMatches) {\n        currentIndex += functionMatches[0].indexOf('(');\n        hasJsonFunction = true;\n        continue;\n      }\n\n      const operatorMatches = jsonOperatorRegex.exec(string);\n      if (operatorMatches) {\n        currentIndex += operatorMatches[0].length;\n        hasJsonFunction = true;\n        continue;\n      }\n\n      const tokenMatches = tokenCaptureRegex.exec(string);\n      if (tokenMatches) {\n        const capturedToken = tokenMatches[1];\n        if (capturedToken === '(') {\n          openingBrackets++;\n        } else if (capturedToken === ')') {\n          closingBrackets++;\n        } else if (capturedToken === ';') {\n          hasInvalidToken = true;\n          break;\n        }\n        currentIndex += tokenMatches[0].length;\n        continue;\n      }\n\n      break;\n    }\n\n    // Check invalid json statement\n    hasInvalidToken |= openingBrackets !== closingBrackets;\n    if (hasJsonFunction && hasInvalidToken) {\n      throw new Error('Invalid json statement: ' + stmt);\n    }\n\n    // return true if the statement has valid json function\n    return hasJsonFunction;\n  },\n\n  /**\n   * Generates an SQL query that extract JSON property of given path.\n   *\n   * @param   {String}               column  The JSON column\n   * @param   {String|Array<String>} [path]  The path to extract (optional)\n   * @returns {String}                       The generated sql query\n   * @private\n   */\n  jsonPathExtractionQuery(column, path) {\n    const paths = _.toPath(path);\n    const pathStr = this.escape(`{${paths.join(',')}}`);\n    const quotedColumn = this.isIdentifierQuoted(column) ? column : this.quoteIdentifier(column);\n    return `(${quotedColumn}#>>${pathStr})`;\n  },\n\n  handleSequelizeMethod(smth, tableName, factory, options, prepend) {\n    if (smth instanceof Utils.Json) {\n      // Parse nested object\n      if (smth.conditions) {\n        const conditions = _.map(this.parseConditionObject(smth.conditions), condition =>\n          `${this.jsonPathExtractionQuery(_.first(condition.path), _.tail(condition.path))} = '${condition.value}'`\n        );\n\n        return conditions.join(' AND ');\n      } else if (smth.path) {\n        let str;\n\n        // Allow specifying conditions using the postgres json syntax\n        if (this._checkValidJsonStatement(smth.path)) {\n          str = smth.path;\n        } else {\n          // Also support json property accessors\n          const paths = _.toPath(smth.path);\n          const column = paths.shift();\n          str = this.jsonPathExtractionQuery(column, paths);\n        }\n\n        if (smth.value) {\n          str += util.format(' = %s', this.escape(smth.value));\n        }\n\n        return str;\n      }\n    }\n    return AbstractQueryGenerator.handleSequelizeMethod.call(this, smth, tableName, factory, options, prepend);\n  },\n\n  addColumnQuery(table, key, dataType) {\n\n    const dbDataType = this.attributeToSQL(dataType, { context: 'addColumn' });\n    const definition = this.dataTypeMapping(table, key, dbDataType);\n    const quotedKey = this.quoteIdentifier(key);\n    const quotedTable = this.quoteTable(this.extractTableDetails(table));\n\n    let query = `ALTER TABLE ${quotedTable} ADD COLUMN ${quotedKey} ${definition};`;\n\n    if (dataType.type && dataType.type instanceof DataTypes.ENUM || dataType instanceof DataTypes.ENUM) {\n      query = this.pgEnum(table, key, dataType) + query;\n    }\n\n    return query;\n  },\n\n  removeColumnQuery(tableName, attributeName) {\n    const quotedTableName = this.quoteTable(this.extractTableDetails(tableName));\n    const quotedAttributeName = this.quoteIdentifier(attributeName);\n    return `ALTER TABLE ${quotedTableName} DROP COLUMN ${quotedAttributeName};`;\n  },\n\n  changeColumnQuery(tableName, attributes) {\n    const query = 'ALTER TABLE <%= tableName %> ALTER COLUMN <%= query %>;';\n    const sql = [];\n\n    for (const attributeName in attributes) {\n      let definition = this.dataTypeMapping(tableName, attributeName, attributes[attributeName]);\n      let attrSql = '';\n\n      if (definition.indexOf('NOT NULL') > 0) {\n        attrSql += _.template(query, this._templateSettings)({\n          tableName: this.quoteTable(tableName),\n          query: this.quoteIdentifier(attributeName) + ' SET NOT NULL'\n        });\n\n        definition = definition.replace('NOT NULL', '').trim();\n      } else if (!definition.match(/REFERENCES/)) {\n        attrSql += _.template(query, this._templateSettings)({\n          tableName: this.quoteTable(tableName),\n          query: this.quoteIdentifier(attributeName) + ' DROP NOT NULL'\n        });\n      }\n\n      if (definition.indexOf('DEFAULT') > 0) {\n        attrSql += _.template(query, this._templateSettings)({\n          tableName: this.quoteTable(tableName),\n          query: this.quoteIdentifier(attributeName) + ' SET DEFAULT ' + definition.match(/DEFAULT ([^;]+)/)[1]\n        });\n\n        definition = definition.replace(/(DEFAULT[^;]+)/, '').trim();\n      } else if (!definition.match(/REFERENCES/)) {\n        attrSql += _.template(query, this._templateSettings)({\n          tableName: this.quoteTable(tableName),\n          query: this.quoteIdentifier(attributeName) + ' DROP DEFAULT'\n        });\n      }\n\n      if (attributes[attributeName].match(/^ENUM\\(/)) {\n        attrSql += this.pgEnum(tableName, attributeName, attributes[attributeName]);\n        definition = definition.replace(/^ENUM\\(.+\\)/, this.pgEnumName(tableName, attributeName, { schema: false }));\n        definition += ' USING (' + this.quoteIdentifier(attributeName) + '::' + this.pgEnumName(tableName, attributeName) + ')';\n      }\n\n      if (definition.match(/UNIQUE;*$/)) {\n        definition = definition.replace(/UNIQUE;*$/, '');\n\n        attrSql += _.template(query.replace('ALTER COLUMN', ''), this._templateSettings)({\n          tableName: this.quoteTable(tableName),\n          query: 'ADD CONSTRAINT ' + this.quoteIdentifier(attributeName + '_unique_idx') + ' UNIQUE (' + this.quoteIdentifier(attributeName) + ')'\n        });\n      }\n\n      if (definition.match(/REFERENCES/)) {\n        definition = definition.replace(/.+?(?=REFERENCES)/, '');\n        attrSql += _.template(query.replace('ALTER COLUMN', ''), this._templateSettings)({\n          tableName: this.quoteTable(tableName),\n          query: 'ADD CONSTRAINT ' + this.quoteIdentifier(attributeName + '_foreign_idx') + ' FOREIGN KEY (' + this.quoteIdentifier(attributeName) + ') ' + definition\n        });\n      } else {\n        attrSql += _.template(query, this._templateSettings)({\n          tableName: this.quoteTable(tableName),\n          query: this.quoteIdentifier(attributeName) + ' TYPE ' + definition\n        });\n      }\n\n      sql.push(attrSql);\n    }\n\n    return sql.join('');\n  },\n\n  renameColumnQuery(tableName, attrBefore, attributes) {\n\n    const attrString = [];\n\n    for (const attributeName in attributes) {\n      attrString.push(_.template('<%= before %> TO <%= after %>', this._templateSettings)({\n        before: this.quoteIdentifier(attrBefore),\n        after: this.quoteIdentifier(attributeName)\n      }));\n    }\n\n    return `ALTER TABLE ${this.quoteTable(tableName)} RENAME COLUMN ${attrString.join(', ')};`;\n  },\n\n  fn(fnName, tableName, body, returns, language) {\n    fnName = fnName || 'testfunc';\n    language = language || 'plpgsql';\n    returns = returns || 'SETOF ' + this.quoteTable(tableName);\n\n    return `CREATE OR REPLACE FUNCTION pg_temp.${fnName}() RETURNS ${returns} AS $func$ BEGIN ${body} END; $func$ LANGUAGE ${language}; SELECT * FROM pg_temp.${fnName}();`;\n  },\n\n  exceptionFn(fnName, tableName, main, then, when, returns, language) {\n    when = when || 'unique_violation';\n\n    const body = `${main} EXCEPTION WHEN ${when} THEN ${then};`;\n\n    return this.fn(fnName, tableName, body, returns, language);\n  },\n\n  upsertQuery(tableName, insertValues, updateValues, where, model, options) {\n    const insert = this.insertQuery(tableName, insertValues, model.rawAttributes, options);\n    const update = this.updateQuery(tableName, updateValues, where, options, model.rawAttributes);\n\n    // The numbers here are selected to match the number of affected rows returned by MySQL\n    return this.exceptionFn(\n      'sequelize_upsert',\n      tableName,\n      insert + ' RETURN 1;',\n      update + '; RETURN 2',\n      'unique_violation',\n      'integer'\n    );\n  },\n\n  deleteQuery(tableName, where, options, model) {\n    let query;\n\n    options = options || {};\n\n    tableName = this.quoteTable(tableName);\n\n    if (options.truncate === true) {\n      query = 'TRUNCATE ' + tableName;\n\n      if (options.restartIdentity) {\n        query += ' RESTART IDENTITY';\n      }\n\n      if (options.cascade) {\n        query += ' CASCADE';\n      }\n\n      return query;\n    }\n\n    if (_.isUndefined(options.limit)) {\n      options.limit = 1;\n    }\n\n    const replacements = {\n      table: tableName,\n      where: this.getWhereConditions(where, null, model, options),\n      limit: options.limit ? ' LIMIT ' + this.escape(options.limit) : ''\n    };\n\n    if (options.limit) {\n      if (!model) {\n        throw new Error('Cannot LIMIT delete without a model.');\n      }\n\n      const pks = _.map(_.values(model.primaryKeys), pk => this.quoteIdentifier(pk.field)).join(',');\n\n      replacements.primaryKeys = model.primaryKeyAttributes.length > 1 ? '(' + pks + ')' : pks;\n      replacements.primaryKeysSelection = pks;\n\n      query = 'DELETE FROM <%= table %> WHERE <%= primaryKeys %> IN (SELECT <%= primaryKeysSelection %> FROM <%= table %><%= where %><%= limit %>)';\n    } else {\n      query = 'DELETE FROM <%= table %><%= where %>';\n    }\n\n    if (replacements.where) {\n      replacements.where = ' WHERE ' + replacements.where;\n    }\n\n    return _.template(query, this._templateSettings)(replacements);\n  },\n\n  showIndexesQuery(tableName) {\n    let schemaJoin = '';\n    let schemaWhere = '';\n    if (!_.isString(tableName)) {\n      schemaJoin = ', pg_namespace s';\n      schemaWhere = ` AND s.oid = t.relnamespace AND s.nspname = '${tableName.schema}'`;\n      tableName = tableName.tableName;\n    }\n\n    // This is ARCANE!\n    return 'SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, ' +\n      'array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) ' +\n      `AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a${schemaJoin} ` +\n      'WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND ' +\n      `t.relkind = 'r' and t.relname = '${tableName}'${schemaWhere} ` +\n      'GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;';\n  },\n\n  showConstraintsQuery(tableName) {\n    //Postgres converts camelCased alias to lowercase unless quoted\n    return [\n      'SELECT constraint_catalog AS \"constraintCatalog\",',\n      'constraint_schema AS \"constraintSchema\",',\n      'constraint_name AS \"constraintName\",',\n      'table_catalog AS \"tableCatalog\",',\n      'table_schema AS \"tableSchema\",',\n      'table_name AS \"tableName\",',\n      'constraint_type AS \"constraintType\",',\n      'is_deferrable AS \"isDeferrable\",',\n      'initially_deferred AS \"initiallyDeferred\"',\n      'from INFORMATION_SCHEMA.table_constraints',\n      `WHERE table_name='${tableName}';`\n    ].join(' ');\n  },\n\n  removeIndexQuery(tableName, indexNameOrAttributes) {\n    let indexName = indexNameOrAttributes;\n\n    if (typeof indexName !== 'string') {\n      indexName = Utils.underscore(tableName + '_' + indexNameOrAttributes.join('_'));\n    }\n\n    return `DROP INDEX IF EXISTS ${this.quoteIdentifiers(indexName)}`;\n  },\n\n  addLimitAndOffset(options) {\n    let fragment = '';\n    /* eslint-disable */\n    if (options.limit != null) {\n      fragment += ' LIMIT ' + this.escape(options.limit);\n    }\n    if (options.offset != null) {\n      fragment += ' OFFSET ' + this.escape(options.offset);\n    }\n    /* eslint-enable */\n\n    return fragment;\n  },\n\n  attributeToSQL(attribute) {\n    if (!_.isPlainObject(attribute)) {\n      attribute = {\n        type: attribute\n      };\n    }\n\n    let type;\n    if (\n      attribute.type instanceof DataTypes.ENUM ||\n      (attribute.type instanceof DataTypes.ARRAY && attribute.type.type instanceof DataTypes.ENUM)\n    ) {\n      const enumType = attribute.type.type || attribute.type;\n      let values = attribute.values;\n\n      if (enumType.values && !attribute.values) {\n        values = enumType.values;\n      }\n\n      if (Array.isArray(values) && values.length > 0) {\n        type = 'ENUM(' + _.map(values, value => this.escape(value)).join(', ') + ')';\n\n        if (attribute.type instanceof DataTypes.ARRAY) {\n          type += '[]';\n        }\n\n      } else {\n        throw new Error(\"Values for ENUM haven't been defined.\");\n      }\n    }\n\n    if (!type) {\n      type = attribute.type;\n    }\n\n    let sql = type + '';\n\n    if (attribute.hasOwnProperty('allowNull') && !attribute.allowNull) {\n      sql += ' NOT NULL';\n    }\n\n    if (attribute.autoIncrement) {\n      sql += ' SERIAL';\n    }\n\n    if (Utils.defaultValueSchemable(attribute.defaultValue)) {\n      sql += ' DEFAULT ' + this.escape(attribute.defaultValue, attribute);\n    }\n\n    if (attribute.unique === true) {\n      sql += ' UNIQUE';\n    }\n\n    if (attribute.primaryKey) {\n      sql += ' PRIMARY KEY';\n    }\n\n    if (attribute.references) {\n      const referencesTable = this.quoteTable(attribute.references.model);\n      let referencesKey;\n\n      if (attribute.references.key) {\n        referencesKey = this.quoteIdentifiers(attribute.references.key);\n      } else {\n        referencesKey = this.quoteIdentifier('id');\n      }\n\n      sql += ` REFERENCES ${referencesTable} (${referencesKey})`;\n\n      if (attribute.onDelete) {\n        sql += ' ON DELETE ' + attribute.onDelete.toUpperCase();\n      }\n\n      if (attribute.onUpdate) {\n        sql += ' ON UPDATE ' + attribute.onUpdate.toUpperCase();\n      }\n\n      if (attribute.references.deferrable) {\n        sql += ' ' + attribute.references.deferrable.toString(this);\n      }\n    }\n\n    return sql;\n  },\n\n  deferConstraintsQuery(options) {\n    return options.deferrable.toString(this);\n  },\n\n  setConstraintQuery(columns, type) {\n    let columnFragment = 'ALL';\n\n    if (columns) {\n      columnFragment = columns.map(column => this.quoteIdentifier(column)).join(', ');\n    }\n\n    return 'SET CONSTRAINTS ' + columnFragment + ' ' + type;\n  },\n\n  setDeferredQuery(columns) {\n    return this.setConstraintQuery(columns, 'DEFERRED');\n  },\n\n  setImmediateQuery(columns) {\n    return this.setConstraintQuery(columns, 'IMMEDIATE');\n  },\n\n  attributesToSQL(attributes, options) {\n    const result = {};\n\n    for (const key in attributes) {\n      const attribute = attributes[key];\n      result[attribute.field || key] = this.attributeToSQL(attribute, options);\n    }\n\n    return result;\n  },\n\n  createTrigger(tableName, triggerName, eventType, fireOnSpec, functionName, functionParams, optionsArray) {\n\n    const decodedEventType = this.decodeTriggerEventType(eventType);\n    const eventSpec = this.expandTriggerEventSpec(fireOnSpec);\n    const expandedOptions = this.expandOptions(optionsArray);\n    const paramList = this.expandFunctionParamList(functionParams);\n\n    return `CREATE ${this.triggerEventTypeIsConstraint(eventType)}TRIGGER ${triggerName}\\n`\n      + `\\t${decodedEventType} ${eventSpec}\\n`\n      + `\\tON ${tableName}\\n`\n      + `\\t${expandedOptions}\\n`\n      + `\\tEXECUTE PROCEDURE ${functionName}(${paramList});`;\n  },\n\n  dropTrigger(tableName, triggerName) {\n    return `DROP TRIGGER ${triggerName} ON ${tableName} RESTRICT;`;\n  },\n\n  renameTrigger(tableName, oldTriggerName, newTriggerName) {\n    return `ALTER TRIGGER ${oldTriggerName} ON ${tableName} RENAME TO ${newTriggerName};`;\n  },\n\n  createFunction(functionName, params, returnType, language, body, options) {\n    if (!functionName || !returnType || !language || !body) throw new Error('createFunction missing some parameters. Did you pass functionName, returnType, language and body?');\n\n    const paramList = this.expandFunctionParamList(params);\n    const indentedBody = body.replace('\\n', '\\n\\t');\n    const expandedOptions = this.expandOptions(options);\n\n    return `CREATE FUNCTION ${functionName}(${paramList})\\n`\n      + `RETURNS ${returnType} AS $func$\\n`\n      + 'BEGIN\\n'\n      + `\\t${indentedBody}\\n`\n      + 'END;\\n'\n      + `$func$ language '${language}'${expandedOptions};`;\n  },\n\n  dropFunction(functionName, params) {\n    if (!functionName) throw new Error('requires functionName');\n    // RESTRICT is (currently, as of 9.2) default but we'll be explicit\n    const paramList = this.expandFunctionParamList(params);\n    return `DROP FUNCTION ${functionName}(${paramList}) RESTRICT;`;\n  },\n\n  renameFunction(oldFunctionName, params, newFunctionName) {\n    const paramList = this.expandFunctionParamList(params);\n    return `ALTER FUNCTION ${oldFunctionName}(${paramList}) RENAME TO ${newFunctionName};`;\n  },\n\n  databaseConnectionUri(config) {\n    let uri = config.protocol + '://' + config.user + ':' + config.password + '@' + config.host;\n    if (config.port) {\n      uri += ':' + config.port;\n    }\n    uri += '/' + config.database;\n    if (config.ssl) {\n      uri += '?ssl=' + config.ssl;\n    }\n    return uri;\n  },\n\n  pgEscapeAndQuote(val) {\n    return this.quoteIdentifier(Utils.removeTicks(this.escape(val), \"'\"));\n  },\n\n  expandFunctionParamList(params) {\n    if (_.isUndefined(params) || !_.isArray(params)) {\n      throw new Error('expandFunctionParamList: function parameters array required, including an empty one for no arguments');\n    }\n\n    const paramList = [];\n    _.each(params, curParam => {\n      const paramDef = [];\n      if (_.has(curParam, 'type')) {\n        if (_.has(curParam, 'direction')) { paramDef.push(curParam.direction); }\n        if (_.has(curParam, 'name')) { paramDef.push(curParam.name); }\n        paramDef.push(curParam.type);\n      } else {\n        throw new Error('function or trigger used with a parameter without any type');\n      }\n\n      const joined = paramDef.join(' ');\n      if (joined) paramList.push(joined);\n\n    });\n\n    return paramList.join(', ');\n  },\n\n  expandOptions(options) {\n    return _.isUndefined(options) || _.isEmpty(options) ?\n      '' : '\\n\\t' + options.join('\\n\\t');\n  },\n\n  decodeTriggerEventType(eventSpecifier) {\n    const EVENT_DECODER = {\n      'after': 'AFTER',\n      'before': 'BEFORE',\n      'instead_of': 'INSTEAD OF',\n      'after_constraint': 'AFTER'\n    };\n\n    if (!_.has(EVENT_DECODER, eventSpecifier)) {\n      throw new Error('Invalid trigger event specified: ' + eventSpecifier);\n    }\n\n    return EVENT_DECODER[eventSpecifier];\n  },\n\n  triggerEventTypeIsConstraint(eventSpecifier) {\n    return eventSpecifier === 'after_constraint' ? 'CONSTRAINT ' : '';\n  },\n\n  expandTriggerEventSpec(fireOnSpec) {\n    if (_.isEmpty(fireOnSpec)) {\n      throw new Error('no table change events specified to trigger on');\n    }\n\n    return _.map(fireOnSpec, (fireValue, fireKey) => {\n      const EVENT_MAP = {\n        'insert': 'INSERT',\n        'update': 'UPDATE',\n        'delete': 'DELETE',\n        'truncate': 'TRUNCATE'\n      };\n\n      if (!_.has(EVENT_MAP, fireValue)) {\n        throw new Error('parseTriggerEventSpec: undefined trigger event ' + fireKey);\n      }\n\n      let eventSpec = EVENT_MAP[fireValue];\n      if (eventSpec === 'UPDATE') {\n        if (_.isArray(fireValue) && fireValue.length > 0) {\n          eventSpec += ' OF ' + fireValue.join(', ');\n        }\n      }\n\n      return eventSpec;\n    }).join(' OR ');\n  },\n\n  pgEnumName(tableName, attr, options) {\n    options = options || {};\n\n    const tableDetails = this.extractTableDetails(tableName, options);\n    let enumName = Utils.addTicks(Utils.generateEnumName(tableDetails.tableName, attr), '\"');\n\n    // pgListEnums requires the enum name only, without the schema\n    if (options.schema !== false && tableDetails.schema) {\n      enumName = this.quoteIdentifier(tableDetails.schema) + tableDetails.delimiter + enumName;\n    }\n\n    return enumName;\n  },\n\n  pgListEnums(tableName, attrName, options) {\n    let enumName = '';\n    const tableDetails = this.extractTableDetails(tableName, options);\n\n    if (tableDetails.tableName && attrName) {\n      enumName = ' AND t.typname=' + this.pgEnumName(tableDetails.tableName, attrName, { schema: false }).replace(/\"/g, \"'\");\n    }\n\n    return 'SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t ' +\n      'JOIN pg_enum e ON t.oid = e.enumtypid ' +\n      'JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace ' +\n      `WHERE n.nspname = '${tableDetails.schema}'${enumName} GROUP BY 1`;\n  },\n\n  pgEnum(tableName, attr, dataType, options) {\n    const enumName = this.pgEnumName(tableName, attr, options);\n    let values;\n\n    if (dataType.values) {\n      values = \"ENUM('\" + dataType.values.join(\"', '\") + \"')\";\n    } else {\n      values = dataType.toString().match(/^ENUM\\(.+\\)/)[0];\n    }\n\n    let sql = 'CREATE TYPE ' + enumName + ' AS ' + values + ';';\n    if (!!options && options.force === true) {\n      sql = this.pgEnumDrop(tableName, attr) + sql;\n    }\n    return sql;\n  },\n\n  pgEnumAdd(tableName, attr, value, options) {\n    const enumName = this.pgEnumName(tableName, attr);\n    let sql = 'ALTER TYPE ' + enumName + ' ADD VALUE ';\n\n    if (semver.gte(this.sequelize.options.databaseVersion, '9.3.0')) {\n      sql += 'IF NOT EXISTS ';\n    }\n    sql += this.escape(value);\n\n    if (options.before) {\n      sql += ' BEFORE ' + this.escape(options.before);\n    } else if (options.after) {\n      sql += ' AFTER ' + this.escape(options.after);\n    }\n\n    return sql;\n  },\n\n  pgEnumDrop(tableName, attr, enumName) {\n    enumName = enumName || this.pgEnumName(tableName, attr);\n    return 'DROP TYPE IF EXISTS ' + enumName + '; ';\n  },\n\n  fromArray(text) {\n    text = text.replace(/^{/, '').replace(/}$/, '');\n    let matches = text.match(/(\"(?:\\\\.|[^\"\\\\\\\\])*\"|[^,]*)(?:\\s*,\\s*|\\s*$)/ig);\n\n    if (matches.length < 1) {\n      return [];\n    }\n\n    matches = matches.map(m => m.replace(/\",$/, '').replace(/,$/, '').replace(/(^\"|\"$)/, ''));\n\n    return matches.slice(0, -1);\n  },\n\n  padInt(i) {\n    return i < 10 ? '0' + i.toString() : i.toString();\n  },\n\n  dataTypeMapping(tableName, attr, dataType) {\n    if (_.includes(dataType, 'PRIMARY KEY')) {\n      dataType = dataType.replace(/PRIMARY KEY/, '');\n    }\n\n    if (_.includes(dataType, 'SERIAL')) {\n      if (_.includes(dataType, 'BIGINT')) {\n        dataType = dataType.replace(/SERIAL/, 'BIGSERIAL');\n        dataType = dataType.replace(/BIGINT/, '');\n      } else {\n        dataType = dataType.replace(/INTEGER/, '');\n      }\n      dataType = dataType.replace(/NOT NULL/, '');\n    }\n\n    if (dataType.match(/^ENUM\\(/)) {\n      dataType = dataType.replace(/^ENUM\\(.+\\)/, this.pgEnumName(tableName, attr));\n    }\n\n    return dataType;\n  },\n\n  quoteIdentifier(identifier, force) {\n    if (identifier === '*') return identifier;\n    if (!force && this.options && this.options.quoteIdentifiers === false && identifier.indexOf('.') === -1 && identifier.indexOf('->') === -1) { // default is `true`\n      // In Postgres, if tables or attributes are created double-quoted,\n      // they are also case sensitive. If they contain any uppercase\n      // characters, they must always be double-quoted. This makes it\n      // impossible to write queries in portable SQL if tables are created in\n      // this way. Hence, we strip quotes if we don't want case sensitivity.\n      return Utils.removeTicks(identifier, '\"');\n    } else {\n      return Utils.addTicks(Utils.removeTicks(identifier, '\"'), '\"');\n    }\n  },\n\n  /**\n   * Generates an SQL query that returns all foreign keys of a table.\n   *\n   * @param  {String} tableName  The name of the table.\n   * @return {String}            The generated sql query.\n   * @private\n   */\n  getForeignKeysQuery(tableName) {\n    return 'SELECT conname as constraint_name, pg_catalog.pg_get_constraintdef(r.oid, true) as condef FROM pg_catalog.pg_constraint r ' +\n      `WHERE r.conrelid = (SELECT oid FROM pg_class WHERE relname = '${tableName}' LIMIT 1) AND r.contype = 'f' ORDER BY 1;`;\n  },\n\n  /**\n   * Generates an SQL query that removes a foreign key from a table.\n   *\n   * @param  {String} tableName  The name of the table.\n   * @param  {String} foreignKey The name of the foreign key constraint.\n   * @return {String}            The generated sql query.\n   * @private\n   */\n  dropForeignKeyQuery(tableName, foreignKey) {\n    return 'ALTER TABLE ' + this.quoteTable(tableName) + ' DROP CONSTRAINT ' + this.quoteIdentifier(foreignKey) + ';';\n  },\n\n  setAutocommitQuery(value, options) {\n    if (options.parent) {\n      return;\n    }\n\n    // POSTGRES does not support setting AUTOCOMMIT = OFF as of 9.4.0\n    // Additionally it does not support AUTOCOMMIT at all starting at v9.5\n    // The assumption is that it won't be returning in future versions either\n    // If you are on a Pg version that is not semver compliant e.g. '9.5.0beta2', which fails due to the 'beta' qualification, then you need to pass\n    // the database version as \"9.5.0\" explicitly through the options param passed when creating the Sequelize instance under the key \"databaseVersion\"\n    // otherwise Pg version \"9.4.0\" is assumed by default as per Sequelize 3.14.2.\n    // For Pg versions that are semver compliant, this is auto-detected upon the first connection.\n    if (!value || semver.gte(this.sequelize.options.databaseVersion, '9.4.0')) {\n      return;\n    }\n\n    return AbstractQueryGenerator.setAutocommitQuery.call(this, value, options);\n  }\n};\n\nmodule.exports = QueryGenerator;\n","map":{"mappings":[{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":371,"column":0},"generated":{"line":371,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":372,"column":0},"generated":{"line":372,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":373,"column":0},"generated":{"line":373,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":374,"column":0},"generated":{"line":374,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":375,"column":0},"generated":{"line":375,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":376,"column":0},"generated":{"line":376,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":377,"column":0},"generated":{"line":377,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":378,"column":0},"generated":{"line":378,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":379,"column":0},"generated":{"line":379,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":380,"column":0},"generated":{"line":380,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":381,"column":0},"generated":{"line":381,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":382,"column":0},"generated":{"line":382,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":383,"column":0},"generated":{"line":383,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":384,"column":0},"generated":{"line":384,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":385,"column":0},"generated":{"line":385,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":386,"column":0},"generated":{"line":386,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":387,"column":0},"generated":{"line":387,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":388,"column":0},"generated":{"line":388,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":389,"column":0},"generated":{"line":389,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":390,"column":0},"generated":{"line":390,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":391,"column":0},"generated":{"line":391,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":392,"column":0},"generated":{"line":392,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":393,"column":0},"generated":{"line":393,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":394,"column":0},"generated":{"line":394,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":395,"column":0},"generated":{"line":395,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":396,"column":0},"generated":{"line":396,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":397,"column":0},"generated":{"line":397,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":398,"column":0},"generated":{"line":398,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":399,"column":0},"generated":{"line":399,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":400,"column":0},"generated":{"line":400,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":401,"column":0},"generated":{"line":401,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":402,"column":0},"generated":{"line":402,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":403,"column":0},"generated":{"line":403,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":404,"column":0},"generated":{"line":404,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":405,"column":0},"generated":{"line":405,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":406,"column":0},"generated":{"line":406,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":407,"column":0},"generated":{"line":407,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":408,"column":0},"generated":{"line":408,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":409,"column":0},"generated":{"line":409,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":410,"column":0},"generated":{"line":410,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":411,"column":0},"generated":{"line":411,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":412,"column":0},"generated":{"line":412,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":413,"column":0},"generated":{"line":413,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":414,"column":0},"generated":{"line":414,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":415,"column":0},"generated":{"line":415,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":416,"column":0},"generated":{"line":416,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":417,"column":0},"generated":{"line":417,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":418,"column":0},"generated":{"line":418,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":419,"column":0},"generated":{"line":419,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":420,"column":0},"generated":{"line":420,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":421,"column":0},"generated":{"line":421,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":422,"column":0},"generated":{"line":422,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":423,"column":0},"generated":{"line":423,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":424,"column":0},"generated":{"line":424,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":425,"column":0},"generated":{"line":425,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":426,"column":0},"generated":{"line":426,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":427,"column":0},"generated":{"line":427,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":428,"column":0},"generated":{"line":428,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":429,"column":0},"generated":{"line":429,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":430,"column":0},"generated":{"line":430,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":431,"column":0},"generated":{"line":431,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":432,"column":0},"generated":{"line":432,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":433,"column":0},"generated":{"line":433,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":434,"column":0},"generated":{"line":434,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":435,"column":0},"generated":{"line":435,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":436,"column":0},"generated":{"line":436,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":437,"column":0},"generated":{"line":437,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":438,"column":0},"generated":{"line":438,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":439,"column":0},"generated":{"line":439,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":440,"column":0},"generated":{"line":440,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":441,"column":0},"generated":{"line":441,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":442,"column":0},"generated":{"line":442,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":443,"column":0},"generated":{"line":443,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":444,"column":0},"generated":{"line":444,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":445,"column":0},"generated":{"line":445,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":446,"column":0},"generated":{"line":446,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":447,"column":0},"generated":{"line":447,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":448,"column":0},"generated":{"line":448,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":449,"column":0},"generated":{"line":449,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":450,"column":0},"generated":{"line":450,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":451,"column":0},"generated":{"line":451,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":452,"column":0},"generated":{"line":452,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":453,"column":0},"generated":{"line":453,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":454,"column":0},"generated":{"line":454,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":455,"column":0},"generated":{"line":455,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":456,"column":0},"generated":{"line":456,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":457,"column":0},"generated":{"line":457,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":458,"column":0},"generated":{"line":458,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":459,"column":0},"generated":{"line":459,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":460,"column":0},"generated":{"line":460,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":461,"column":0},"generated":{"line":461,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":462,"column":0},"generated":{"line":462,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":463,"column":0},"generated":{"line":463,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":464,"column":0},"generated":{"line":464,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":465,"column":0},"generated":{"line":465,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":466,"column":0},"generated":{"line":466,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":467,"column":0},"generated":{"line":467,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":468,"column":0},"generated":{"line":468,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":469,"column":0},"generated":{"line":469,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":470,"column":0},"generated":{"line":470,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":471,"column":0},"generated":{"line":471,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":472,"column":0},"generated":{"line":472,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":473,"column":0},"generated":{"line":473,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":474,"column":0},"generated":{"line":474,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":475,"column":0},"generated":{"line":475,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":476,"column":0},"generated":{"line":476,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":477,"column":0},"generated":{"line":477,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":478,"column":0},"generated":{"line":478,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":479,"column":0},"generated":{"line":479,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":480,"column":0},"generated":{"line":480,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":481,"column":0},"generated":{"line":481,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":482,"column":0},"generated":{"line":482,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":483,"column":0},"generated":{"line":483,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":484,"column":0},"generated":{"line":484,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":485,"column":0},"generated":{"line":485,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":486,"column":0},"generated":{"line":486,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":487,"column":0},"generated":{"line":487,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":488,"column":0},"generated":{"line":488,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":489,"column":0},"generated":{"line":489,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":490,"column":0},"generated":{"line":490,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":491,"column":0},"generated":{"line":491,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":492,"column":0},"generated":{"line":492,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":493,"column":0},"generated":{"line":493,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":494,"column":0},"generated":{"line":494,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":495,"column":0},"generated":{"line":495,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":496,"column":0},"generated":{"line":496,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":497,"column":0},"generated":{"line":497,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":498,"column":0},"generated":{"line":498,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":499,"column":0},"generated":{"line":499,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":500,"column":0},"generated":{"line":500,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":501,"column":0},"generated":{"line":501,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":502,"column":0},"generated":{"line":502,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":503,"column":0},"generated":{"line":503,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":504,"column":0},"generated":{"line":504,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":505,"column":0},"generated":{"line":505,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":506,"column":0},"generated":{"line":506,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":507,"column":0},"generated":{"line":507,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":508,"column":0},"generated":{"line":508,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":509,"column":0},"generated":{"line":509,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":510,"column":0},"generated":{"line":510,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":511,"column":0},"generated":{"line":511,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":512,"column":0},"generated":{"line":512,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":513,"column":0},"generated":{"line":513,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":514,"column":0},"generated":{"line":514,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":515,"column":0},"generated":{"line":515,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":516,"column":0},"generated":{"line":516,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":517,"column":0},"generated":{"line":517,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":518,"column":0},"generated":{"line":518,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":519,"column":0},"generated":{"line":519,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":520,"column":0},"generated":{"line":520,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":521,"column":0},"generated":{"line":521,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":522,"column":0},"generated":{"line":522,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":523,"column":0},"generated":{"line":523,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":524,"column":0},"generated":{"line":524,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":525,"column":0},"generated":{"line":525,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":526,"column":0},"generated":{"line":526,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":527,"column":0},"generated":{"line":527,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":528,"column":0},"generated":{"line":528,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":529,"column":0},"generated":{"line":529,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":530,"column":0},"generated":{"line":530,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":531,"column":0},"generated":{"line":531,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":532,"column":0},"generated":{"line":532,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":533,"column":0},"generated":{"line":533,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":534,"column":0},"generated":{"line":534,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":535,"column":0},"generated":{"line":535,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":536,"column":0},"generated":{"line":536,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":537,"column":0},"generated":{"line":537,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":538,"column":0},"generated":{"line":538,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":539,"column":0},"generated":{"line":539,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":540,"column":0},"generated":{"line":540,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":541,"column":0},"generated":{"line":541,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":542,"column":0},"generated":{"line":542,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":543,"column":0},"generated":{"line":543,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":544,"column":0},"generated":{"line":544,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":545,"column":0},"generated":{"line":545,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":546,"column":0},"generated":{"line":546,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":547,"column":0},"generated":{"line":547,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":548,"column":0},"generated":{"line":548,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":549,"column":0},"generated":{"line":549,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":550,"column":0},"generated":{"line":550,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":551,"column":0},"generated":{"line":551,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":552,"column":0},"generated":{"line":552,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":553,"column":0},"generated":{"line":553,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":554,"column":0},"generated":{"line":554,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":555,"column":0},"generated":{"line":555,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":556,"column":0},"generated":{"line":556,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":557,"column":0},"generated":{"line":557,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":558,"column":0},"generated":{"line":558,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":559,"column":0},"generated":{"line":559,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":560,"column":0},"generated":{"line":560,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":561,"column":0},"generated":{"line":561,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":562,"column":0},"generated":{"line":562,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":563,"column":0},"generated":{"line":563,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":564,"column":0},"generated":{"line":564,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":565,"column":0},"generated":{"line":565,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":566,"column":0},"generated":{"line":566,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":567,"column":0},"generated":{"line":567,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":568,"column":0},"generated":{"line":568,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":569,"column":0},"generated":{"line":569,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":570,"column":0},"generated":{"line":570,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":571,"column":0},"generated":{"line":571,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":572,"column":0},"generated":{"line":572,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":573,"column":0},"generated":{"line":573,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":574,"column":0},"generated":{"line":574,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":575,"column":0},"generated":{"line":575,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":576,"column":0},"generated":{"line":576,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":577,"column":0},"generated":{"line":577,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":578,"column":0},"generated":{"line":578,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":579,"column":0},"generated":{"line":579,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":580,"column":0},"generated":{"line":580,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":581,"column":0},"generated":{"line":581,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":582,"column":0},"generated":{"line":582,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":583,"column":0},"generated":{"line":583,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":584,"column":0},"generated":{"line":584,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":585,"column":0},"generated":{"line":585,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":586,"column":0},"generated":{"line":586,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":587,"column":0},"generated":{"line":587,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":588,"column":0},"generated":{"line":588,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":589,"column":0},"generated":{"line":589,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":590,"column":0},"generated":{"line":590,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":591,"column":0},"generated":{"line":591,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":592,"column":0},"generated":{"line":592,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":593,"column":0},"generated":{"line":593,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":594,"column":0},"generated":{"line":594,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":595,"column":0},"generated":{"line":595,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":596,"column":0},"generated":{"line":596,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":597,"column":0},"generated":{"line":597,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":598,"column":0},"generated":{"line":598,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":599,"column":0},"generated":{"line":599,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":600,"column":0},"generated":{"line":600,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":601,"column":0},"generated":{"line":601,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":602,"column":0},"generated":{"line":602,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":603,"column":0},"generated":{"line":603,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":604,"column":0},"generated":{"line":604,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":605,"column":0},"generated":{"line":605,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":606,"column":0},"generated":{"line":606,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":607,"column":0},"generated":{"line":607,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":608,"column":0},"generated":{"line":608,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":609,"column":0},"generated":{"line":609,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":610,"column":0},"generated":{"line":610,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":611,"column":0},"generated":{"line":611,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":612,"column":0},"generated":{"line":612,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":613,"column":0},"generated":{"line":613,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":614,"column":0},"generated":{"line":614,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":615,"column":0},"generated":{"line":615,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":616,"column":0},"generated":{"line":616,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":617,"column":0},"generated":{"line":617,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":618,"column":0},"generated":{"line":618,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":619,"column":0},"generated":{"line":619,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":620,"column":0},"generated":{"line":620,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":621,"column":0},"generated":{"line":621,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":622,"column":0},"generated":{"line":622,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":623,"column":0},"generated":{"line":623,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":624,"column":0},"generated":{"line":624,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":625,"column":0},"generated":{"line":625,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":626,"column":0},"generated":{"line":626,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":627,"column":0},"generated":{"line":627,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":628,"column":0},"generated":{"line":628,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":629,"column":0},"generated":{"line":629,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":630,"column":0},"generated":{"line":630,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":631,"column":0},"generated":{"line":631,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":632,"column":0},"generated":{"line":632,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":633,"column":0},"generated":{"line":633,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":634,"column":0},"generated":{"line":634,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":635,"column":0},"generated":{"line":635,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":636,"column":0},"generated":{"line":636,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":637,"column":0},"generated":{"line":637,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":638,"column":0},"generated":{"line":638,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":639,"column":0},"generated":{"line":639,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":640,"column":0},"generated":{"line":640,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":641,"column":0},"generated":{"line":641,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":642,"column":0},"generated":{"line":642,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":643,"column":0},"generated":{"line":643,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":644,"column":0},"generated":{"line":644,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":645,"column":0},"generated":{"line":645,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":646,"column":0},"generated":{"line":646,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":647,"column":0},"generated":{"line":647,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":648,"column":0},"generated":{"line":648,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":649,"column":0},"generated":{"line":649,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":650,"column":0},"generated":{"line":650,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":651,"column":0},"generated":{"line":651,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":652,"column":0},"generated":{"line":652,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":653,"column":0},"generated":{"line":653,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":654,"column":0},"generated":{"line":654,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":655,"column":0},"generated":{"line":655,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":656,"column":0},"generated":{"line":656,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":657,"column":0},"generated":{"line":657,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":658,"column":0},"generated":{"line":658,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":659,"column":0},"generated":{"line":659,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":660,"column":0},"generated":{"line":660,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":661,"column":0},"generated":{"line":661,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":662,"column":0},"generated":{"line":662,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":663,"column":0},"generated":{"line":663,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":664,"column":0},"generated":{"line":664,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":665,"column":0},"generated":{"line":665,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":666,"column":0},"generated":{"line":666,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":667,"column":0},"generated":{"line":667,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":668,"column":0},"generated":{"line":668,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":669,"column":0},"generated":{"line":669,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":670,"column":0},"generated":{"line":670,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":671,"column":0},"generated":{"line":671,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":672,"column":0},"generated":{"line":672,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":673,"column":0},"generated":{"line":673,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":674,"column":0},"generated":{"line":674,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":675,"column":0},"generated":{"line":675,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":676,"column":0},"generated":{"line":676,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":677,"column":0},"generated":{"line":677,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":678,"column":0},"generated":{"line":678,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":679,"column":0},"generated":{"line":679,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":680,"column":0},"generated":{"line":680,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":681,"column":0},"generated":{"line":681,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":682,"column":0},"generated":{"line":682,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":683,"column":0},"generated":{"line":683,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":684,"column":0},"generated":{"line":684,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":685,"column":0},"generated":{"line":685,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":686,"column":0},"generated":{"line":686,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":687,"column":0},"generated":{"line":687,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":688,"column":0},"generated":{"line":688,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":689,"column":0},"generated":{"line":689,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":690,"column":0},"generated":{"line":690,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":691,"column":0},"generated":{"line":691,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":692,"column":0},"generated":{"line":692,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":693,"column":0},"generated":{"line":693,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":694,"column":0},"generated":{"line":694,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":695,"column":0},"generated":{"line":695,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":696,"column":0},"generated":{"line":696,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":697,"column":0},"generated":{"line":697,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":698,"column":0},"generated":{"line":698,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":699,"column":0},"generated":{"line":699,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":700,"column":0},"generated":{"line":700,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":701,"column":0},"generated":{"line":701,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":702,"column":0},"generated":{"line":702,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":703,"column":0},"generated":{"line":703,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":704,"column":0},"generated":{"line":704,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":705,"column":0},"generated":{"line":705,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":706,"column":0},"generated":{"line":706,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":707,"column":0},"generated":{"line":707,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":708,"column":0},"generated":{"line":708,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":709,"column":0},"generated":{"line":709,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":710,"column":0},"generated":{"line":710,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":711,"column":0},"generated":{"line":711,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":712,"column":0},"generated":{"line":712,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":713,"column":0},"generated":{"line":713,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":714,"column":0},"generated":{"line":714,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":715,"column":0},"generated":{"line":715,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":716,"column":0},"generated":{"line":716,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":717,"column":0},"generated":{"line":717,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":718,"column":0},"generated":{"line":718,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":719,"column":0},"generated":{"line":719,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":720,"column":0},"generated":{"line":720,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":721,"column":0},"generated":{"line":721,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":722,"column":0},"generated":{"line":722,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":723,"column":0},"generated":{"line":723,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":724,"column":0},"generated":{"line":724,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":725,"column":0},"generated":{"line":725,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":726,"column":0},"generated":{"line":726,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":727,"column":0},"generated":{"line":727,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":728,"column":0},"generated":{"line":728,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":729,"column":0},"generated":{"line":729,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":730,"column":0},"generated":{"line":730,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":731,"column":0},"generated":{"line":731,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":732,"column":0},"generated":{"line":732,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":733,"column":0},"generated":{"line":733,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":734,"column":0},"generated":{"line":734,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":735,"column":0},"generated":{"line":735,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":736,"column":0},"generated":{"line":736,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":737,"column":0},"generated":{"line":737,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":738,"column":0},"generated":{"line":738,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":739,"column":0},"generated":{"line":739,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":740,"column":0},"generated":{"line":740,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":741,"column":0},"generated":{"line":741,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":742,"column":0},"generated":{"line":742,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":743,"column":0},"generated":{"line":743,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":744,"column":0},"generated":{"line":744,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":745,"column":0},"generated":{"line":745,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":746,"column":0},"generated":{"line":746,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":747,"column":0},"generated":{"line":747,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":748,"column":0},"generated":{"line":748,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":749,"column":0},"generated":{"line":749,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":750,"column":0},"generated":{"line":750,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":751,"column":0},"generated":{"line":751,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":752,"column":0},"generated":{"line":752,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":753,"column":0},"generated":{"line":753,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":754,"column":0},"generated":{"line":754,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":755,"column":0},"generated":{"line":755,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":756,"column":0},"generated":{"line":756,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":757,"column":0},"generated":{"line":757,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":758,"column":0},"generated":{"line":758,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":759,"column":0},"generated":{"line":759,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":760,"column":0},"generated":{"line":760,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":761,"column":0},"generated":{"line":761,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":762,"column":0},"generated":{"line":762,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":763,"column":0},"generated":{"line":763,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":764,"column":0},"generated":{"line":764,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":765,"column":0},"generated":{"line":765,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":766,"column":0},"generated":{"line":766,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":767,"column":0},"generated":{"line":767,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":768,"column":0},"generated":{"line":768,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":769,"column":0},"generated":{"line":769,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":770,"column":0},"generated":{"line":770,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":771,"column":0},"generated":{"line":771,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":772,"column":0},"generated":{"line":772,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":773,"column":0},"generated":{"line":773,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":774,"column":0},"generated":{"line":774,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":775,"column":0},"generated":{"line":775,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":776,"column":0},"generated":{"line":776,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":777,"column":0},"generated":{"line":777,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":778,"column":0},"generated":{"line":778,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":779,"column":0},"generated":{"line":779,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":780,"column":0},"generated":{"line":780,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":781,"column":0},"generated":{"line":781,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":782,"column":0},"generated":{"line":782,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":783,"column":0},"generated":{"line":783,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":784,"column":0},"generated":{"line":784,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":785,"column":0},"generated":{"line":785,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":786,"column":0},"generated":{"line":786,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":787,"column":0},"generated":{"line":787,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":788,"column":0},"generated":{"line":788,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":789,"column":0},"generated":{"line":789,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":790,"column":0},"generated":{"line":790,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":791,"column":0},"generated":{"line":791,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":792,"column":0},"generated":{"line":792,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":793,"column":0},"generated":{"line":793,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":794,"column":0},"generated":{"line":794,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":795,"column":0},"generated":{"line":795,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":796,"column":0},"generated":{"line":796,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":797,"column":0},"generated":{"line":797,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":798,"column":0},"generated":{"line":798,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":799,"column":0},"generated":{"line":799,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":800,"column":0},"generated":{"line":800,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":801,"column":0},"generated":{"line":801,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":802,"column":0},"generated":{"line":802,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":803,"column":0},"generated":{"line":803,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":804,"column":0},"generated":{"line":804,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":805,"column":0},"generated":{"line":805,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":806,"column":0},"generated":{"line":806,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":807,"column":0},"generated":{"line":807,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":808,"column":0},"generated":{"line":808,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":809,"column":0},"generated":{"line":809,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":810,"column":0},"generated":{"line":810,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":811,"column":0},"generated":{"line":811,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":812,"column":0},"generated":{"line":812,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":813,"column":0},"generated":{"line":813,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":814,"column":0},"generated":{"line":814,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":815,"column":0},"generated":{"line":815,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":816,"column":0},"generated":{"line":816,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":817,"column":0},"generated":{"line":817,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":818,"column":0},"generated":{"line":818,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":819,"column":0},"generated":{"line":819,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":820,"column":0},"generated":{"line":820,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":821,"column":0},"generated":{"line":821,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":822,"column":0},"generated":{"line":822,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":823,"column":0},"generated":{"line":823,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":824,"column":0},"generated":{"line":824,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":825,"column":0},"generated":{"line":825,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":826,"column":0},"generated":{"line":826,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":827,"column":0},"generated":{"line":827,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":828,"column":0},"generated":{"line":828,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":829,"column":0},"generated":{"line":829,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":830,"column":0},"generated":{"line":830,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":831,"column":0},"generated":{"line":831,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":832,"column":0},"generated":{"line":832,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":833,"column":0},"generated":{"line":833,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":834,"column":0},"generated":{"line":834,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":835,"column":0},"generated":{"line":835,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":836,"column":0},"generated":{"line":836,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":837,"column":0},"generated":{"line":837,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":838,"column":0},"generated":{"line":838,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":839,"column":0},"generated":{"line":839,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":840,"column":0},"generated":{"line":840,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":841,"column":0},"generated":{"line":841,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":842,"column":0},"generated":{"line":842,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":843,"column":0},"generated":{"line":843,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":844,"column":0},"generated":{"line":844,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":845,"column":0},"generated":{"line":845,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":846,"column":0},"generated":{"line":846,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":847,"column":0},"generated":{"line":847,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":848,"column":0},"generated":{"line":848,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":849,"column":0},"generated":{"line":849,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":850,"column":0},"generated":{"line":850,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":851,"column":0},"generated":{"line":851,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":852,"column":0},"generated":{"line":852,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":853,"column":0},"generated":{"line":853,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":854,"column":0},"generated":{"line":854,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":855,"column":0},"generated":{"line":855,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":856,"column":0},"generated":{"line":856,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":857,"column":0},"generated":{"line":857,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":858,"column":0},"generated":{"line":858,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":859,"column":0},"generated":{"line":859,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":860,"column":0},"generated":{"line":860,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":861,"column":0},"generated":{"line":861,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":862,"column":0},"generated":{"line":862,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":863,"column":0},"generated":{"line":863,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":864,"column":0},"generated":{"line":864,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":865,"column":0},"generated":{"line":865,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":866,"column":0},"generated":{"line":866,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":867,"column":0},"generated":{"line":867,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":868,"column":0},"generated":{"line":868,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":869,"column":0},"generated":{"line":869,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":870,"column":0},"generated":{"line":870,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":871,"column":0},"generated":{"line":871,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":872,"column":0},"generated":{"line":872,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":873,"column":0},"generated":{"line":873,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":874,"column":0},"generated":{"line":874,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":875,"column":0},"generated":{"line":875,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":876,"column":0},"generated":{"line":876,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":877,"column":0},"generated":{"line":877,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":878,"column":0},"generated":{"line":878,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":879,"column":0},"generated":{"line":879,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":880,"column":0},"generated":{"line":880,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":881,"column":0},"generated":{"line":881,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":882,"column":0},"generated":{"line":882,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":883,"column":0},"generated":{"line":883,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":884,"column":0},"generated":{"line":884,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":885,"column":0},"generated":{"line":885,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":886,"column":0},"generated":{"line":886,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":887,"column":0},"generated":{"line":887,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":888,"column":0},"generated":{"line":888,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":889,"column":0},"generated":{"line":889,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":890,"column":0},"generated":{"line":890,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":891,"column":0},"generated":{"line":891,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":892,"column":0},"generated":{"line":892,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":893,"column":0},"generated":{"line":893,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":894,"column":0},"generated":{"line":894,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":895,"column":0},"generated":{"line":895,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":896,"column":0},"generated":{"line":896,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":897,"column":0},"generated":{"line":897,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":898,"column":0},"generated":{"line":898,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":899,"column":0},"generated":{"line":899,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":900,"column":0},"generated":{"line":900,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":901,"column":0},"generated":{"line":901,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":902,"column":0},"generated":{"line":902,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":903,"column":0},"generated":{"line":903,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":904,"column":0},"generated":{"line":904,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":905,"column":0},"generated":{"line":905,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":906,"column":0},"generated":{"line":906,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":907,"column":0},"generated":{"line":907,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":908,"column":0},"generated":{"line":908,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":909,"column":0},"generated":{"line":909,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":910,"column":0},"generated":{"line":910,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":911,"column":0},"generated":{"line":911,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":912,"column":0},"generated":{"line":912,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":913,"column":0},"generated":{"line":913,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":914,"column":0},"generated":{"line":914,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":915,"column":0},"generated":{"line":915,"column":0}},{"source":"../node_modules/sequelize/lib/dialects/postgres/query-generator.js","original":{"line":916,"column":0},"generated":{"line":916,"column":0}}],"sources":{"../node_modules/sequelize/lib/dialects/postgres/query-generator.js":"'use strict';\n\nconst Utils = require('../../utils');\nconst util = require('util');\nconst DataTypes = require('../../data-types');\nconst AbstractQueryGenerator = require('../abstract/query-generator');\nconst semver = require('semver');\nconst _ = require('lodash');\n\nconst QueryGenerator = {\n  __proto__: AbstractQueryGenerator,\n  options: {},\n  dialect: 'postgres',\n\n  setSearchPath(searchPath) {\n    return `SET search_path to ${searchPath};`;\n  },\n\n  createSchema(schema) {\n    const databaseVersion = _.get(this, 'sequelize.options.databaseVersion', 0);\n\n    if (databaseVersion && semver.gte(databaseVersion, '9.2.0')) {\n      return `CREATE SCHEMA IF NOT EXISTS ${schema};`;\n    }\n\n    return `CREATE SCHEMA ${schema};`;\n  },\n\n  dropSchema(schema) {\n    return `DROP SCHEMA IF EXISTS ${schema} CASCADE;`;\n  },\n\n  showSchemasQuery() {\n    return \"SELECT schema_name FROM information_schema.schemata WHERE schema_name <> 'information_schema' AND schema_name != 'public' AND schema_name !~ E'^pg_';\";\n  },\n\n  versionQuery() {\n    return 'SHOW SERVER_VERSION';\n  },\n\n  createTableQuery(tableName, attributes, options) {\n\n    options = _.extend({\n    }, options || {});\n\n    //Postgres 9.0 does not support CREATE TABLE IF NOT EXISTS, 9.1 and above do\n    const databaseVersion = _.get(this, 'sequelize.options.databaseVersion', 0);\n    const attrStr = [];\n    let comments = '';\n\n    if (options.comment && _.isString(options.comment)) {\n      comments += '; COMMENT ON TABLE <%= table %> IS ' + this.escape(options.comment);\n    }\n\n    for (const attr in attributes) {\n      const i = attributes[attr].indexOf('COMMENT');\n      if (i !== -1) {\n        // Move comment to a separate query\n        comments += '; ' + attributes[attr].substring(i);\n        attributes[attr] = attributes[attr].substring(0, i);\n      }\n\n      const dataType = this.dataTypeMapping(tableName, attr, attributes[attr]);\n      attrStr.push(this.quoteIdentifier(attr) + ' ' + dataType);\n    }\n\n    const values = {\n      table: this.quoteTable(tableName),\n      attributes: attrStr.join(', '),\n      comments: _.template(comments, this._templateSettings)({ table: this.quoteTable(tableName) })\n    };\n\n    if (options.uniqueKeys) {\n      _.each(options.uniqueKeys, columns => {\n        if (!columns.singleField) { // If it's a single field it's handled in column def, not as an index\n          values.attributes += ', UNIQUE (' + columns.fields.map(f => this.quoteIdentifiers(f)).join(', ') + ')';\n        }\n      });\n    }\n\n    const pks = _.reduce(attributes, (acc, attribute, key) => {\n      if (_.includes(attribute, 'PRIMARY KEY')) {\n        acc.push(this.quoteIdentifier(key));\n      }\n      return acc;\n    }, []).join(',');\n\n    if (pks.length > 0) {\n      values.attributes += ', PRIMARY KEY (' + pks + ')';\n    }\n\n    return `CREATE TABLE ${databaseVersion === 0 || semver.gte(databaseVersion, '9.1.0') ? 'IF NOT EXISTS ' : ''}${values.table} (${values.attributes})${values.comments};`;\n  },\n\n  dropTableQuery(tableName, options) {\n    options = options || {};\n    return `DROP TABLE IF EXISTS ${this.quoteTable(tableName)}${options.cascade ? ' CASCADE' : ''};`;\n  },\n\n  showTablesQuery() {\n    return \"SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_type LIKE '%TABLE' AND table_name != 'spatial_ref_sys';\";\n  },\n\n  describeTableQuery(tableName, schema) {\n    if (!schema) {\n      schema = 'public';\n    }\n    return 'SELECT pk.constraint_type as \"Constraint\", c.column_name as \"Field\", ' +\n              'c.column_default as \"Default\", c.is_nullable as \"Null\", ' +\n              '(CASE WHEN c.udt_name = \\'hstore\\' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN \\'(\\' || c.character_maximum_length || \\')\\' ELSE \\'\\' END) as \"Type\", ' +\n              '(SELECT array_agg(e.enumlabel) ' +\n              'FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid ' +\n              'WHERE t.typname=c.udt_name) AS \"special\" ' +\n            'FROM information_schema.columns c ' +\n            'LEFT JOIN (SELECT tc.table_schema, tc.table_name, ' +\n              'cu.column_name, tc.constraint_type ' +\n              'FROM information_schema.TABLE_CONSTRAINTS tc ' +\n              'JOIN information_schema.KEY_COLUMN_USAGE  cu ' +\n              'ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name ' +\n                'and tc.constraint_name=cu.constraint_name ' +\n                'and tc.constraint_type=\\'PRIMARY KEY\\') pk ' +\n            'ON pk.table_schema=c.table_schema ' +\n            'AND pk.table_name=c.table_name ' +\n            'AND pk.column_name=c.column_name ' +\n      `WHERE c.table_name = ${this.escape(tableName)} AND c.table_schema = ${this.escape(schema)} `;\n  },\n\n  /**\n   * Check whether the statmement is json function or simple path\n   *\n   * @param   {String}  stmt  The statement to validate\n   * @returns {Boolean}       true if the given statement is json function\n   * @throws  {Error}         throw if the statement looks like json function but has invalid token\n   */\n  _checkValidJsonStatement(stmt) {\n    if (!_.isString(stmt)) {\n      return false;\n    }\n\n    // https://www.postgresql.org/docs/current/static/functions-json.html\n    const jsonFunctionRegex = /^\\s*((?:[a-z]+_){0,2}jsonb?(?:_[a-z]+){0,2})\\([^)]*\\)/i;\n    const jsonOperatorRegex = /^\\s*(->>?|#>>?|@>|<@|\\?[|&]?|\\|{2}|#-)/i;\n    const tokenCaptureRegex = /^\\s*((?:([`\"'])(?:(?!\\2).|\\2{2})*\\2)|[\\w\\d\\s]+|[().,;+-])/i;\n\n    let currentIndex = 0;\n    let openingBrackets = 0;\n    let closingBrackets = 0;\n    let hasJsonFunction = false;\n    let hasInvalidToken = false;\n\n    while (currentIndex < stmt.length) {\n      const string = stmt.substr(currentIndex);\n      const functionMatches = jsonFunctionRegex.exec(string);\n      if (functionMatches) {\n        currentIndex += functionMatches[0].indexOf('(');\n        hasJsonFunction = true;\n        continue;\n      }\n\n      const operatorMatches = jsonOperatorRegex.exec(string);\n      if (operatorMatches) {\n        currentIndex += operatorMatches[0].length;\n        hasJsonFunction = true;\n        continue;\n      }\n\n      const tokenMatches = tokenCaptureRegex.exec(string);\n      if (tokenMatches) {\n        const capturedToken = tokenMatches[1];\n        if (capturedToken === '(') {\n          openingBrackets++;\n        } else if (capturedToken === ')') {\n          closingBrackets++;\n        } else if (capturedToken === ';') {\n          hasInvalidToken = true;\n          break;\n        }\n        currentIndex += tokenMatches[0].length;\n        continue;\n      }\n\n      break;\n    }\n\n    // Check invalid json statement\n    hasInvalidToken |= openingBrackets !== closingBrackets;\n    if (hasJsonFunction && hasInvalidToken) {\n      throw new Error('Invalid json statement: ' + stmt);\n    }\n\n    // return true if the statement has valid json function\n    return hasJsonFunction;\n  },\n\n  /**\n   * Generates an SQL query that extract JSON property of given path.\n   *\n   * @param   {String}               column  The JSON column\n   * @param   {String|Array<String>} [path]  The path to extract (optional)\n   * @returns {String}                       The generated sql query\n   * @private\n   */\n  jsonPathExtractionQuery(column, path) {\n    const paths = _.toPath(path);\n    const pathStr = this.escape(`{${paths.join(',')}}`);\n    const quotedColumn = this.isIdentifierQuoted(column) ? column : this.quoteIdentifier(column);\n    return `(${quotedColumn}#>>${pathStr})`;\n  },\n\n  handleSequelizeMethod(smth, tableName, factory, options, prepend) {\n    if (smth instanceof Utils.Json) {\n      // Parse nested object\n      if (smth.conditions) {\n        const conditions = _.map(this.parseConditionObject(smth.conditions), condition =>\n          `${this.jsonPathExtractionQuery(_.first(condition.path), _.tail(condition.path))} = '${condition.value}'`\n        );\n\n        return conditions.join(' AND ');\n      } else if (smth.path) {\n        let str;\n\n        // Allow specifying conditions using the postgres json syntax\n        if (this._checkValidJsonStatement(smth.path)) {\n          str = smth.path;\n        } else {\n          // Also support json property accessors\n          const paths = _.toPath(smth.path);\n          const column = paths.shift();\n          str = this.jsonPathExtractionQuery(column, paths);\n        }\n\n        if (smth.value) {\n          str += util.format(' = %s', this.escape(smth.value));\n        }\n\n        return str;\n      }\n    }\n    return AbstractQueryGenerator.handleSequelizeMethod.call(this, smth, tableName, factory, options, prepend);\n  },\n\n  addColumnQuery(table, key, dataType) {\n\n    const dbDataType = this.attributeToSQL(dataType, { context: 'addColumn' });\n    const definition = this.dataTypeMapping(table, key, dbDataType);\n    const quotedKey = this.quoteIdentifier(key);\n    const quotedTable = this.quoteTable(this.extractTableDetails(table));\n\n    let query = `ALTER TABLE ${quotedTable} ADD COLUMN ${quotedKey} ${definition};`;\n\n    if (dataType.type && dataType.type instanceof DataTypes.ENUM || dataType instanceof DataTypes.ENUM) {\n      query = this.pgEnum(table, key, dataType) + query;\n    }\n\n    return query;\n  },\n\n  removeColumnQuery(tableName, attributeName) {\n    const quotedTableName = this.quoteTable(this.extractTableDetails(tableName));\n    const quotedAttributeName = this.quoteIdentifier(attributeName);\n    return `ALTER TABLE ${quotedTableName} DROP COLUMN ${quotedAttributeName};`;\n  },\n\n  changeColumnQuery(tableName, attributes) {\n    const query = 'ALTER TABLE <%= tableName %> ALTER COLUMN <%= query %>;';\n    const sql = [];\n\n    for (const attributeName in attributes) {\n      let definition = this.dataTypeMapping(tableName, attributeName, attributes[attributeName]);\n      let attrSql = '';\n\n      if (definition.indexOf('NOT NULL') > 0) {\n        attrSql += _.template(query, this._templateSettings)({\n          tableName: this.quoteTable(tableName),\n          query: this.quoteIdentifier(attributeName) + ' SET NOT NULL'\n        });\n\n        definition = definition.replace('NOT NULL', '').trim();\n      } else if (!definition.match(/REFERENCES/)) {\n        attrSql += _.template(query, this._templateSettings)({\n          tableName: this.quoteTable(tableName),\n          query: this.quoteIdentifier(attributeName) + ' DROP NOT NULL'\n        });\n      }\n\n      if (definition.indexOf('DEFAULT') > 0) {\n        attrSql += _.template(query, this._templateSettings)({\n          tableName: this.quoteTable(tableName),\n          query: this.quoteIdentifier(attributeName) + ' SET DEFAULT ' + definition.match(/DEFAULT ([^;]+)/)[1]\n        });\n\n        definition = definition.replace(/(DEFAULT[^;]+)/, '').trim();\n      } else if (!definition.match(/REFERENCES/)) {\n        attrSql += _.template(query, this._templateSettings)({\n          tableName: this.quoteTable(tableName),\n          query: this.quoteIdentifier(attributeName) + ' DROP DEFAULT'\n        });\n      }\n\n      if (attributes[attributeName].match(/^ENUM\\(/)) {\n        attrSql += this.pgEnum(tableName, attributeName, attributes[attributeName]);\n        definition = definition.replace(/^ENUM\\(.+\\)/, this.pgEnumName(tableName, attributeName, { schema: false }));\n        definition += ' USING (' + this.quoteIdentifier(attributeName) + '::' + this.pgEnumName(tableName, attributeName) + ')';\n      }\n\n      if (definition.match(/UNIQUE;*$/)) {\n        definition = definition.replace(/UNIQUE;*$/, '');\n\n        attrSql += _.template(query.replace('ALTER COLUMN', ''), this._templateSettings)({\n          tableName: this.quoteTable(tableName),\n          query: 'ADD CONSTRAINT ' + this.quoteIdentifier(attributeName + '_unique_idx') + ' UNIQUE (' + this.quoteIdentifier(attributeName) + ')'\n        });\n      }\n\n      if (definition.match(/REFERENCES/)) {\n        definition = definition.replace(/.+?(?=REFERENCES)/, '');\n        attrSql += _.template(query.replace('ALTER COLUMN', ''), this._templateSettings)({\n          tableName: this.quoteTable(tableName),\n          query: 'ADD CONSTRAINT ' + this.quoteIdentifier(attributeName + '_foreign_idx') + ' FOREIGN KEY (' + this.quoteIdentifier(attributeName) + ') ' + definition\n        });\n      } else {\n        attrSql += _.template(query, this._templateSettings)({\n          tableName: this.quoteTable(tableName),\n          query: this.quoteIdentifier(attributeName) + ' TYPE ' + definition\n        });\n      }\n\n      sql.push(attrSql);\n    }\n\n    return sql.join('');\n  },\n\n  renameColumnQuery(tableName, attrBefore, attributes) {\n\n    const attrString = [];\n\n    for (const attributeName in attributes) {\n      attrString.push(_.template('<%= before %> TO <%= after %>', this._templateSettings)({\n        before: this.quoteIdentifier(attrBefore),\n        after: this.quoteIdentifier(attributeName)\n      }));\n    }\n\n    return `ALTER TABLE ${this.quoteTable(tableName)} RENAME COLUMN ${attrString.join(', ')};`;\n  },\n\n  fn(fnName, tableName, body, returns, language) {\n    fnName = fnName || 'testfunc';\n    language = language || 'plpgsql';\n    returns = returns || 'SETOF ' + this.quoteTable(tableName);\n\n    return `CREATE OR REPLACE FUNCTION pg_temp.${fnName}() RETURNS ${returns} AS $func$ BEGIN ${body} END; $func$ LANGUAGE ${language}; SELECT * FROM pg_temp.${fnName}();`;\n  },\n\n  exceptionFn(fnName, tableName, main, then, when, returns, language) {\n    when = when || 'unique_violation';\n\n    const body = `${main} EXCEPTION WHEN ${when} THEN ${then};`;\n\n    return this.fn(fnName, tableName, body, returns, language);\n  },\n\n  upsertQuery(tableName, insertValues, updateValues, where, model, options) {\n    const insert = this.insertQuery(tableName, insertValues, model.rawAttributes, options);\n    const update = this.updateQuery(tableName, updateValues, where, options, model.rawAttributes);\n\n    // The numbers here are selected to match the number of affected rows returned by MySQL\n    return this.exceptionFn(\n      'sequelize_upsert',\n      tableName,\n      insert + ' RETURN 1;',\n      update + '; RETURN 2',\n      'unique_violation',\n      'integer'\n    );\n  },\n\n  deleteQuery(tableName, where, options, model) {\n    let query;\n\n    options = options || {};\n\n    tableName = this.quoteTable(tableName);\n\n    if (options.truncate === true) {\n      query = 'TRUNCATE ' + tableName;\n\n      if (options.restartIdentity) {\n        query += ' RESTART IDENTITY';\n      }\n\n      if (options.cascade) {\n        query += ' CASCADE';\n      }\n\n      return query;\n    }\n\n    if (_.isUndefined(options.limit)) {\n      options.limit = 1;\n    }\n\n    const replacements = {\n      table: tableName,\n      where: this.getWhereConditions(where, null, model, options),\n      limit: options.limit ? ' LIMIT ' + this.escape(options.limit) : ''\n    };\n\n    if (options.limit) {\n      if (!model) {\n        throw new Error('Cannot LIMIT delete without a model.');\n      }\n\n      const pks = _.map(_.values(model.primaryKeys), pk => this.quoteIdentifier(pk.field)).join(',');\n\n      replacements.primaryKeys = model.primaryKeyAttributes.length > 1 ? '(' + pks + ')' : pks;\n      replacements.primaryKeysSelection = pks;\n\n      query = 'DELETE FROM <%= table %> WHERE <%= primaryKeys %> IN (SELECT <%= primaryKeysSelection %> FROM <%= table %><%= where %><%= limit %>)';\n    } else {\n      query = 'DELETE FROM <%= table %><%= where %>';\n    }\n\n    if (replacements.where) {\n      replacements.where = ' WHERE ' + replacements.where;\n    }\n\n    return _.template(query, this._templateSettings)(replacements);\n  },\n\n  showIndexesQuery(tableName) {\n    let schemaJoin = '';\n    let schemaWhere = '';\n    if (!_.isString(tableName)) {\n      schemaJoin = ', pg_namespace s';\n      schemaWhere = ` AND s.oid = t.relnamespace AND s.nspname = '${tableName.schema}'`;\n      tableName = tableName.tableName;\n    }\n\n    // This is ARCANE!\n    return 'SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, ' +\n      'array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) ' +\n      `AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a${schemaJoin} ` +\n      'WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND ' +\n      `t.relkind = 'r' and t.relname = '${tableName}'${schemaWhere} ` +\n      'GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;';\n  },\n\n  showConstraintsQuery(tableName) {\n    //Postgres converts camelCased alias to lowercase unless quoted\n    return [\n      'SELECT constraint_catalog AS \"constraintCatalog\",',\n      'constraint_schema AS \"constraintSchema\",',\n      'constraint_name AS \"constraintName\",',\n      'table_catalog AS \"tableCatalog\",',\n      'table_schema AS \"tableSchema\",',\n      'table_name AS \"tableName\",',\n      'constraint_type AS \"constraintType\",',\n      'is_deferrable AS \"isDeferrable\",',\n      'initially_deferred AS \"initiallyDeferred\"',\n      'from INFORMATION_SCHEMA.table_constraints',\n      `WHERE table_name='${tableName}';`\n    ].join(' ');\n  },\n\n  removeIndexQuery(tableName, indexNameOrAttributes) {\n    let indexName = indexNameOrAttributes;\n\n    if (typeof indexName !== 'string') {\n      indexName = Utils.underscore(tableName + '_' + indexNameOrAttributes.join('_'));\n    }\n\n    return `DROP INDEX IF EXISTS ${this.quoteIdentifiers(indexName)}`;\n  },\n\n  addLimitAndOffset(options) {\n    let fragment = '';\n    /* eslint-disable */\n    if (options.limit != null) {\n      fragment += ' LIMIT ' + this.escape(options.limit);\n    }\n    if (options.offset != null) {\n      fragment += ' OFFSET ' + this.escape(options.offset);\n    }\n    /* eslint-enable */\n\n    return fragment;\n  },\n\n  attributeToSQL(attribute) {\n    if (!_.isPlainObject(attribute)) {\n      attribute = {\n        type: attribute\n      };\n    }\n\n    let type;\n    if (\n      attribute.type instanceof DataTypes.ENUM ||\n      (attribute.type instanceof DataTypes.ARRAY && attribute.type.type instanceof DataTypes.ENUM)\n    ) {\n      const enumType = attribute.type.type || attribute.type;\n      let values = attribute.values;\n\n      if (enumType.values && !attribute.values) {\n        values = enumType.values;\n      }\n\n      if (Array.isArray(values) && values.length > 0) {\n        type = 'ENUM(' + _.map(values, value => this.escape(value)).join(', ') + ')';\n\n        if (attribute.type instanceof DataTypes.ARRAY) {\n          type += '[]';\n        }\n\n      } else {\n        throw new Error(\"Values for ENUM haven't been defined.\");\n      }\n    }\n\n    if (!type) {\n      type = attribute.type;\n    }\n\n    let sql = type + '';\n\n    if (attribute.hasOwnProperty('allowNull') && !attribute.allowNull) {\n      sql += ' NOT NULL';\n    }\n\n    if (attribute.autoIncrement) {\n      sql += ' SERIAL';\n    }\n\n    if (Utils.defaultValueSchemable(attribute.defaultValue)) {\n      sql += ' DEFAULT ' + this.escape(attribute.defaultValue, attribute);\n    }\n\n    if (attribute.unique === true) {\n      sql += ' UNIQUE';\n    }\n\n    if (attribute.primaryKey) {\n      sql += ' PRIMARY KEY';\n    }\n\n    if (attribute.references) {\n      const referencesTable = this.quoteTable(attribute.references.model);\n      let referencesKey;\n\n      if (attribute.references.key) {\n        referencesKey = this.quoteIdentifiers(attribute.references.key);\n      } else {\n        referencesKey = this.quoteIdentifier('id');\n      }\n\n      sql += ` REFERENCES ${referencesTable} (${referencesKey})`;\n\n      if (attribute.onDelete) {\n        sql += ' ON DELETE ' + attribute.onDelete.toUpperCase();\n      }\n\n      if (attribute.onUpdate) {\n        sql += ' ON UPDATE ' + attribute.onUpdate.toUpperCase();\n      }\n\n      if (attribute.references.deferrable) {\n        sql += ' ' + attribute.references.deferrable.toString(this);\n      }\n    }\n\n    return sql;\n  },\n\n  deferConstraintsQuery(options) {\n    return options.deferrable.toString(this);\n  },\n\n  setConstraintQuery(columns, type) {\n    let columnFragment = 'ALL';\n\n    if (columns) {\n      columnFragment = columns.map(column => this.quoteIdentifier(column)).join(', ');\n    }\n\n    return 'SET CONSTRAINTS ' + columnFragment + ' ' + type;\n  },\n\n  setDeferredQuery(columns) {\n    return this.setConstraintQuery(columns, 'DEFERRED');\n  },\n\n  setImmediateQuery(columns) {\n    return this.setConstraintQuery(columns, 'IMMEDIATE');\n  },\n\n  attributesToSQL(attributes, options) {\n    const result = {};\n\n    for (const key in attributes) {\n      const attribute = attributes[key];\n      result[attribute.field || key] = this.attributeToSQL(attribute, options);\n    }\n\n    return result;\n  },\n\n  createTrigger(tableName, triggerName, eventType, fireOnSpec, functionName, functionParams, optionsArray) {\n\n    const decodedEventType = this.decodeTriggerEventType(eventType);\n    const eventSpec = this.expandTriggerEventSpec(fireOnSpec);\n    const expandedOptions = this.expandOptions(optionsArray);\n    const paramList = this.expandFunctionParamList(functionParams);\n\n    return `CREATE ${this.triggerEventTypeIsConstraint(eventType)}TRIGGER ${triggerName}\\n`\n      + `\\t${decodedEventType} ${eventSpec}\\n`\n      + `\\tON ${tableName}\\n`\n      + `\\t${expandedOptions}\\n`\n      + `\\tEXECUTE PROCEDURE ${functionName}(${paramList});`;\n  },\n\n  dropTrigger(tableName, triggerName) {\n    return `DROP TRIGGER ${triggerName} ON ${tableName} RESTRICT;`;\n  },\n\n  renameTrigger(tableName, oldTriggerName, newTriggerName) {\n    return `ALTER TRIGGER ${oldTriggerName} ON ${tableName} RENAME TO ${newTriggerName};`;\n  },\n\n  createFunction(functionName, params, returnType, language, body, options) {\n    if (!functionName || !returnType || !language || !body) throw new Error('createFunction missing some parameters. Did you pass functionName, returnType, language and body?');\n\n    const paramList = this.expandFunctionParamList(params);\n    const indentedBody = body.replace('\\n', '\\n\\t');\n    const expandedOptions = this.expandOptions(options);\n\n    return `CREATE FUNCTION ${functionName}(${paramList})\\n`\n      + `RETURNS ${returnType} AS $func$\\n`\n      + 'BEGIN\\n'\n      + `\\t${indentedBody}\\n`\n      + 'END;\\n'\n      + `$func$ language '${language}'${expandedOptions};`;\n  },\n\n  dropFunction(functionName, params) {\n    if (!functionName) throw new Error('requires functionName');\n    // RESTRICT is (currently, as of 9.2) default but we'll be explicit\n    const paramList = this.expandFunctionParamList(params);\n    return `DROP FUNCTION ${functionName}(${paramList}) RESTRICT;`;\n  },\n\n  renameFunction(oldFunctionName, params, newFunctionName) {\n    const paramList = this.expandFunctionParamList(params);\n    return `ALTER FUNCTION ${oldFunctionName}(${paramList}) RENAME TO ${newFunctionName};`;\n  },\n\n  databaseConnectionUri(config) {\n    let uri = config.protocol + '://' + config.user + ':' + config.password + '@' + config.host;\n    if (config.port) {\n      uri += ':' + config.port;\n    }\n    uri += '/' + config.database;\n    if (config.ssl) {\n      uri += '?ssl=' + config.ssl;\n    }\n    return uri;\n  },\n\n  pgEscapeAndQuote(val) {\n    return this.quoteIdentifier(Utils.removeTicks(this.escape(val), \"'\"));\n  },\n\n  expandFunctionParamList(params) {\n    if (_.isUndefined(params) || !_.isArray(params)) {\n      throw new Error('expandFunctionParamList: function parameters array required, including an empty one for no arguments');\n    }\n\n    const paramList = [];\n    _.each(params, curParam => {\n      const paramDef = [];\n      if (_.has(curParam, 'type')) {\n        if (_.has(curParam, 'direction')) { paramDef.push(curParam.direction); }\n        if (_.has(curParam, 'name')) { paramDef.push(curParam.name); }\n        paramDef.push(curParam.type);\n      } else {\n        throw new Error('function or trigger used with a parameter without any type');\n      }\n\n      const joined = paramDef.join(' ');\n      if (joined) paramList.push(joined);\n\n    });\n\n    return paramList.join(', ');\n  },\n\n  expandOptions(options) {\n    return _.isUndefined(options) || _.isEmpty(options) ?\n      '' : '\\n\\t' + options.join('\\n\\t');\n  },\n\n  decodeTriggerEventType(eventSpecifier) {\n    const EVENT_DECODER = {\n      'after': 'AFTER',\n      'before': 'BEFORE',\n      'instead_of': 'INSTEAD OF',\n      'after_constraint': 'AFTER'\n    };\n\n    if (!_.has(EVENT_DECODER, eventSpecifier)) {\n      throw new Error('Invalid trigger event specified: ' + eventSpecifier);\n    }\n\n    return EVENT_DECODER[eventSpecifier];\n  },\n\n  triggerEventTypeIsConstraint(eventSpecifier) {\n    return eventSpecifier === 'after_constraint' ? 'CONSTRAINT ' : '';\n  },\n\n  expandTriggerEventSpec(fireOnSpec) {\n    if (_.isEmpty(fireOnSpec)) {\n      throw new Error('no table change events specified to trigger on');\n    }\n\n    return _.map(fireOnSpec, (fireValue, fireKey) => {\n      const EVENT_MAP = {\n        'insert': 'INSERT',\n        'update': 'UPDATE',\n        'delete': 'DELETE',\n        'truncate': 'TRUNCATE'\n      };\n\n      if (!_.has(EVENT_MAP, fireValue)) {\n        throw new Error('parseTriggerEventSpec: undefined trigger event ' + fireKey);\n      }\n\n      let eventSpec = EVENT_MAP[fireValue];\n      if (eventSpec === 'UPDATE') {\n        if (_.isArray(fireValue) && fireValue.length > 0) {\n          eventSpec += ' OF ' + fireValue.join(', ');\n        }\n      }\n\n      return eventSpec;\n    }).join(' OR ');\n  },\n\n  pgEnumName(tableName, attr, options) {\n    options = options || {};\n\n    const tableDetails = this.extractTableDetails(tableName, options);\n    let enumName = Utils.addTicks(Utils.generateEnumName(tableDetails.tableName, attr), '\"');\n\n    // pgListEnums requires the enum name only, without the schema\n    if (options.schema !== false && tableDetails.schema) {\n      enumName = this.quoteIdentifier(tableDetails.schema) + tableDetails.delimiter + enumName;\n    }\n\n    return enumName;\n  },\n\n  pgListEnums(tableName, attrName, options) {\n    let enumName = '';\n    const tableDetails = this.extractTableDetails(tableName, options);\n\n    if (tableDetails.tableName && attrName) {\n      enumName = ' AND t.typname=' + this.pgEnumName(tableDetails.tableName, attrName, { schema: false }).replace(/\"/g, \"'\");\n    }\n\n    return 'SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t ' +\n      'JOIN pg_enum e ON t.oid = e.enumtypid ' +\n      'JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace ' +\n      `WHERE n.nspname = '${tableDetails.schema}'${enumName} GROUP BY 1`;\n  },\n\n  pgEnum(tableName, attr, dataType, options) {\n    const enumName = this.pgEnumName(tableName, attr, options);\n    let values;\n\n    if (dataType.values) {\n      values = \"ENUM('\" + dataType.values.join(\"', '\") + \"')\";\n    } else {\n      values = dataType.toString().match(/^ENUM\\(.+\\)/)[0];\n    }\n\n    let sql = 'CREATE TYPE ' + enumName + ' AS ' + values + ';';\n    if (!!options && options.force === true) {\n      sql = this.pgEnumDrop(tableName, attr) + sql;\n    }\n    return sql;\n  },\n\n  pgEnumAdd(tableName, attr, value, options) {\n    const enumName = this.pgEnumName(tableName, attr);\n    let sql = 'ALTER TYPE ' + enumName + ' ADD VALUE ';\n\n    if (semver.gte(this.sequelize.options.databaseVersion, '9.3.0')) {\n      sql += 'IF NOT EXISTS ';\n    }\n    sql += this.escape(value);\n\n    if (options.before) {\n      sql += ' BEFORE ' + this.escape(options.before);\n    } else if (options.after) {\n      sql += ' AFTER ' + this.escape(options.after);\n    }\n\n    return sql;\n  },\n\n  pgEnumDrop(tableName, attr, enumName) {\n    enumName = enumName || this.pgEnumName(tableName, attr);\n    return 'DROP TYPE IF EXISTS ' + enumName + '; ';\n  },\n\n  fromArray(text) {\n    text = text.replace(/^{/, '').replace(/}$/, '');\n    let matches = text.match(/(\"(?:\\\\.|[^\"\\\\\\\\])*\"|[^,]*)(?:\\s*,\\s*|\\s*$)/ig);\n\n    if (matches.length < 1) {\n      return [];\n    }\n\n    matches = matches.map(m => m.replace(/\",$/, '').replace(/,$/, '').replace(/(^\"|\"$)/, ''));\n\n    return matches.slice(0, -1);\n  },\n\n  padInt(i) {\n    return i < 10 ? '0' + i.toString() : i.toString();\n  },\n\n  dataTypeMapping(tableName, attr, dataType) {\n    if (_.includes(dataType, 'PRIMARY KEY')) {\n      dataType = dataType.replace(/PRIMARY KEY/, '');\n    }\n\n    if (_.includes(dataType, 'SERIAL')) {\n      if (_.includes(dataType, 'BIGINT')) {\n        dataType = dataType.replace(/SERIAL/, 'BIGSERIAL');\n        dataType = dataType.replace(/BIGINT/, '');\n      } else {\n        dataType = dataType.replace(/INTEGER/, '');\n      }\n      dataType = dataType.replace(/NOT NULL/, '');\n    }\n\n    if (dataType.match(/^ENUM\\(/)) {\n      dataType = dataType.replace(/^ENUM\\(.+\\)/, this.pgEnumName(tableName, attr));\n    }\n\n    return dataType;\n  },\n\n  quoteIdentifier(identifier, force) {\n    if (identifier === '*') return identifier;\n    if (!force && this.options && this.options.quoteIdentifiers === false && identifier.indexOf('.') === -1 && identifier.indexOf('->') === -1) { // default is `true`\n      // In Postgres, if tables or attributes are created double-quoted,\n      // they are also case sensitive. If they contain any uppercase\n      // characters, they must always be double-quoted. This makes it\n      // impossible to write queries in portable SQL if tables are created in\n      // this way. Hence, we strip quotes if we don't want case sensitivity.\n      return Utils.removeTicks(identifier, '\"');\n    } else {\n      return Utils.addTicks(Utils.removeTicks(identifier, '\"'), '\"');\n    }\n  },\n\n  /**\n   * Generates an SQL query that returns all foreign keys of a table.\n   *\n   * @param  {String} tableName  The name of the table.\n   * @return {String}            The generated sql query.\n   * @private\n   */\n  getForeignKeysQuery(tableName) {\n    return 'SELECT conname as constraint_name, pg_catalog.pg_get_constraintdef(r.oid, true) as condef FROM pg_catalog.pg_constraint r ' +\n      `WHERE r.conrelid = (SELECT oid FROM pg_class WHERE relname = '${tableName}' LIMIT 1) AND r.contype = 'f' ORDER BY 1;`;\n  },\n\n  /**\n   * Generates an SQL query that removes a foreign key from a table.\n   *\n   * @param  {String} tableName  The name of the table.\n   * @param  {String} foreignKey The name of the foreign key constraint.\n   * @return {String}            The generated sql query.\n   * @private\n   */\n  dropForeignKeyQuery(tableName, foreignKey) {\n    return 'ALTER TABLE ' + this.quoteTable(tableName) + ' DROP CONSTRAINT ' + this.quoteIdentifier(foreignKey) + ';';\n  },\n\n  setAutocommitQuery(value, options) {\n    if (options.parent) {\n      return;\n    }\n\n    // POSTGRES does not support setting AUTOCOMMIT = OFF as of 9.4.0\n    // Additionally it does not support AUTOCOMMIT at all starting at v9.5\n    // The assumption is that it won't be returning in future versions either\n    // If you are on a Pg version that is not semver compliant e.g. '9.5.0beta2', which fails due to the 'beta' qualification, then you need to pass\n    // the database version as \"9.5.0\" explicitly through the options param passed when creating the Sequelize instance under the key \"databaseVersion\"\n    // otherwise Pg version \"9.4.0\" is assumed by default as per Sequelize 3.14.2.\n    // For Pg versions that are semver compliant, this is auto-detected upon the first connection.\n    if (!value || semver.gte(this.sequelize.options.databaseVersion, '9.4.0')) {\n      return;\n    }\n\n    return AbstractQueryGenerator.setAutocommitQuery.call(this, value, options);\n  }\n};\n\nmodule.exports = QueryGenerator;\n"},"lineCount":916}},"hash":"db70195c3e6f0a5578864ccd7a193e3e","cacheData":{"env":{}}}