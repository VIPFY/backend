{"dependencies":[{"name":"/home/user/vipfy-server/.babelrc","includedInParent":true,"mtime":1516814375768}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar types = exports.types = \"\\n# An user needs an unique email and will be given an auto-generated id\\n  type User {\\n    id: Int!\\n    firstname: String\\n    middlename: String\\n    lastname: String\\n    position: String\\n    email: String!\\n    title: String\\n    sex: SEX\\n    userstatus: USER_STATUS\\n    birthday: String\\n    recoveryemail: String\\n    mobilenumber: String\\n    telefonnumber: String\\n    addresscountry: String\\n    addressstate: String\\n    addresscity: String\\n    addressstreet: String\\n    addressnumber: String\\n    profilepicture: String\\n    lastactive: String\\n    lastsecret: String\\n    riskvalue: Int\\n    newsletter: Boolean\\n    referall: Int\\n    cobranded: Int\\n    resetoption: Int\\n    createdAt: String\\n    updatedAt: String\\n  }\\n\\n# An Employee is an user who belongs to at least one company\\n  type Employee {\\n    userid: Int!\\n    user: User\\n    companyid: Int!\\n    company: Company\\n    departmentid: Int!\\n    department: Department\\n    begindate: String\\n    enddate: String\\n    position: String\\n  }\\n\\n# Every user has a set of rights which handles his access to different parts of Vipfy\\n  type UserRight {\\n    companyid: Company\\n    departmentid: Department\\n    userright: Int!\\n    userid: Int\\n    user: User\\n  }\\n\\n# Languages of an user\\n  type Speak {\\n    userid: Int,\\n    user: User\\n    language: [String]\\n    preferred: Boolean\\n  }\\n\\n# Bills of an user\\n  type UserBill {\\n    userid: Int\\n    user: User\\n    date: String\\n    billpos: Int\\n    textpos: String\\n    price: Float\\n    currency: String\\n    planid: Int\\n    plan: Plan\\n    orgcurrency: String\\n    exchangerate: Float\\n  }\\n\";\n\nvar queries = exports.queries = \"\\n  allUsers: [User!]!\\n  fetchUser(id: Int!): User\\n  me: User\\n  fetchUserByPassword(password: String!): String!\\n\\n  allEmployees: [Employee]\\n  fetchEmployee(userId: Int!): Employee!\\n\\n  # Shows all User rights\\n  allUserRights: [UserRight!]!\\n\\n  # Shows all the rights an user has\\n  fetchUserRights(userid: Int!): [UserRight!]\\n\\n  fetchUserBills: [UserBill]\\n\";\n\nvar mutations = exports.mutations = \"\\n  updateUser(firstname: String!, newFirstname: String!): [Int!]!\\n  deleteUser(id: Int!): String!\\n\\n  # Only an email is required for the signup\\n  signUp(email: String!, newsletter: Boolean): RegisterResponse!\\n\\n  # The user will be passed back a JSON Web token for authentication\\n  signIn(email: String!, password: String!): LoginResponse!\\n\\n  # After confirming the email, an user has to set a password\\n  signUpConfirm(email: String!, password: String!): RegisterResponse!\\n\\n  # Send the user a new link for sign up\\n  forgotPassword(email: String!): ForgotPwResponse!\\n\";","map":{"mappings":[{"generated":{"line":6,"column":0},"source":"schemas/User.js","original":{"line":1,"column":7}},{"name":"types","generated":{"line":6,"column":4},"source":"schemas/User.js","original":{"line":1,"column":13}},{"generated":{"line":6,"column":1667},"source":"schemas/User.js","original":{"line":1,"column":7}},{"generated":{"line":8,"column":0},"source":"schemas/User.js","original":{"line":80,"column":7}},{"name":"queries","generated":{"line":8,"column":4},"source":"schemas/User.js","original":{"line":80,"column":13}},{"generated":{"line":8,"column":402},"source":"schemas/User.js","original":{"line":80,"column":7}},{"generated":{"line":10,"column":0},"source":"schemas/User.js","original":{"line":98,"column":7}},{"name":"mutations","generated":{"line":10,"column":4},"source":"schemas/User.js","original":{"line":98,"column":13}},{"generated":{"line":10,"column":619},"source":"schemas/User.js","original":{"line":98,"column":7}}],"sources":{"schemas/User.js":"export const types = `\n# An user needs an unique email and will be given an auto-generated id\n  type User {\n    id: Int!\n    firstname: String\n    middlename: String\n    lastname: String\n    position: String\n    email: String!\n    title: String\n    sex: SEX\n    userstatus: USER_STATUS\n    birthday: String\n    recoveryemail: String\n    mobilenumber: String\n    telefonnumber: String\n    addresscountry: String\n    addressstate: String\n    addresscity: String\n    addressstreet: String\n    addressnumber: String\n    profilepicture: String\n    lastactive: String\n    lastsecret: String\n    riskvalue: Int\n    newsletter: Boolean\n    referall: Int\n    cobranded: Int\n    resetoption: Int\n    createdAt: String\n    updatedAt: String\n  }\n\n# An Employee is an user who belongs to at least one company\n  type Employee {\n    userid: Int!\n    user: User\n    companyid: Int!\n    company: Company\n    departmentid: Int!\n    department: Department\n    begindate: String\n    enddate: String\n    position: String\n  }\n\n# Every user has a set of rights which handles his access to different parts of Vipfy\n  type UserRight {\n    companyid: Company\n    departmentid: Department\n    userright: Int!\n    userid: Int\n    user: User\n  }\n\n# Languages of an user\n  type Speak {\n    userid: Int,\n    user: User\n    language: [String]\n    preferred: Boolean\n  }\n\n# Bills of an user\n  type UserBill {\n    userid: Int\n    user: User\n    date: String\n    billpos: Int\n    textpos: String\n    price: Float\n    currency: String\n    planid: Int\n    plan: Plan\n    orgcurrency: String\n    exchangerate: Float\n  }\n`;\n\nexport const queries = `\n  allUsers: [User!]!\n  fetchUser(id: Int!): User\n  me: User\n  fetchUserByPassword(password: String!): String!\n\n  allEmployees: [Employee]\n  fetchEmployee(userId: Int!): Employee!\n\n  # Shows all User rights\n  allUserRights: [UserRight!]!\n\n  # Shows all the rights an user has\n  fetchUserRights(userid: Int!): [UserRight!]\n\n  fetchUserBills: [UserBill]\n`;\n\nexport const mutations = `\n  updateUser(firstname: String!, newFirstname: String!): [Int!]!\n  deleteUser(id: Int!): String!\n\n  # Only an email is required for the signup\n  signUp(email: String!, newsletter: Boolean): RegisterResponse!\n\n  # The user will be passed back a JSON Web token for authentication\n  signIn(email: String!, password: String!): LoginResponse!\n\n  # After confirming the email, an user has to set a password\n  signUpConfirm(email: String!, password: String!): RegisterResponse!\n\n  # Send the user a new link for sign up\n  forgotPassword(email: String!): ForgotPwResponse!\n`;\n"},"lineCount":null}},"hash":"01620ae8b9ddd8c8c20a60dbd30ee610","cacheData":{"env":{}}}