{"dependencies":[{"name":"../lib/types","loc":{"line":3,"column":33}}],"generated":{"js":"module.exports = function (fork) {\n    var exports = {};\n    var types = fork.use(require(\"../lib/types\"));\n    var Type = types.Type;\n    var builtin = types.builtInTypes;\n    var isNumber = builtin.number;\n\n    // An example of constructing a new type with arbitrary constraints from\n    // an existing type.\n    exports.geq = function (than) {\n        return new Type(function (value) {\n            return isNumber.check(value) && value >= than;\n        }, isNumber + \" >= \" + than);\n    };\n\n    // Default value-returning functions that may optionally be passed as a\n    // third argument to Def.prototype.field.\n    exports.defaults = {\n        // Functions were used because (among other reasons) that's the most\n        // elegant way to allow for the emptyArray one always to give a new\n        // array instance.\n        \"null\": function () { return null },\n        \"emptyArray\": function () { return [] },\n        \"false\": function () { return false },\n        \"true\": function () { return true },\n        \"undefined\": function () {}\n    };\n\n    var naiveIsPrimitive = Type.or(\n      builtin.string,\n      builtin.number,\n      builtin.boolean,\n      builtin.null,\n      builtin.undefined\n    );\n\n    exports.isPrimitive = new Type(function (value) {\n        if (value === null)\n            return true;\n        var type = typeof value;\n        return !(type === \"object\" ||\n        type === \"function\");\n    }, naiveIsPrimitive.toString());\n\n    return exports;\n};","map":{"mappings":[{"source":"../node_modules/ast-types/lib/shared.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/ast-types/lib/shared.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/ast-types/lib/shared.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/ast-types/lib/shared.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/ast-types/lib/shared.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/ast-types/lib/shared.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/ast-types/lib/shared.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/ast-types/lib/shared.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/ast-types/lib/shared.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/ast-types/lib/shared.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/ast-types/lib/shared.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/ast-types/lib/shared.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/ast-types/lib/shared.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/ast-types/lib/shared.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/ast-types/lib/shared.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/ast-types/lib/shared.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/ast-types/lib/shared.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/ast-types/lib/shared.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/ast-types/lib/shared.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/ast-types/lib/shared.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/ast-types/lib/shared.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/ast-types/lib/shared.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/ast-types/lib/shared.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/ast-types/lib/shared.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/ast-types/lib/shared.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/ast-types/lib/shared.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/ast-types/lib/shared.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/ast-types/lib/shared.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/ast-types/lib/shared.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/ast-types/lib/shared.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/ast-types/lib/shared.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/ast-types/lib/shared.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/ast-types/lib/shared.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/ast-types/lib/shared.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/ast-types/lib/shared.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/ast-types/lib/shared.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/ast-types/lib/shared.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/ast-types/lib/shared.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/ast-types/lib/shared.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/ast-types/lib/shared.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/ast-types/lib/shared.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/ast-types/lib/shared.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/ast-types/lib/shared.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/ast-types/lib/shared.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/ast-types/lib/shared.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/ast-types/lib/shared.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}}],"sources":{"../node_modules/ast-types/lib/shared.js":"module.exports = function (fork) {\n    var exports = {};\n    var types = fork.use(require(\"../lib/types\"));\n    var Type = types.Type;\n    var builtin = types.builtInTypes;\n    var isNumber = builtin.number;\n\n    // An example of constructing a new type with arbitrary constraints from\n    // an existing type.\n    exports.geq = function (than) {\n        return new Type(function (value) {\n            return isNumber.check(value) && value >= than;\n        }, isNumber + \" >= \" + than);\n    };\n\n    // Default value-returning functions that may optionally be passed as a\n    // third argument to Def.prototype.field.\n    exports.defaults = {\n        // Functions were used because (among other reasons) that's the most\n        // elegant way to allow for the emptyArray one always to give a new\n        // array instance.\n        \"null\": function () { return null },\n        \"emptyArray\": function () { return [] },\n        \"false\": function () { return false },\n        \"true\": function () { return true },\n        \"undefined\": function () {}\n    };\n\n    var naiveIsPrimitive = Type.or(\n      builtin.string,\n      builtin.number,\n      builtin.boolean,\n      builtin.null,\n      builtin.undefined\n    );\n\n    exports.isPrimitive = new Type(function (value) {\n        if (value === null)\n            return true;\n        var type = typeof value;\n        return !(type === \"object\" ||\n        type === \"function\");\n    }, naiveIsPrimitive.toString());\n\n    return exports;\n};"},"lineCount":46}},"hash":"99f24b8f5498973dc5721ae3767e11eb","cacheData":{"env":{}}}