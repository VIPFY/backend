{"dependencies":[{"name":"../lib/types","loc":{"line":2,"column":33}}],"generated":{"js":"module.exports = function (fork) {\n    var types = fork.use(require('../lib/types'));\n    var getFieldNames = types.getFieldNames;\n    var getFieldValue = types.getFieldValue;\n    var isArray = types.builtInTypes.array;\n    var isObject = types.builtInTypes.object;\n    var isDate = types.builtInTypes.Date;\n    var isRegExp = types.builtInTypes.RegExp;\n    var hasOwn = Object.prototype.hasOwnProperty;\n\n    function astNodesAreEquivalent(a, b, problemPath) {\n        if (isArray.check(problemPath)) {\n            problemPath.length = 0;\n        } else {\n            problemPath = null;\n        }\n\n        return areEquivalent(a, b, problemPath);\n    }\n\n    astNodesAreEquivalent.assert = function (a, b) {\n        var problemPath = [];\n        if (!astNodesAreEquivalent(a, b, problemPath)) {\n            if (problemPath.length === 0) {\n                if (a !== b) {\n                    throw new Error(\"Nodes must be equal\");\n                }\n            } else {\n                throw new Error(\n                  \"Nodes differ in the following path: \" +\n                  problemPath.map(subscriptForProperty).join(\"\")\n                );\n            }\n        }\n    };\n\n    function subscriptForProperty(property) {\n        if (/[_$a-z][_$a-z0-9]*/i.test(property)) {\n            return \".\" + property;\n        }\n        return \"[\" + JSON.stringify(property) + \"]\";\n    }\n\n    function areEquivalent(a, b, problemPath) {\n        if (a === b) {\n            return true;\n        }\n\n        if (isArray.check(a)) {\n            return arraysAreEquivalent(a, b, problemPath);\n        }\n\n        if (isObject.check(a)) {\n            return objectsAreEquivalent(a, b, problemPath);\n        }\n\n        if (isDate.check(a)) {\n            return isDate.check(b) && (+a === +b);\n        }\n\n        if (isRegExp.check(a)) {\n            return isRegExp.check(b) && (\n                a.source === b.source &&\n                a.global === b.global &&\n                a.multiline === b.multiline &&\n                a.ignoreCase === b.ignoreCase\n              );\n        }\n\n        return a == b;\n    }\n\n    function arraysAreEquivalent(a, b, problemPath) {\n        isArray.assert(a);\n        var aLength = a.length;\n\n        if (!isArray.check(b) || b.length !== aLength) {\n            if (problemPath) {\n                problemPath.push(\"length\");\n            }\n            return false;\n        }\n\n        for (var i = 0; i < aLength; ++i) {\n            if (problemPath) {\n                problemPath.push(i);\n            }\n\n            if (i in a !== i in b) {\n                return false;\n            }\n\n            if (!areEquivalent(a[i], b[i], problemPath)) {\n                return false;\n            }\n\n            if (problemPath) {\n                var problemPathTail = problemPath.pop();\n                if (problemPathTail !== i) {\n                    throw new Error(\"\" + problemPathTail);\n                }\n            }\n        }\n\n        return true;\n    }\n\n    function objectsAreEquivalent(a, b, problemPath) {\n        isObject.assert(a);\n        if (!isObject.check(b)) {\n            return false;\n        }\n\n        // Fast path for a common property of AST nodes.\n        if (a.type !== b.type) {\n            if (problemPath) {\n                problemPath.push(\"type\");\n            }\n            return false;\n        }\n\n        var aNames = getFieldNames(a);\n        var aNameCount = aNames.length;\n\n        var bNames = getFieldNames(b);\n        var bNameCount = bNames.length;\n\n        if (aNameCount === bNameCount) {\n            for (var i = 0; i < aNameCount; ++i) {\n                var name = aNames[i];\n                var aChild = getFieldValue(a, name);\n                var bChild = getFieldValue(b, name);\n\n                if (problemPath) {\n                    problemPath.push(name);\n                }\n\n                if (!areEquivalent(aChild, bChild, problemPath)) {\n                    return false;\n                }\n\n                if (problemPath) {\n                    var problemPathTail = problemPath.pop();\n                    if (problemPathTail !== name) {\n                        throw new Error(\"\" + problemPathTail);\n                    }\n                }\n            }\n\n            return true;\n        }\n\n        if (!problemPath) {\n            return false;\n        }\n\n        // Since aNameCount !== bNameCount, we need to find some name that's\n        // missing in aNames but present in bNames, or vice-versa.\n\n        var seenNames = Object.create(null);\n\n        for (i = 0; i < aNameCount; ++i) {\n            seenNames[aNames[i]] = true;\n        }\n\n        for (i = 0; i < bNameCount; ++i) {\n            name = bNames[i];\n\n            if (!hasOwn.call(seenNames, name)) {\n                problemPath.push(name);\n                return false;\n            }\n\n            delete seenNames[name];\n        }\n\n        for (name in seenNames) {\n            problemPath.push(name);\n            break;\n        }\n\n        return false;\n    }\n    \n    return astNodesAreEquivalent;\n};\n","map":{"mappings":[{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/ast-types/lib/equiv.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}}],"sources":{"../node_modules/ast-types/lib/equiv.js":"module.exports = function (fork) {\n    var types = fork.use(require('../lib/types'));\n    var getFieldNames = types.getFieldNames;\n    var getFieldValue = types.getFieldValue;\n    var isArray = types.builtInTypes.array;\n    var isObject = types.builtInTypes.object;\n    var isDate = types.builtInTypes.Date;\n    var isRegExp = types.builtInTypes.RegExp;\n    var hasOwn = Object.prototype.hasOwnProperty;\n\n    function astNodesAreEquivalent(a, b, problemPath) {\n        if (isArray.check(problemPath)) {\n            problemPath.length = 0;\n        } else {\n            problemPath = null;\n        }\n\n        return areEquivalent(a, b, problemPath);\n    }\n\n    astNodesAreEquivalent.assert = function (a, b) {\n        var problemPath = [];\n        if (!astNodesAreEquivalent(a, b, problemPath)) {\n            if (problemPath.length === 0) {\n                if (a !== b) {\n                    throw new Error(\"Nodes must be equal\");\n                }\n            } else {\n                throw new Error(\n                  \"Nodes differ in the following path: \" +\n                  problemPath.map(subscriptForProperty).join(\"\")\n                );\n            }\n        }\n    };\n\n    function subscriptForProperty(property) {\n        if (/[_$a-z][_$a-z0-9]*/i.test(property)) {\n            return \".\" + property;\n        }\n        return \"[\" + JSON.stringify(property) + \"]\";\n    }\n\n    function areEquivalent(a, b, problemPath) {\n        if (a === b) {\n            return true;\n        }\n\n        if (isArray.check(a)) {\n            return arraysAreEquivalent(a, b, problemPath);\n        }\n\n        if (isObject.check(a)) {\n            return objectsAreEquivalent(a, b, problemPath);\n        }\n\n        if (isDate.check(a)) {\n            return isDate.check(b) && (+a === +b);\n        }\n\n        if (isRegExp.check(a)) {\n            return isRegExp.check(b) && (\n                a.source === b.source &&\n                a.global === b.global &&\n                a.multiline === b.multiline &&\n                a.ignoreCase === b.ignoreCase\n              );\n        }\n\n        return a == b;\n    }\n\n    function arraysAreEquivalent(a, b, problemPath) {\n        isArray.assert(a);\n        var aLength = a.length;\n\n        if (!isArray.check(b) || b.length !== aLength) {\n            if (problemPath) {\n                problemPath.push(\"length\");\n            }\n            return false;\n        }\n\n        for (var i = 0; i < aLength; ++i) {\n            if (problemPath) {\n                problemPath.push(i);\n            }\n\n            if (i in a !== i in b) {\n                return false;\n            }\n\n            if (!areEquivalent(a[i], b[i], problemPath)) {\n                return false;\n            }\n\n            if (problemPath) {\n                var problemPathTail = problemPath.pop();\n                if (problemPathTail !== i) {\n                    throw new Error(\"\" + problemPathTail);\n                }\n            }\n        }\n\n        return true;\n    }\n\n    function objectsAreEquivalent(a, b, problemPath) {\n        isObject.assert(a);\n        if (!isObject.check(b)) {\n            return false;\n        }\n\n        // Fast path for a common property of AST nodes.\n        if (a.type !== b.type) {\n            if (problemPath) {\n                problemPath.push(\"type\");\n            }\n            return false;\n        }\n\n        var aNames = getFieldNames(a);\n        var aNameCount = aNames.length;\n\n        var bNames = getFieldNames(b);\n        var bNameCount = bNames.length;\n\n        if (aNameCount === bNameCount) {\n            for (var i = 0; i < aNameCount; ++i) {\n                var name = aNames[i];\n                var aChild = getFieldValue(a, name);\n                var bChild = getFieldValue(b, name);\n\n                if (problemPath) {\n                    problemPath.push(name);\n                }\n\n                if (!areEquivalent(aChild, bChild, problemPath)) {\n                    return false;\n                }\n\n                if (problemPath) {\n                    var problemPathTail = problemPath.pop();\n                    if (problemPathTail !== name) {\n                        throw new Error(\"\" + problemPathTail);\n                    }\n                }\n            }\n\n            return true;\n        }\n\n        if (!problemPath) {\n            return false;\n        }\n\n        // Since aNameCount !== bNameCount, we need to find some name that's\n        // missing in aNames but present in bNames, or vice-versa.\n\n        var seenNames = Object.create(null);\n\n        for (i = 0; i < aNameCount; ++i) {\n            seenNames[aNames[i]] = true;\n        }\n\n        for (i = 0; i < bNameCount; ++i) {\n            name = bNames[i];\n\n            if (!hasOwn.call(seenNames, name)) {\n                problemPath.push(name);\n                return false;\n            }\n\n            delete seenNames[name];\n        }\n\n        for (name in seenNames) {\n            problemPath.push(name);\n            break;\n        }\n\n        return false;\n    }\n    \n    return astNodesAreEquivalent;\n};\n"},"lineCount":187}},"hash":"e6f44532415b3d13b787c07421aca1d4","cacheData":{"env":{}}}