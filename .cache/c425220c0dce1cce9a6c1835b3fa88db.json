{"dependencies":[{"name":"graphql","loc":{"line":48,"column":24}},{"name":"./runQuery","loc":{"line":49,"column":25}},{"name":"./graphqlOptions","loc":{"line":50,"column":31}}],"generated":{"js":"\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar graphql_1 = require(\"graphql\");\nvar runQuery_1 = require(\"./runQuery\");\nvar graphqlOptions_1 = require(\"./graphqlOptions\");\nvar HttpQueryError = (function (_super) {\n    __extends(HttpQueryError, _super);\n    function HttpQueryError(statusCode, message, isGraphQLError, headers) {\n        if (isGraphQLError === void 0) { isGraphQLError = false; }\n        var _this = _super.call(this, message) || this;\n        _this.name = 'HttpQueryError';\n        _this.statusCode = statusCode;\n        _this.isGraphQLError = isGraphQLError;\n        _this.headers = headers;\n        return _this;\n    }\n    return HttpQueryError;\n}(Error));\nexports.HttpQueryError = HttpQueryError;\nfunction isQueryOperation(query, operationName) {\n    var operationAST = graphql_1.getOperationAST(query, operationName);\n    return operationAST.operation === 'query';\n}\nfunction isFunction(arg) {\n    return typeof arg === 'function';\n}\nfunction runHttpQuery(handlerArguments, request) {\n    return __awaiter(this, void 0, void 0, function () {\n        var isGetRequest, optionsObject, e_1, formatErrorFn, requestPayload, isBatch, requests, responses, gqlResponse;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    isGetRequest = false;\n                    _a.label = 1;\n                case 1:\n                    _a.trys.push([1, 3, , 4]);\n                    return [4, graphqlOptions_1.resolveGraphqlOptions.apply(void 0, [request.options].concat(handlerArguments))];\n                case 2:\n                    optionsObject = _a.sent();\n                    return [3, 4];\n                case 3:\n                    e_1 = _a.sent();\n                    throw new HttpQueryError(500, e_1.message);\n                case 4:\n                    formatErrorFn = optionsObject.formatError || graphql_1.formatError;\n                    switch (request.method) {\n                        case 'POST':\n                            if (!request.query || (Object.keys(request.query).length === 0)) {\n                                throw new HttpQueryError(500, 'POST body missing. Did you forget use body-parser middleware?');\n                            }\n                            requestPayload = request.query;\n                            break;\n                        case 'GET':\n                            if (!request.query || (Object.keys(request.query).length === 0)) {\n                                throw new HttpQueryError(400, 'GET query missing.');\n                            }\n                            isGetRequest = true;\n                            requestPayload = request.query;\n                            break;\n                        default:\n                            throw new HttpQueryError(405, 'Apollo Server supports only GET/POST requests.', false, {\n                                'Allow': 'GET, POST',\n                            });\n                    }\n                    isBatch = true;\n                    if (!Array.isArray(requestPayload)) {\n                        isBatch = false;\n                        requestPayload = [requestPayload];\n                    }\n                    requests = requestPayload.map(function (requestParams) {\n                        try {\n                            var query = requestParams.query;\n                            if (isGetRequest) {\n                                if (typeof query === 'string') {\n                                    query = graphql_1.parse(query);\n                                }\n                                if (!isQueryOperation(query, requestParams.operationName)) {\n                                    throw new HttpQueryError(405, \"GET supports only query operation\", false, {\n                                        'Allow': 'POST',\n                                    });\n                                }\n                            }\n                            var operationName = requestParams.operationName;\n                            var variables = requestParams.variables;\n                            if (typeof variables === 'string') {\n                                try {\n                                    variables = JSON.parse(variables);\n                                }\n                                catch (error) {\n                                    throw new HttpQueryError(400, 'Variables are invalid JSON.');\n                                }\n                            }\n                            var context_1 = optionsObject.context || {};\n                            if (isFunction(context_1)) {\n                                context_1 = context_1();\n                            }\n                            else if (isBatch) {\n                                context_1 = Object.assign(Object.create(Object.getPrototypeOf(context_1)), context_1);\n                            }\n                            var params = {\n                                schema: optionsObject.schema,\n                                query: query,\n                                variables: variables,\n                                context: context_1,\n                                rootValue: optionsObject.rootValue,\n                                operationName: operationName,\n                                logFunction: optionsObject.logFunction,\n                                validationRules: optionsObject.validationRules,\n                                formatError: formatErrorFn,\n                                formatResponse: optionsObject.formatResponse,\n                                fieldResolver: optionsObject.fieldResolver,\n                                debug: optionsObject.debug,\n                                tracing: optionsObject.tracing,\n                                cacheControl: optionsObject.cacheControl,\n                            };\n                            if (optionsObject.formatParams) {\n                                params = optionsObject.formatParams(params);\n                            }\n                            return runQuery_1.runQuery(params);\n                        }\n                        catch (e) {\n                            if (e.name === 'HttpQueryError') {\n                                return Promise.reject(e);\n                            }\n                            return Promise.resolve({ errors: [formatErrorFn(e)] });\n                        }\n                    });\n                    return [4, Promise.all(requests)];\n                case 5:\n                    responses = _a.sent();\n                    if (!isBatch) {\n                        gqlResponse = responses[0];\n                        if (gqlResponse.errors && typeof gqlResponse.data === 'undefined') {\n                            throw new HttpQueryError(400, JSON.stringify(gqlResponse), true, {\n                                'Content-Type': 'application/json',\n                            });\n                        }\n                        return [2, JSON.stringify(gqlResponse)];\n                    }\n                    return [2, JSON.stringify(responses)];\n            }\n        });\n    });\n}\nexports.runHttpQuery = runHttpQuery;\n//# sourceMappingURL=runHttpQuery.js.map","map":{"mappings":[{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/apollo-server-core/dist/runHttpQuery.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}}],"sources":{"../node_modules/apollo-server-core/dist/runHttpQuery.js":"\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar graphql_1 = require(\"graphql\");\nvar runQuery_1 = require(\"./runQuery\");\nvar graphqlOptions_1 = require(\"./graphqlOptions\");\nvar HttpQueryError = (function (_super) {\n    __extends(HttpQueryError, _super);\n    function HttpQueryError(statusCode, message, isGraphQLError, headers) {\n        if (isGraphQLError === void 0) { isGraphQLError = false; }\n        var _this = _super.call(this, message) || this;\n        _this.name = 'HttpQueryError';\n        _this.statusCode = statusCode;\n        _this.isGraphQLError = isGraphQLError;\n        _this.headers = headers;\n        return _this;\n    }\n    return HttpQueryError;\n}(Error));\nexports.HttpQueryError = HttpQueryError;\nfunction isQueryOperation(query, operationName) {\n    var operationAST = graphql_1.getOperationAST(query, operationName);\n    return operationAST.operation === 'query';\n}\nfunction isFunction(arg) {\n    return typeof arg === 'function';\n}\nfunction runHttpQuery(handlerArguments, request) {\n    return __awaiter(this, void 0, void 0, function () {\n        var isGetRequest, optionsObject, e_1, formatErrorFn, requestPayload, isBatch, requests, responses, gqlResponse;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    isGetRequest = false;\n                    _a.label = 1;\n                case 1:\n                    _a.trys.push([1, 3, , 4]);\n                    return [4, graphqlOptions_1.resolveGraphqlOptions.apply(void 0, [request.options].concat(handlerArguments))];\n                case 2:\n                    optionsObject = _a.sent();\n                    return [3, 4];\n                case 3:\n                    e_1 = _a.sent();\n                    throw new HttpQueryError(500, e_1.message);\n                case 4:\n                    formatErrorFn = optionsObject.formatError || graphql_1.formatError;\n                    switch (request.method) {\n                        case 'POST':\n                            if (!request.query || (Object.keys(request.query).length === 0)) {\n                                throw new HttpQueryError(500, 'POST body missing. Did you forget use body-parser middleware?');\n                            }\n                            requestPayload = request.query;\n                            break;\n                        case 'GET':\n                            if (!request.query || (Object.keys(request.query).length === 0)) {\n                                throw new HttpQueryError(400, 'GET query missing.');\n                            }\n                            isGetRequest = true;\n                            requestPayload = request.query;\n                            break;\n                        default:\n                            throw new HttpQueryError(405, 'Apollo Server supports only GET/POST requests.', false, {\n                                'Allow': 'GET, POST',\n                            });\n                    }\n                    isBatch = true;\n                    if (!Array.isArray(requestPayload)) {\n                        isBatch = false;\n                        requestPayload = [requestPayload];\n                    }\n                    requests = requestPayload.map(function (requestParams) {\n                        try {\n                            var query = requestParams.query;\n                            if (isGetRequest) {\n                                if (typeof query === 'string') {\n                                    query = graphql_1.parse(query);\n                                }\n                                if (!isQueryOperation(query, requestParams.operationName)) {\n                                    throw new HttpQueryError(405, \"GET supports only query operation\", false, {\n                                        'Allow': 'POST',\n                                    });\n                                }\n                            }\n                            var operationName = requestParams.operationName;\n                            var variables = requestParams.variables;\n                            if (typeof variables === 'string') {\n                                try {\n                                    variables = JSON.parse(variables);\n                                }\n                                catch (error) {\n                                    throw new HttpQueryError(400, 'Variables are invalid JSON.');\n                                }\n                            }\n                            var context_1 = optionsObject.context || {};\n                            if (isFunction(context_1)) {\n                                context_1 = context_1();\n                            }\n                            else if (isBatch) {\n                                context_1 = Object.assign(Object.create(Object.getPrototypeOf(context_1)), context_1);\n                            }\n                            var params = {\n                                schema: optionsObject.schema,\n                                query: query,\n                                variables: variables,\n                                context: context_1,\n                                rootValue: optionsObject.rootValue,\n                                operationName: operationName,\n                                logFunction: optionsObject.logFunction,\n                                validationRules: optionsObject.validationRules,\n                                formatError: formatErrorFn,\n                                formatResponse: optionsObject.formatResponse,\n                                fieldResolver: optionsObject.fieldResolver,\n                                debug: optionsObject.debug,\n                                tracing: optionsObject.tracing,\n                                cacheControl: optionsObject.cacheControl,\n                            };\n                            if (optionsObject.formatParams) {\n                                params = optionsObject.formatParams(params);\n                            }\n                            return runQuery_1.runQuery(params);\n                        }\n                        catch (e) {\n                            if (e.name === 'HttpQueryError') {\n                                return Promise.reject(e);\n                            }\n                            return Promise.resolve({ errors: [formatErrorFn(e)] });\n                        }\n                    });\n                    return [4, Promise.all(requests)];\n                case 5:\n                    responses = _a.sent();\n                    if (!isBatch) {\n                        gqlResponse = responses[0];\n                        if (gqlResponse.errors && typeof gqlResponse.data === 'undefined') {\n                            throw new HttpQueryError(400, JSON.stringify(gqlResponse), true, {\n                                'Content-Type': 'application/json',\n                            });\n                        }\n                        return [2, JSON.stringify(gqlResponse)];\n                    }\n                    return [2, JSON.stringify(responses)];\n            }\n        });\n    });\n}\nexports.runHttpQuery = runHttpQuery;\n//# sourceMappingURL=runHttpQuery.js.map"},"lineCount":191}},"hash":"35e5103af88172f9a3b12be5783e9286","cacheData":{"env":{}}}