{"dependencies":[],"generated":{"js":"var Ap = Array.prototype;\nvar slice = Ap.slice;\nvar map = Ap.map;\nvar each = Ap.forEach;\nvar Op = Object.prototype;\nvar objToStr = Op.toString;\nvar funObjStr = objToStr.call(function(){});\nvar strObjStr = objToStr.call(\"\");\nvar hasOwn = Op.hasOwnProperty;\n\nmodule.exports = function () {\n\n    var exports = {};\n\n    // A type is an object with a .check method that takes a value and returns\n    // true or false according to whether the value matches the type.\n\n    function Type(check, name) {\n        var self = this;\n        if (!(self instanceof Type)) {\n            throw new Error(\"Type constructor cannot be invoked without 'new'\");\n        }\n\n        // Unfortunately we can't elegantly reuse isFunction and isString,\n        // here, because this code is executed while defining those types.\n        if (objToStr.call(check) !== funObjStr) {\n            throw new Error(check + \" is not a function\");\n        }\n\n        // The `name` parameter can be either a function or a string.\n        var nameObjStr = objToStr.call(name);\n        if (!(nameObjStr === funObjStr ||\n          nameObjStr === strObjStr)) {\n            throw new Error(name + \" is neither a function nor a string\");\n        }\n\n        Object.defineProperties(self, {\n            name: {value: name},\n            check: {\n                value: function (value, deep) {\n                    var result = check.call(self, value, deep);\n                    if (!result && deep && objToStr.call(deep) === funObjStr)\n                        deep(self, value);\n                    return result;\n                }\n            }\n        });\n    }\n\n    var Tp = Type.prototype;\n\n    // Throughout this file we use Object.defineProperty to prevent\n    // redefinition of exported properties.\n    exports.Type = Type;\n\n    // Like .check, except that failure triggers an AssertionError.\n    Tp.assert = function (value, deep) {\n        if (!this.check(value, deep)) {\n            var str = shallowStringify(value);\n            throw new Error(str + \" does not match type \" + this);\n        }\n        return true;\n    };\n\n    function shallowStringify(value) {\n        if (isObject.check(value))\n            return \"{\" + Object.keys(value).map(function (key) {\n                  return key + \": \" + value[key];\n              }).join(\", \") + \"}\";\n\n        if (isArray.check(value))\n            return \"[\" + value.map(shallowStringify).join(\", \") + \"]\";\n\n        return JSON.stringify(value);\n    }\n\n    Tp.toString = function () {\n        var name = this.name;\n\n        if (isString.check(name))\n            return name;\n\n        if (isFunction.check(name))\n            return name.call(this) + \"\";\n\n        return name + \" type\";\n    };\n\n    var builtInCtorFns = [];\n    var builtInCtorTypes = [];\n    var builtInTypes = {};\n    exports.builtInTypes = builtInTypes;\n\n    function defBuiltInType(example, name) {\n        var objStr = objToStr.call(example);\n\n        var type = new Type(function (value) {\n            return objToStr.call(value) === objStr;\n        }, name);\n\n        builtInTypes[name] = type;\n\n        if (example && typeof example.constructor === \"function\") {\n            builtInCtorFns.push(example.constructor);\n            builtInCtorTypes.push(type);\n        }\n\n        return type;\n    }\n\n    // These types check the underlying [[Class]] attribute of the given\n    // value, rather than using the problematic typeof operator. Note however\n    // that no subtyping is considered; so, for instance, isObject.check\n    // returns false for [], /./, new Date, and null.\n    var isString = defBuiltInType(\"truthy\", \"string\");\n    var isFunction = defBuiltInType(function () {}, \"function\");\n    var isArray = defBuiltInType([], \"array\");\n    var isObject = defBuiltInType({}, \"object\");\n    var isRegExp = defBuiltInType(/./, \"RegExp\");\n    var isDate = defBuiltInType(new Date, \"Date\");\n    var isNumber = defBuiltInType(3, \"number\");\n    var isBoolean = defBuiltInType(true, \"boolean\");\n    var isNull = defBuiltInType(null, \"null\");\n    var isUndefined = defBuiltInType(void 0, \"undefined\");\n\n    // There are a number of idiomatic ways of expressing types, so this\n    // function serves to coerce them all to actual Type objects. Note that\n    // providing the name argument is not necessary in most cases.\n    function toType(from, name) {\n        // The toType function should of course be idempotent.\n        if (from instanceof Type)\n            return from;\n\n        // The Def type is used as a helper for constructing compound\n        // interface types for AST nodes.\n        if (from instanceof Def)\n            return from.type;\n\n        // Support [ElemType] syntax.\n        if (isArray.check(from))\n            return Type.fromArray(from);\n\n        // Support { someField: FieldType, ... } syntax.\n        if (isObject.check(from))\n            return Type.fromObject(from);\n\n        if (isFunction.check(from)) {\n            var bicfIndex = builtInCtorFns.indexOf(from);\n            if (bicfIndex >= 0) {\n                return builtInCtorTypes[bicfIndex];\n            }\n\n            // If isFunction.check(from), and from is not a built-in\n            // constructor, assume from is a binary predicate function we can\n            // use to define the type.\n            return new Type(from, name);\n        }\n\n        // As a last resort, toType returns a type that matches any value that\n        // is === from. This is primarily useful for literal values like\n        // toType(null), but it has the additional advantage of allowing\n        // toType to be a total function.\n        return new Type(function (value) {\n            return value === from;\n        }, isUndefined.check(name) ? function () {\n            return from + \"\";\n        } : name);\n    }\n\n    // Returns a type that matches the given value iff any of type1, type2,\n    // etc. match the value.\n    Type.or = function (/* type1, type2, ... */) {\n        var types = [];\n        var len = arguments.length;\n        for (var i = 0; i < len; ++i)\n            types.push(toType(arguments[i]));\n\n        return new Type(function (value, deep) {\n            for (var i = 0; i < len; ++i)\n                if (types[i].check(value, deep))\n                    return true;\n            return false;\n        }, function () {\n            return types.join(\" | \");\n        });\n    };\n\n    Type.fromArray = function (arr) {\n        if (!isArray.check(arr)) {\n            throw new Error(\"\");\n        }\n        if (arr.length !== 1) {\n            throw new Error(\"only one element type is permitted for typed arrays\");\n        }\n        return toType(arr[0]).arrayOf();\n    };\n\n    Tp.arrayOf = function () {\n        var elemType = this;\n        return new Type(function (value, deep) {\n            return isArray.check(value) && value.every(function (elem) {\n                  return elemType.check(elem, deep);\n              });\n        }, function () {\n            return \"[\" + elemType + \"]\";\n        });\n    };\n\n    Type.fromObject = function (obj) {\n        var fields = Object.keys(obj).map(function (name) {\n            return new Field(name, obj[name]);\n        });\n\n        return new Type(function (value, deep) {\n            return isObject.check(value) && fields.every(function (field) {\n                  return field.type.check(value[field.name], deep);\n              });\n        }, function () {\n            return \"{ \" + fields.join(\", \") + \" }\";\n        });\n    };\n\n    function Field(name, type, defaultFn, hidden) {\n        var self = this;\n\n        if (!(self instanceof Field)) {\n            throw new Error(\"Field constructor cannot be invoked without 'new'\");\n        }\n        isString.assert(name);\n\n        type = toType(type);\n\n        var properties = {\n            name: {value: name},\n            type: {value: type},\n            hidden: {value: !!hidden}\n        };\n\n        if (isFunction.check(defaultFn)) {\n            properties.defaultFn = {value: defaultFn};\n        }\n\n        Object.defineProperties(self, properties);\n    }\n\n    var Fp = Field.prototype;\n\n    Fp.toString = function () {\n        return JSON.stringify(this.name) + \": \" + this.type;\n    };\n\n    Fp.getValue = function (obj) {\n        var value = obj[this.name];\n\n        if (!isUndefined.check(value))\n            return value;\n\n        if (this.defaultFn)\n            value = this.defaultFn.call(obj);\n\n        return value;\n    };\n\n    // Define a type whose name is registered in a namespace (the defCache) so\n    // that future definitions will return the same type given the same name.\n    // In particular, this system allows for circular and forward definitions.\n    // The Def object d returned from Type.def may be used to configure the\n    // type d.type by calling methods such as d.bases, d.build, and d.field.\n    Type.def = function (typeName) {\n        isString.assert(typeName);\n        return hasOwn.call(defCache, typeName)\n          ? defCache[typeName]\n          : defCache[typeName] = new Def(typeName);\n    };\n\n    // In order to return the same Def instance every time Type.def is called\n    // with a particular name, those instances need to be stored in a cache.\n    var defCache = Object.create(null);\n\n    function Def(typeName) {\n        var self = this;\n        if (!(self instanceof Def)) {\n            throw new Error(\"Def constructor cannot be invoked without 'new'\");\n        }\n\n        Object.defineProperties(self, {\n            typeName: {value: typeName},\n            baseNames: {value: []},\n            ownFields: {value: Object.create(null)},\n\n            // These two are populated during finalization.\n            allSupertypes: {value: Object.create(null)}, // Includes own typeName.\n            supertypeList: {value: []}, // Linear inheritance hierarchy.\n            allFields: {value: Object.create(null)}, // Includes inherited fields.\n            fieldNames: {value: []}, // Non-hidden keys of allFields.\n\n            type: {\n                value: new Type(function (value, deep) {\n                    return self.check(value, deep);\n                }, typeName)\n            }\n        });\n    }\n\n    Def.fromValue = function (value) {\n        if (value && typeof value === \"object\") {\n            var type = value.type;\n            if (typeof type === \"string\" &&\n              hasOwn.call(defCache, type)) {\n                var d = defCache[type];\n                if (d.finalized) {\n                    return d;\n                }\n            }\n        }\n\n        return null;\n    };\n\n    var Dp = Def.prototype;\n\n    Dp.isSupertypeOf = function (that) {\n        if (that instanceof Def) {\n            if (this.finalized !== true ||\n              that.finalized !== true) {\n                throw new Error(\"\");\n            }\n            return hasOwn.call(that.allSupertypes, this.typeName);\n        } else {\n            throw new Error(that + \" is not a Def\");\n        }\n    };\n\n    // Note that the list returned by this function is a copy of the internal\n    // supertypeList, *without* the typeName itself as the first element.\n    exports.getSupertypeNames = function (typeName) {\n        if (!hasOwn.call(defCache, typeName)) {\n            throw new Error(\"\");\n        }\n        var d = defCache[typeName];\n        if (d.finalized !== true) {\n            throw new Error(\"\");\n        }\n        return d.supertypeList.slice(1);\n    };\n\n    // Returns an object mapping from every known type in the defCache to the\n    // most specific supertype whose name is an own property of the candidates\n    // object.\n    exports.computeSupertypeLookupTable = function (candidates) {\n        var table = {};\n        var typeNames = Object.keys(defCache);\n        var typeNameCount = typeNames.length;\n\n        for (var i = 0; i < typeNameCount; ++i) {\n            var typeName = typeNames[i];\n            var d = defCache[typeName];\n            if (d.finalized !== true) {\n                throw new Error(\"\" + typeName);\n            }\n            for (var j = 0; j < d.supertypeList.length; ++j) {\n                var superTypeName = d.supertypeList[j];\n                if (hasOwn.call(candidates, superTypeName)) {\n                    table[typeName] = superTypeName;\n                    break;\n                }\n            }\n        }\n\n        return table;\n    };\n\n    Dp.checkAllFields = function (value, deep) {\n        var allFields = this.allFields;\n        if (this.finalized !== true) {\n            throw new Error(\"\" + this.typeName);\n        }\n\n        function checkFieldByName(name) {\n            var field = allFields[name];\n            var type = field.type;\n            var child = field.getValue(value);\n            return type.check(child, deep);\n        }\n\n        return isObject.check(value)\n          && Object.keys(allFields).every(checkFieldByName);\n    };\n\n    Dp.check = function (value, deep) {\n        if (this.finalized !== true) {\n            throw new Error(\n              \"prematurely checking unfinalized type \" + this.typeName\n            );\n        }\n\n        // A Def type can only match an object value.\n        if (!isObject.check(value))\n            return false;\n\n        var vDef = Def.fromValue(value);\n        if (!vDef) {\n            // If we couldn't infer the Def associated with the given value,\n            // and we expected it to be a SourceLocation or a Position, it was\n            // probably just missing a \"type\" field (because Esprima does not\n            // assign a type property to such nodes). Be optimistic and let\n            // this.checkAllFields make the final decision.\n            if (this.typeName === \"SourceLocation\" ||\n              this.typeName === \"Position\") {\n                return this.checkAllFields(value, deep);\n            }\n\n            // Calling this.checkAllFields for any other type of node is both\n            // bad for performance and way too forgiving.\n            return false;\n        }\n\n        // If checking deeply and vDef === this, then we only need to call\n        // checkAllFields once. Calling checkAllFields is too strict when deep\n        // is false, because then we only care about this.isSupertypeOf(vDef).\n        if (deep && vDef === this)\n            return this.checkAllFields(value, deep);\n\n        // In most cases we rely exclusively on isSupertypeOf to make O(1)\n        // subtyping determinations. This suffices in most situations outside\n        // of unit tests, since interface conformance is checked whenever new\n        // instances are created using builder functions.\n        if (!this.isSupertypeOf(vDef))\n            return false;\n\n        // The exception is when deep is true; then, we recursively check all\n        // fields.\n        if (!deep)\n            return true;\n\n        // Use the more specific Def (vDef) to perform the deep check, but\n        // shallow-check fields defined by the less specific Def (this).\n        return vDef.checkAllFields(value, deep)\n          && this.checkAllFields(value, false);\n    };\n\n    Dp.bases = function () {\n        var args = slice.call(arguments);\n        var bases = this.baseNames;\n\n        if (this.finalized) {\n            if (args.length !== bases.length) {\n                throw new Error(\"\");\n            }\n            for (var i = 0; i < args.length; i++) {\n                if (args[i] !== bases[i]) {\n                    throw new Error(\"\");\n                }\n            }\n            return this;\n        }\n\n        args.forEach(function (baseName) {\n            isString.assert(baseName);\n\n            // This indexOf lookup may be O(n), but the typical number of base\n            // names is very small, and indexOf is a native Array method.\n            if (bases.indexOf(baseName) < 0)\n                bases.push(baseName);\n        });\n\n        return this; // For chaining.\n    };\n\n    // False by default until .build(...) is called on an instance.\n    Object.defineProperty(Dp, \"buildable\", {value: false});\n\n    var builders = {};\n    exports.builders = builders;\n\n    // This object is used as prototype for any node created by a builder.\n    var nodePrototype = {};\n\n    // Call this function to define a new method to be shared by all AST\n     // nodes. The replaced method (if any) is returned for easy wrapping.\n    exports.defineMethod = function (name, func) {\n        var old = nodePrototype[name];\n\n        // Pass undefined as func to delete nodePrototype[name].\n        if (isUndefined.check(func)) {\n            delete nodePrototype[name];\n\n        } else {\n            isFunction.assert(func);\n\n            Object.defineProperty(nodePrototype, name, {\n                enumerable: true, // For discoverability.\n                configurable: true, // For delete proto[name].\n                value: func\n            });\n        }\n\n        return old;\n    };\n\n    var isArrayOfString = isString.arrayOf();\n\n    // Calling the .build method of a Def simultaneously marks the type as\n    // buildable (by defining builders[getBuilderName(typeName)]) and\n    // specifies the order of arguments that should be passed to the builder\n    // function to create an instance of the type.\n    Dp.build = function (/* param1, param2, ... */) {\n        var self = this;\n\n        var newBuildParams = slice.call(arguments);\n        isArrayOfString.assert(newBuildParams);\n\n        // Calling Def.prototype.build multiple times has the effect of merely\n        // redefining this property.\n        Object.defineProperty(self, \"buildParams\", {\n            value: newBuildParams,\n            writable: false,\n            enumerable: false,\n            configurable: true\n        });\n\n        if (self.buildable) {\n            // If this Def is already buildable, update self.buildParams and\n            // continue using the old builder function.\n            return self;\n        }\n\n        // Every buildable type will have its \"type\" field filled in\n        // automatically. This includes types that are not subtypes of Node,\n        // like SourceLocation, but that seems harmless (TODO?).\n        self.field(\"type\", String, function () { return self.typeName });\n\n        // Override Dp.buildable for this Def instance.\n        Object.defineProperty(self, \"buildable\", {value: true});\n\n        Object.defineProperty(builders, getBuilderName(self.typeName), {\n            enumerable: true,\n\n            value: function () {\n                var args = arguments;\n                var argc = args.length;\n                var built = Object.create(nodePrototype);\n\n                if (!self.finalized) {\n                    throw new Error(\n                      \"attempting to instantiate unfinalized type \" +\n                      self.typeName\n                    );\n                }\n\n                function add(param, i) {\n                    if (hasOwn.call(built, param))\n                        return;\n\n                    var all = self.allFields;\n                    if (!hasOwn.call(all, param)) {\n                        throw new Error(\"\" + param);\n                    }\n\n                    var field = all[param];\n                    var type = field.type;\n                    var value;\n\n                    if (isNumber.check(i) && i < argc) {\n                        value = args[i];\n                    } else if (field.defaultFn) {\n                        // Expose the partially-built object to the default\n                        // function as its `this` object.\n                        value = field.defaultFn.call(built);\n                    } else {\n                        var message = \"no value or default function given for field \" +\n                          JSON.stringify(param) + \" of \" + self.typeName + \"(\" +\n                          self.buildParams.map(function (name) {\n                              return all[name];\n                          }).join(\", \") + \")\";\n                        throw new Error(message);\n                    }\n\n                    if (!type.check(value)) {\n                        throw new Error(\n                          shallowStringify(value) +\n                          \" does not match field \" + field +\n                          \" of type \" + self.typeName\n                        );\n                    }\n\n                    // TODO Could attach getters and setters here to enforce\n                    // dynamic type safety.\n                    built[param] = value;\n                }\n\n                self.buildParams.forEach(function (param, i) {\n                    add(param, i);\n                });\n\n                Object.keys(self.allFields).forEach(function (param) {\n                    add(param); // Use the default value.\n                });\n\n                // Make sure that the \"type\" field was filled automatically.\n                if (built.type !== self.typeName) {\n                    throw new Error(\"\");\n                }\n\n                return built;\n            }\n        });\n\n        return self; // For chaining.\n    };\n\n    function getBuilderName(typeName) {\n        return typeName.replace(/^[A-Z]+/, function (upperCasePrefix) {\n            var len = upperCasePrefix.length;\n            switch (len) {\n                case 0: return \"\";\n                // If there's only one initial capital letter, just lower-case it.\n                case 1: return upperCasePrefix.toLowerCase();\n                default:\n                    // If there's more than one initial capital letter, lower-case\n                    // all but the last one, so that XMLDefaultDeclaration (for\n                    // example) becomes xmlDefaultDeclaration.\n                    return upperCasePrefix.slice(\n                        0, len - 1).toLowerCase() +\n                      upperCasePrefix.charAt(len - 1);\n            }\n        });\n    }\n    exports.getBuilderName = getBuilderName;\n\n    function getStatementBuilderName(typeName) {\n        typeName = getBuilderName(typeName);\n        return typeName.replace(/(Expression)?$/, \"Statement\");\n    }\n    exports.getStatementBuilderName = getStatementBuilderName;\n\n    // The reason fields are specified using .field(...) instead of an object\n    // literal syntax is somewhat subtle: the object literal syntax would\n    // support only one key and one value, but with .field(...) we can pass\n    // any number of arguments to specify the field.\n    Dp.field = function (name, type, defaultFn, hidden) {\n        if (this.finalized) {\n            console.error(\"Ignoring attempt to redefine field \" +\n              JSON.stringify(name) + \" of finalized type \" +\n              JSON.stringify(this.typeName));\n            return this;\n        }\n        this.ownFields[name] = new Field(name, type, defaultFn, hidden);\n        return this; // For chaining.\n    };\n\n    var namedTypes = {};\n    exports.namedTypes = namedTypes;\n\n    // Like Object.keys, but aware of what fields each AST type should have.\n    function getFieldNames(object) {\n        var d = Def.fromValue(object);\n        if (d) {\n            return d.fieldNames.slice(0);\n        }\n\n        if (\"type\" in object) {\n            throw new Error(\n              \"did not recognize object of type \" +\n              JSON.stringify(object.type)\n            );\n        }\n\n        return Object.keys(object);\n    }\n    exports.getFieldNames = getFieldNames;\n\n    // Get the value of an object property, taking object.type and default\n    // functions into account.\n    function getFieldValue(object, fieldName) {\n        var d = Def.fromValue(object);\n        if (d) {\n            var field = d.allFields[fieldName];\n            if (field) {\n                return field.getValue(object);\n            }\n        }\n\n        return object && object[fieldName];\n    }\n    exports.getFieldValue = getFieldValue;\n\n    // Iterate over all defined fields of an object, including those missing\n    // or undefined, passing each field name and effective value (as returned\n    // by getFieldValue) to the callback. If the object has no corresponding\n    // Def, the callback will never be called.\n    exports.eachField = function (object, callback, context) {\n        getFieldNames(object).forEach(function (name) {\n            callback.call(this, name, getFieldValue(object, name));\n        }, context);\n    };\n\n    // Similar to eachField, except that iteration stops as soon as the\n    // callback returns a truthy value. Like Array.prototype.some, the final\n    // result is either true or false to indicates whether the callback\n    // returned true for any element or not.\n    exports.someField = function (object, callback, context) {\n        return getFieldNames(object).some(function (name) {\n            return callback.call(this, name, getFieldValue(object, name));\n        }, context);\n    };\n\n    // This property will be overridden as true by individual Def instances\n    // when they are finalized.\n    Object.defineProperty(Dp, \"finalized\", {value: false});\n\n    Dp.finalize = function () {\n        var self = this;\n\n        // It's not an error to finalize a type more than once, but only the\n        // first call to .finalize does anything.\n        if (!self.finalized) {\n            var allFields = self.allFields;\n            var allSupertypes = self.allSupertypes;\n\n            self.baseNames.forEach(function (name) {\n                var def = defCache[name];\n                if (def instanceof Def) {\n                    def.finalize();\n                    extend(allFields, def.allFields);\n                    extend(allSupertypes, def.allSupertypes);\n                } else {\n                    var message = \"unknown supertype name \" +\n                      JSON.stringify(name) +\n                      \" for subtype \" +\n                      JSON.stringify(self.typeName);\n                    throw new Error(message);\n                }\n            });\n\n            // TODO Warn if fields are overridden with incompatible types.\n            extend(allFields, self.ownFields);\n            allSupertypes[self.typeName] = self;\n\n            self.fieldNames.length = 0;\n            for (var fieldName in allFields) {\n                if (hasOwn.call(allFields, fieldName) &&\n                    !allFields[fieldName].hidden) {\n                        self.fieldNames.push(fieldName);\n                }\n            }\n\n            // Types are exported only once they have been finalized.\n            Object.defineProperty(namedTypes, self.typeName, {\n                enumerable: true,\n                value: self.type\n            });\n\n            Object.defineProperty(self, \"finalized\", {value: true});\n\n            // A linearization of the inheritance hierarchy.\n            populateSupertypeList(self.typeName, self.supertypeList);\n\n            if (self.buildable && self.supertypeList.lastIndexOf(\"Expression\") >= 0) {\n                wrapExpressionBuilderWithStatement(self.typeName);\n            }\n        }\n    };\n\n    // Adds an additional builder for Expression subtypes\n    // that wraps the built Expression in an ExpressionStatements.\n    function wrapExpressionBuilderWithStatement(typeName) {\n        var wrapperName = getStatementBuilderName(typeName);\n\n        // skip if the builder already exists\n        if (builders[wrapperName]) return;\n\n        // the builder function to wrap with builders.ExpressionStatement\n        var wrapped = builders[getBuilderName(typeName)];\n\n        // skip if there is nothing to wrap\n        if (!wrapped) return;\n\n        builders[wrapperName] = function () {\n            return builders.expressionStatement(wrapped.apply(builders, arguments));\n        };\n    }\n\n    function populateSupertypeList(typeName, list) {\n        list.length = 0;\n        list.push(typeName);\n\n        var lastSeen = Object.create(null);\n\n        for (var pos = 0; pos < list.length; ++pos) {\n            typeName = list[pos];\n            var d = defCache[typeName];\n            if (d.finalized !== true) {\n                throw new Error(\"\");\n            }\n\n            // If we saw typeName earlier in the breadth-first traversal,\n            // delete the last-seen occurrence.\n            if (hasOwn.call(lastSeen, typeName)) {\n                delete list[lastSeen[typeName]];\n            }\n\n            // Record the new index of the last-seen occurrence of typeName.\n            lastSeen[typeName] = pos;\n\n            // Enqueue the base names of this type.\n            list.push.apply(list, d.baseNames);\n        }\n\n        // Compaction loop to remove array holes.\n        for (var to = 0, from = to, len = list.length; from < len; ++from) {\n            if (hasOwn.call(list, from)) {\n                list[to++] = list[from];\n            }\n        }\n\n        list.length = to;\n    }\n\n    function extend(into, from) {\n        Object.keys(from).forEach(function (name) {\n            into[name] = from[name];\n        });\n\n        return into;\n    };\n\n    exports.finalize = function () {\n        Object.keys(defCache).forEach(function (name) {\n            defCache[name].finalize();\n        });\n    };\n\n    return exports;\n};\n","map":{"mappings":[{"source":"../node_modules/ast-types/lib/types.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":371,"column":0},"generated":{"line":371,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":372,"column":0},"generated":{"line":372,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":373,"column":0},"generated":{"line":373,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":374,"column":0},"generated":{"line":374,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":375,"column":0},"generated":{"line":375,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":376,"column":0},"generated":{"line":376,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":377,"column":0},"generated":{"line":377,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":378,"column":0},"generated":{"line":378,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":379,"column":0},"generated":{"line":379,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":380,"column":0},"generated":{"line":380,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":381,"column":0},"generated":{"line":381,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":382,"column":0},"generated":{"line":382,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":383,"column":0},"generated":{"line":383,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":384,"column":0},"generated":{"line":384,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":385,"column":0},"generated":{"line":385,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":386,"column":0},"generated":{"line":386,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":387,"column":0},"generated":{"line":387,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":388,"column":0},"generated":{"line":388,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":389,"column":0},"generated":{"line":389,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":390,"column":0},"generated":{"line":390,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":391,"column":0},"generated":{"line":391,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":392,"column":0},"generated":{"line":392,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":393,"column":0},"generated":{"line":393,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":394,"column":0},"generated":{"line":394,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":395,"column":0},"generated":{"line":395,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":396,"column":0},"generated":{"line":396,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":397,"column":0},"generated":{"line":397,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":398,"column":0},"generated":{"line":398,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":399,"column":0},"generated":{"line":399,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":400,"column":0},"generated":{"line":400,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":401,"column":0},"generated":{"line":401,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":402,"column":0},"generated":{"line":402,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":403,"column":0},"generated":{"line":403,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":404,"column":0},"generated":{"line":404,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":405,"column":0},"generated":{"line":405,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":406,"column":0},"generated":{"line":406,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":407,"column":0},"generated":{"line":407,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":408,"column":0},"generated":{"line":408,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":409,"column":0},"generated":{"line":409,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":410,"column":0},"generated":{"line":410,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":411,"column":0},"generated":{"line":411,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":412,"column":0},"generated":{"line":412,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":413,"column":0},"generated":{"line":413,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":414,"column":0},"generated":{"line":414,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":415,"column":0},"generated":{"line":415,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":416,"column":0},"generated":{"line":416,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":417,"column":0},"generated":{"line":417,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":418,"column":0},"generated":{"line":418,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":419,"column":0},"generated":{"line":419,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":420,"column":0},"generated":{"line":420,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":421,"column":0},"generated":{"line":421,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":422,"column":0},"generated":{"line":422,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":423,"column":0},"generated":{"line":423,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":424,"column":0},"generated":{"line":424,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":425,"column":0},"generated":{"line":425,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":426,"column":0},"generated":{"line":426,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":427,"column":0},"generated":{"line":427,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":428,"column":0},"generated":{"line":428,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":429,"column":0},"generated":{"line":429,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":430,"column":0},"generated":{"line":430,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":431,"column":0},"generated":{"line":431,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":432,"column":0},"generated":{"line":432,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":433,"column":0},"generated":{"line":433,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":434,"column":0},"generated":{"line":434,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":435,"column":0},"generated":{"line":435,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":436,"column":0},"generated":{"line":436,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":437,"column":0},"generated":{"line":437,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":438,"column":0},"generated":{"line":438,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":439,"column":0},"generated":{"line":439,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":440,"column":0},"generated":{"line":440,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":441,"column":0},"generated":{"line":441,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":442,"column":0},"generated":{"line":442,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":443,"column":0},"generated":{"line":443,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":444,"column":0},"generated":{"line":444,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":445,"column":0},"generated":{"line":445,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":446,"column":0},"generated":{"line":446,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":447,"column":0},"generated":{"line":447,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":448,"column":0},"generated":{"line":448,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":449,"column":0},"generated":{"line":449,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":450,"column":0},"generated":{"line":450,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":451,"column":0},"generated":{"line":451,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":452,"column":0},"generated":{"line":452,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":453,"column":0},"generated":{"line":453,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":454,"column":0},"generated":{"line":454,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":455,"column":0},"generated":{"line":455,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":456,"column":0},"generated":{"line":456,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":457,"column":0},"generated":{"line":457,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":458,"column":0},"generated":{"line":458,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":459,"column":0},"generated":{"line":459,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":460,"column":0},"generated":{"line":460,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":461,"column":0},"generated":{"line":461,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":462,"column":0},"generated":{"line":462,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":463,"column":0},"generated":{"line":463,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":464,"column":0},"generated":{"line":464,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":465,"column":0},"generated":{"line":465,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":466,"column":0},"generated":{"line":466,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":467,"column":0},"generated":{"line":467,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":468,"column":0},"generated":{"line":468,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":469,"column":0},"generated":{"line":469,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":470,"column":0},"generated":{"line":470,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":471,"column":0},"generated":{"line":471,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":472,"column":0},"generated":{"line":472,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":473,"column":0},"generated":{"line":473,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":474,"column":0},"generated":{"line":474,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":475,"column":0},"generated":{"line":475,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":476,"column":0},"generated":{"line":476,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":477,"column":0},"generated":{"line":477,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":478,"column":0},"generated":{"line":478,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":479,"column":0},"generated":{"line":479,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":480,"column":0},"generated":{"line":480,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":481,"column":0},"generated":{"line":481,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":482,"column":0},"generated":{"line":482,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":483,"column":0},"generated":{"line":483,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":484,"column":0},"generated":{"line":484,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":485,"column":0},"generated":{"line":485,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":486,"column":0},"generated":{"line":486,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":487,"column":0},"generated":{"line":487,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":488,"column":0},"generated":{"line":488,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":489,"column":0},"generated":{"line":489,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":490,"column":0},"generated":{"line":490,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":491,"column":0},"generated":{"line":491,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":492,"column":0},"generated":{"line":492,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":493,"column":0},"generated":{"line":493,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":494,"column":0},"generated":{"line":494,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":495,"column":0},"generated":{"line":495,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":496,"column":0},"generated":{"line":496,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":497,"column":0},"generated":{"line":497,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":498,"column":0},"generated":{"line":498,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":499,"column":0},"generated":{"line":499,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":500,"column":0},"generated":{"line":500,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":501,"column":0},"generated":{"line":501,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":502,"column":0},"generated":{"line":502,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":503,"column":0},"generated":{"line":503,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":504,"column":0},"generated":{"line":504,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":505,"column":0},"generated":{"line":505,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":506,"column":0},"generated":{"line":506,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":507,"column":0},"generated":{"line":507,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":508,"column":0},"generated":{"line":508,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":509,"column":0},"generated":{"line":509,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":510,"column":0},"generated":{"line":510,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":511,"column":0},"generated":{"line":511,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":512,"column":0},"generated":{"line":512,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":513,"column":0},"generated":{"line":513,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":514,"column":0},"generated":{"line":514,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":515,"column":0},"generated":{"line":515,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":516,"column":0},"generated":{"line":516,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":517,"column":0},"generated":{"line":517,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":518,"column":0},"generated":{"line":518,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":519,"column":0},"generated":{"line":519,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":520,"column":0},"generated":{"line":520,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":521,"column":0},"generated":{"line":521,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":522,"column":0},"generated":{"line":522,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":523,"column":0},"generated":{"line":523,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":524,"column":0},"generated":{"line":524,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":525,"column":0},"generated":{"line":525,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":526,"column":0},"generated":{"line":526,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":527,"column":0},"generated":{"line":527,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":528,"column":0},"generated":{"line":528,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":529,"column":0},"generated":{"line":529,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":530,"column":0},"generated":{"line":530,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":531,"column":0},"generated":{"line":531,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":532,"column":0},"generated":{"line":532,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":533,"column":0},"generated":{"line":533,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":534,"column":0},"generated":{"line":534,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":535,"column":0},"generated":{"line":535,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":536,"column":0},"generated":{"line":536,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":537,"column":0},"generated":{"line":537,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":538,"column":0},"generated":{"line":538,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":539,"column":0},"generated":{"line":539,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":540,"column":0},"generated":{"line":540,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":541,"column":0},"generated":{"line":541,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":542,"column":0},"generated":{"line":542,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":543,"column":0},"generated":{"line":543,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":544,"column":0},"generated":{"line":544,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":545,"column":0},"generated":{"line":545,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":546,"column":0},"generated":{"line":546,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":547,"column":0},"generated":{"line":547,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":548,"column":0},"generated":{"line":548,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":549,"column":0},"generated":{"line":549,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":550,"column":0},"generated":{"line":550,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":551,"column":0},"generated":{"line":551,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":552,"column":0},"generated":{"line":552,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":553,"column":0},"generated":{"line":553,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":554,"column":0},"generated":{"line":554,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":555,"column":0},"generated":{"line":555,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":556,"column":0},"generated":{"line":556,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":557,"column":0},"generated":{"line":557,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":558,"column":0},"generated":{"line":558,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":559,"column":0},"generated":{"line":559,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":560,"column":0},"generated":{"line":560,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":561,"column":0},"generated":{"line":561,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":562,"column":0},"generated":{"line":562,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":563,"column":0},"generated":{"line":563,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":564,"column":0},"generated":{"line":564,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":565,"column":0},"generated":{"line":565,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":566,"column":0},"generated":{"line":566,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":567,"column":0},"generated":{"line":567,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":568,"column":0},"generated":{"line":568,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":569,"column":0},"generated":{"line":569,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":570,"column":0},"generated":{"line":570,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":571,"column":0},"generated":{"line":571,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":572,"column":0},"generated":{"line":572,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":573,"column":0},"generated":{"line":573,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":574,"column":0},"generated":{"line":574,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":575,"column":0},"generated":{"line":575,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":576,"column":0},"generated":{"line":576,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":577,"column":0},"generated":{"line":577,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":578,"column":0},"generated":{"line":578,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":579,"column":0},"generated":{"line":579,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":580,"column":0},"generated":{"line":580,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":581,"column":0},"generated":{"line":581,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":582,"column":0},"generated":{"line":582,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":583,"column":0},"generated":{"line":583,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":584,"column":0},"generated":{"line":584,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":585,"column":0},"generated":{"line":585,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":586,"column":0},"generated":{"line":586,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":587,"column":0},"generated":{"line":587,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":588,"column":0},"generated":{"line":588,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":589,"column":0},"generated":{"line":589,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":590,"column":0},"generated":{"line":590,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":591,"column":0},"generated":{"line":591,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":592,"column":0},"generated":{"line":592,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":593,"column":0},"generated":{"line":593,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":594,"column":0},"generated":{"line":594,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":595,"column":0},"generated":{"line":595,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":596,"column":0},"generated":{"line":596,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":597,"column":0},"generated":{"line":597,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":598,"column":0},"generated":{"line":598,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":599,"column":0},"generated":{"line":599,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":600,"column":0},"generated":{"line":600,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":601,"column":0},"generated":{"line":601,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":602,"column":0},"generated":{"line":602,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":603,"column":0},"generated":{"line":603,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":604,"column":0},"generated":{"line":604,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":605,"column":0},"generated":{"line":605,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":606,"column":0},"generated":{"line":606,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":607,"column":0},"generated":{"line":607,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":608,"column":0},"generated":{"line":608,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":609,"column":0},"generated":{"line":609,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":610,"column":0},"generated":{"line":610,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":611,"column":0},"generated":{"line":611,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":612,"column":0},"generated":{"line":612,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":613,"column":0},"generated":{"line":613,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":614,"column":0},"generated":{"line":614,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":615,"column":0},"generated":{"line":615,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":616,"column":0},"generated":{"line":616,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":617,"column":0},"generated":{"line":617,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":618,"column":0},"generated":{"line":618,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":619,"column":0},"generated":{"line":619,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":620,"column":0},"generated":{"line":620,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":621,"column":0},"generated":{"line":621,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":622,"column":0},"generated":{"line":622,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":623,"column":0},"generated":{"line":623,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":624,"column":0},"generated":{"line":624,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":625,"column":0},"generated":{"line":625,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":626,"column":0},"generated":{"line":626,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":627,"column":0},"generated":{"line":627,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":628,"column":0},"generated":{"line":628,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":629,"column":0},"generated":{"line":629,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":630,"column":0},"generated":{"line":630,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":631,"column":0},"generated":{"line":631,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":632,"column":0},"generated":{"line":632,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":633,"column":0},"generated":{"line":633,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":634,"column":0},"generated":{"line":634,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":635,"column":0},"generated":{"line":635,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":636,"column":0},"generated":{"line":636,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":637,"column":0},"generated":{"line":637,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":638,"column":0},"generated":{"line":638,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":639,"column":0},"generated":{"line":639,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":640,"column":0},"generated":{"line":640,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":641,"column":0},"generated":{"line":641,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":642,"column":0},"generated":{"line":642,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":643,"column":0},"generated":{"line":643,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":644,"column":0},"generated":{"line":644,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":645,"column":0},"generated":{"line":645,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":646,"column":0},"generated":{"line":646,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":647,"column":0},"generated":{"line":647,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":648,"column":0},"generated":{"line":648,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":649,"column":0},"generated":{"line":649,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":650,"column":0},"generated":{"line":650,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":651,"column":0},"generated":{"line":651,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":652,"column":0},"generated":{"line":652,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":653,"column":0},"generated":{"line":653,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":654,"column":0},"generated":{"line":654,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":655,"column":0},"generated":{"line":655,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":656,"column":0},"generated":{"line":656,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":657,"column":0},"generated":{"line":657,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":658,"column":0},"generated":{"line":658,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":659,"column":0},"generated":{"line":659,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":660,"column":0},"generated":{"line":660,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":661,"column":0},"generated":{"line":661,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":662,"column":0},"generated":{"line":662,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":663,"column":0},"generated":{"line":663,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":664,"column":0},"generated":{"line":664,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":665,"column":0},"generated":{"line":665,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":666,"column":0},"generated":{"line":666,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":667,"column":0},"generated":{"line":667,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":668,"column":0},"generated":{"line":668,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":669,"column":0},"generated":{"line":669,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":670,"column":0},"generated":{"line":670,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":671,"column":0},"generated":{"line":671,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":672,"column":0},"generated":{"line":672,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":673,"column":0},"generated":{"line":673,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":674,"column":0},"generated":{"line":674,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":675,"column":0},"generated":{"line":675,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":676,"column":0},"generated":{"line":676,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":677,"column":0},"generated":{"line":677,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":678,"column":0},"generated":{"line":678,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":679,"column":0},"generated":{"line":679,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":680,"column":0},"generated":{"line":680,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":681,"column":0},"generated":{"line":681,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":682,"column":0},"generated":{"line":682,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":683,"column":0},"generated":{"line":683,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":684,"column":0},"generated":{"line":684,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":685,"column":0},"generated":{"line":685,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":686,"column":0},"generated":{"line":686,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":687,"column":0},"generated":{"line":687,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":688,"column":0},"generated":{"line":688,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":689,"column":0},"generated":{"line":689,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":690,"column":0},"generated":{"line":690,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":691,"column":0},"generated":{"line":691,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":692,"column":0},"generated":{"line":692,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":693,"column":0},"generated":{"line":693,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":694,"column":0},"generated":{"line":694,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":695,"column":0},"generated":{"line":695,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":696,"column":0},"generated":{"line":696,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":697,"column":0},"generated":{"line":697,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":698,"column":0},"generated":{"line":698,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":699,"column":0},"generated":{"line":699,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":700,"column":0},"generated":{"line":700,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":701,"column":0},"generated":{"line":701,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":702,"column":0},"generated":{"line":702,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":703,"column":0},"generated":{"line":703,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":704,"column":0},"generated":{"line":704,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":705,"column":0},"generated":{"line":705,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":706,"column":0},"generated":{"line":706,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":707,"column":0},"generated":{"line":707,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":708,"column":0},"generated":{"line":708,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":709,"column":0},"generated":{"line":709,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":710,"column":0},"generated":{"line":710,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":711,"column":0},"generated":{"line":711,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":712,"column":0},"generated":{"line":712,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":713,"column":0},"generated":{"line":713,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":714,"column":0},"generated":{"line":714,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":715,"column":0},"generated":{"line":715,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":716,"column":0},"generated":{"line":716,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":717,"column":0},"generated":{"line":717,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":718,"column":0},"generated":{"line":718,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":719,"column":0},"generated":{"line":719,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":720,"column":0},"generated":{"line":720,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":721,"column":0},"generated":{"line":721,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":722,"column":0},"generated":{"line":722,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":723,"column":0},"generated":{"line":723,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":724,"column":0},"generated":{"line":724,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":725,"column":0},"generated":{"line":725,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":726,"column":0},"generated":{"line":726,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":727,"column":0},"generated":{"line":727,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":728,"column":0},"generated":{"line":728,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":729,"column":0},"generated":{"line":729,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":730,"column":0},"generated":{"line":730,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":731,"column":0},"generated":{"line":731,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":732,"column":0},"generated":{"line":732,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":733,"column":0},"generated":{"line":733,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":734,"column":0},"generated":{"line":734,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":735,"column":0},"generated":{"line":735,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":736,"column":0},"generated":{"line":736,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":737,"column":0},"generated":{"line":737,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":738,"column":0},"generated":{"line":738,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":739,"column":0},"generated":{"line":739,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":740,"column":0},"generated":{"line":740,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":741,"column":0},"generated":{"line":741,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":742,"column":0},"generated":{"line":742,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":743,"column":0},"generated":{"line":743,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":744,"column":0},"generated":{"line":744,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":745,"column":0},"generated":{"line":745,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":746,"column":0},"generated":{"line":746,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":747,"column":0},"generated":{"line":747,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":748,"column":0},"generated":{"line":748,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":749,"column":0},"generated":{"line":749,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":750,"column":0},"generated":{"line":750,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":751,"column":0},"generated":{"line":751,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":752,"column":0},"generated":{"line":752,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":753,"column":0},"generated":{"line":753,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":754,"column":0},"generated":{"line":754,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":755,"column":0},"generated":{"line":755,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":756,"column":0},"generated":{"line":756,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":757,"column":0},"generated":{"line":757,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":758,"column":0},"generated":{"line":758,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":759,"column":0},"generated":{"line":759,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":760,"column":0},"generated":{"line":760,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":761,"column":0},"generated":{"line":761,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":762,"column":0},"generated":{"line":762,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":763,"column":0},"generated":{"line":763,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":764,"column":0},"generated":{"line":764,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":765,"column":0},"generated":{"line":765,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":766,"column":0},"generated":{"line":766,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":767,"column":0},"generated":{"line":767,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":768,"column":0},"generated":{"line":768,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":769,"column":0},"generated":{"line":769,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":770,"column":0},"generated":{"line":770,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":771,"column":0},"generated":{"line":771,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":772,"column":0},"generated":{"line":772,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":773,"column":0},"generated":{"line":773,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":774,"column":0},"generated":{"line":774,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":775,"column":0},"generated":{"line":775,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":776,"column":0},"generated":{"line":776,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":777,"column":0},"generated":{"line":777,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":778,"column":0},"generated":{"line":778,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":779,"column":0},"generated":{"line":779,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":780,"column":0},"generated":{"line":780,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":781,"column":0},"generated":{"line":781,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":782,"column":0},"generated":{"line":782,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":783,"column":0},"generated":{"line":783,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":784,"column":0},"generated":{"line":784,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":785,"column":0},"generated":{"line":785,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":786,"column":0},"generated":{"line":786,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":787,"column":0},"generated":{"line":787,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":788,"column":0},"generated":{"line":788,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":789,"column":0},"generated":{"line":789,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":790,"column":0},"generated":{"line":790,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":791,"column":0},"generated":{"line":791,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":792,"column":0},"generated":{"line":792,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":793,"column":0},"generated":{"line":793,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":794,"column":0},"generated":{"line":794,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":795,"column":0},"generated":{"line":795,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":796,"column":0},"generated":{"line":796,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":797,"column":0},"generated":{"line":797,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":798,"column":0},"generated":{"line":798,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":799,"column":0},"generated":{"line":799,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":800,"column":0},"generated":{"line":800,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":801,"column":0},"generated":{"line":801,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":802,"column":0},"generated":{"line":802,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":803,"column":0},"generated":{"line":803,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":804,"column":0},"generated":{"line":804,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":805,"column":0},"generated":{"line":805,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":806,"column":0},"generated":{"line":806,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":807,"column":0},"generated":{"line":807,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":808,"column":0},"generated":{"line":808,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":809,"column":0},"generated":{"line":809,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":810,"column":0},"generated":{"line":810,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":811,"column":0},"generated":{"line":811,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":812,"column":0},"generated":{"line":812,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":813,"column":0},"generated":{"line":813,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":814,"column":0},"generated":{"line":814,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":815,"column":0},"generated":{"line":815,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":816,"column":0},"generated":{"line":816,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":817,"column":0},"generated":{"line":817,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":818,"column":0},"generated":{"line":818,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":819,"column":0},"generated":{"line":819,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":820,"column":0},"generated":{"line":820,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":821,"column":0},"generated":{"line":821,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":822,"column":0},"generated":{"line":822,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":823,"column":0},"generated":{"line":823,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":824,"column":0},"generated":{"line":824,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":825,"column":0},"generated":{"line":825,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":826,"column":0},"generated":{"line":826,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":827,"column":0},"generated":{"line":827,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":828,"column":0},"generated":{"line":828,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":829,"column":0},"generated":{"line":829,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":830,"column":0},"generated":{"line":830,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":831,"column":0},"generated":{"line":831,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":832,"column":0},"generated":{"line":832,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":833,"column":0},"generated":{"line":833,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":834,"column":0},"generated":{"line":834,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":835,"column":0},"generated":{"line":835,"column":0}},{"source":"../node_modules/ast-types/lib/types.js","original":{"line":836,"column":0},"generated":{"line":836,"column":0}}],"sources":{"../node_modules/ast-types/lib/types.js":"var Ap = Array.prototype;\nvar slice = Ap.slice;\nvar map = Ap.map;\nvar each = Ap.forEach;\nvar Op = Object.prototype;\nvar objToStr = Op.toString;\nvar funObjStr = objToStr.call(function(){});\nvar strObjStr = objToStr.call(\"\");\nvar hasOwn = Op.hasOwnProperty;\n\nmodule.exports = function () {\n\n    var exports = {};\n\n    // A type is an object with a .check method that takes a value and returns\n    // true or false according to whether the value matches the type.\n\n    function Type(check, name) {\n        var self = this;\n        if (!(self instanceof Type)) {\n            throw new Error(\"Type constructor cannot be invoked without 'new'\");\n        }\n\n        // Unfortunately we can't elegantly reuse isFunction and isString,\n        // here, because this code is executed while defining those types.\n        if (objToStr.call(check) !== funObjStr) {\n            throw new Error(check + \" is not a function\");\n        }\n\n        // The `name` parameter can be either a function or a string.\n        var nameObjStr = objToStr.call(name);\n        if (!(nameObjStr === funObjStr ||\n          nameObjStr === strObjStr)) {\n            throw new Error(name + \" is neither a function nor a string\");\n        }\n\n        Object.defineProperties(self, {\n            name: {value: name},\n            check: {\n                value: function (value, deep) {\n                    var result = check.call(self, value, deep);\n                    if (!result && deep && objToStr.call(deep) === funObjStr)\n                        deep(self, value);\n                    return result;\n                }\n            }\n        });\n    }\n\n    var Tp = Type.prototype;\n\n    // Throughout this file we use Object.defineProperty to prevent\n    // redefinition of exported properties.\n    exports.Type = Type;\n\n    // Like .check, except that failure triggers an AssertionError.\n    Tp.assert = function (value, deep) {\n        if (!this.check(value, deep)) {\n            var str = shallowStringify(value);\n            throw new Error(str + \" does not match type \" + this);\n        }\n        return true;\n    };\n\n    function shallowStringify(value) {\n        if (isObject.check(value))\n            return \"{\" + Object.keys(value).map(function (key) {\n                  return key + \": \" + value[key];\n              }).join(\", \") + \"}\";\n\n        if (isArray.check(value))\n            return \"[\" + value.map(shallowStringify).join(\", \") + \"]\";\n\n        return JSON.stringify(value);\n    }\n\n    Tp.toString = function () {\n        var name = this.name;\n\n        if (isString.check(name))\n            return name;\n\n        if (isFunction.check(name))\n            return name.call(this) + \"\";\n\n        return name + \" type\";\n    };\n\n    var builtInCtorFns = [];\n    var builtInCtorTypes = [];\n    var builtInTypes = {};\n    exports.builtInTypes = builtInTypes;\n\n    function defBuiltInType(example, name) {\n        var objStr = objToStr.call(example);\n\n        var type = new Type(function (value) {\n            return objToStr.call(value) === objStr;\n        }, name);\n\n        builtInTypes[name] = type;\n\n        if (example && typeof example.constructor === \"function\") {\n            builtInCtorFns.push(example.constructor);\n            builtInCtorTypes.push(type);\n        }\n\n        return type;\n    }\n\n    // These types check the underlying [[Class]] attribute of the given\n    // value, rather than using the problematic typeof operator. Note however\n    // that no subtyping is considered; so, for instance, isObject.check\n    // returns false for [], /./, new Date, and null.\n    var isString = defBuiltInType(\"truthy\", \"string\");\n    var isFunction = defBuiltInType(function () {}, \"function\");\n    var isArray = defBuiltInType([], \"array\");\n    var isObject = defBuiltInType({}, \"object\");\n    var isRegExp = defBuiltInType(/./, \"RegExp\");\n    var isDate = defBuiltInType(new Date, \"Date\");\n    var isNumber = defBuiltInType(3, \"number\");\n    var isBoolean = defBuiltInType(true, \"boolean\");\n    var isNull = defBuiltInType(null, \"null\");\n    var isUndefined = defBuiltInType(void 0, \"undefined\");\n\n    // There are a number of idiomatic ways of expressing types, so this\n    // function serves to coerce them all to actual Type objects. Note that\n    // providing the name argument is not necessary in most cases.\n    function toType(from, name) {\n        // The toType function should of course be idempotent.\n        if (from instanceof Type)\n            return from;\n\n        // The Def type is used as a helper for constructing compound\n        // interface types for AST nodes.\n        if (from instanceof Def)\n            return from.type;\n\n        // Support [ElemType] syntax.\n        if (isArray.check(from))\n            return Type.fromArray(from);\n\n        // Support { someField: FieldType, ... } syntax.\n        if (isObject.check(from))\n            return Type.fromObject(from);\n\n        if (isFunction.check(from)) {\n            var bicfIndex = builtInCtorFns.indexOf(from);\n            if (bicfIndex >= 0) {\n                return builtInCtorTypes[bicfIndex];\n            }\n\n            // If isFunction.check(from), and from is not a built-in\n            // constructor, assume from is a binary predicate function we can\n            // use to define the type.\n            return new Type(from, name);\n        }\n\n        // As a last resort, toType returns a type that matches any value that\n        // is === from. This is primarily useful for literal values like\n        // toType(null), but it has the additional advantage of allowing\n        // toType to be a total function.\n        return new Type(function (value) {\n            return value === from;\n        }, isUndefined.check(name) ? function () {\n            return from + \"\";\n        } : name);\n    }\n\n    // Returns a type that matches the given value iff any of type1, type2,\n    // etc. match the value.\n    Type.or = function (/* type1, type2, ... */) {\n        var types = [];\n        var len = arguments.length;\n        for (var i = 0; i < len; ++i)\n            types.push(toType(arguments[i]));\n\n        return new Type(function (value, deep) {\n            for (var i = 0; i < len; ++i)\n                if (types[i].check(value, deep))\n                    return true;\n            return false;\n        }, function () {\n            return types.join(\" | \");\n        });\n    };\n\n    Type.fromArray = function (arr) {\n        if (!isArray.check(arr)) {\n            throw new Error(\"\");\n        }\n        if (arr.length !== 1) {\n            throw new Error(\"only one element type is permitted for typed arrays\");\n        }\n        return toType(arr[0]).arrayOf();\n    };\n\n    Tp.arrayOf = function () {\n        var elemType = this;\n        return new Type(function (value, deep) {\n            return isArray.check(value) && value.every(function (elem) {\n                  return elemType.check(elem, deep);\n              });\n        }, function () {\n            return \"[\" + elemType + \"]\";\n        });\n    };\n\n    Type.fromObject = function (obj) {\n        var fields = Object.keys(obj).map(function (name) {\n            return new Field(name, obj[name]);\n        });\n\n        return new Type(function (value, deep) {\n            return isObject.check(value) && fields.every(function (field) {\n                  return field.type.check(value[field.name], deep);\n              });\n        }, function () {\n            return \"{ \" + fields.join(\", \") + \" }\";\n        });\n    };\n\n    function Field(name, type, defaultFn, hidden) {\n        var self = this;\n\n        if (!(self instanceof Field)) {\n            throw new Error(\"Field constructor cannot be invoked without 'new'\");\n        }\n        isString.assert(name);\n\n        type = toType(type);\n\n        var properties = {\n            name: {value: name},\n            type: {value: type},\n            hidden: {value: !!hidden}\n        };\n\n        if (isFunction.check(defaultFn)) {\n            properties.defaultFn = {value: defaultFn};\n        }\n\n        Object.defineProperties(self, properties);\n    }\n\n    var Fp = Field.prototype;\n\n    Fp.toString = function () {\n        return JSON.stringify(this.name) + \": \" + this.type;\n    };\n\n    Fp.getValue = function (obj) {\n        var value = obj[this.name];\n\n        if (!isUndefined.check(value))\n            return value;\n\n        if (this.defaultFn)\n            value = this.defaultFn.call(obj);\n\n        return value;\n    };\n\n    // Define a type whose name is registered in a namespace (the defCache) so\n    // that future definitions will return the same type given the same name.\n    // In particular, this system allows for circular and forward definitions.\n    // The Def object d returned from Type.def may be used to configure the\n    // type d.type by calling methods such as d.bases, d.build, and d.field.\n    Type.def = function (typeName) {\n        isString.assert(typeName);\n        return hasOwn.call(defCache, typeName)\n          ? defCache[typeName]\n          : defCache[typeName] = new Def(typeName);\n    };\n\n    // In order to return the same Def instance every time Type.def is called\n    // with a particular name, those instances need to be stored in a cache.\n    var defCache = Object.create(null);\n\n    function Def(typeName) {\n        var self = this;\n        if (!(self instanceof Def)) {\n            throw new Error(\"Def constructor cannot be invoked without 'new'\");\n        }\n\n        Object.defineProperties(self, {\n            typeName: {value: typeName},\n            baseNames: {value: []},\n            ownFields: {value: Object.create(null)},\n\n            // These two are populated during finalization.\n            allSupertypes: {value: Object.create(null)}, // Includes own typeName.\n            supertypeList: {value: []}, // Linear inheritance hierarchy.\n            allFields: {value: Object.create(null)}, // Includes inherited fields.\n            fieldNames: {value: []}, // Non-hidden keys of allFields.\n\n            type: {\n                value: new Type(function (value, deep) {\n                    return self.check(value, deep);\n                }, typeName)\n            }\n        });\n    }\n\n    Def.fromValue = function (value) {\n        if (value && typeof value === \"object\") {\n            var type = value.type;\n            if (typeof type === \"string\" &&\n              hasOwn.call(defCache, type)) {\n                var d = defCache[type];\n                if (d.finalized) {\n                    return d;\n                }\n            }\n        }\n\n        return null;\n    };\n\n    var Dp = Def.prototype;\n\n    Dp.isSupertypeOf = function (that) {\n        if (that instanceof Def) {\n            if (this.finalized !== true ||\n              that.finalized !== true) {\n                throw new Error(\"\");\n            }\n            return hasOwn.call(that.allSupertypes, this.typeName);\n        } else {\n            throw new Error(that + \" is not a Def\");\n        }\n    };\n\n    // Note that the list returned by this function is a copy of the internal\n    // supertypeList, *without* the typeName itself as the first element.\n    exports.getSupertypeNames = function (typeName) {\n        if (!hasOwn.call(defCache, typeName)) {\n            throw new Error(\"\");\n        }\n        var d = defCache[typeName];\n        if (d.finalized !== true) {\n            throw new Error(\"\");\n        }\n        return d.supertypeList.slice(1);\n    };\n\n    // Returns an object mapping from every known type in the defCache to the\n    // most specific supertype whose name is an own property of the candidates\n    // object.\n    exports.computeSupertypeLookupTable = function (candidates) {\n        var table = {};\n        var typeNames = Object.keys(defCache);\n        var typeNameCount = typeNames.length;\n\n        for (var i = 0; i < typeNameCount; ++i) {\n            var typeName = typeNames[i];\n            var d = defCache[typeName];\n            if (d.finalized !== true) {\n                throw new Error(\"\" + typeName);\n            }\n            for (var j = 0; j < d.supertypeList.length; ++j) {\n                var superTypeName = d.supertypeList[j];\n                if (hasOwn.call(candidates, superTypeName)) {\n                    table[typeName] = superTypeName;\n                    break;\n                }\n            }\n        }\n\n        return table;\n    };\n\n    Dp.checkAllFields = function (value, deep) {\n        var allFields = this.allFields;\n        if (this.finalized !== true) {\n            throw new Error(\"\" + this.typeName);\n        }\n\n        function checkFieldByName(name) {\n            var field = allFields[name];\n            var type = field.type;\n            var child = field.getValue(value);\n            return type.check(child, deep);\n        }\n\n        return isObject.check(value)\n          && Object.keys(allFields).every(checkFieldByName);\n    };\n\n    Dp.check = function (value, deep) {\n        if (this.finalized !== true) {\n            throw new Error(\n              \"prematurely checking unfinalized type \" + this.typeName\n            );\n        }\n\n        // A Def type can only match an object value.\n        if (!isObject.check(value))\n            return false;\n\n        var vDef = Def.fromValue(value);\n        if (!vDef) {\n            // If we couldn't infer the Def associated with the given value,\n            // and we expected it to be a SourceLocation or a Position, it was\n            // probably just missing a \"type\" field (because Esprima does not\n            // assign a type property to such nodes). Be optimistic and let\n            // this.checkAllFields make the final decision.\n            if (this.typeName === \"SourceLocation\" ||\n              this.typeName === \"Position\") {\n                return this.checkAllFields(value, deep);\n            }\n\n            // Calling this.checkAllFields for any other type of node is both\n            // bad for performance and way too forgiving.\n            return false;\n        }\n\n        // If checking deeply and vDef === this, then we only need to call\n        // checkAllFields once. Calling checkAllFields is too strict when deep\n        // is false, because then we only care about this.isSupertypeOf(vDef).\n        if (deep && vDef === this)\n            return this.checkAllFields(value, deep);\n\n        // In most cases we rely exclusively on isSupertypeOf to make O(1)\n        // subtyping determinations. This suffices in most situations outside\n        // of unit tests, since interface conformance is checked whenever new\n        // instances are created using builder functions.\n        if (!this.isSupertypeOf(vDef))\n            return false;\n\n        // The exception is when deep is true; then, we recursively check all\n        // fields.\n        if (!deep)\n            return true;\n\n        // Use the more specific Def (vDef) to perform the deep check, but\n        // shallow-check fields defined by the less specific Def (this).\n        return vDef.checkAllFields(value, deep)\n          && this.checkAllFields(value, false);\n    };\n\n    Dp.bases = function () {\n        var args = slice.call(arguments);\n        var bases = this.baseNames;\n\n        if (this.finalized) {\n            if (args.length !== bases.length) {\n                throw new Error(\"\");\n            }\n            for (var i = 0; i < args.length; i++) {\n                if (args[i] !== bases[i]) {\n                    throw new Error(\"\");\n                }\n            }\n            return this;\n        }\n\n        args.forEach(function (baseName) {\n            isString.assert(baseName);\n\n            // This indexOf lookup may be O(n), but the typical number of base\n            // names is very small, and indexOf is a native Array method.\n            if (bases.indexOf(baseName) < 0)\n                bases.push(baseName);\n        });\n\n        return this; // For chaining.\n    };\n\n    // False by default until .build(...) is called on an instance.\n    Object.defineProperty(Dp, \"buildable\", {value: false});\n\n    var builders = {};\n    exports.builders = builders;\n\n    // This object is used as prototype for any node created by a builder.\n    var nodePrototype = {};\n\n    // Call this function to define a new method to be shared by all AST\n     // nodes. The replaced method (if any) is returned for easy wrapping.\n    exports.defineMethod = function (name, func) {\n        var old = nodePrototype[name];\n\n        // Pass undefined as func to delete nodePrototype[name].\n        if (isUndefined.check(func)) {\n            delete nodePrototype[name];\n\n        } else {\n            isFunction.assert(func);\n\n            Object.defineProperty(nodePrototype, name, {\n                enumerable: true, // For discoverability.\n                configurable: true, // For delete proto[name].\n                value: func\n            });\n        }\n\n        return old;\n    };\n\n    var isArrayOfString = isString.arrayOf();\n\n    // Calling the .build method of a Def simultaneously marks the type as\n    // buildable (by defining builders[getBuilderName(typeName)]) and\n    // specifies the order of arguments that should be passed to the builder\n    // function to create an instance of the type.\n    Dp.build = function (/* param1, param2, ... */) {\n        var self = this;\n\n        var newBuildParams = slice.call(arguments);\n        isArrayOfString.assert(newBuildParams);\n\n        // Calling Def.prototype.build multiple times has the effect of merely\n        // redefining this property.\n        Object.defineProperty(self, \"buildParams\", {\n            value: newBuildParams,\n            writable: false,\n            enumerable: false,\n            configurable: true\n        });\n\n        if (self.buildable) {\n            // If this Def is already buildable, update self.buildParams and\n            // continue using the old builder function.\n            return self;\n        }\n\n        // Every buildable type will have its \"type\" field filled in\n        // automatically. This includes types that are not subtypes of Node,\n        // like SourceLocation, but that seems harmless (TODO?).\n        self.field(\"type\", String, function () { return self.typeName });\n\n        // Override Dp.buildable for this Def instance.\n        Object.defineProperty(self, \"buildable\", {value: true});\n\n        Object.defineProperty(builders, getBuilderName(self.typeName), {\n            enumerable: true,\n\n            value: function () {\n                var args = arguments;\n                var argc = args.length;\n                var built = Object.create(nodePrototype);\n\n                if (!self.finalized) {\n                    throw new Error(\n                      \"attempting to instantiate unfinalized type \" +\n                      self.typeName\n                    );\n                }\n\n                function add(param, i) {\n                    if (hasOwn.call(built, param))\n                        return;\n\n                    var all = self.allFields;\n                    if (!hasOwn.call(all, param)) {\n                        throw new Error(\"\" + param);\n                    }\n\n                    var field = all[param];\n                    var type = field.type;\n                    var value;\n\n                    if (isNumber.check(i) && i < argc) {\n                        value = args[i];\n                    } else if (field.defaultFn) {\n                        // Expose the partially-built object to the default\n                        // function as its `this` object.\n                        value = field.defaultFn.call(built);\n                    } else {\n                        var message = \"no value or default function given for field \" +\n                          JSON.stringify(param) + \" of \" + self.typeName + \"(\" +\n                          self.buildParams.map(function (name) {\n                              return all[name];\n                          }).join(\", \") + \")\";\n                        throw new Error(message);\n                    }\n\n                    if (!type.check(value)) {\n                        throw new Error(\n                          shallowStringify(value) +\n                          \" does not match field \" + field +\n                          \" of type \" + self.typeName\n                        );\n                    }\n\n                    // TODO Could attach getters and setters here to enforce\n                    // dynamic type safety.\n                    built[param] = value;\n                }\n\n                self.buildParams.forEach(function (param, i) {\n                    add(param, i);\n                });\n\n                Object.keys(self.allFields).forEach(function (param) {\n                    add(param); // Use the default value.\n                });\n\n                // Make sure that the \"type\" field was filled automatically.\n                if (built.type !== self.typeName) {\n                    throw new Error(\"\");\n                }\n\n                return built;\n            }\n        });\n\n        return self; // For chaining.\n    };\n\n    function getBuilderName(typeName) {\n        return typeName.replace(/^[A-Z]+/, function (upperCasePrefix) {\n            var len = upperCasePrefix.length;\n            switch (len) {\n                case 0: return \"\";\n                // If there's only one initial capital letter, just lower-case it.\n                case 1: return upperCasePrefix.toLowerCase();\n                default:\n                    // If there's more than one initial capital letter, lower-case\n                    // all but the last one, so that XMLDefaultDeclaration (for\n                    // example) becomes xmlDefaultDeclaration.\n                    return upperCasePrefix.slice(\n                        0, len - 1).toLowerCase() +\n                      upperCasePrefix.charAt(len - 1);\n            }\n        });\n    }\n    exports.getBuilderName = getBuilderName;\n\n    function getStatementBuilderName(typeName) {\n        typeName = getBuilderName(typeName);\n        return typeName.replace(/(Expression)?$/, \"Statement\");\n    }\n    exports.getStatementBuilderName = getStatementBuilderName;\n\n    // The reason fields are specified using .field(...) instead of an object\n    // literal syntax is somewhat subtle: the object literal syntax would\n    // support only one key and one value, but with .field(...) we can pass\n    // any number of arguments to specify the field.\n    Dp.field = function (name, type, defaultFn, hidden) {\n        if (this.finalized) {\n            console.error(\"Ignoring attempt to redefine field \" +\n              JSON.stringify(name) + \" of finalized type \" +\n              JSON.stringify(this.typeName));\n            return this;\n        }\n        this.ownFields[name] = new Field(name, type, defaultFn, hidden);\n        return this; // For chaining.\n    };\n\n    var namedTypes = {};\n    exports.namedTypes = namedTypes;\n\n    // Like Object.keys, but aware of what fields each AST type should have.\n    function getFieldNames(object) {\n        var d = Def.fromValue(object);\n        if (d) {\n            return d.fieldNames.slice(0);\n        }\n\n        if (\"type\" in object) {\n            throw new Error(\n              \"did not recognize object of type \" +\n              JSON.stringify(object.type)\n            );\n        }\n\n        return Object.keys(object);\n    }\n    exports.getFieldNames = getFieldNames;\n\n    // Get the value of an object property, taking object.type and default\n    // functions into account.\n    function getFieldValue(object, fieldName) {\n        var d = Def.fromValue(object);\n        if (d) {\n            var field = d.allFields[fieldName];\n            if (field) {\n                return field.getValue(object);\n            }\n        }\n\n        return object && object[fieldName];\n    }\n    exports.getFieldValue = getFieldValue;\n\n    // Iterate over all defined fields of an object, including those missing\n    // or undefined, passing each field name and effective value (as returned\n    // by getFieldValue) to the callback. If the object has no corresponding\n    // Def, the callback will never be called.\n    exports.eachField = function (object, callback, context) {\n        getFieldNames(object).forEach(function (name) {\n            callback.call(this, name, getFieldValue(object, name));\n        }, context);\n    };\n\n    // Similar to eachField, except that iteration stops as soon as the\n    // callback returns a truthy value. Like Array.prototype.some, the final\n    // result is either true or false to indicates whether the callback\n    // returned true for any element or not.\n    exports.someField = function (object, callback, context) {\n        return getFieldNames(object).some(function (name) {\n            return callback.call(this, name, getFieldValue(object, name));\n        }, context);\n    };\n\n    // This property will be overridden as true by individual Def instances\n    // when they are finalized.\n    Object.defineProperty(Dp, \"finalized\", {value: false});\n\n    Dp.finalize = function () {\n        var self = this;\n\n        // It's not an error to finalize a type more than once, but only the\n        // first call to .finalize does anything.\n        if (!self.finalized) {\n            var allFields = self.allFields;\n            var allSupertypes = self.allSupertypes;\n\n            self.baseNames.forEach(function (name) {\n                var def = defCache[name];\n                if (def instanceof Def) {\n                    def.finalize();\n                    extend(allFields, def.allFields);\n                    extend(allSupertypes, def.allSupertypes);\n                } else {\n                    var message = \"unknown supertype name \" +\n                      JSON.stringify(name) +\n                      \" for subtype \" +\n                      JSON.stringify(self.typeName);\n                    throw new Error(message);\n                }\n            });\n\n            // TODO Warn if fields are overridden with incompatible types.\n            extend(allFields, self.ownFields);\n            allSupertypes[self.typeName] = self;\n\n            self.fieldNames.length = 0;\n            for (var fieldName in allFields) {\n                if (hasOwn.call(allFields, fieldName) &&\n                    !allFields[fieldName].hidden) {\n                        self.fieldNames.push(fieldName);\n                }\n            }\n\n            // Types are exported only once they have been finalized.\n            Object.defineProperty(namedTypes, self.typeName, {\n                enumerable: true,\n                value: self.type\n            });\n\n            Object.defineProperty(self, \"finalized\", {value: true});\n\n            // A linearization of the inheritance hierarchy.\n            populateSupertypeList(self.typeName, self.supertypeList);\n\n            if (self.buildable && self.supertypeList.lastIndexOf(\"Expression\") >= 0) {\n                wrapExpressionBuilderWithStatement(self.typeName);\n            }\n        }\n    };\n\n    // Adds an additional builder for Expression subtypes\n    // that wraps the built Expression in an ExpressionStatements.\n    function wrapExpressionBuilderWithStatement(typeName) {\n        var wrapperName = getStatementBuilderName(typeName);\n\n        // skip if the builder already exists\n        if (builders[wrapperName]) return;\n\n        // the builder function to wrap with builders.ExpressionStatement\n        var wrapped = builders[getBuilderName(typeName)];\n\n        // skip if there is nothing to wrap\n        if (!wrapped) return;\n\n        builders[wrapperName] = function () {\n            return builders.expressionStatement(wrapped.apply(builders, arguments));\n        };\n    }\n\n    function populateSupertypeList(typeName, list) {\n        list.length = 0;\n        list.push(typeName);\n\n        var lastSeen = Object.create(null);\n\n        for (var pos = 0; pos < list.length; ++pos) {\n            typeName = list[pos];\n            var d = defCache[typeName];\n            if (d.finalized !== true) {\n                throw new Error(\"\");\n            }\n\n            // If we saw typeName earlier in the breadth-first traversal,\n            // delete the last-seen occurrence.\n            if (hasOwn.call(lastSeen, typeName)) {\n                delete list[lastSeen[typeName]];\n            }\n\n            // Record the new index of the last-seen occurrence of typeName.\n            lastSeen[typeName] = pos;\n\n            // Enqueue the base names of this type.\n            list.push.apply(list, d.baseNames);\n        }\n\n        // Compaction loop to remove array holes.\n        for (var to = 0, from = to, len = list.length; from < len; ++from) {\n            if (hasOwn.call(list, from)) {\n                list[to++] = list[from];\n            }\n        }\n\n        list.length = to;\n    }\n\n    function extend(into, from) {\n        Object.keys(from).forEach(function (name) {\n            into[name] = from[name];\n        });\n\n        return into;\n    };\n\n    exports.finalize = function () {\n        Object.keys(defCache).forEach(function (name) {\n            defCache[name].finalize();\n        });\n    };\n\n    return exports;\n};\n"},"lineCount":836}},"hash":"09b8a7192f3b0c5e46be2a9d0af3da13","cacheData":{"env":{}}}