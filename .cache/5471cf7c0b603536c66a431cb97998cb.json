{"dependencies":[{"name":"buffer","loc":{"line":2,"column":21}}],"generated":{"js":"\n\"use strict\";\nvar Buffer = require(\"buffer\").Buffer;\n\n// Multibyte codec. In this scheme, a character is represented by 1 or more bytes.\n// Our codec supports UTF-16 surrogates, extensions for GB18030 and unicode sequences.\n// To save memory and loading time, we read table files only when requested.\n\nexports._dbcs = DBCSCodec;\n\nvar UNASSIGNED = -1,\n    GB18030_CODE = -2,\n    SEQ_START  = -10,\n    NODE_START = -1000,\n    UNASSIGNED_NODE = new Array(0x100),\n    DEF_CHAR = -1;\n\nfor (var i = 0; i < 0x100; i++)\n    UNASSIGNED_NODE[i] = UNASSIGNED;\n\n\n// Class DBCSCodec reads and initializes mapping tables.\nfunction DBCSCodec(codecOptions, iconv) {\n    this.encodingName = codecOptions.encodingName;\n    if (!codecOptions)\n        throw new Error(\"DBCS codec is called without the data.\")\n    if (!codecOptions.table)\n        throw new Error(\"Encoding '\" + this.encodingName + \"' has no data.\");\n\n    // Load tables.\n    var mappingTable = codecOptions.table();\n\n\n    // Decode tables: MBCS -> Unicode.\n\n    // decodeTables is a trie, encoded as an array of arrays of integers. Internal arrays are trie nodes and all have len = 256.\n    // Trie root is decodeTables[0].\n    // Values: >=  0 -> unicode character code. can be > 0xFFFF\n    //         == UNASSIGNED -> unknown/unassigned sequence.\n    //         == GB18030_CODE -> this is the end of a GB18030 4-byte sequence.\n    //         <= NODE_START -> index of the next node in our trie to process next byte.\n    //         <= SEQ_START  -> index of the start of a character code sequence, in decodeTableSeq.\n    this.decodeTables = [];\n    this.decodeTables[0] = UNASSIGNED_NODE.slice(0); // Create root node.\n\n    // Sometimes a MBCS char corresponds to a sequence of unicode chars. We store them as arrays of integers here. \n    this.decodeTableSeq = [];\n\n    // Actual mapping tables consist of chunks. Use them to fill up decode tables.\n    for (var i = 0; i < mappingTable.length; i++)\n        this._addDecodeChunk(mappingTable[i]);\n\n    this.defaultCharUnicode = iconv.defaultCharUnicode;\n\n    \n    // Encode tables: Unicode -> DBCS.\n\n    // `encodeTable` is array mapping from unicode char to encoded char. All its values are integers for performance.\n    // Because it can be sparse, it is represented as array of buckets by 256 chars each. Bucket can be null.\n    // Values: >=  0 -> it is a normal char. Write the value (if <=256 then 1 byte, if <=65536 then 2 bytes, etc.).\n    //         == UNASSIGNED -> no conversion found. Output a default char.\n    //         <= SEQ_START  -> it's an index in encodeTableSeq, see below. The character starts a sequence.\n    this.encodeTable = [];\n    \n    // `encodeTableSeq` is used when a sequence of unicode characters is encoded as a single code. We use a tree of\n    // objects where keys correspond to characters in sequence and leafs are the encoded dbcs values. A special DEF_CHAR key\n    // means end of sequence (needed when one sequence is a strict subsequence of another).\n    // Objects are kept separately from encodeTable to increase performance.\n    this.encodeTableSeq = [];\n\n    // Some chars can be decoded, but need not be encoded.\n    var skipEncodeChars = {};\n    if (codecOptions.encodeSkipVals)\n        for (var i = 0; i < codecOptions.encodeSkipVals.length; i++) {\n            var val = codecOptions.encodeSkipVals[i];\n            if (typeof val === 'number')\n                skipEncodeChars[val] = true;\n            else\n                for (var j = val.from; j <= val.to; j++)\n                    skipEncodeChars[j] = true;\n        }\n        \n    // Use decode trie to recursively fill out encode tables.\n    this._fillEncodeTable(0, 0, skipEncodeChars);\n\n    // Add more encoding pairs when needed.\n    if (codecOptions.encodeAdd) {\n        for (var uChar in codecOptions.encodeAdd)\n            if (Object.prototype.hasOwnProperty.call(codecOptions.encodeAdd, uChar))\n                this._setEncodeChar(uChar.charCodeAt(0), codecOptions.encodeAdd[uChar]);\n    }\n\n    this.defCharSB  = this.encodeTable[0][iconv.defaultCharSingleByte.charCodeAt(0)];\n    if (this.defCharSB === UNASSIGNED) this.defCharSB = this.encodeTable[0]['?'];\n    if (this.defCharSB === UNASSIGNED) this.defCharSB = \"?\".charCodeAt(0);\n\n\n    // Load & create GB18030 tables when needed.\n    if (typeof codecOptions.gb18030 === 'function') {\n        this.gb18030 = codecOptions.gb18030(); // Load GB18030 ranges.\n\n        // Add GB18030 decode tables.\n        var thirdByteNodeIdx = this.decodeTables.length;\n        var thirdByteNode = this.decodeTables[thirdByteNodeIdx] = UNASSIGNED_NODE.slice(0);\n\n        var fourthByteNodeIdx = this.decodeTables.length;\n        var fourthByteNode = this.decodeTables[fourthByteNodeIdx] = UNASSIGNED_NODE.slice(0);\n\n        for (var i = 0x81; i <= 0xFE; i++) {\n            var secondByteNodeIdx = NODE_START - this.decodeTables[0][i];\n            var secondByteNode = this.decodeTables[secondByteNodeIdx];\n            for (var j = 0x30; j <= 0x39; j++)\n                secondByteNode[j] = NODE_START - thirdByteNodeIdx;\n        }\n        for (var i = 0x81; i <= 0xFE; i++)\n            thirdByteNode[i] = NODE_START - fourthByteNodeIdx;\n        for (var i = 0x30; i <= 0x39; i++)\n            fourthByteNode[i] = GB18030_CODE\n    }        \n}\n\nDBCSCodec.prototype.encoder = DBCSEncoder;\nDBCSCodec.prototype.decoder = DBCSDecoder;\n\n// Decoder helpers\nDBCSCodec.prototype._getDecodeTrieNode = function(addr) {\n    var bytes = [];\n    for (; addr > 0; addr >>= 8)\n        bytes.push(addr & 0xFF);\n    if (bytes.length == 0)\n        bytes.push(0);\n\n    var node = this.decodeTables[0];\n    for (var i = bytes.length-1; i > 0; i--) { // Traverse nodes deeper into the trie.\n        var val = node[bytes[i]];\n\n        if (val == UNASSIGNED) { // Create new node.\n            node[bytes[i]] = NODE_START - this.decodeTables.length;\n            this.decodeTables.push(node = UNASSIGNED_NODE.slice(0));\n        }\n        else if (val <= NODE_START) { // Existing node.\n            node = this.decodeTables[NODE_START - val];\n        }\n        else\n            throw new Error(\"Overwrite byte in \" + this.encodingName + \", addr: \" + addr.toString(16));\n    }\n    return node;\n}\n\n\nDBCSCodec.prototype._addDecodeChunk = function(chunk) {\n    // First element of chunk is the hex mbcs code where we start.\n    var curAddr = parseInt(chunk[0], 16);\n\n    // Choose the decoding node where we'll write our chars.\n    var writeTable = this._getDecodeTrieNode(curAddr);\n    curAddr = curAddr & 0xFF;\n\n    // Write all other elements of the chunk to the table.\n    for (var k = 1; k < chunk.length; k++) {\n        var part = chunk[k];\n        if (typeof part === \"string\") { // String, write as-is.\n            for (var l = 0; l < part.length;) {\n                var code = part.charCodeAt(l++);\n                if (0xD800 <= code && code < 0xDC00) { // Decode surrogate\n                    var codeTrail = part.charCodeAt(l++);\n                    if (0xDC00 <= codeTrail && codeTrail < 0xE000)\n                        writeTable[curAddr++] = 0x10000 + (code - 0xD800) * 0x400 + (codeTrail - 0xDC00);\n                    else\n                        throw new Error(\"Incorrect surrogate pair in \"  + this.encodingName + \" at chunk \" + chunk[0]);\n                }\n                else if (0x0FF0 < code && code <= 0x0FFF) { // Character sequence (our own encoding used)\n                    var len = 0xFFF - code + 2;\n                    var seq = [];\n                    for (var m = 0; m < len; m++)\n                        seq.push(part.charCodeAt(l++)); // Simple variation: don't support surrogates or subsequences in seq.\n\n                    writeTable[curAddr++] = SEQ_START - this.decodeTableSeq.length;\n                    this.decodeTableSeq.push(seq);\n                }\n                else\n                    writeTable[curAddr++] = code; // Basic char\n            }\n        } \n        else if (typeof part === \"number\") { // Integer, meaning increasing sequence starting with prev character.\n            var charCode = writeTable[curAddr - 1] + 1;\n            for (var l = 0; l < part; l++)\n                writeTable[curAddr++] = charCode++;\n        }\n        else\n            throw new Error(\"Incorrect type '\" + typeof part + \"' given in \"  + this.encodingName + \" at chunk \" + chunk[0]);\n    }\n    if (curAddr > 0xFF)\n        throw new Error(\"Incorrect chunk in \"  + this.encodingName + \" at addr \" + chunk[0] + \": too long\" + curAddr);\n}\n\n// Encoder helpers\nDBCSCodec.prototype._getEncodeBucket = function(uCode) {\n    var high = uCode >> 8; // This could be > 0xFF because of astral characters.\n    if (this.encodeTable[high] === undefined)\n        this.encodeTable[high] = UNASSIGNED_NODE.slice(0); // Create bucket on demand.\n    return this.encodeTable[high];\n}\n\nDBCSCodec.prototype._setEncodeChar = function(uCode, dbcsCode) {\n    var bucket = this._getEncodeBucket(uCode);\n    var low = uCode & 0xFF;\n    if (bucket[low] <= SEQ_START)\n        this.encodeTableSeq[SEQ_START-bucket[low]][DEF_CHAR] = dbcsCode; // There's already a sequence, set a single-char subsequence of it.\n    else if (bucket[low] == UNASSIGNED)\n        bucket[low] = dbcsCode;\n}\n\nDBCSCodec.prototype._setEncodeSequence = function(seq, dbcsCode) {\n    \n    // Get the root of character tree according to first character of the sequence.\n    var uCode = seq[0];\n    var bucket = this._getEncodeBucket(uCode);\n    var low = uCode & 0xFF;\n\n    var node;\n    if (bucket[low] <= SEQ_START) {\n        // There's already a sequence with  - use it.\n        node = this.encodeTableSeq[SEQ_START-bucket[low]];\n    }\n    else {\n        // There was no sequence object - allocate a new one.\n        node = {};\n        if (bucket[low] !== UNASSIGNED) node[DEF_CHAR] = bucket[low]; // If a char was set before - make it a single-char subsequence.\n        bucket[low] = SEQ_START - this.encodeTableSeq.length;\n        this.encodeTableSeq.push(node);\n    }\n\n    // Traverse the character tree, allocating new nodes as needed.\n    for (var j = 1; j < seq.length-1; j++) {\n        var oldVal = node[uCode];\n        if (typeof oldVal === 'object')\n            node = oldVal;\n        else {\n            node = node[uCode] = {}\n            if (oldVal !== undefined)\n                node[DEF_CHAR] = oldVal\n        }\n    }\n\n    // Set the leaf to given dbcsCode.\n    uCode = seq[seq.length-1];\n    node[uCode] = dbcsCode;\n}\n\nDBCSCodec.prototype._fillEncodeTable = function(nodeIdx, prefix, skipEncodeChars) {\n    var node = this.decodeTables[nodeIdx];\n    for (var i = 0; i < 0x100; i++) {\n        var uCode = node[i];\n        var mbCode = prefix + i;\n        if (skipEncodeChars[mbCode])\n            continue;\n\n        if (uCode >= 0)\n            this._setEncodeChar(uCode, mbCode);\n        else if (uCode <= NODE_START)\n            this._fillEncodeTable(NODE_START - uCode, mbCode << 8, skipEncodeChars);\n        else if (uCode <= SEQ_START)\n            this._setEncodeSequence(this.decodeTableSeq[SEQ_START - uCode], mbCode);\n    }\n}\n\n\n\n// == Encoder ==================================================================\n\nfunction DBCSEncoder(options, codec) {\n    // Encoder state\n    this.leadSurrogate = -1;\n    this.seqObj = undefined;\n    \n    // Static data\n    this.encodeTable = codec.encodeTable;\n    this.encodeTableSeq = codec.encodeTableSeq;\n    this.defaultCharSingleByte = codec.defCharSB;\n    this.gb18030 = codec.gb18030;\n}\n\nDBCSEncoder.prototype.write = function(str) {\n    var newBuf = new Buffer(str.length * (this.gb18030 ? 4 : 3)), \n        leadSurrogate = this.leadSurrogate,\n        seqObj = this.seqObj, nextChar = -1,\n        i = 0, j = 0;\n\n    while (true) {\n        // 0. Get next character.\n        if (nextChar === -1) {\n            if (i == str.length) break;\n            var uCode = str.charCodeAt(i++);\n        }\n        else {\n            var uCode = nextChar;\n            nextChar = -1;    \n        }\n\n        // 1. Handle surrogates.\n        if (0xD800 <= uCode && uCode < 0xE000) { // Char is one of surrogates.\n            if (uCode < 0xDC00) { // We've got lead surrogate.\n                if (leadSurrogate === -1) {\n                    leadSurrogate = uCode;\n                    continue;\n                } else {\n                    leadSurrogate = uCode;\n                    // Double lead surrogate found.\n                    uCode = UNASSIGNED;\n                }\n            } else { // We've got trail surrogate.\n                if (leadSurrogate !== -1) {\n                    uCode = 0x10000 + (leadSurrogate - 0xD800) * 0x400 + (uCode - 0xDC00);\n                    leadSurrogate = -1;\n                } else {\n                    // Incomplete surrogate pair - only trail surrogate found.\n                    uCode = UNASSIGNED;\n                }\n                \n            }\n        }\n        else if (leadSurrogate !== -1) {\n            // Incomplete surrogate pair - only lead surrogate found.\n            nextChar = uCode; uCode = UNASSIGNED; // Write an error, then current char.\n            leadSurrogate = -1;\n        }\n\n        // 2. Convert uCode character.\n        var dbcsCode = UNASSIGNED;\n        if (seqObj !== undefined && uCode != UNASSIGNED) { // We are in the middle of the sequence\n            var resCode = seqObj[uCode];\n            if (typeof resCode === 'object') { // Sequence continues.\n                seqObj = resCode;\n                continue;\n\n            } else if (typeof resCode == 'number') { // Sequence finished. Write it.\n                dbcsCode = resCode;\n\n            } else if (resCode == undefined) { // Current character is not part of the sequence.\n\n                // Try default character for this sequence\n                resCode = seqObj[DEF_CHAR];\n                if (resCode !== undefined) {\n                    dbcsCode = resCode; // Found. Write it.\n                    nextChar = uCode; // Current character will be written too in the next iteration.\n\n                } else {\n                    // TODO: What if we have no default? (resCode == undefined)\n                    // Then, we should write first char of the sequence as-is and try the rest recursively.\n                    // Didn't do it for now because no encoding has this situation yet.\n                    // Currently, just skip the sequence and write current char.\n                }\n            }\n            seqObj = undefined;\n        }\n        else if (uCode >= 0) {  // Regular character\n            var subtable = this.encodeTable[uCode >> 8];\n            if (subtable !== undefined)\n                dbcsCode = subtable[uCode & 0xFF];\n            \n            if (dbcsCode <= SEQ_START) { // Sequence start\n                seqObj = this.encodeTableSeq[SEQ_START-dbcsCode];\n                continue;\n            }\n\n            if (dbcsCode == UNASSIGNED && this.gb18030) {\n                // Use GB18030 algorithm to find character(s) to write.\n                var idx = findIdx(this.gb18030.uChars, uCode);\n                if (idx != -1) {\n                    var dbcsCode = this.gb18030.gbChars[idx] + (uCode - this.gb18030.uChars[idx]);\n                    newBuf[j++] = 0x81 + Math.floor(dbcsCode / 12600); dbcsCode = dbcsCode % 12600;\n                    newBuf[j++] = 0x30 + Math.floor(dbcsCode / 1260); dbcsCode = dbcsCode % 1260;\n                    newBuf[j++] = 0x81 + Math.floor(dbcsCode / 10); dbcsCode = dbcsCode % 10;\n                    newBuf[j++] = 0x30 + dbcsCode;\n                    continue;\n                }\n            }\n        }\n\n        // 3. Write dbcsCode character.\n        if (dbcsCode === UNASSIGNED)\n            dbcsCode = this.defaultCharSingleByte;\n        \n        if (dbcsCode < 0x100) {\n            newBuf[j++] = dbcsCode;\n        }\n        else if (dbcsCode < 0x10000) {\n            newBuf[j++] = dbcsCode >> 8;   // high byte\n            newBuf[j++] = dbcsCode & 0xFF; // low byte\n        }\n        else {\n            newBuf[j++] = dbcsCode >> 16;\n            newBuf[j++] = (dbcsCode >> 8) & 0xFF;\n            newBuf[j++] = dbcsCode & 0xFF;\n        }\n    }\n\n    this.seqObj = seqObj;\n    this.leadSurrogate = leadSurrogate;\n    return newBuf.slice(0, j);\n}\n\nDBCSEncoder.prototype.end = function() {\n    if (this.leadSurrogate === -1 && this.seqObj === undefined)\n        return; // All clean. Most often case.\n\n    var newBuf = new Buffer(10), j = 0;\n\n    if (this.seqObj) { // We're in the sequence.\n        var dbcsCode = this.seqObj[DEF_CHAR];\n        if (dbcsCode !== undefined) { // Write beginning of the sequence.\n            if (dbcsCode < 0x100) {\n                newBuf[j++] = dbcsCode;\n            }\n            else {\n                newBuf[j++] = dbcsCode >> 8;   // high byte\n                newBuf[j++] = dbcsCode & 0xFF; // low byte\n            }\n        } else {\n            // See todo above.\n        }\n        this.seqObj = undefined;\n    }\n\n    if (this.leadSurrogate !== -1) {\n        // Incomplete surrogate pair - only lead surrogate found.\n        newBuf[j++] = this.defaultCharSingleByte;\n        this.leadSurrogate = -1;\n    }\n    \n    return newBuf.slice(0, j);\n}\n\n// Export for testing\nDBCSEncoder.prototype.findIdx = findIdx;\n\n\n// == Decoder ==================================================================\n\nfunction DBCSDecoder(options, codec) {\n    // Decoder state\n    this.nodeIdx = 0;\n    this.prevBuf = new Buffer(0);\n\n    // Static data\n    this.decodeTables = codec.decodeTables;\n    this.decodeTableSeq = codec.decodeTableSeq;\n    this.defaultCharUnicode = codec.defaultCharUnicode;\n    this.gb18030 = codec.gb18030;\n}\n\nDBCSDecoder.prototype.write = function(buf) {\n    var newBuf = new Buffer(buf.length*2),\n        nodeIdx = this.nodeIdx, \n        prevBuf = this.prevBuf, prevBufOffset = this.prevBuf.length,\n        seqStart = -this.prevBuf.length, // idx of the start of current parsed sequence.\n        uCode;\n\n    if (prevBufOffset > 0) // Make prev buf overlap a little to make it easier to slice later.\n        prevBuf = Buffer.concat([prevBuf, buf.slice(0, 10)]);\n    \n    for (var i = 0, j = 0; i < buf.length; i++) {\n        var curByte = (i >= 0) ? buf[i] : prevBuf[i + prevBufOffset];\n\n        // Lookup in current trie node.\n        var uCode = this.decodeTables[nodeIdx][curByte];\n\n        if (uCode >= 0) { \n            // Normal character, just use it.\n        }\n        else if (uCode === UNASSIGNED) { // Unknown char.\n            // TODO: Callback with seq.\n            //var curSeq = (seqStart >= 0) ? buf.slice(seqStart, i+1) : prevBuf.slice(seqStart + prevBufOffset, i+1 + prevBufOffset);\n            i = seqStart; // Try to parse again, after skipping first byte of the sequence ('i' will be incremented by 'for' cycle).\n            uCode = this.defaultCharUnicode.charCodeAt(0);\n        }\n        else if (uCode === GB18030_CODE) {\n            var curSeq = (seqStart >= 0) ? buf.slice(seqStart, i+1) : prevBuf.slice(seqStart + prevBufOffset, i+1 + prevBufOffset);\n            var ptr = (curSeq[0]-0x81)*12600 + (curSeq[1]-0x30)*1260 + (curSeq[2]-0x81)*10 + (curSeq[3]-0x30);\n            var idx = findIdx(this.gb18030.gbChars, ptr);\n            uCode = this.gb18030.uChars[idx] + ptr - this.gb18030.gbChars[idx];\n        }\n        else if (uCode <= NODE_START) { // Go to next trie node.\n            nodeIdx = NODE_START - uCode;\n            continue;\n        }\n        else if (uCode <= SEQ_START) { // Output a sequence of chars.\n            var seq = this.decodeTableSeq[SEQ_START - uCode];\n            for (var k = 0; k < seq.length - 1; k++) {\n                uCode = seq[k];\n                newBuf[j++] = uCode & 0xFF;\n                newBuf[j++] = uCode >> 8;\n            }\n            uCode = seq[seq.length-1];\n        }\n        else\n            throw new Error(\"iconv-lite internal error: invalid decoding table value \" + uCode + \" at \" + nodeIdx + \"/\" + curByte);\n\n        // Write the character to buffer, handling higher planes using surrogate pair.\n        if (uCode > 0xFFFF) { \n            uCode -= 0x10000;\n            var uCodeLead = 0xD800 + Math.floor(uCode / 0x400);\n            newBuf[j++] = uCodeLead & 0xFF;\n            newBuf[j++] = uCodeLead >> 8;\n\n            uCode = 0xDC00 + uCode % 0x400;\n        }\n        newBuf[j++] = uCode & 0xFF;\n        newBuf[j++] = uCode >> 8;\n\n        // Reset trie node.\n        nodeIdx = 0; seqStart = i+1;\n    }\n\n    this.nodeIdx = nodeIdx;\n    this.prevBuf = (seqStart >= 0) ? buf.slice(seqStart) : prevBuf.slice(seqStart + prevBufOffset);\n    return newBuf.slice(0, j).toString('ucs2');\n}\n\nDBCSDecoder.prototype.end = function() {\n    var ret = '';\n\n    // Try to parse all remaining chars.\n    while (this.prevBuf.length > 0) {\n        // Skip 1 character in the buffer.\n        ret += this.defaultCharUnicode;\n        var buf = this.prevBuf.slice(1);\n\n        // Parse remaining as usual.\n        this.prevBuf = new Buffer(0);\n        this.nodeIdx = 0;\n        if (buf.length > 0)\n            ret += this.write(buf);\n    }\n\n    this.nodeIdx = 0;\n    return ret;\n}\n\n// Binary search for GB18030. Returns largest i such that table[i] <= val.\nfunction findIdx(table, val) {\n    if (table[0] > val)\n        return -1;\n\n    var l = 0, r = table.length;\n    while (l < r-1) { // always table[l] <= val < table[r]\n        var mid = l + Math.floor((r-l+1)/2);\n        if (table[mid] <= val)\n            l = mid;\n        else\n            r = mid;\n    }\n    return l;\n}\n\n","map":{"mappings":[{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":68,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":69,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":70,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":71,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":72,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":73,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":74,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":75,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":76,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":77,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":78,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":79,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":80,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":81,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":82,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":83,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":84,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":85,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":86,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":87,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":88,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":89,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":90,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":91,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":92,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":93,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":94,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":95,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":96,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":97,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":98,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":99,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":100,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":101,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":102,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":103,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":104,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":105,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":106,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":107,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":108,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":109,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":110,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":111,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":112,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":113,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":114,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":115,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":116,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":117,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":118,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":119,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":120,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":121,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":122,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":123,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":124,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":125,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":126,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":127,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":128,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":129,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":130,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":131,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":132,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":133,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":134,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":135,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":136,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":137,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":138,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":139,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":140,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":141,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":142,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":143,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":144,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":145,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":146,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":147,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":148,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":149,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":150,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":151,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":152,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":153,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":154,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":155,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":156,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":157,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":158,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":159,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":160,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":161,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":162,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":163,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":164,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":165,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":166,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":167,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":168,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":169,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":170,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":171,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":172,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":173,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":174,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":175,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":176,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":177,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":178,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":179,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":180,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":181,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":182,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":183,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":184,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":185,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":186,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":187,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":188,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":189,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":190,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":191,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":192,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":193,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":194,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":195,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":196,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":197,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":198,"column":0},"generated":{"line":199,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":199,"column":0},"generated":{"line":200,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":200,"column":0},"generated":{"line":201,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":201,"column":0},"generated":{"line":202,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":202,"column":0},"generated":{"line":203,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":203,"column":0},"generated":{"line":204,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":204,"column":0},"generated":{"line":205,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":205,"column":0},"generated":{"line":206,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":206,"column":0},"generated":{"line":207,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":207,"column":0},"generated":{"line":208,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":208,"column":0},"generated":{"line":209,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":209,"column":0},"generated":{"line":210,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":210,"column":0},"generated":{"line":211,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":211,"column":0},"generated":{"line":212,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":212,"column":0},"generated":{"line":213,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":213,"column":0},"generated":{"line":214,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":214,"column":0},"generated":{"line":215,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":215,"column":0},"generated":{"line":216,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":216,"column":0},"generated":{"line":217,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":217,"column":0},"generated":{"line":218,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":218,"column":0},"generated":{"line":219,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":219,"column":0},"generated":{"line":220,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":220,"column":0},"generated":{"line":221,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":221,"column":0},"generated":{"line":222,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":222,"column":0},"generated":{"line":223,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":223,"column":0},"generated":{"line":224,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":224,"column":0},"generated":{"line":225,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":225,"column":0},"generated":{"line":226,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":226,"column":0},"generated":{"line":227,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":227,"column":0},"generated":{"line":228,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":228,"column":0},"generated":{"line":229,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":229,"column":0},"generated":{"line":230,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":230,"column":0},"generated":{"line":231,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":231,"column":0},"generated":{"line":232,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":232,"column":0},"generated":{"line":233,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":233,"column":0},"generated":{"line":234,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":234,"column":0},"generated":{"line":235,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":235,"column":0},"generated":{"line":236,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":236,"column":0},"generated":{"line":237,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":237,"column":0},"generated":{"line":238,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":238,"column":0},"generated":{"line":239,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":239,"column":0},"generated":{"line":240,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":240,"column":0},"generated":{"line":241,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":241,"column":0},"generated":{"line":242,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":242,"column":0},"generated":{"line":243,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":243,"column":0},"generated":{"line":244,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":244,"column":0},"generated":{"line":245,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":245,"column":0},"generated":{"line":246,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":246,"column":0},"generated":{"line":247,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":247,"column":0},"generated":{"line":248,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":248,"column":0},"generated":{"line":249,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":249,"column":0},"generated":{"line":250,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":250,"column":0},"generated":{"line":251,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":251,"column":0},"generated":{"line":252,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":252,"column":0},"generated":{"line":253,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":253,"column":0},"generated":{"line":254,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":254,"column":0},"generated":{"line":255,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":255,"column":0},"generated":{"line":256,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":256,"column":0},"generated":{"line":257,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":257,"column":0},"generated":{"line":258,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":258,"column":0},"generated":{"line":259,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":259,"column":0},"generated":{"line":260,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":260,"column":0},"generated":{"line":261,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":261,"column":0},"generated":{"line":262,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":262,"column":0},"generated":{"line":263,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":263,"column":0},"generated":{"line":264,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":264,"column":0},"generated":{"line":265,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":265,"column":0},"generated":{"line":266,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":266,"column":0},"generated":{"line":267,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":267,"column":0},"generated":{"line":268,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":268,"column":0},"generated":{"line":269,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":269,"column":0},"generated":{"line":270,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":270,"column":0},"generated":{"line":271,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":271,"column":0},"generated":{"line":272,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":272,"column":0},"generated":{"line":273,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":273,"column":0},"generated":{"line":274,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":274,"column":0},"generated":{"line":275,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":275,"column":0},"generated":{"line":276,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":276,"column":0},"generated":{"line":277,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":277,"column":0},"generated":{"line":278,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":278,"column":0},"generated":{"line":279,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":279,"column":0},"generated":{"line":280,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":280,"column":0},"generated":{"line":281,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":281,"column":0},"generated":{"line":282,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":282,"column":0},"generated":{"line":283,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":283,"column":0},"generated":{"line":284,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":284,"column":0},"generated":{"line":285,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":285,"column":0},"generated":{"line":286,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":286,"column":0},"generated":{"line":287,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":287,"column":0},"generated":{"line":288,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":288,"column":0},"generated":{"line":289,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":289,"column":0},"generated":{"line":290,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":290,"column":0},"generated":{"line":291,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":291,"column":0},"generated":{"line":292,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":292,"column":0},"generated":{"line":293,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":293,"column":0},"generated":{"line":294,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":294,"column":0},"generated":{"line":295,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":295,"column":0},"generated":{"line":296,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":296,"column":0},"generated":{"line":297,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":297,"column":0},"generated":{"line":298,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":298,"column":0},"generated":{"line":299,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":299,"column":0},"generated":{"line":300,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":300,"column":0},"generated":{"line":301,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":301,"column":0},"generated":{"line":302,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":302,"column":0},"generated":{"line":303,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":303,"column":0},"generated":{"line":304,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":304,"column":0},"generated":{"line":305,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":305,"column":0},"generated":{"line":306,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":306,"column":0},"generated":{"line":307,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":307,"column":0},"generated":{"line":308,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":308,"column":0},"generated":{"line":309,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":309,"column":0},"generated":{"line":310,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":310,"column":0},"generated":{"line":311,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":311,"column":0},"generated":{"line":312,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":312,"column":0},"generated":{"line":313,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":313,"column":0},"generated":{"line":314,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":314,"column":0},"generated":{"line":315,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":315,"column":0},"generated":{"line":316,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":316,"column":0},"generated":{"line":317,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":317,"column":0},"generated":{"line":318,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":318,"column":0},"generated":{"line":319,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":319,"column":0},"generated":{"line":320,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":320,"column":0},"generated":{"line":321,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":321,"column":0},"generated":{"line":322,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":322,"column":0},"generated":{"line":323,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":323,"column":0},"generated":{"line":324,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":324,"column":0},"generated":{"line":325,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":325,"column":0},"generated":{"line":326,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":326,"column":0},"generated":{"line":327,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":327,"column":0},"generated":{"line":328,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":328,"column":0},"generated":{"line":329,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":329,"column":0},"generated":{"line":330,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":330,"column":0},"generated":{"line":331,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":331,"column":0},"generated":{"line":332,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":332,"column":0},"generated":{"line":333,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":333,"column":0},"generated":{"line":334,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":334,"column":0},"generated":{"line":335,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":335,"column":0},"generated":{"line":336,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":336,"column":0},"generated":{"line":337,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":337,"column":0},"generated":{"line":338,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":338,"column":0},"generated":{"line":339,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":339,"column":0},"generated":{"line":340,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":340,"column":0},"generated":{"line":341,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":341,"column":0},"generated":{"line":342,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":342,"column":0},"generated":{"line":343,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":343,"column":0},"generated":{"line":344,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":344,"column":0},"generated":{"line":345,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":345,"column":0},"generated":{"line":346,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":346,"column":0},"generated":{"line":347,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":347,"column":0},"generated":{"line":348,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":348,"column":0},"generated":{"line":349,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":349,"column":0},"generated":{"line":350,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":350,"column":0},"generated":{"line":351,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":351,"column":0},"generated":{"line":352,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":352,"column":0},"generated":{"line":353,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":353,"column":0},"generated":{"line":354,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":354,"column":0},"generated":{"line":355,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":355,"column":0},"generated":{"line":356,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":356,"column":0},"generated":{"line":357,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":357,"column":0},"generated":{"line":358,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":358,"column":0},"generated":{"line":359,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":359,"column":0},"generated":{"line":360,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":360,"column":0},"generated":{"line":361,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":361,"column":0},"generated":{"line":362,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":362,"column":0},"generated":{"line":363,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":363,"column":0},"generated":{"line":364,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":364,"column":0},"generated":{"line":365,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":365,"column":0},"generated":{"line":366,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":366,"column":0},"generated":{"line":367,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":367,"column":0},"generated":{"line":368,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":368,"column":0},"generated":{"line":369,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":369,"column":0},"generated":{"line":370,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":370,"column":0},"generated":{"line":371,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":371,"column":0},"generated":{"line":372,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":372,"column":0},"generated":{"line":373,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":373,"column":0},"generated":{"line":374,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":374,"column":0},"generated":{"line":375,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":375,"column":0},"generated":{"line":376,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":376,"column":0},"generated":{"line":377,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":377,"column":0},"generated":{"line":378,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":378,"column":0},"generated":{"line":379,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":379,"column":0},"generated":{"line":380,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":380,"column":0},"generated":{"line":381,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":381,"column":0},"generated":{"line":382,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":382,"column":0},"generated":{"line":383,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":383,"column":0},"generated":{"line":384,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":384,"column":0},"generated":{"line":385,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":385,"column":0},"generated":{"line":386,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":386,"column":0},"generated":{"line":387,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":387,"column":0},"generated":{"line":388,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":388,"column":0},"generated":{"line":389,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":389,"column":0},"generated":{"line":390,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":390,"column":0},"generated":{"line":391,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":391,"column":0},"generated":{"line":392,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":392,"column":0},"generated":{"line":393,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":393,"column":0},"generated":{"line":394,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":394,"column":0},"generated":{"line":395,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":395,"column":0},"generated":{"line":396,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":396,"column":0},"generated":{"line":397,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":397,"column":0},"generated":{"line":398,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":398,"column":0},"generated":{"line":399,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":399,"column":0},"generated":{"line":400,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":400,"column":0},"generated":{"line":401,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":401,"column":0},"generated":{"line":402,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":402,"column":0},"generated":{"line":403,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":403,"column":0},"generated":{"line":404,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":404,"column":0},"generated":{"line":405,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":405,"column":0},"generated":{"line":406,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":406,"column":0},"generated":{"line":407,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":407,"column":0},"generated":{"line":408,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":408,"column":0},"generated":{"line":409,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":409,"column":0},"generated":{"line":410,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":410,"column":0},"generated":{"line":411,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":411,"column":0},"generated":{"line":412,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":412,"column":0},"generated":{"line":413,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":413,"column":0},"generated":{"line":414,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":414,"column":0},"generated":{"line":415,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":415,"column":0},"generated":{"line":416,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":416,"column":0},"generated":{"line":417,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":417,"column":0},"generated":{"line":418,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":418,"column":0},"generated":{"line":419,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":419,"column":0},"generated":{"line":420,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":420,"column":0},"generated":{"line":421,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":421,"column":0},"generated":{"line":422,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":422,"column":0},"generated":{"line":423,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":423,"column":0},"generated":{"line":424,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":424,"column":0},"generated":{"line":425,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":425,"column":0},"generated":{"line":426,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":426,"column":0},"generated":{"line":427,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":427,"column":0},"generated":{"line":428,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":428,"column":0},"generated":{"line":429,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":429,"column":0},"generated":{"line":430,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":430,"column":0},"generated":{"line":431,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":431,"column":0},"generated":{"line":432,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":432,"column":0},"generated":{"line":433,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":433,"column":0},"generated":{"line":434,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":434,"column":0},"generated":{"line":435,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":435,"column":0},"generated":{"line":436,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":436,"column":0},"generated":{"line":437,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":437,"column":0},"generated":{"line":438,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":438,"column":0},"generated":{"line":439,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":439,"column":0},"generated":{"line":440,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":440,"column":0},"generated":{"line":441,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":441,"column":0},"generated":{"line":442,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":442,"column":0},"generated":{"line":443,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":443,"column":0},"generated":{"line":444,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":444,"column":0},"generated":{"line":445,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":445,"column":0},"generated":{"line":446,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":446,"column":0},"generated":{"line":447,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":447,"column":0},"generated":{"line":448,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":448,"column":0},"generated":{"line":449,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":449,"column":0},"generated":{"line":450,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":450,"column":0},"generated":{"line":451,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":451,"column":0},"generated":{"line":452,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":452,"column":0},"generated":{"line":453,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":453,"column":0},"generated":{"line":454,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":454,"column":0},"generated":{"line":455,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":455,"column":0},"generated":{"line":456,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":456,"column":0},"generated":{"line":457,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":457,"column":0},"generated":{"line":458,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":458,"column":0},"generated":{"line":459,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":459,"column":0},"generated":{"line":460,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":460,"column":0},"generated":{"line":461,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":461,"column":0},"generated":{"line":462,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":462,"column":0},"generated":{"line":463,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":463,"column":0},"generated":{"line":464,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":464,"column":0},"generated":{"line":465,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":465,"column":0},"generated":{"line":466,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":466,"column":0},"generated":{"line":467,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":467,"column":0},"generated":{"line":468,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":468,"column":0},"generated":{"line":469,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":469,"column":0},"generated":{"line":470,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":470,"column":0},"generated":{"line":471,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":471,"column":0},"generated":{"line":472,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":472,"column":0},"generated":{"line":473,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":473,"column":0},"generated":{"line":474,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":474,"column":0},"generated":{"line":475,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":475,"column":0},"generated":{"line":476,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":476,"column":0},"generated":{"line":477,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":477,"column":0},"generated":{"line":478,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":478,"column":0},"generated":{"line":479,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":479,"column":0},"generated":{"line":480,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":480,"column":0},"generated":{"line":481,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":481,"column":0},"generated":{"line":482,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":482,"column":0},"generated":{"line":483,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":483,"column":0},"generated":{"line":484,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":484,"column":0},"generated":{"line":485,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":485,"column":0},"generated":{"line":486,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":486,"column":0},"generated":{"line":487,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":487,"column":0},"generated":{"line":488,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":488,"column":0},"generated":{"line":489,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":489,"column":0},"generated":{"line":490,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":490,"column":0},"generated":{"line":491,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":491,"column":0},"generated":{"line":492,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":492,"column":0},"generated":{"line":493,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":493,"column":0},"generated":{"line":494,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":494,"column":0},"generated":{"line":495,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":495,"column":0},"generated":{"line":496,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":496,"column":0},"generated":{"line":497,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":497,"column":0},"generated":{"line":498,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":498,"column":0},"generated":{"line":499,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":499,"column":0},"generated":{"line":500,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":500,"column":0},"generated":{"line":501,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":501,"column":0},"generated":{"line":502,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":502,"column":0},"generated":{"line":503,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":503,"column":0},"generated":{"line":504,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":504,"column":0},"generated":{"line":505,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":505,"column":0},"generated":{"line":506,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":506,"column":0},"generated":{"line":507,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":507,"column":0},"generated":{"line":508,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":508,"column":0},"generated":{"line":509,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":509,"column":0},"generated":{"line":510,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":510,"column":0},"generated":{"line":511,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":511,"column":0},"generated":{"line":512,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":512,"column":0},"generated":{"line":513,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":513,"column":0},"generated":{"line":514,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":514,"column":0},"generated":{"line":515,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":515,"column":0},"generated":{"line":516,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":516,"column":0},"generated":{"line":517,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":517,"column":0},"generated":{"line":518,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":518,"column":0},"generated":{"line":519,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":519,"column":0},"generated":{"line":520,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":520,"column":0},"generated":{"line":521,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":521,"column":0},"generated":{"line":522,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":522,"column":0},"generated":{"line":523,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":523,"column":0},"generated":{"line":524,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":524,"column":0},"generated":{"line":525,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":525,"column":0},"generated":{"line":526,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":526,"column":0},"generated":{"line":527,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":527,"column":0},"generated":{"line":528,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":528,"column":0},"generated":{"line":529,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":529,"column":0},"generated":{"line":530,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":530,"column":0},"generated":{"line":531,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":531,"column":0},"generated":{"line":532,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":532,"column":0},"generated":{"line":533,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":533,"column":0},"generated":{"line":534,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":534,"column":0},"generated":{"line":535,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":535,"column":0},"generated":{"line":536,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":536,"column":0},"generated":{"line":537,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":537,"column":0},"generated":{"line":538,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":538,"column":0},"generated":{"line":539,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":539,"column":0},"generated":{"line":540,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":540,"column":0},"generated":{"line":541,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":541,"column":0},"generated":{"line":542,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":542,"column":0},"generated":{"line":543,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":543,"column":0},"generated":{"line":544,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":544,"column":0},"generated":{"line":545,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":545,"column":0},"generated":{"line":546,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":546,"column":0},"generated":{"line":547,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":547,"column":0},"generated":{"line":548,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":548,"column":0},"generated":{"line":549,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":549,"column":0},"generated":{"line":550,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":550,"column":0},"generated":{"line":551,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":551,"column":0},"generated":{"line":552,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":552,"column":0},"generated":{"line":553,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":553,"column":0},"generated":{"line":554,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":554,"column":0},"generated":{"line":555,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":555,"column":0},"generated":{"line":556,"column":0}},{"source":"../node_modules/iconv-lite/encodings/dbcs-codec.js","original":{"line":556,"column":0},"generated":{"line":557,"column":0}}],"sources":{"../node_modules/iconv-lite/encodings/dbcs-codec.js":"\"use strict\";\nvar Buffer = require(\"buffer\").Buffer;\n\n// Multibyte codec. In this scheme, a character is represented by 1 or more bytes.\n// Our codec supports UTF-16 surrogates, extensions for GB18030 and unicode sequences.\n// To save memory and loading time, we read table files only when requested.\n\nexports._dbcs = DBCSCodec;\n\nvar UNASSIGNED = -1,\n    GB18030_CODE = -2,\n    SEQ_START  = -10,\n    NODE_START = -1000,\n    UNASSIGNED_NODE = new Array(0x100),\n    DEF_CHAR = -1;\n\nfor (var i = 0; i < 0x100; i++)\n    UNASSIGNED_NODE[i] = UNASSIGNED;\n\n\n// Class DBCSCodec reads and initializes mapping tables.\nfunction DBCSCodec(codecOptions, iconv) {\n    this.encodingName = codecOptions.encodingName;\n    if (!codecOptions)\n        throw new Error(\"DBCS codec is called without the data.\")\n    if (!codecOptions.table)\n        throw new Error(\"Encoding '\" + this.encodingName + \"' has no data.\");\n\n    // Load tables.\n    var mappingTable = codecOptions.table();\n\n\n    // Decode tables: MBCS -> Unicode.\n\n    // decodeTables is a trie, encoded as an array of arrays of integers. Internal arrays are trie nodes and all have len = 256.\n    // Trie root is decodeTables[0].\n    // Values: >=  0 -> unicode character code. can be > 0xFFFF\n    //         == UNASSIGNED -> unknown/unassigned sequence.\n    //         == GB18030_CODE -> this is the end of a GB18030 4-byte sequence.\n    //         <= NODE_START -> index of the next node in our trie to process next byte.\n    //         <= SEQ_START  -> index of the start of a character code sequence, in decodeTableSeq.\n    this.decodeTables = [];\n    this.decodeTables[0] = UNASSIGNED_NODE.slice(0); // Create root node.\n\n    // Sometimes a MBCS char corresponds to a sequence of unicode chars. We store them as arrays of integers here. \n    this.decodeTableSeq = [];\n\n    // Actual mapping tables consist of chunks. Use them to fill up decode tables.\n    for (var i = 0; i < mappingTable.length; i++)\n        this._addDecodeChunk(mappingTable[i]);\n\n    this.defaultCharUnicode = iconv.defaultCharUnicode;\n\n    \n    // Encode tables: Unicode -> DBCS.\n\n    // `encodeTable` is array mapping from unicode char to encoded char. All its values are integers for performance.\n    // Because it can be sparse, it is represented as array of buckets by 256 chars each. Bucket can be null.\n    // Values: >=  0 -> it is a normal char. Write the value (if <=256 then 1 byte, if <=65536 then 2 bytes, etc.).\n    //         == UNASSIGNED -> no conversion found. Output a default char.\n    //         <= SEQ_START  -> it's an index in encodeTableSeq, see below. The character starts a sequence.\n    this.encodeTable = [];\n    \n    // `encodeTableSeq` is used when a sequence of unicode characters is encoded as a single code. We use a tree of\n    // objects where keys correspond to characters in sequence and leafs are the encoded dbcs values. A special DEF_CHAR key\n    // means end of sequence (needed when one sequence is a strict subsequence of another).\n    // Objects are kept separately from encodeTable to increase performance.\n    this.encodeTableSeq = [];\n\n    // Some chars can be decoded, but need not be encoded.\n    var skipEncodeChars = {};\n    if (codecOptions.encodeSkipVals)\n        for (var i = 0; i < codecOptions.encodeSkipVals.length; i++) {\n            var val = codecOptions.encodeSkipVals[i];\n            if (typeof val === 'number')\n                skipEncodeChars[val] = true;\n            else\n                for (var j = val.from; j <= val.to; j++)\n                    skipEncodeChars[j] = true;\n        }\n        \n    // Use decode trie to recursively fill out encode tables.\n    this._fillEncodeTable(0, 0, skipEncodeChars);\n\n    // Add more encoding pairs when needed.\n    if (codecOptions.encodeAdd) {\n        for (var uChar in codecOptions.encodeAdd)\n            if (Object.prototype.hasOwnProperty.call(codecOptions.encodeAdd, uChar))\n                this._setEncodeChar(uChar.charCodeAt(0), codecOptions.encodeAdd[uChar]);\n    }\n\n    this.defCharSB  = this.encodeTable[0][iconv.defaultCharSingleByte.charCodeAt(0)];\n    if (this.defCharSB === UNASSIGNED) this.defCharSB = this.encodeTable[0]['?'];\n    if (this.defCharSB === UNASSIGNED) this.defCharSB = \"?\".charCodeAt(0);\n\n\n    // Load & create GB18030 tables when needed.\n    if (typeof codecOptions.gb18030 === 'function') {\n        this.gb18030 = codecOptions.gb18030(); // Load GB18030 ranges.\n\n        // Add GB18030 decode tables.\n        var thirdByteNodeIdx = this.decodeTables.length;\n        var thirdByteNode = this.decodeTables[thirdByteNodeIdx] = UNASSIGNED_NODE.slice(0);\n\n        var fourthByteNodeIdx = this.decodeTables.length;\n        var fourthByteNode = this.decodeTables[fourthByteNodeIdx] = UNASSIGNED_NODE.slice(0);\n\n        for (var i = 0x81; i <= 0xFE; i++) {\n            var secondByteNodeIdx = NODE_START - this.decodeTables[0][i];\n            var secondByteNode = this.decodeTables[secondByteNodeIdx];\n            for (var j = 0x30; j <= 0x39; j++)\n                secondByteNode[j] = NODE_START - thirdByteNodeIdx;\n        }\n        for (var i = 0x81; i <= 0xFE; i++)\n            thirdByteNode[i] = NODE_START - fourthByteNodeIdx;\n        for (var i = 0x30; i <= 0x39; i++)\n            fourthByteNode[i] = GB18030_CODE\n    }        \n}\n\nDBCSCodec.prototype.encoder = DBCSEncoder;\nDBCSCodec.prototype.decoder = DBCSDecoder;\n\n// Decoder helpers\nDBCSCodec.prototype._getDecodeTrieNode = function(addr) {\n    var bytes = [];\n    for (; addr > 0; addr >>= 8)\n        bytes.push(addr & 0xFF);\n    if (bytes.length == 0)\n        bytes.push(0);\n\n    var node = this.decodeTables[0];\n    for (var i = bytes.length-1; i > 0; i--) { // Traverse nodes deeper into the trie.\n        var val = node[bytes[i]];\n\n        if (val == UNASSIGNED) { // Create new node.\n            node[bytes[i]] = NODE_START - this.decodeTables.length;\n            this.decodeTables.push(node = UNASSIGNED_NODE.slice(0));\n        }\n        else if (val <= NODE_START) { // Existing node.\n            node = this.decodeTables[NODE_START - val];\n        }\n        else\n            throw new Error(\"Overwrite byte in \" + this.encodingName + \", addr: \" + addr.toString(16));\n    }\n    return node;\n}\n\n\nDBCSCodec.prototype._addDecodeChunk = function(chunk) {\n    // First element of chunk is the hex mbcs code where we start.\n    var curAddr = parseInt(chunk[0], 16);\n\n    // Choose the decoding node where we'll write our chars.\n    var writeTable = this._getDecodeTrieNode(curAddr);\n    curAddr = curAddr & 0xFF;\n\n    // Write all other elements of the chunk to the table.\n    for (var k = 1; k < chunk.length; k++) {\n        var part = chunk[k];\n        if (typeof part === \"string\") { // String, write as-is.\n            for (var l = 0; l < part.length;) {\n                var code = part.charCodeAt(l++);\n                if (0xD800 <= code && code < 0xDC00) { // Decode surrogate\n                    var codeTrail = part.charCodeAt(l++);\n                    if (0xDC00 <= codeTrail && codeTrail < 0xE000)\n                        writeTable[curAddr++] = 0x10000 + (code - 0xD800) * 0x400 + (codeTrail - 0xDC00);\n                    else\n                        throw new Error(\"Incorrect surrogate pair in \"  + this.encodingName + \" at chunk \" + chunk[0]);\n                }\n                else if (0x0FF0 < code && code <= 0x0FFF) { // Character sequence (our own encoding used)\n                    var len = 0xFFF - code + 2;\n                    var seq = [];\n                    for (var m = 0; m < len; m++)\n                        seq.push(part.charCodeAt(l++)); // Simple variation: don't support surrogates or subsequences in seq.\n\n                    writeTable[curAddr++] = SEQ_START - this.decodeTableSeq.length;\n                    this.decodeTableSeq.push(seq);\n                }\n                else\n                    writeTable[curAddr++] = code; // Basic char\n            }\n        } \n        else if (typeof part === \"number\") { // Integer, meaning increasing sequence starting with prev character.\n            var charCode = writeTable[curAddr - 1] + 1;\n            for (var l = 0; l < part; l++)\n                writeTable[curAddr++] = charCode++;\n        }\n        else\n            throw new Error(\"Incorrect type '\" + typeof part + \"' given in \"  + this.encodingName + \" at chunk \" + chunk[0]);\n    }\n    if (curAddr > 0xFF)\n        throw new Error(\"Incorrect chunk in \"  + this.encodingName + \" at addr \" + chunk[0] + \": too long\" + curAddr);\n}\n\n// Encoder helpers\nDBCSCodec.prototype._getEncodeBucket = function(uCode) {\n    var high = uCode >> 8; // This could be > 0xFF because of astral characters.\n    if (this.encodeTable[high] === undefined)\n        this.encodeTable[high] = UNASSIGNED_NODE.slice(0); // Create bucket on demand.\n    return this.encodeTable[high];\n}\n\nDBCSCodec.prototype._setEncodeChar = function(uCode, dbcsCode) {\n    var bucket = this._getEncodeBucket(uCode);\n    var low = uCode & 0xFF;\n    if (bucket[low] <= SEQ_START)\n        this.encodeTableSeq[SEQ_START-bucket[low]][DEF_CHAR] = dbcsCode; // There's already a sequence, set a single-char subsequence of it.\n    else if (bucket[low] == UNASSIGNED)\n        bucket[low] = dbcsCode;\n}\n\nDBCSCodec.prototype._setEncodeSequence = function(seq, dbcsCode) {\n    \n    // Get the root of character tree according to first character of the sequence.\n    var uCode = seq[0];\n    var bucket = this._getEncodeBucket(uCode);\n    var low = uCode & 0xFF;\n\n    var node;\n    if (bucket[low] <= SEQ_START) {\n        // There's already a sequence with  - use it.\n        node = this.encodeTableSeq[SEQ_START-bucket[low]];\n    }\n    else {\n        // There was no sequence object - allocate a new one.\n        node = {};\n        if (bucket[low] !== UNASSIGNED) node[DEF_CHAR] = bucket[low]; // If a char was set before - make it a single-char subsequence.\n        bucket[low] = SEQ_START - this.encodeTableSeq.length;\n        this.encodeTableSeq.push(node);\n    }\n\n    // Traverse the character tree, allocating new nodes as needed.\n    for (var j = 1; j < seq.length-1; j++) {\n        var oldVal = node[uCode];\n        if (typeof oldVal === 'object')\n            node = oldVal;\n        else {\n            node = node[uCode] = {}\n            if (oldVal !== undefined)\n                node[DEF_CHAR] = oldVal\n        }\n    }\n\n    // Set the leaf to given dbcsCode.\n    uCode = seq[seq.length-1];\n    node[uCode] = dbcsCode;\n}\n\nDBCSCodec.prototype._fillEncodeTable = function(nodeIdx, prefix, skipEncodeChars) {\n    var node = this.decodeTables[nodeIdx];\n    for (var i = 0; i < 0x100; i++) {\n        var uCode = node[i];\n        var mbCode = prefix + i;\n        if (skipEncodeChars[mbCode])\n            continue;\n\n        if (uCode >= 0)\n            this._setEncodeChar(uCode, mbCode);\n        else if (uCode <= NODE_START)\n            this._fillEncodeTable(NODE_START - uCode, mbCode << 8, skipEncodeChars);\n        else if (uCode <= SEQ_START)\n            this._setEncodeSequence(this.decodeTableSeq[SEQ_START - uCode], mbCode);\n    }\n}\n\n\n\n// == Encoder ==================================================================\n\nfunction DBCSEncoder(options, codec) {\n    // Encoder state\n    this.leadSurrogate = -1;\n    this.seqObj = undefined;\n    \n    // Static data\n    this.encodeTable = codec.encodeTable;\n    this.encodeTableSeq = codec.encodeTableSeq;\n    this.defaultCharSingleByte = codec.defCharSB;\n    this.gb18030 = codec.gb18030;\n}\n\nDBCSEncoder.prototype.write = function(str) {\n    var newBuf = new Buffer(str.length * (this.gb18030 ? 4 : 3)), \n        leadSurrogate = this.leadSurrogate,\n        seqObj = this.seqObj, nextChar = -1,\n        i = 0, j = 0;\n\n    while (true) {\n        // 0. Get next character.\n        if (nextChar === -1) {\n            if (i == str.length) break;\n            var uCode = str.charCodeAt(i++);\n        }\n        else {\n            var uCode = nextChar;\n            nextChar = -1;    \n        }\n\n        // 1. Handle surrogates.\n        if (0xD800 <= uCode && uCode < 0xE000) { // Char is one of surrogates.\n            if (uCode < 0xDC00) { // We've got lead surrogate.\n                if (leadSurrogate === -1) {\n                    leadSurrogate = uCode;\n                    continue;\n                } else {\n                    leadSurrogate = uCode;\n                    // Double lead surrogate found.\n                    uCode = UNASSIGNED;\n                }\n            } else { // We've got trail surrogate.\n                if (leadSurrogate !== -1) {\n                    uCode = 0x10000 + (leadSurrogate - 0xD800) * 0x400 + (uCode - 0xDC00);\n                    leadSurrogate = -1;\n                } else {\n                    // Incomplete surrogate pair - only trail surrogate found.\n                    uCode = UNASSIGNED;\n                }\n                \n            }\n        }\n        else if (leadSurrogate !== -1) {\n            // Incomplete surrogate pair - only lead surrogate found.\n            nextChar = uCode; uCode = UNASSIGNED; // Write an error, then current char.\n            leadSurrogate = -1;\n        }\n\n        // 2. Convert uCode character.\n        var dbcsCode = UNASSIGNED;\n        if (seqObj !== undefined && uCode != UNASSIGNED) { // We are in the middle of the sequence\n            var resCode = seqObj[uCode];\n            if (typeof resCode === 'object') { // Sequence continues.\n                seqObj = resCode;\n                continue;\n\n            } else if (typeof resCode == 'number') { // Sequence finished. Write it.\n                dbcsCode = resCode;\n\n            } else if (resCode == undefined) { // Current character is not part of the sequence.\n\n                // Try default character for this sequence\n                resCode = seqObj[DEF_CHAR];\n                if (resCode !== undefined) {\n                    dbcsCode = resCode; // Found. Write it.\n                    nextChar = uCode; // Current character will be written too in the next iteration.\n\n                } else {\n                    // TODO: What if we have no default? (resCode == undefined)\n                    // Then, we should write first char of the sequence as-is and try the rest recursively.\n                    // Didn't do it for now because no encoding has this situation yet.\n                    // Currently, just skip the sequence and write current char.\n                }\n            }\n            seqObj = undefined;\n        }\n        else if (uCode >= 0) {  // Regular character\n            var subtable = this.encodeTable[uCode >> 8];\n            if (subtable !== undefined)\n                dbcsCode = subtable[uCode & 0xFF];\n            \n            if (dbcsCode <= SEQ_START) { // Sequence start\n                seqObj = this.encodeTableSeq[SEQ_START-dbcsCode];\n                continue;\n            }\n\n            if (dbcsCode == UNASSIGNED && this.gb18030) {\n                // Use GB18030 algorithm to find character(s) to write.\n                var idx = findIdx(this.gb18030.uChars, uCode);\n                if (idx != -1) {\n                    var dbcsCode = this.gb18030.gbChars[idx] + (uCode - this.gb18030.uChars[idx]);\n                    newBuf[j++] = 0x81 + Math.floor(dbcsCode / 12600); dbcsCode = dbcsCode % 12600;\n                    newBuf[j++] = 0x30 + Math.floor(dbcsCode / 1260); dbcsCode = dbcsCode % 1260;\n                    newBuf[j++] = 0x81 + Math.floor(dbcsCode / 10); dbcsCode = dbcsCode % 10;\n                    newBuf[j++] = 0x30 + dbcsCode;\n                    continue;\n                }\n            }\n        }\n\n        // 3. Write dbcsCode character.\n        if (dbcsCode === UNASSIGNED)\n            dbcsCode = this.defaultCharSingleByte;\n        \n        if (dbcsCode < 0x100) {\n            newBuf[j++] = dbcsCode;\n        }\n        else if (dbcsCode < 0x10000) {\n            newBuf[j++] = dbcsCode >> 8;   // high byte\n            newBuf[j++] = dbcsCode & 0xFF; // low byte\n        }\n        else {\n            newBuf[j++] = dbcsCode >> 16;\n            newBuf[j++] = (dbcsCode >> 8) & 0xFF;\n            newBuf[j++] = dbcsCode & 0xFF;\n        }\n    }\n\n    this.seqObj = seqObj;\n    this.leadSurrogate = leadSurrogate;\n    return newBuf.slice(0, j);\n}\n\nDBCSEncoder.prototype.end = function() {\n    if (this.leadSurrogate === -1 && this.seqObj === undefined)\n        return; // All clean. Most often case.\n\n    var newBuf = new Buffer(10), j = 0;\n\n    if (this.seqObj) { // We're in the sequence.\n        var dbcsCode = this.seqObj[DEF_CHAR];\n        if (dbcsCode !== undefined) { // Write beginning of the sequence.\n            if (dbcsCode < 0x100) {\n                newBuf[j++] = dbcsCode;\n            }\n            else {\n                newBuf[j++] = dbcsCode >> 8;   // high byte\n                newBuf[j++] = dbcsCode & 0xFF; // low byte\n            }\n        } else {\n            // See todo above.\n        }\n        this.seqObj = undefined;\n    }\n\n    if (this.leadSurrogate !== -1) {\n        // Incomplete surrogate pair - only lead surrogate found.\n        newBuf[j++] = this.defaultCharSingleByte;\n        this.leadSurrogate = -1;\n    }\n    \n    return newBuf.slice(0, j);\n}\n\n// Export for testing\nDBCSEncoder.prototype.findIdx = findIdx;\n\n\n// == Decoder ==================================================================\n\nfunction DBCSDecoder(options, codec) {\n    // Decoder state\n    this.nodeIdx = 0;\n    this.prevBuf = new Buffer(0);\n\n    // Static data\n    this.decodeTables = codec.decodeTables;\n    this.decodeTableSeq = codec.decodeTableSeq;\n    this.defaultCharUnicode = codec.defaultCharUnicode;\n    this.gb18030 = codec.gb18030;\n}\n\nDBCSDecoder.prototype.write = function(buf) {\n    var newBuf = new Buffer(buf.length*2),\n        nodeIdx = this.nodeIdx, \n        prevBuf = this.prevBuf, prevBufOffset = this.prevBuf.length,\n        seqStart = -this.prevBuf.length, // idx of the start of current parsed sequence.\n        uCode;\n\n    if (prevBufOffset > 0) // Make prev buf overlap a little to make it easier to slice later.\n        prevBuf = Buffer.concat([prevBuf, buf.slice(0, 10)]);\n    \n    for (var i = 0, j = 0; i < buf.length; i++) {\n        var curByte = (i >= 0) ? buf[i] : prevBuf[i + prevBufOffset];\n\n        // Lookup in current trie node.\n        var uCode = this.decodeTables[nodeIdx][curByte];\n\n        if (uCode >= 0) { \n            // Normal character, just use it.\n        }\n        else if (uCode === UNASSIGNED) { // Unknown char.\n            // TODO: Callback with seq.\n            //var curSeq = (seqStart >= 0) ? buf.slice(seqStart, i+1) : prevBuf.slice(seqStart + prevBufOffset, i+1 + prevBufOffset);\n            i = seqStart; // Try to parse again, after skipping first byte of the sequence ('i' will be incremented by 'for' cycle).\n            uCode = this.defaultCharUnicode.charCodeAt(0);\n        }\n        else if (uCode === GB18030_CODE) {\n            var curSeq = (seqStart >= 0) ? buf.slice(seqStart, i+1) : prevBuf.slice(seqStart + prevBufOffset, i+1 + prevBufOffset);\n            var ptr = (curSeq[0]-0x81)*12600 + (curSeq[1]-0x30)*1260 + (curSeq[2]-0x81)*10 + (curSeq[3]-0x30);\n            var idx = findIdx(this.gb18030.gbChars, ptr);\n            uCode = this.gb18030.uChars[idx] + ptr - this.gb18030.gbChars[idx];\n        }\n        else if (uCode <= NODE_START) { // Go to next trie node.\n            nodeIdx = NODE_START - uCode;\n            continue;\n        }\n        else if (uCode <= SEQ_START) { // Output a sequence of chars.\n            var seq = this.decodeTableSeq[SEQ_START - uCode];\n            for (var k = 0; k < seq.length - 1; k++) {\n                uCode = seq[k];\n                newBuf[j++] = uCode & 0xFF;\n                newBuf[j++] = uCode >> 8;\n            }\n            uCode = seq[seq.length-1];\n        }\n        else\n            throw new Error(\"iconv-lite internal error: invalid decoding table value \" + uCode + \" at \" + nodeIdx + \"/\" + curByte);\n\n        // Write the character to buffer, handling higher planes using surrogate pair.\n        if (uCode > 0xFFFF) { \n            uCode -= 0x10000;\n            var uCodeLead = 0xD800 + Math.floor(uCode / 0x400);\n            newBuf[j++] = uCodeLead & 0xFF;\n            newBuf[j++] = uCodeLead >> 8;\n\n            uCode = 0xDC00 + uCode % 0x400;\n        }\n        newBuf[j++] = uCode & 0xFF;\n        newBuf[j++] = uCode >> 8;\n\n        // Reset trie node.\n        nodeIdx = 0; seqStart = i+1;\n    }\n\n    this.nodeIdx = nodeIdx;\n    this.prevBuf = (seqStart >= 0) ? buf.slice(seqStart) : prevBuf.slice(seqStart + prevBufOffset);\n    return newBuf.slice(0, j).toString('ucs2');\n}\n\nDBCSDecoder.prototype.end = function() {\n    var ret = '';\n\n    // Try to parse all remaining chars.\n    while (this.prevBuf.length > 0) {\n        // Skip 1 character in the buffer.\n        ret += this.defaultCharUnicode;\n        var buf = this.prevBuf.slice(1);\n\n        // Parse remaining as usual.\n        this.prevBuf = new Buffer(0);\n        this.nodeIdx = 0;\n        if (buf.length > 0)\n            ret += this.write(buf);\n    }\n\n    this.nodeIdx = 0;\n    return ret;\n}\n\n// Binary search for GB18030. Returns largest i such that table[i] <= val.\nfunction findIdx(table, val) {\n    if (table[0] > val)\n        return -1;\n\n    var l = 0, r = table.length;\n    while (l < r-1) { // always table[l] <= val < table[r]\n        var mid = l + Math.floor((r-l+1)/2);\n        if (table[mid] <= val)\n            l = mid;\n        else\n            r = mid;\n    }\n    return l;\n}\n\n"},"lineCount":557}},"hash":"e5e40a9c52c35c6f7b95355e46946b57","cacheData":{"env":{}}}