{"dependencies":[{"name":"buffer","loc":{"line":2,"column":21}}],"generated":{"js":"\n\"use strict\";\nvar Buffer = require(\"buffer\").Buffer;\n\n// UTF-7 codec, according to https://tools.ietf.org/html/rfc2152\n// See also below a UTF-7-IMAP codec, according to http://tools.ietf.org/html/rfc3501#section-5.1.3\n\nexports.utf7 = Utf7Codec;\nexports.unicode11utf7 = 'utf7'; // Alias UNICODE-1-1-UTF-7\nfunction Utf7Codec(codecOptions, iconv) {\n    this.iconv = iconv;\n};\n\nUtf7Codec.prototype.encoder = Utf7Encoder;\nUtf7Codec.prototype.decoder = Utf7Decoder;\nUtf7Codec.prototype.bomAware = true;\n\n\n// -- Encoding\n\nvar nonDirectChars = /[^A-Za-z0-9'\\(\\),-\\.\\/:\\? \\n\\r\\t]+/g;\n\nfunction Utf7Encoder(options, codec) {\n    this.iconv = codec.iconv;\n}\n\nUtf7Encoder.prototype.write = function(str) {\n    // Naive implementation.\n    // Non-direct chars are encoded as \"+<base64>-\"; single \"+\" char is encoded as \"+-\".\n    return new Buffer(str.replace(nonDirectChars, function(chunk) {\n        return \"+\" + (chunk === '+' ? '' : \n            this.iconv.encode(chunk, 'utf16-be').toString('base64').replace(/=+$/, '')) \n            + \"-\";\n    }.bind(this)));\n}\n\nUtf7Encoder.prototype.end = function() {\n}\n\n\n// -- Decoding\n\nfunction Utf7Decoder(options, codec) {\n    this.iconv = codec.iconv;\n    this.inBase64 = false;\n    this.base64Accum = '';\n}\n\nvar base64Regex = /[A-Za-z0-9\\/+]/;\nvar base64Chars = [];\nfor (var i = 0; i < 256; i++)\n    base64Chars[i] = base64Regex.test(String.fromCharCode(i));\n\nvar plusChar = '+'.charCodeAt(0), \n    minusChar = '-'.charCodeAt(0),\n    andChar = '&'.charCodeAt(0);\n\nUtf7Decoder.prototype.write = function(buf) {\n    var res = \"\", lastI = 0,\n        inBase64 = this.inBase64,\n        base64Accum = this.base64Accum;\n\n    // The decoder is more involved as we must handle chunks in stream.\n\n    for (var i = 0; i < buf.length; i++) {\n        if (!inBase64) { // We're in direct mode.\n            // Write direct chars until '+'\n            if (buf[i] == plusChar) {\n                res += this.iconv.decode(buf.slice(lastI, i), \"ascii\"); // Write direct chars.\n                lastI = i+1;\n                inBase64 = true;\n            }\n        } else { // We decode base64.\n            if (!base64Chars[buf[i]]) { // Base64 ended.\n                if (i == lastI && buf[i] == minusChar) {// \"+-\" -> \"+\"\n                    res += \"+\";\n                } else {\n                    var b64str = base64Accum + buf.slice(lastI, i).toString();\n                    res += this.iconv.decode(new Buffer(b64str, 'base64'), \"utf16-be\");\n                }\n\n                if (buf[i] != minusChar) // Minus is absorbed after base64.\n                    i--;\n\n                lastI = i+1;\n                inBase64 = false;\n                base64Accum = '';\n            }\n        }\n    }\n\n    if (!inBase64) {\n        res += this.iconv.decode(buf.slice(lastI), \"ascii\"); // Write direct chars.\n    } else {\n        var b64str = base64Accum + buf.slice(lastI).toString();\n\n        var canBeDecoded = b64str.length - (b64str.length % 8); // Minimal chunk: 2 quads -> 2x3 bytes -> 3 chars.\n        base64Accum = b64str.slice(canBeDecoded); // The rest will be decoded in future.\n        b64str = b64str.slice(0, canBeDecoded);\n\n        res += this.iconv.decode(new Buffer(b64str, 'base64'), \"utf16-be\");\n    }\n\n    this.inBase64 = inBase64;\n    this.base64Accum = base64Accum;\n\n    return res;\n}\n\nUtf7Decoder.prototype.end = function() {\n    var res = \"\";\n    if (this.inBase64 && this.base64Accum.length > 0)\n        res = this.iconv.decode(new Buffer(this.base64Accum, 'base64'), \"utf16-be\");\n\n    this.inBase64 = false;\n    this.base64Accum = '';\n    return res;\n}\n\n\n// UTF-7-IMAP codec.\n// RFC3501 Sec. 5.1.3 Modified UTF-7 (http://tools.ietf.org/html/rfc3501#section-5.1.3)\n// Differences:\n//  * Base64 part is started by \"&\" instead of \"+\"\n//  * Direct characters are 0x20-0x7E, except \"&\" (0x26)\n//  * In Base64, \",\" is used instead of \"/\"\n//  * Base64 must not be used to represent direct characters.\n//  * No implicit shift back from Base64 (should always end with '-')\n//  * String must end in non-shifted position.\n//  * \"-&\" while in base64 is not allowed.\n\n\nexports.utf7imap = Utf7IMAPCodec;\nfunction Utf7IMAPCodec(codecOptions, iconv) {\n    this.iconv = iconv;\n};\n\nUtf7IMAPCodec.prototype.encoder = Utf7IMAPEncoder;\nUtf7IMAPCodec.prototype.decoder = Utf7IMAPDecoder;\nUtf7IMAPCodec.prototype.bomAware = true;\n\n\n// -- Encoding\n\nfunction Utf7IMAPEncoder(options, codec) {\n    this.iconv = codec.iconv;\n    this.inBase64 = false;\n    this.base64Accum = new Buffer(6);\n    this.base64AccumIdx = 0;\n}\n\nUtf7IMAPEncoder.prototype.write = function(str) {\n    var inBase64 = this.inBase64,\n        base64Accum = this.base64Accum,\n        base64AccumIdx = this.base64AccumIdx,\n        buf = new Buffer(str.length*5 + 10), bufIdx = 0;\n\n    for (var i = 0; i < str.length; i++) {\n        var uChar = str.charCodeAt(i);\n        if (0x20 <= uChar && uChar <= 0x7E) { // Direct character or '&'.\n            if (inBase64) {\n                if (base64AccumIdx > 0) {\n                    bufIdx += buf.write(base64Accum.slice(0, base64AccumIdx).toString('base64').replace(/\\//g, ',').replace(/=+$/, ''), bufIdx);\n                    base64AccumIdx = 0;\n                }\n\n                buf[bufIdx++] = minusChar; // Write '-', then go to direct mode.\n                inBase64 = false;\n            }\n\n            if (!inBase64) {\n                buf[bufIdx++] = uChar; // Write direct character\n\n                if (uChar === andChar)  // Ampersand -> '&-'\n                    buf[bufIdx++] = minusChar;\n            }\n\n        } else { // Non-direct character\n            if (!inBase64) {\n                buf[bufIdx++] = andChar; // Write '&', then go to base64 mode.\n                inBase64 = true;\n            }\n            if (inBase64) {\n                base64Accum[base64AccumIdx++] = uChar >> 8;\n                base64Accum[base64AccumIdx++] = uChar & 0xFF;\n\n                if (base64AccumIdx == base64Accum.length) {\n                    bufIdx += buf.write(base64Accum.toString('base64').replace(/\\//g, ','), bufIdx);\n                    base64AccumIdx = 0;\n                }\n            }\n        }\n    }\n\n    this.inBase64 = inBase64;\n    this.base64AccumIdx = base64AccumIdx;\n\n    return buf.slice(0, bufIdx);\n}\n\nUtf7IMAPEncoder.prototype.end = function() {\n    var buf = new Buffer(10), bufIdx = 0;\n    if (this.inBase64) {\n        if (this.base64AccumIdx > 0) {\n            bufIdx += buf.write(this.base64Accum.slice(0, this.base64AccumIdx).toString('base64').replace(/\\//g, ',').replace(/=+$/, ''), bufIdx);\n            this.base64AccumIdx = 0;\n        }\n\n        buf[bufIdx++] = minusChar; // Write '-', then go to direct mode.\n        this.inBase64 = false;\n    }\n\n    return buf.slice(0, bufIdx);\n}\n\n\n// -- Decoding\n\nfunction Utf7IMAPDecoder(options, codec) {\n    this.iconv = codec.iconv;\n    this.inBase64 = false;\n    this.base64Accum = '';\n}\n\nvar base64IMAPChars = base64Chars.slice();\nbase64IMAPChars[','.charCodeAt(0)] = true;\n\nUtf7IMAPDecoder.prototype.write = function(buf) {\n    var res = \"\", lastI = 0,\n        inBase64 = this.inBase64,\n        base64Accum = this.base64Accum;\n\n    // The decoder is more involved as we must handle chunks in stream.\n    // It is forgiving, closer to standard UTF-7 (for example, '-' is optional at the end).\n\n    for (var i = 0; i < buf.length; i++) {\n        if (!inBase64) { // We're in direct mode.\n            // Write direct chars until '&'\n            if (buf[i] == andChar) {\n                res += this.iconv.decode(buf.slice(lastI, i), \"ascii\"); // Write direct chars.\n                lastI = i+1;\n                inBase64 = true;\n            }\n        } else { // We decode base64.\n            if (!base64IMAPChars[buf[i]]) { // Base64 ended.\n                if (i == lastI && buf[i] == minusChar) { // \"&-\" -> \"&\"\n                    res += \"&\";\n                } else {\n                    var b64str = base64Accum + buf.slice(lastI, i).toString().replace(/,/g, '/');\n                    res += this.iconv.decode(new Buffer(b64str, 'base64'), \"utf16-be\");\n                }\n\n                if (buf[i] != minusChar) // Minus may be absorbed after base64.\n                    i--;\n\n                lastI = i+1;\n                inBase64 = false;\n                base64Accum = '';\n            }\n        }\n    }\n\n    if (!inBase64) {\n        res += this.iconv.decode(buf.slice(lastI), \"ascii\"); // Write direct chars.\n    } else {\n        var b64str = base64Accum + buf.slice(lastI).toString().replace(/,/g, '/');\n\n        var canBeDecoded = b64str.length - (b64str.length % 8); // Minimal chunk: 2 quads -> 2x3 bytes -> 3 chars.\n        base64Accum = b64str.slice(canBeDecoded); // The rest will be decoded in future.\n        b64str = b64str.slice(0, canBeDecoded);\n\n        res += this.iconv.decode(new Buffer(b64str, 'base64'), \"utf16-be\");\n    }\n\n    this.inBase64 = inBase64;\n    this.base64Accum = base64Accum;\n\n    return res;\n}\n\nUtf7IMAPDecoder.prototype.end = function() {\n    var res = \"\";\n    if (this.inBase64 && this.base64Accum.length > 0)\n        res = this.iconv.decode(new Buffer(this.base64Accum, 'base64'), \"utf16-be\");\n\n    this.inBase64 = false;\n    this.base64Accum = '';\n    return res;\n}\n\n\n","map":{"mappings":[{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":68,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":69,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":70,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":71,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":72,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":73,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":74,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":75,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":76,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":77,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":78,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":79,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":80,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":81,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":82,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":83,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":84,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":85,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":86,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":87,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":88,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":89,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":90,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":91,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":92,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":93,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":94,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":95,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":96,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":97,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":98,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":99,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":100,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":101,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":102,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":103,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":104,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":105,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":106,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":107,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":108,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":109,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":110,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":111,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":112,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":113,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":114,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":115,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":116,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":117,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":118,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":119,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":120,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":121,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":122,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":123,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":124,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":125,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":126,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":127,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":128,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":129,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":130,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":131,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":132,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":133,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":134,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":135,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":136,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":137,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":138,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":139,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":140,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":141,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":142,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":143,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":144,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":145,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":146,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":147,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":148,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":149,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":150,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":151,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":152,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":153,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":154,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":155,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":156,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":157,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":158,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":159,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":160,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":161,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":162,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":163,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":164,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":165,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":166,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":167,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":168,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":169,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":170,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":171,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":172,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":173,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":174,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":175,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":176,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":177,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":178,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":179,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":180,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":181,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":182,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":183,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":184,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":185,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":186,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":187,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":188,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":189,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":190,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":191,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":192,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":193,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":194,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":195,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":196,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":197,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":198,"column":0},"generated":{"line":199,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":199,"column":0},"generated":{"line":200,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":200,"column":0},"generated":{"line":201,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":201,"column":0},"generated":{"line":202,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":202,"column":0},"generated":{"line":203,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":203,"column":0},"generated":{"line":204,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":204,"column":0},"generated":{"line":205,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":205,"column":0},"generated":{"line":206,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":206,"column":0},"generated":{"line":207,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":207,"column":0},"generated":{"line":208,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":208,"column":0},"generated":{"line":209,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":209,"column":0},"generated":{"line":210,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":210,"column":0},"generated":{"line":211,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":211,"column":0},"generated":{"line":212,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":212,"column":0},"generated":{"line":213,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":213,"column":0},"generated":{"line":214,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":214,"column":0},"generated":{"line":215,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":215,"column":0},"generated":{"line":216,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":216,"column":0},"generated":{"line":217,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":217,"column":0},"generated":{"line":218,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":218,"column":0},"generated":{"line":219,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":219,"column":0},"generated":{"line":220,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":220,"column":0},"generated":{"line":221,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":221,"column":0},"generated":{"line":222,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":222,"column":0},"generated":{"line":223,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":223,"column":0},"generated":{"line":224,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":224,"column":0},"generated":{"line":225,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":225,"column":0},"generated":{"line":226,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":226,"column":0},"generated":{"line":227,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":227,"column":0},"generated":{"line":228,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":228,"column":0},"generated":{"line":229,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":229,"column":0},"generated":{"line":230,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":230,"column":0},"generated":{"line":231,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":231,"column":0},"generated":{"line":232,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":232,"column":0},"generated":{"line":233,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":233,"column":0},"generated":{"line":234,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":234,"column":0},"generated":{"line":235,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":235,"column":0},"generated":{"line":236,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":236,"column":0},"generated":{"line":237,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":237,"column":0},"generated":{"line":238,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":238,"column":0},"generated":{"line":239,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":239,"column":0},"generated":{"line":240,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":240,"column":0},"generated":{"line":241,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":241,"column":0},"generated":{"line":242,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":242,"column":0},"generated":{"line":243,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":243,"column":0},"generated":{"line":244,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":244,"column":0},"generated":{"line":245,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":245,"column":0},"generated":{"line":246,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":246,"column":0},"generated":{"line":247,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":247,"column":0},"generated":{"line":248,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":248,"column":0},"generated":{"line":249,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":249,"column":0},"generated":{"line":250,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":250,"column":0},"generated":{"line":251,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":251,"column":0},"generated":{"line":252,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":252,"column":0},"generated":{"line":253,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":253,"column":0},"generated":{"line":254,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":254,"column":0},"generated":{"line":255,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":255,"column":0},"generated":{"line":256,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":256,"column":0},"generated":{"line":257,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":257,"column":0},"generated":{"line":258,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":258,"column":0},"generated":{"line":259,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":259,"column":0},"generated":{"line":260,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":260,"column":0},"generated":{"line":261,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":261,"column":0},"generated":{"line":262,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":262,"column":0},"generated":{"line":263,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":263,"column":0},"generated":{"line":264,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":264,"column":0},"generated":{"line":265,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":265,"column":0},"generated":{"line":266,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":266,"column":0},"generated":{"line":267,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":267,"column":0},"generated":{"line":268,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":268,"column":0},"generated":{"line":269,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":269,"column":0},"generated":{"line":270,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":270,"column":0},"generated":{"line":271,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":271,"column":0},"generated":{"line":272,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":272,"column":0},"generated":{"line":273,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":273,"column":0},"generated":{"line":274,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":274,"column":0},"generated":{"line":275,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":275,"column":0},"generated":{"line":276,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":276,"column":0},"generated":{"line":277,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":277,"column":0},"generated":{"line":278,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":278,"column":0},"generated":{"line":279,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":279,"column":0},"generated":{"line":280,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":280,"column":0},"generated":{"line":281,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":281,"column":0},"generated":{"line":282,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":282,"column":0},"generated":{"line":283,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":283,"column":0},"generated":{"line":284,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":284,"column":0},"generated":{"line":285,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":285,"column":0},"generated":{"line":286,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":286,"column":0},"generated":{"line":287,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":287,"column":0},"generated":{"line":288,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":288,"column":0},"generated":{"line":289,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":289,"column":0},"generated":{"line":290,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":290,"column":0},"generated":{"line":291,"column":0}},{"source":"../node_modules/iconv-lite/encodings/utf7.js","original":{"line":291,"column":0},"generated":{"line":292,"column":0}}],"sources":{"../node_modules/iconv-lite/encodings/utf7.js":"\"use strict\";\nvar Buffer = require(\"buffer\").Buffer;\n\n// UTF-7 codec, according to https://tools.ietf.org/html/rfc2152\n// See also below a UTF-7-IMAP codec, according to http://tools.ietf.org/html/rfc3501#section-5.1.3\n\nexports.utf7 = Utf7Codec;\nexports.unicode11utf7 = 'utf7'; // Alias UNICODE-1-1-UTF-7\nfunction Utf7Codec(codecOptions, iconv) {\n    this.iconv = iconv;\n};\n\nUtf7Codec.prototype.encoder = Utf7Encoder;\nUtf7Codec.prototype.decoder = Utf7Decoder;\nUtf7Codec.prototype.bomAware = true;\n\n\n// -- Encoding\n\nvar nonDirectChars = /[^A-Za-z0-9'\\(\\),-\\.\\/:\\? \\n\\r\\t]+/g;\n\nfunction Utf7Encoder(options, codec) {\n    this.iconv = codec.iconv;\n}\n\nUtf7Encoder.prototype.write = function(str) {\n    // Naive implementation.\n    // Non-direct chars are encoded as \"+<base64>-\"; single \"+\" char is encoded as \"+-\".\n    return new Buffer(str.replace(nonDirectChars, function(chunk) {\n        return \"+\" + (chunk === '+' ? '' : \n            this.iconv.encode(chunk, 'utf16-be').toString('base64').replace(/=+$/, '')) \n            + \"-\";\n    }.bind(this)));\n}\n\nUtf7Encoder.prototype.end = function() {\n}\n\n\n// -- Decoding\n\nfunction Utf7Decoder(options, codec) {\n    this.iconv = codec.iconv;\n    this.inBase64 = false;\n    this.base64Accum = '';\n}\n\nvar base64Regex = /[A-Za-z0-9\\/+]/;\nvar base64Chars = [];\nfor (var i = 0; i < 256; i++)\n    base64Chars[i] = base64Regex.test(String.fromCharCode(i));\n\nvar plusChar = '+'.charCodeAt(0), \n    minusChar = '-'.charCodeAt(0),\n    andChar = '&'.charCodeAt(0);\n\nUtf7Decoder.prototype.write = function(buf) {\n    var res = \"\", lastI = 0,\n        inBase64 = this.inBase64,\n        base64Accum = this.base64Accum;\n\n    // The decoder is more involved as we must handle chunks in stream.\n\n    for (var i = 0; i < buf.length; i++) {\n        if (!inBase64) { // We're in direct mode.\n            // Write direct chars until '+'\n            if (buf[i] == plusChar) {\n                res += this.iconv.decode(buf.slice(lastI, i), \"ascii\"); // Write direct chars.\n                lastI = i+1;\n                inBase64 = true;\n            }\n        } else { // We decode base64.\n            if (!base64Chars[buf[i]]) { // Base64 ended.\n                if (i == lastI && buf[i] == minusChar) {// \"+-\" -> \"+\"\n                    res += \"+\";\n                } else {\n                    var b64str = base64Accum + buf.slice(lastI, i).toString();\n                    res += this.iconv.decode(new Buffer(b64str, 'base64'), \"utf16-be\");\n                }\n\n                if (buf[i] != minusChar) // Minus is absorbed after base64.\n                    i--;\n\n                lastI = i+1;\n                inBase64 = false;\n                base64Accum = '';\n            }\n        }\n    }\n\n    if (!inBase64) {\n        res += this.iconv.decode(buf.slice(lastI), \"ascii\"); // Write direct chars.\n    } else {\n        var b64str = base64Accum + buf.slice(lastI).toString();\n\n        var canBeDecoded = b64str.length - (b64str.length % 8); // Minimal chunk: 2 quads -> 2x3 bytes -> 3 chars.\n        base64Accum = b64str.slice(canBeDecoded); // The rest will be decoded in future.\n        b64str = b64str.slice(0, canBeDecoded);\n\n        res += this.iconv.decode(new Buffer(b64str, 'base64'), \"utf16-be\");\n    }\n\n    this.inBase64 = inBase64;\n    this.base64Accum = base64Accum;\n\n    return res;\n}\n\nUtf7Decoder.prototype.end = function() {\n    var res = \"\";\n    if (this.inBase64 && this.base64Accum.length > 0)\n        res = this.iconv.decode(new Buffer(this.base64Accum, 'base64'), \"utf16-be\");\n\n    this.inBase64 = false;\n    this.base64Accum = '';\n    return res;\n}\n\n\n// UTF-7-IMAP codec.\n// RFC3501 Sec. 5.1.3 Modified UTF-7 (http://tools.ietf.org/html/rfc3501#section-5.1.3)\n// Differences:\n//  * Base64 part is started by \"&\" instead of \"+\"\n//  * Direct characters are 0x20-0x7E, except \"&\" (0x26)\n//  * In Base64, \",\" is used instead of \"/\"\n//  * Base64 must not be used to represent direct characters.\n//  * No implicit shift back from Base64 (should always end with '-')\n//  * String must end in non-shifted position.\n//  * \"-&\" while in base64 is not allowed.\n\n\nexports.utf7imap = Utf7IMAPCodec;\nfunction Utf7IMAPCodec(codecOptions, iconv) {\n    this.iconv = iconv;\n};\n\nUtf7IMAPCodec.prototype.encoder = Utf7IMAPEncoder;\nUtf7IMAPCodec.prototype.decoder = Utf7IMAPDecoder;\nUtf7IMAPCodec.prototype.bomAware = true;\n\n\n// -- Encoding\n\nfunction Utf7IMAPEncoder(options, codec) {\n    this.iconv = codec.iconv;\n    this.inBase64 = false;\n    this.base64Accum = new Buffer(6);\n    this.base64AccumIdx = 0;\n}\n\nUtf7IMAPEncoder.prototype.write = function(str) {\n    var inBase64 = this.inBase64,\n        base64Accum = this.base64Accum,\n        base64AccumIdx = this.base64AccumIdx,\n        buf = new Buffer(str.length*5 + 10), bufIdx = 0;\n\n    for (var i = 0; i < str.length; i++) {\n        var uChar = str.charCodeAt(i);\n        if (0x20 <= uChar && uChar <= 0x7E) { // Direct character or '&'.\n            if (inBase64) {\n                if (base64AccumIdx > 0) {\n                    bufIdx += buf.write(base64Accum.slice(0, base64AccumIdx).toString('base64').replace(/\\//g, ',').replace(/=+$/, ''), bufIdx);\n                    base64AccumIdx = 0;\n                }\n\n                buf[bufIdx++] = minusChar; // Write '-', then go to direct mode.\n                inBase64 = false;\n            }\n\n            if (!inBase64) {\n                buf[bufIdx++] = uChar; // Write direct character\n\n                if (uChar === andChar)  // Ampersand -> '&-'\n                    buf[bufIdx++] = minusChar;\n            }\n\n        } else { // Non-direct character\n            if (!inBase64) {\n                buf[bufIdx++] = andChar; // Write '&', then go to base64 mode.\n                inBase64 = true;\n            }\n            if (inBase64) {\n                base64Accum[base64AccumIdx++] = uChar >> 8;\n                base64Accum[base64AccumIdx++] = uChar & 0xFF;\n\n                if (base64AccumIdx == base64Accum.length) {\n                    bufIdx += buf.write(base64Accum.toString('base64').replace(/\\//g, ','), bufIdx);\n                    base64AccumIdx = 0;\n                }\n            }\n        }\n    }\n\n    this.inBase64 = inBase64;\n    this.base64AccumIdx = base64AccumIdx;\n\n    return buf.slice(0, bufIdx);\n}\n\nUtf7IMAPEncoder.prototype.end = function() {\n    var buf = new Buffer(10), bufIdx = 0;\n    if (this.inBase64) {\n        if (this.base64AccumIdx > 0) {\n            bufIdx += buf.write(this.base64Accum.slice(0, this.base64AccumIdx).toString('base64').replace(/\\//g, ',').replace(/=+$/, ''), bufIdx);\n            this.base64AccumIdx = 0;\n        }\n\n        buf[bufIdx++] = minusChar; // Write '-', then go to direct mode.\n        this.inBase64 = false;\n    }\n\n    return buf.slice(0, bufIdx);\n}\n\n\n// -- Decoding\n\nfunction Utf7IMAPDecoder(options, codec) {\n    this.iconv = codec.iconv;\n    this.inBase64 = false;\n    this.base64Accum = '';\n}\n\nvar base64IMAPChars = base64Chars.slice();\nbase64IMAPChars[','.charCodeAt(0)] = true;\n\nUtf7IMAPDecoder.prototype.write = function(buf) {\n    var res = \"\", lastI = 0,\n        inBase64 = this.inBase64,\n        base64Accum = this.base64Accum;\n\n    // The decoder is more involved as we must handle chunks in stream.\n    // It is forgiving, closer to standard UTF-7 (for example, '-' is optional at the end).\n\n    for (var i = 0; i < buf.length; i++) {\n        if (!inBase64) { // We're in direct mode.\n            // Write direct chars until '&'\n            if (buf[i] == andChar) {\n                res += this.iconv.decode(buf.slice(lastI, i), \"ascii\"); // Write direct chars.\n                lastI = i+1;\n                inBase64 = true;\n            }\n        } else { // We decode base64.\n            if (!base64IMAPChars[buf[i]]) { // Base64 ended.\n                if (i == lastI && buf[i] == minusChar) { // \"&-\" -> \"&\"\n                    res += \"&\";\n                } else {\n                    var b64str = base64Accum + buf.slice(lastI, i).toString().replace(/,/g, '/');\n                    res += this.iconv.decode(new Buffer(b64str, 'base64'), \"utf16-be\");\n                }\n\n                if (buf[i] != minusChar) // Minus may be absorbed after base64.\n                    i--;\n\n                lastI = i+1;\n                inBase64 = false;\n                base64Accum = '';\n            }\n        }\n    }\n\n    if (!inBase64) {\n        res += this.iconv.decode(buf.slice(lastI), \"ascii\"); // Write direct chars.\n    } else {\n        var b64str = base64Accum + buf.slice(lastI).toString().replace(/,/g, '/');\n\n        var canBeDecoded = b64str.length - (b64str.length % 8); // Minimal chunk: 2 quads -> 2x3 bytes -> 3 chars.\n        base64Accum = b64str.slice(canBeDecoded); // The rest will be decoded in future.\n        b64str = b64str.slice(0, canBeDecoded);\n\n        res += this.iconv.decode(new Buffer(b64str, 'base64'), \"utf16-be\");\n    }\n\n    this.inBase64 = inBase64;\n    this.base64Accum = base64Accum;\n\n    return res;\n}\n\nUtf7IMAPDecoder.prototype.end = function() {\n    var res = \"\";\n    if (this.inBase64 && this.base64Accum.length > 0)\n        res = this.iconv.decode(new Buffer(this.base64Accum, 'base64'), \"utf16-be\");\n\n    this.inBase64 = false;\n    this.base64Accum = '';\n    return res;\n}\n\n\n"},"lineCount":292}},"hash":"967247a18ba6181c4782e4de4a9b94a3","cacheData":{"env":{}}}